[
  {
    "objectID": "slides/39_tables.html",
    "href": "slides/39_tables.html",
    "title": "Tables",
    "section": "",
    "text": "First, load {tidyverse} and {papaja} and import the data.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(papaja)\n\nLoading required package: tinylabels\n\nhai &lt;- read_csv(\"https://decisionslab.unl.edu/data/thayer_stevens_2020_data1.csv\") |&gt;\n  select(experiment, participant, condition, gender,\n         panas_pre = panas_pre_pos, panas_post = panas_post_pos)\n\nRows: 157 Columns: 38\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): condition, gender, race, parent_income\ndbl  (33): experiment, participant, age_num, pas, pets_now, pets_child, dog_...\ndttm  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhai_long &lt;- hai |&gt;\n  pivot_longer(contains(\"panas\"), names_to = \"prepost\", values_to = \"panas\") |&gt;\n  mutate(condition = fct_recode(condition, \"Control\" = \"control\", \"HAI\" = \"hai\"),\n         prepost = fct_recode(prepost, \"Pre\" = \"panas_pre\", \"Post\" = \"panas_post\"),\n         prepost = fct_relevel(prepost, c(\"Pre\", \"Post\")))\n\nNow let’s build a data frame that will be our table.\n\n(condition_prepost_means &lt;- hai_long |&gt;\n  group_by(condition, prepost) |&gt;\n  summarise(across(starts_with(\"panas\"), ~ mean(.x, na.rm = TRUE))))\n\n`summarise()` has grouped output by 'condition'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 4 × 3\n# Groups:   condition [2]\n  condition prepost panas\n  &lt;fct&gt;     &lt;fct&gt;   &lt;dbl&gt;\n1 Control   Pre      2.99\n2 Control   Post     2.76\n3 HAI       Pre      2.97\n4 HAI       Post     3.23"
  },
  {
    "objectID": "slides/39_tables.html#column-and-row-names",
    "href": "slides/39_tables.html#column-and-row-names",
    "title": "Tables",
    "section": "Column and row names",
    "text": "Column and row names\nYou can control column names and row names with col.names and row.names.\n\nkable(condition_prepost_means, \n      col.names = c(\"Condition\", \"Prepost\", \"Mean PANAS\"))\n\n\n\n\nCondition\nPrepost\nMean PANAS\n\n\n\n\nControl\nPre\n2.989873\n\n\nControl\nPost\n2.760759\n\n\nHAI\nPre\n2.971795\n\n\nHAI\nPost\n3.232051"
  },
  {
    "objectID": "slides/39_tables.html#column-alignment",
    "href": "slides/39_tables.html#column-alignment",
    "title": "Tables",
    "section": "Column alignment",
    "text": "Column alignment\nBy default, character columns are left aligned and numeric columns are right aligned. You can set alignment manually with the align argument with l = left, c = center, and r = right. You can just pass a character string with a series of those letters.\n\nkable(condition_prepost_means,\n      col.names = c(\"Condition\", \"Prepost\", \"Mean PANAS\"), \n      align = \"rcl\")\n\n\n\n\nCondition\nPrepost\nMean PANAS\n\n\n\n\nControl\nPre\n2.989873\n\n\nControl\nPost\n2.760759\n\n\nHAI\nPre\n2.971795\n\n\nHAI\nPost\n3.232051"
  },
  {
    "objectID": "slides/39_tables.html#digit-rounding",
    "href": "slides/39_tables.html#digit-rounding",
    "title": "Tables",
    "section": "Digit rounding",
    "text": "Digit rounding\nRound the digits for all numeric data columns with digits argument.\n\nkable(condition_prepost_means,\n      col.names = c(\"Condition\", \"Prepost\", \"Mean PANAS\"), \n      digits = 2)\n\n\n\n\nCondition\nPrepost\nMean PANAS\n\n\n\n\nControl\nPre\n2.99\n\n\nControl\nPost\n2.76\n\n\nHAI\nPre\n2.97\n\n\nHAI\nPost\n3.23\n\n\n\n\n\nIf you want different digits for different columns, you can pass a vector to the digits argument.\n\ncondition_prepost_means |&gt; \n  pivot_wider(id_cols = condition, names_from = prepost, values_from = panas) |&gt; \n  kable(digits = c(0, 2, 3))\n\n\n\n\ncondition\nPre\nPost\n\n\n\n\nControl\n2.99\n2.761\n\n\nHAI\n2.97\n3.232"
  },
  {
    "objectID": "slides/39_tables.html#table-titles",
    "href": "slides/39_tables.html#table-titles",
    "title": "Tables",
    "section": "Table titles",
    "text": "Table titles\nAdd a title to the table with the caption argument. The good news is that we can cross-reference easily (Table @ref(tab:title-table)). The bad news is that with captions, tables in PDFs are automatically placed at the top of the page. We’ll see how to fix this later.\n\nkable(condition_prepost_means,\n      col.names = c(\"Condition\", \"Prepost\", \"Mean PANAS\"), \n      caption = \"PANAS scores by condition and prepost\")\n\n\nPANAS scores by condition and prepost\n\n\nCondition\nPrepost\nMean PANAS\n\n\n\n\nControl\nPre\n2.989873\n\n\nControl\nPost\n2.760759\n\n\nHAI\nPre\n2.971795\n\n\nHAI\nPost\n3.232051"
  },
  {
    "objectID": "slides/39_tables.html#general-styling",
    "href": "slides/39_tables.html#general-styling",
    "title": "Tables",
    "section": "General styling",
    "text": "General styling\nThe kable_styling() function formats a number of things such as font size, table width, and table alignment. I’ll also add latex_options = \"hold_position\" to keep the table in the text. Otherwise, it puts it at the top of the page.\n\nkable(condition_prepost_means,\n      caption = \"PANAS scores by condition and prepost\",\n      col.names = c(\"Condition\", \"Prepost\", \"Mean PANAS\"), \n      booktabs = TRUE) |&gt;\n  kable_styling(font_size = 18, latex_options = \"hold_position\")\n\n\nPANAS scores by condition and prepost\n\n\nCondition\nPrepost\nMean PANAS\n\n\n\n\nControl\nPre\n2.989873\n\n\nControl\nPost\n2.760759\n\n\nHAI\nPre\n2.971795\n\n\nHAI\nPost\n3.232051"
  },
  {
    "objectID": "slides/39_tables.html#labels-spanning-rows",
    "href": "slides/39_tables.html#labels-spanning-rows",
    "title": "Tables",
    "section": "Labels spanning rows",
    "text": "Labels spanning rows\nIf you want to label groups of rows, use pack_rows(). Let’s get rid of the condition column and label the conditions explicitly.\n\ncondition_prepost_means2 &lt;- condition_prepost_means |&gt;\n  ungroup(condition) |&gt;\n  select(-condition)\n\n\nkable(condition_prepost_means2, \n      booktabs = TRUE)\n\n\n\n\nprepost\npanas\n\n\n\n\nPre\n2.989873\n\n\nPost\n2.760759\n\n\nPre\n2.971795\n\n\nPost\n3.232051\n\n\n\n\n\n\nkable(condition_prepost_means2, \n      booktabs = TRUE,\n      col.names = c(\"\", \"Mean PANAS\")) |&gt;\n  pack_rows(\"Control\", start_row = 1, end_row = 2) |&gt;\n  pack_rows(\"HAI\", start_row = 3, end_row = 4)\n\n\n\n\n\nMean PANAS\n\n\n\n\nControl\n\n\nPre\n2.989873\n\n\nPost\n2.760759\n\n\nHAI\n\n\nPre\n2.971795\n\n\nPost\n3.232051\n\n\n\n\n\n\n\nNotice that we removed the first column name with \"\"."
  },
  {
    "objectID": "slides/39_tables.html#labels-spanning-columns",
    "href": "slides/39_tables.html#labels-spanning-columns",
    "title": "Tables",
    "section": "Labels spanning columns",
    "text": "Labels spanning columns\nYou can labels groups of columns with the add_header_above() function. Let’s rearrange the data into wide format to illustrate this.\n\n(wide_means &lt;- condition_prepost_means |&gt;\n   unite(cond_prepost, condition:prepost) |&gt;\n   pivot_wider(names_from = cond_prepost, values_from = panas))\n\n# A tibble: 1 × 4\n  Control_Pre Control_Post HAI_Pre HAI_Post\n        &lt;dbl&gt;        &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;\n1        2.99         2.76    2.97     3.23\n\n\n\nkable(wide_means, booktabs = TRUE)\n\n\n\n\nControl_Pre\nControl_Post\nHAI_Pre\nHAI_Post\n\n\n\n\n2.989873\n2.760759\n2.971795\n3.232051\n\n\n\n\n\nNow that the data are in wide format, we can add the column names by repeating Pre and Post then add the headers.\n\nkable(wide_means, \n      booktabs = TRUE, \n      col.names = rep(c(\"Pre\", \"Post\"), 2),\n      digits = 2) |&gt;\n  add_header_above(c(\"Control\" = 2, \"HAI\" = 2))\n\n\n\n\n\n\n\n\n\n\n\nControl\n\n\nHAI\n\n\n\nPre\nPost\nPre\nPost\n\n\n\n\n2.99\n2.76\n2.97\n3.23\n\n\n\n\n\n\n\nMaybe we need a column stating this is Mean PANAS.\n\nwide_means2 &lt;- wide_means |&gt; \n  mutate(label = \"Mean PANAS\", .before = 1)\nkable(wide_means2, \n      booktabs = TRUE, \n      col.names = c(\"\", rep(c(\"Pre\", \"Post\"), 2)),\n      digits = 2) |&gt;\n  add_header_above(c(\"\", \"Control\" = 2, \"HAI\" = 2))\n\n\n\n\n\n\n\n\n\n\n\n\n\nControl\n\n\nHAI\n\n\n\n\nPre\nPost\nPre\nPost\n\n\n\n\nMean PANAS\n2.99\n2.76\n2.97\n3.23"
  },
  {
    "objectID": "slides/39_tables.html#table-footnotes",
    "href": "slides/39_tables.html#table-footnotes",
    "title": "Tables",
    "section": "Table footnotes",
    "text": "Table footnotes\nAdd table notes with the footnote() function.\n\nkable(condition_prepost_means, \n      booktabs = TRUE,\n      caption = \"PANAS scores by condition and prepost\",\n      col.names = c(\"Condition*\", \"Prepost\", \"Mean PANAS\")) |&gt;\n  kable_styling(latex_options = \"hold_position\") |&gt;\n  footnote(general = \"Source: Thayer & Stevens (2021)\",\n           symbol = \"73 control participants, 72 HAI participants\",\n           footnote_as_chunk = TRUE)\n\n\nPANAS scores by condition and prepost\n\n\nCondition*\nPrepost\nMean PANAS\n\n\n\n\nControl\nPre\n2.989873\n\n\nControl\nPost\n2.760759\n\n\nHAI\nPre\n2.971795\n\n\nHAI\nPost\n3.232051\n\n\n\nNote:   Source: Thayer & Stevens (2021)\n\n\n\n\n* 73 control participants, 72 HAI participants"
  },
  {
    "objectID": "slides/39_tables.html#landscape",
    "href": "slides/39_tables.html#landscape",
    "title": "Tables",
    "section": "Landscape",
    "text": "Landscape\nRotate wide tables with landscape() function.\n\nkable(condition_prepost_means, \n      booktabs = TRUE,\n      caption = \"PANAS scores by condition and prepost\",\n      col.names = c(\"Condition\", \"Prepost\", \"Mean PANAS\")) |&gt;\n  kable_styling(latex_options = \"hold_position\") |&gt;\n  footnote(general = \"Source: Thayer & Stevens (2021)\",\n           footnote_as_chunk = TRUE) |&gt;\n  landscape()\n\n\nPANAS scores by condition and prepost\n\n\nCondition\nPrepost\nMean PANAS\n\n\n\n\nControl\nPre\n2.989873\n\n\nControl\nPost\n2.760759\n\n\nHAI\nPre\n2.971795\n\n\nHAI\nPost\n3.232051\n\n\n\nNote:   Source: Thayer & Stevens (2021)"
  },
  {
    "objectID": "slides/39_tables.html#linear-regression",
    "href": "slides/39_tables.html#linear-regression",
    "title": "Tables",
    "section": "Linear regression",
    "text": "Linear regression\n\nhai_lm &lt;- lm(panas_post ~ condition * gender, data = hai)\nsummary(hai_lm)\n\n\nCall:\nlm(formula = panas_post ~ condition * gender, data = hai)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.80909 -0.58525  0.01475  0.48333  1.88333 \n\nCoefficients:\n                        Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)              2.68525    0.09578  28.035  &lt; 2e-16 ***\nconditionhai             0.52385    0.13287   3.943 0.000122 ***\ngenderMale               0.33142    0.20066   1.652 0.100662    \nconditionhai:genderMale -0.18218    0.30884  -0.590 0.556142    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.7481 on 153 degrees of freedom\nMultiple R-squared:  0.109, Adjusted R-squared:  0.09149 \nF-statistic: 6.236 on 3 and 153 DF,  p-value: 0.0005053\n\napa_print(hai_lm)\n\n$estimate\n$estimate$Intercept\n[1] \"$b = 2.69$, 95\\\\% CI $[2.50, 2.87]$\"\n\n$estimate$conditionhai\n[1] \"$b = 0.52$, 95\\\\% CI $[0.26, 0.79]$\"\n\n$estimate$genderMale\n[1] \"$b = 0.33$, 95\\\\% CI $[-0.07, 0.73]$\"\n\n$estimate$conditionhai_genderMale\n[1] \"$b = -0.18$, 95\\\\% CI $[-0.79, 0.43]$\"\n\n$estimate$modelfit\n$estimate$modelfit$r2\n[1] \"$R^2 = .11$, 90\\\\% CI $[0.03, 0.18]$\"\n\n$estimate$modelfit$r2_adj\n[1] \"$R^2_{adj} = .09$\"\n\n$estimate$modelfit$aic\n[1] \"$\\\\mathrm{AIC} = 360.36$\"\n\n$estimate$modelfit$bic\n[1] \"$\\\\mathrm{BIC} = 375.64$\"\n\n\n\n$statistic\n$statistic$Intercept\n[1] \"$t(153) = 28.03$, $p &lt; .001$\"\n\n$statistic$conditionhai\n[1] \"$t(153) = 3.94$, $p &lt; .001$\"\n\n$statistic$genderMale\n[1] \"$t(153) = 1.65$, $p = .101$\"\n\n$statistic$conditionhai_genderMale\n[1] \"$t(153) = -0.59$, $p = .556$\"\n\n$statistic$modelfit\n$statistic$modelfit$r2\n[1] \"$F(3, 153) = 6.24$, $p &lt; .001$\"\n\n\n\n$full_result\n$full_result$Intercept\n[1] \"$b = 2.69$, 95\\\\% CI $[2.50, 2.87]$, $t(153) = 28.03$, $p &lt; .001$\"\n\n$full_result$conditionhai\n[1] \"$b = 0.52$, 95\\\\% CI $[0.26, 0.79]$, $t(153) = 3.94$, $p &lt; .001$\"\n\n$full_result$genderMale\n[1] \"$b = 0.33$, 95\\\\% CI $[-0.07, 0.73]$, $t(153) = 1.65$, $p = .101$\"\n\n$full_result$conditionhai_genderMale\n[1] \"$b = -0.18$, 95\\\\% CI $[-0.79, 0.43]$, $t(153) = -0.59$, $p = .556$\"\n\n$full_result$modelfit\n$full_result$modelfit$r2\n[1] \"$R^2 = .11$, 90\\\\% CI $[0.03, 0.18]$, $F(3, 153) = 6.24$, $p &lt; .001$\"\n\n\n\n$table\nA data.frame with 6 labelled columns:\n\n                               term estimate      conf.int statistic  df\n1                         Intercept     2.69  [2.50, 2.87]     28.03 153\n2                      Conditionhai     0.52  [0.26, 0.79]      3.94 153\n3                        GenderMale     0.33 [-0.07, 0.73]      1.65 153\n4 Conditionhai $\\\\times$ GenderMale    -0.18 [-0.79, 0.43]     -0.59 153\n  p.value\n1  &lt; .001\n2  &lt; .001\n3    .101\n4    .556\n\nterm     : Predictor \nestimate : $b$ \nconf.int : 95\\\\% CI \nstatistic: $t$ \ndf       : $\\\\mathit{df}$ \np.value  : $p$ \nattr(,\"class\")\n[1] \"apa_results\" \"list\"       \n\n\n\napa_table(apa_print(hai_lm)$table,\n          caption = \"Linear regression results\",\n          placement = \"h\")\n\n\n(#tab:lm-table) Linear regression results\n\n\nPredictor\n\\(b\\)\n95% CI\n\\(t\\)\n\\(\\mathit{df}\\)\n\\(p\\)\n\n\n\n\nIntercept\n2.69\n[2.50, 2.87]\n28.03\n153\n&lt; .001\n\n\nConditionhai\n0.52\n[0.26, 0.79]\n3.94\n153\n&lt; .001\n\n\nGenderMale\n0.33\n[-0.07, 0.73]\n1.65\n153\n.101\n\n\nConditionhai \\(\\times\\) GenderMale\n-0.18\n[-0.79, 0.43]\n-0.59\n153\n.556\n\n\n\n\n\n\nLet’s clean up those predictor names.\n\nhai_lm_table &lt;- apa_print(hai_lm)$table\nhai_lm_table &lt;- hai_lm_table |&gt;\n  mutate(term = str_replace(term, \"Conditionhai\", \"Condition\"),\n         term = str_replace(term, \"GenderMale\", \"Gender\"))\napa_table(hai_lm_table,\n          caption = \"Linear regression results\",\n          placement = \"h\")\n\n\n(#tab:unnamed-chunk-23) Linear regression results\n\n\nterm\n\\(b\\)\n95% CI\n\\(t\\)\n\\(\\mathit{df}\\)\n\\(p\\)\n\n\n\n\nIntercept\n2.69\n[2.50, 2.87]\n28.03\n153\n&lt; .001\n\n\nCondition\n0.52\n[0.26, 0.79]\n3.94\n153\n&lt; .001\n\n\nGender\n0.33\n[-0.07, 0.73]\n1.65\n153\n.101\n\n\nCondition \\(\\times\\) Gender\n-0.18\n[-0.79, 0.43]\n-0.59\n153\n.556\n\n\n\n\n\nHow could we name the first column Predictor instead of term?"
  },
  {
    "objectID": "code/plot_challenge.html",
    "href": "code/plot_challenge.html",
    "title": "Plotting challenge",
    "section": "",
    "text": "Recreate the following plot. Don’t worry about exact locations, size, or scaling. But pay attention to subsetting of the data and capitalization of text. Feel free to write the code in an R script or R Markdown document. Upload your final code to Canvas under Exercise: Plotting challenge by May 3."
  },
  {
    "objectID": "code/40_publications.html",
    "href": "code/40_publications.html",
    "title": "Publications",
    "section": "",
    "text": "Using the mpg data, create a data frame called mpg46 that only includes 4 and 6 cylinder cars. Conduct a t-test that compares highway fuel efficiency between the 4 and 6 cylinder cars and save the output as mpg_ttest.\n\n\n# &gt;\n\n\nLoad {papaja} and use the apa_print() function to extract the mean difference between cylinder numbers and the 95% confidence interval from mpg_ttest.\n\n\n# &gt;\n\n\nExtract the t-statistic and p-value for mpg_ttest.\n\n\n# &gt;\n\n\nExtract the mean difference, 95% CI, t-statistic, and p-value in one string.\n\n\n# &gt;\n\n\nUse printp() to format 0.0000001 as a p-value in APA format.\n\n\n# &gt;\n\n\nDropping the leading zero is silly. Use printnum() to return the same output as #5 but include the leading zero.\n\n\n# &gt;"
  },
  {
    "objectID": "code/39_tables.html",
    "href": "code/39_tables.html",
    "title": "Tables",
    "section": "",
    "text": "Using the mpg data, create a data frame called my_mpg that capitalizes the manufacturer.\n\n\n# &gt;\n\n\nCalculate mean highway and city fuel efficiency for each manufacturer and return a table with the caption “Highway and city fuel efficiency” and column names “Manufacturer”, “Highway”, and “City”.\n\n\n# &gt;\n\n\nRepeat the table from #2 but add a header that spans Highway and City that says “Fuel efficiency”. Reminder, you’ll need to load {kableExtra} to do this.\n\n\n# &gt;\n\n\nCalculate mean highway and city fuel efficiency for each manufacturer and year. Order the data frame by year, then remove the year column and add labels for each year that spans the rows for each year. Also, add a footnote that says “Source: mpg data set.”.\n\n\n# &gt;\n\n\nConduct a linear regression called my_model of the effects of displacement, cylinder, and year on highway fuel efficiency: lm(hwy ~ displ + cyl + year, my_mpg). Apply the summary() function to the model object, then return the coefficients table from the summary.\n\n\n# &gt;\n\n\nExtract the table after applying {papaja}’s apa_print() to my_model, then pass this to apa_table().\n\n\n# &gt;"
  },
  {
    "objectID": "code/37_annotating.html",
    "href": "code/37_annotating.html",
    "title": "Annotating plots",
    "section": "",
    "text": "Using the mpg data, create a scatterplot of highway and city fuel efficiencies. Create a title, subtitle, caption, and axes labels.\n\n\n# &gt;\n\n\nRepeat #1 adding a linear regression line. Use cor() to calculate the correlation coefficient for the correlation. Add it to the plot somewhere labeled and rounded to two decimals.\n\n\n# &gt;\n\n\nRepeat #1. Find the manufacturer and model of the data point with the highest city fuel efficiency. Label this point by drawing a line from the point to the text label and include the manufacturer and model (broken across two lines).\n\n\n# &gt;\n\n\nRepeat #1 drawing grey horizontal and vertical lines at 20 mpg for both axes underneath the data points. Add a lightpink rectangle under the points filling the upper right quandrant (&gt;20 for both axes).\n\n\n# &gt;\n\n\nCreate boxplots of fuel efficiency by class but order the class levels by mean highway fuel efficiency. At y = 10, add the sample size for each box (e.g., N=5, N=47, etc.).\n\n\n# &gt;"
  },
  {
    "objectID": "code/36_axes.html",
    "href": "code/36_axes.html",
    "title": "Adjusting axes",
    "section": "",
    "text": "Using the mpg data, create boxplots of highway fuel efficiency as a function of class.\n\n\n# &gt;\n\n\nZoom into the plot with y-axis limits of 15 and 40 without altering the data.\n\n\n# &gt;\n\n\nChange the y-axis limits to 15 and 40 but allow the statistical transformations to change the data.\n\n\n# &gt;\n\n\nReplot #1 but using a log10 scale.\n\n\n# &gt;\n\n\nReplot #1 but with y-axis limits running from 0 to 50 and with labels in increments of 5 but no minor grid lines.\n\n\n# &gt;\n\n\nReplot #1 but create separate panels based on year (as rows) and cylinders (as columns) and allowing the scales to vary across rows.\n\n\n# &gt;\n\n\nReplot #1 and assign it to hwy_plot and replot a similar version with city fuel efficiency named cty_plot. Then combine them into a compound plot labeled as subfigures A and B and save this figure on your computer as a PNG file.\n\n\n# &gt;"
  },
  {
    "objectID": "code/35_categories.html",
    "href": "code/35_categories.html",
    "title": "Plotting x-y data: categories",
    "section": "",
    "text": "Using the mpg data, create a data object called class_cyl that subsets only the compact and midsize class cars with 4 or 6 cylinders and makes cylinder number a factor. You should end up with 84 observations.\n\n\n# &gt;\n\n\nCreate an interaction plot from class_cyl with cylinder number on the x-axis, highway fuel efficiency on the y-axis, and separately colored lines for class. Spatially separate overlapping error bars.\n\n\n# &gt;\n\n\nRepeat interaction plot #2, reversing the roles of class and cylinder number by making class the x-axis and cylinder number the lines. Do the two plots communicate information differently? Which do you prefer?\n\n\n# &gt;\n\n\nTake the class_cyl data and calculate the mean and standard error for each combination of class and cylinder number levels. Note that you can calculate standard error by dividing the standard deviation by the square root of the sample size. Next, create a column that subtracts SE from mean for the lower bound and add SE to mean for the upper bound. Assign these means, standard errors, and lower and upper bounds to mean_mpg (you should have 4 observations and 6 variables).\n\n\n# &gt;\n\n\nReplicate plot #3 using the mean_mpg data set by plotting the means and bounds as error bars and include a line connecting across class. Is it identical to plot #3?\n\n\n# &gt;\n\n\nUsing class_cyl, calculate the mean highway fuel efficiency for each manufacturer and cylinder size. Plot a slopegraph of dashed lines for each manufacturer connecting the mean fuel efficiency for 4 and 6 cylinders. Overlay the mean and standard deviation across manufacturers for both levels of cylinder number.\n\n\n# &gt;\n\n\nUsing mpg, create a raincloud plot that includes a half density plot and half dot plot of highway fuel efficiency for each class. Adjust the bin width and dot size to produce a reasonable distribution of dots. Color the lines and shaded areas differently for each class, but remove the legend. Reduce the opacity of the shaded areas.\n\n\n# &gt;"
  },
  {
    "objectID": "code/34_timeseries.html",
    "href": "code/34_timeseries.html",
    "title": "Plotting x-y data: time series",
    "section": "",
    "text": "Using the mpg data, calculate the mean highway fuel efficiency for each number of cylinders and plot a line graph of fuel efficiency by cylinder number.\n\n\n# &gt;\n\n\nRepeat the previous plot but also group by class and plot separately colored lines for different classes.\n\n\n# &gt;\n\n\nCreate a new column called low_high that codes high fuel efficiency greater than or equal to 25 as 1 and less than 25 as 0. Plot low_high as a function of displacement with a bubble chart (no legend) and include a logistic regression curve and band.\n\n\n# &gt;\n\n\nPlot highway fuel efficiency for each class as points first, then add jitter, finding an appropriate amount of jitter to add.\n\n\n# &gt;\n\n\nRepeat plot #4 with a beeswarm plot.\n\n\n# &gt;"
  },
  {
    "objectID": "code/33_associations.html",
    "href": "code/33_associations.html",
    "title": "Plotting x-y data: associations",
    "section": "",
    "text": "Using the mpg data, create a scatterplot of the highway fuel efficiency and city fuel efficiency.\n\n\n# &gt;\n\n\nNow add a dashed reference line showing equivalent values for the two axes and set the aspect ratio to 1.\n\n\n# &gt;\n\n\nLooks like there is a possibility of overplotting. Turn this into a bubble chart with dot size scaling to the number of data points for each dot and make the dot colors steelblue.\n\n\n# &gt;\n\n\nAdd rugs to scatterplot #1 and change to minimal theme.\n\n\n# &gt;\n\n\nFrom scatterplot #1, color the dots by class, move the legend to the top left corner of the plot, and add marginal density plots.\n\n\n# &gt;\n\n\nCreate a data frame called mpg_num that only includes variables with numeric values using the where() function. Then remove the year column.\n\n\n# &gt;\n\n\nCreate correlation plots of the numeric variables in mpg_num in both base R and using {GGally}’s ggpairs() function.\n\n\n# &gt;\n\n\nCreate a correlation matrix of mpg_num with the cor() function. Then use ggcorrplot() from the {ggcorrplot} package to make a heatmap correlation plot with just the upper triangle of the matrix and using circles to represent correlation coefficient magnitude.\n\n\n# &gt;"
  },
  {
    "objectID": "code/32_barcharts.html",
    "href": "code/32_barcharts.html",
    "title": "Plotting amounts: barcharts and dot plots",
    "section": "",
    "text": "Using the mtcars data, create a barchart of the counts for each level of cylinder.\n\n\n# &gt;\n\n\nRepeat the barchart but stack the counts by gear.\n\n\n# &gt;\n\n\nRecreate this plot:\n\n\n\n# &gt;\n\n\nRepeat barchart #2 but set the position to “dodge”.\n\n\n# &gt;\n\n\nWhoa, what happened to 8 cylinders? Unfortunately, since there were only two levels of gear for 8 cylinders, it just split the bars in two. To hold the numbers of bars the same across all levels, you can set position to position_dodge(preserve = \"single\"). Try that.\n\n\n# &gt;\n\n\nWell, that’s better—the two bars are the same width as all of the other bars. But the 4 gears should show up as 0. To fix, we need to count the data first, find implicitly missing data, and plot using geom_col(). So first, find counts for the combinations of cylinders and gears. Then use complete() to find the implicitly missing combinations. Then replace the NAs with 0s. Then use geom_col() to plot these values with the position dodged.\n\n\n# &gt;\n\n\nMake a dotplot of the counts for each level of carb and plot carb on the y-axis and the count on the x-axis. Reminder that first you’ll need to count the observations in each level of carb before starting the plot.\n\n\n# &gt;\n\n\nRepeat dotplot #8 but order carb based on the counts from highest to lowest count.\n\n\n# &gt;"
  },
  {
    "objectID": "code/31_boxplots.html",
    "href": "code/31_boxplots.html",
    "title": "Plotting distributions: boxplots",
    "section": "",
    "text": "Using the penguins data, create a boxplot that shows penguin flipper length by island without outliers.\n\n\n# &gt;\n\n\nAdd the means and standard error for each boxplot.\n\n\n# &gt;\n\n\nSwitch from standard errors to confidence intervals, increase the size of the point, and color the box shading chocolate.\n\n\n# &gt;\n\n\nFill the boxplots with color separately for each island and remove the legend.\n\n\n# &gt;\n\n\nCreate a boxplot to show how flipper length differs for each species by island.\n\n\n# &gt;\n\n\nRecreate the boxplot #5 as a violin plot with a white background.\n\n\n# &gt;"
  },
  {
    "objectID": "code/30_histograms.html",
    "href": "code/30_histograms.html",
    "title": "Plotting distributions: histograms",
    "section": "",
    "text": "Using the mtcars data, create a histogram of the fuel efficiency values.\n\n\n# &gt;\n\n\nNot a great histogram. Mess with the number of bins until you get a nice histogram.\n\n\n# &gt;\n\n\nNow change the bin width to generate the same plot as #2.\n\n\n# &gt;\n\n\nUsing the same binwidth from #3, plot a histogram with lightseagreen lines and aquamarine3 shaded areas. Then overlay a density plot with a aquamarine4 line with width 2.\n\n\n# &gt;\n\n\nWhat is the difference between a frequency polygon and a density plot?\nMake a density plot with bandwidth of 3 and separate line colors for different cylinder levels.\n\n\n# &gt;\n\n\nRepeat #6 but also include separate colors for the shaded areas with a transparency of 0.5. Use viridis colors for both lines and shaded areas, and reverse the direction of the colors where 4 is yellow, 6 is greenish, and 8 is purplish.\n\n\n# &gt;"
  },
  {
    "objectID": "code/29_color.html",
    "href": "code/29_color.html",
    "title": "Color",
    "section": "",
    "text": "Using the mtcars data, create a scatterplot of the fuel efficiency as a function of weight with color based on the number of cylinders.\n\n\n# &gt;\n\n\nRepeat the scatterplot but use scale_color_brewer() to set the palette to Set1.\n\n\n# &gt;\n\n\nWhy did you use scale_color_brewer() not scale_fill_brewer() or scale_color_distiller()?\nRepeat scatterplot #1 but use scale_color_manual() to set the three colors to red, green, and blue.\n\n\n# &gt;\n\n\nFind three colors (either names or hex codes), and repeat scatterplot #4 with your own colors.\n\n\n# &gt;\n\n\nUsing the mtcars data, create a scatterplot of the fuel efficiency as a function of weight with color based on horsepower using the BuPu palette and reverse the direction of the gradient.\n\n\n# &gt;\n\n\nCreate a new column in mtcars that centers and scales displacement with the scale() function. Create a scatterplot of fuel efficiency as a function of weight with color based on the rescaled displacement, using a diverging scale of your choice.\n\n\n# &gt;"
  },
  {
    "objectID": "code/28_themes.html",
    "href": "code/28_themes.html",
    "title": "Design and themes",
    "section": "",
    "text": "Using the mtcars data, create a scatterplot of the fuel efficiency as a function of weight with color based on the number of cylinders.\n\n\n# &gt;\n\n\nRepeat the scatterplot but with classic, bw, and dark themes.\n\n\n# &gt;\n\n\nRepeat the scatterplot from #1 but with no minor grid lines and no legend.\n\n\n# &gt;\n\n\nRepeat the scatterplot from #1 but no minor grid lines for the x-axis (keep them for the y-axis) and move the legend inside the plot area and remove the legend title.\n\n\n# &gt;\n\n\nRepeat the scatterplot from #1 but make the major y-axis grid lines black dashed lines and change the text font to 12 point Times font.\n\n\n# &gt;\n\n\nCreate a version of scatterplot #1 that minimizes the data-ink ratio by reducing non-data-ink.\n\n\n# &gt;"
  },
  {
    "objectID": "code/27_grammar2.html",
    "href": "code/27_grammar2.html",
    "title": "Grammar of graphics II",
    "section": "",
    "text": "Using the mtcars data, create a scatterplot of the fuel efficiency as a function of weight.\n\n\n# &gt;\n\n\nRepeat the scatterplot, but make the points violet open squares of size 5.\n\n\n# &gt;\n\n\nRepeat the scatterplot but with separate colors for cylinder levels.\n\n\n# &gt;\n\n\nWhy does the legend look like that? Fix it so there are separate colors for cylinder levels.\n\n\n# &gt;\n\n\nOverlay separate regression lines for each cylinder level.\n\n\n# &gt;\n\n\nOverlay a single firebrick regression line over the points with a firebrick1-colored confidence band.\n\n\n# &gt;\n\n\nPlot the mean and standard error of the mean of fuel efficiency for each level of cylinder and color them sienna.\n\n\n# &gt;"
  },
  {
    "objectID": "code/26_grammar1.html",
    "href": "code/26_grammar1.html",
    "title": "Grammar of graphics I",
    "section": "",
    "text": "Using the mtcars data, create a scatterplot of the fuel efficiency as a function of weight.\n\n\n# &gt;\n\n\nRepeat the plot but only with vehicles having 4 or 6 cylinders.\n\n\n# &gt;\n\n\nRepeat plot #1 but add a smooth line underneath the data points.\n\n\n# &gt;\n\n\nMake a boxplot of fuel efficiency for each cylinder size.\n\n\n# &gt;\n\n\nAdd ” cylinders” to the end of each value in the cylinder column of data and replot #4.\n\n\n# &gt;\n\n\nReplot #4 ordering the cylinders such that the median mpg increases from left to right.\n\n\n# &gt;"
  },
  {
    "objectID": "code/25_iteration.html",
    "href": "code/25_iteration.html",
    "title": "Iteration",
    "section": "",
    "text": "Write a for loop that calculates the mean bill length for each species in the penguins data set (don’t use group_by()) and saves them as species_means.\n\n\n# &gt;\n\n\nTurn #1 into a function called species_mean that lets the user determine which variable to calculate the mean over.\n\n\n# &gt;\n\n\nCreate a list penguins_island that separates the penguins data by island.\n\n\n# &gt;\n\n\nApply map() to find the number of observations for each year.\n\n\n# &gt;\n\n\nApply map() to calculate the mean body weight for each island.\n\n\n# &gt;\n\n\nRework #5 to return a numeric vector with values rounded to 1 decimal place.\n\n\n# &gt;"
  },
  {
    "objectID": "code/24_functions.html",
    "href": "code/24_functions.html",
    "title": "Functions",
    "section": "",
    "text": "Write a function called mystring that takes a vector as an argument and returns the first three characters from the string. Test it on words[1:10].\n\n\n# &gt;\n\n\nAdd an argument to mystring() that allows the user to control how many of the first characters should be returned. Test it on words[1:10] with 5 characters.\n\n\n# &gt;\n\n\nSet the default number of characters returned by mystring() to be 3 and test that the default works and that you can override the default.\n\n\n# &gt;\n\n\nAdd a step that checks whether the inputted vector is a character string. If it is, continue to return the truncated strings. If the vector is not a character string, use the stop() function to stop the computation and return a message to the console telling the user that the vector was not a character vector. Test your function with a character vector, a numeric vector, and a logical vector.\n\n\n# &gt;\n\n\nCreate a function called parse_my_vector that does the following:\n\n\nAllows users to input a vector and a response to the argument type that determines whether the vector is a numeric (\"num\"), character (\"char\"), or logical (\"logical\") vector. There should be no default value. If the user response does not match any of these three strings, stop with a message asking the user to specify one of the three strings.\nFor each type, checks whether the vector is actually the type specified by the user and stops with a message if they do not match.\nFor numeric vectors, multiplies by 10. For character vectors, extracts the first three characters. For logical vectors, returns the number of TRUE responses.\nBefore returning output, prints a message thanking the user.\nReturns the original vector and output of the functions described above.\n\n\n# &gt;\n\n\nCheck the following with parse_my_vector():\n\n\nx = 1:10, type = “num”\nx = 1:10, type = “char”\nx = words[1:10], type = “num”\nx = words[1:10], type = “char”\nx = c(TRUE, FALSE, TRUE), type = “num”\nx = c(TRUE, FALSE, TRUE), type = “logical”\nx = 1:10, type = “nums”\n\n\n# &gt;"
  },
  {
    "objectID": "code/23_dates.html",
    "href": "code/23_dates.html",
    "title": "Dates and times",
    "section": "",
    "text": "For these exercises, we’ll use the dates data set.\n\nLoad tidyverse, import dates.csv to dates, and view the data set.\n\n\n# &gt;\n\n\nConvert birth_date to a date object and resave dates.\n\n\n# &gt;\n\n\nCreate a column called time1 that converts test1 to datetime and change the time zone to “America/Chicago”.\n\n\n# &gt;\n\n\nCalculate each participant’s age in years at the time of test 1, rounded to 1 decimal place, stored in age and resave dates.\n\n\n# &gt;\n\n\nCalculate the number of days between test 1 and test 2 for each participant and label this column test_diff (and resave dates).\n\n\n# &gt;\n\n\nCreate dates2 that subsets the participants who were born after January 1, 1970.\n\n\n# &gt;\n\n\nCreate a column named diff_text that writes the following sentence for each participant in dates2: “Participant [insert id] (age: [insert age]) had test 1 on [insert test1] and test 2 on [insert test2], which were [insert test_diff] days apart.”\n\n\n# &gt;"
  },
  {
    "objectID": "code/22_factors.html",
    "href": "code/22_factors.html",
    "title": "Factors",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits data set.\n\nLoad tidyverse, import dog_breed_traits_clean.csv to traits.\n\n\n# &gt;\n\n\nConvert both coat_type and coat_length into factors using across() and save as traits2.\n\n\n# &gt;\n\n\nCheck the levels for both columns, one using a pipe and one without using a pipe.\n\n\n# &gt;\n\n\nReorder the levels for coat_length to be Short, Medium, Long (reassigned to traits2) and then check the levels.\n\n\n# &gt;\n\n\nReorder the levels for coat_type to be in the order of the most to least frequent coat type and then check the levels.\n\n\n# &gt;\n\n\nRelabel coat_length to be Stubby, Mid, and Lush rather than Short, Medium, and Long.\n\n\n# &gt;\n\n\nThe new AKC standard subsumes Rough coats with Wiry coats and Silky with Wavy. Please update the coat_type variable accordingly.\n\n\n# &gt;"
  },
  {
    "objectID": "code/21_patterns.html",
    "href": "code/21_patterns.html",
    "title": "Matching patterns",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits data set.\n\nLoad tidyverse, import dog_breed_traits_clean.csv to traits, and extract the breed column into an object called breeds that randomly shuffles the breeds using 12 as a seed for randomization.\n\n\n# &gt;\n\n\nView the breeds ending with the letter “s”.\n\n\n# &gt;\n\n\nCreate a logical vector showing whether breeds have at least two words in their names.\n\n\n# &gt;\n\n\nExtract the hounds (but don’t release them). That is, return a vector of all breeds that include the string “hound” or “Hound”.\n\n\n# &gt;\n\n\nExtract the breeds that include the following pattern “&lt;wildcard&gt;ep”.\n\n\n# &gt;\n\n\nOK, maybe English Buttdragger isn’t the proper AKC name for this breed. Replace English Buttdragger with English Chaser.\n\n\n# &gt;\n\n\nReplace all instances of “English” with “British” and then return the breeds that include “English” or “British” in them (to check our work).\n\n\n# &gt;\n\n\nExtract the Spaniels and then separate the breed names into different strings for each word and create a matrix out of it.\n\n\n# &gt;"
  },
  {
    "objectID": "code/20_strings.html",
    "href": "code/20_strings.html",
    "title": "Strings",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits data set.\n\nLoad tidyverse and import dog_breed_traits_clean.csv to traits.\n\n\n# &gt;\n\n\nReturn the first ten letters of the alphabet in upper case.\n\n\n# &gt;\n\n\nCreate this character string and assign it to mystring: The elephant said “Hello” then ‘Bye!’ Then view how it would be printed.\n\n\n# &gt;\n\n\nFind how many characters are in mystring.\n\n\n# &gt;\n\n\nCreate a vector of the first four characters of the coat_length column from traits.\n\n\n# &gt;\n\n\nConvert the breed column of traits to sentence case.\n\n\n# &gt;\n\n\nCreate series of sentences using breed and coat_length that states “[insert breed name] have a [insert coat length] coat” that uses the proper cases.\n\n\n# &gt;\n\n\nIn the mtcars data set, extract the first two digits of the mpg variable and the last three digits of the car names and combine them into a single string.\n\n\n# &gt;\n\n\nPrint the fruit data set, then capitalize all first word letters in the data set, then capitalize all words in the data set.\n\n\n# &gt;"
  },
  {
    "objectID": "code/19_numbers.html",
    "href": "code/19_numbers.html",
    "title": "Numbers",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits and dog breed popularity rankings data sets.\n\nLoad tidyverse and import dog_breed_traits_clean.csv to traits.\n\n\n# &gt;\n\n\nCreate a column of per-row means over all rating columns called mean_ratings and assign to traits2.\n\n\n# &gt;\n\n\nConvert mean_ratings to a proportion in a column called pmean_ratings and add to traits2.\n\n\n# &gt;\n\n\nApply a natural log transformation to the pmeans_ratings vector.\n\n\n# &gt;\n\n\nRound pmean_ratings to two decimal places.\n\n\n# &gt;\n\n\nConvert pmean_ratings to scientific notation.\n\n\n# &gt;\n\n\nSum up the total grooming ratings for each coat type.\n\n\n# &gt;\n\n\nAdd inline R code to the following sentence in R Markdown to say how many rows have NA for grooming:\n\nWe are missing grooming data for [insert inline R code] breeds."
  },
  {
    "objectID": "code/18_mergingrows.html",
    "href": "code/18_mergingrows.html",
    "title": "Merging rows",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits and dog breed popularity rankings data sets.\n\nLoad tidyverse, import dog_breed_traits_clean.csv to traits, import dog_breed_ranks.csv to ranks, and import dog_breed_ranks.csv to popularity.\n\n\n# &gt;\n\n\nFirst, set a random seed by using set.seed(2). Then create a subset of ranks that is a random selection of 10% of the rows, sort by breed name, and assign to ranks2.\n\n\n# &gt;\n\n\nUse a filtering join to return the subset of traits that matches the breeds in ranks2 and assign this to traits2.\n\n\n# &gt;\n\n\nUse a filtering join to return the subset of traits that excludes the breeds in ranks2.\n\n\n# &gt;\n\n\nNow we want to filter traits based on breeds in popularity. Notice that the breeds column in popularity is called Breed. This is problematic because the breed column in traits is called breed and names are case-sensitive. Use join_by() to filter traits by breeds in popularity. How many rows are there?\n\n\n# &gt;\n\n\nUse filter() (not joins) to return the subset of traits that excludes the breeds in ranks2.\n\n\n# &gt;\n\n\nAppend traits2 to the bottom of itself.\n\n\n# &gt;\n\n\nAppend traits2 to the right of itself.\n\n\n# &gt;\n\n\nAppend traits2 to the right of ranks2.\n\n\n# &gt;\n\n\nWhy is this not a good idea? What would be a better way to achieve this?\n\n\n# &gt;"
  },
  {
    "objectID": "code/17_mergingcolumns.html",
    "href": "code/17_mergingcolumns.html",
    "title": "Merging columns",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits data set along with the data on breed popularity rankings.\n\nLoad tidyverse, download and import dog_breed_traits_clean.csv to traits, and import dog_breed_ranks.csv to ranks. Make sure to download both files from the website, as they have changed or are new.\n\n\n# &gt;\n\n\nWhich breeds differ between traits and ranks?\n\n\n# &gt;\n\n\nMerge traits and ranks (in that order) to produce a data frame that includes breeds shared by both data sets. How many rows are there?\n\n\n# &gt;\n\n\nMerge traits and ranks (in that order) to produce a data frame that includes all breeds included in either data set. How many rows are there?\n\n\n# &gt;\n\n\nMerge traits and ranks (in that order) to produce a data frame that includes only breeds included in traits. How many rows are there?\n\n\n# &gt;\n\n\nMerge traits and ranks (in that order) to produce a data frame that includes only breeds included in ranks. How many rows are there?\n\n\n# &gt;\n\n\nMake table4a and table4b tidy then join them to replicate table1.\n\n\n# &gt;"
  },
  {
    "objectID": "code/16_separating.html",
    "href": "code/16_separating.html",
    "title": "Separating and uniting data",
    "section": "",
    "text": "For these exercises, we’ll use a new clean version of the dog breed traits data set.\n\nLoad tidyverse, import data from https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits_clean.csv, and assign it to traits.\n\n\n# &gt;\n\n\nCreate traits2 which adds a coat column that combines coat_type and coat_length into single column delimited by “-”.\n\n\n# &gt;\n\n\nSplit the coat column into type and length and keep the original coat column.\n\n\n# &gt;\n\n\nCreate traits3 from traits that (1) removes the coat columns, (2) turns the ratings columns into long format, and (3) removes the children row for Bulldogs.\n\n\n# &gt;\n\n\nCreate traits4 from traits3 that ensures a complete data set with all five ratings for all breeds (and fills in missing combinations with NA) and check for the missing Bulldog children row.\n\n\n# &gt;\n\n\nHow could we copy the rating from the previous row into the Bulldog children row to replace the NA? (Note this is not a good idea in this case!)\n\n\n# &gt;\n\n\nFrom traits, generate all combinations of coat type and length observed in the data, excluding NA.\n\n\n# &gt;\n\n\nFrom traits, generate all possible combinations of coat type and length, excluding NA.\n\n\n# &gt;"
  },
  {
    "objectID": "code/15_pivoting.html",
    "href": "code/15_pivoting.html",
    "title": "Pivoting data",
    "section": "",
    "text": "For these exercises, we’ll use a new clean version of the dog breed traits data set.\n\nImport data from https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits_clean.csv and assign to traits.\n\n\n# &gt;\n\n\nCreate traits2 where we delete the coat columns, so we only have breed and ratings data.\n\n\n# &gt;\n\n\nIs traits2 tidy?\nIs traits2 in wide or long format?\nReshape traits2 so that all of the ratings scores are in a single column called rating with a column labeling what kind of rating it is called scale. Assign this to traits3.\n\n\n# &gt;\n\n\nHow would we check if traits3 has the expected number of rows?\nCreate traits4 by removing the rows with affectionate, children, and other_dogs as values of scale.\n\n\n# &gt;\n\n\nSpread out the data into wide format with separate columns for the shedding and grooming data, then create a new column diff that subtracts grooming from shedding ratings.\n\n\n# &gt;"
  },
  {
    "objectID": "code/14_summarizing.html",
    "href": "code/14_summarizing.html",
    "title": "Summarizing rows",
    "section": "",
    "text": "For these exercises, we’ll use a new clean version of the dog breed traits data set.\n\nImport data from https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits_clean.csv and assign to traits.\n\n\n# &gt;\n\n\nWhat is the overall mean rating for affectionate?\n\n\n# &gt;\n\n\nWhat is the overall mean rating for each of the rating columns ignoring NAs?\n\n\n# &gt;\n\n\nHow many breeds are there in each coat type?\n\n\n# &gt;\n\n\nWhat is the median grooming rating for each coat type?\n\n\n# &gt;\n\n\nWhat is the lowest rating per coat length for each of the rating columns, ignoring NAs?\n\n\n# &gt;\n\n\nWhat are the sample size, mean, and standard deviation of shedding ratings for medium coat length dogs per coat type sorted from largest to smallest sample size and only including coat types with 5 or more samples? Note: the order mentioned here is not necessarily the correct order for your pipeline.\n\n\n# &gt;\n\n\nCalculate each breed’s mean rating across each ratings column and return a data frame with the highest rating for each coat type. Don’t forget to undo rowwise() with ungroup() before further calculations.\n\n\n# &gt;"
  },
  {
    "objectID": "code/13_filtering.html",
    "href": "code/13_filtering.html",
    "title": "Filtering rows",
    "section": "",
    "text": "For these exercises, we’ll use a new clean version of the dog breed traits data set.\n\nImport data from https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits_clean.csv and assign to traits.\n\n\n# &gt;\n\n\nReturn dogs only with short coats.\n\n\n# &gt;\n\n\nReturn a data frame excluding dogs with short coats.\n\n\n# &gt;\n\n\nReturn dogs with double or silky coats.\n\n\n# &gt;\n\n\nReturn dogs with double or silky coats and shedding ratings 3 or below.\n\n\n# &gt;\n\n\nReturn dogs with NA for coat_type.\n\n\n# &gt;\n\n\nReturn dogs with NA for any column.\n\n\n# &gt;\n\n\nReturn dogs not missing any data.\n\n\n# &gt;\n\n\nReturn dogs sorted by breed name.\n\n\n# &gt;\n\n\nReturn dogs sorted by coat type then coat length then affectionate rating.\n\n\n# &gt;"
  },
  {
    "objectID": "code/12_piping.html",
    "href": "code/12_piping.html",
    "title": "Piping",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits data set.\n\nCreate a pipeline to do all of the following:\n\n\nassign pipeline to traits\nimport data from https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits.csv\nsubset only the columns Breed through Coat Length\nremove the Drooling Level column\n\n\n# &gt;\n\n\nRename the column names to \"breed\", \"affectionate\", \"children\", \"other_dogs\", \"shedding\", \"grooming\", \"coat_type\", \"coat_length\" using this vector (either at the end of the last pipeline or in a separate line).\n\n\n# &gt;\n\n\nIn a new pipe, use traits to do the following.\n\n\nassign to traits2\nrescale all of the ratings columns by subtracting 1 from all of the values\ncreate a new column called coat that combines the coat_type and coat_length columns by pasting the values of those two columns separated by -\ncreate a new column called shed that dichotomizes shedding such that values of 3 and above are “A lot” and values below 3 are “Not much” and places the new column after shedding\ncalculate the mean rating for the children and other_dogs columns in a column called mean_rating and place it after other_dogs\n\n\n# &gt;\n\n\nIn a new pipe, use traits2 to do the following.\n\n\nassign to coat_grooming\nsubset only the grooming and coat_type columns\nrun a linear model (lm) using the formula grooming ~ coat_type (remember to use a placeholder for the data)\napply the summary() function\nprint the results to console\n\n\n# &gt;"
  },
  {
    "objectID": "code/11_mutating.html",
    "href": "code/11_mutating.html",
    "title": "Mutating columns",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits data set, so import that from https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits.csv (if you don’t already have it) and assign it to traits.\n\n# &gt;\n\n\nView traits to see what it looks like.\n\n\n# &gt;\n\n\nReassign traits with only the columns Breed through Coat Length.\n\n\n# &gt;\n\n\nReassign traits removing the Drooling Level column. That’s gross.\n\n\n# &gt;\n\n\nWhat terrible column names! Reassign traits and change the column names to \"breed\", \"affectionate\", \"children\", \"other_dogs\", \"shedding\", \"grooming\", \"coat_type\", \"coat_length\". Note, use the colnames() function rather than select() or rename() since you already have the full vector of names.\n\n\n# &gt;\n\n\nThe ratings are supposed to run from 0 to 4 rather than 1 to 5. Change the affectionate column by subtracting 1 from the original numbers to rescale the values. Don’t reassign traits.\n\n\n# &gt;\n\n\nActually, all of the ratings need to be rescaled. Subtract 1 from all of the ratings columns by using across().\n\n\n# &gt;\n\n\nCreate a new column called coat that combines the coat_type and coat_length columns by pasting the values of those two columns separated by -.\n\n\n# &gt;\n\n\nCreate a new column called shed that dichotomizes shedding such that values of 3 and above are “A lot” and values below 3 are “Not much”. Do you need to account for missing data?\n\n\n# &gt;\n\n\nUse rowwise() to calculate the mean rating for the children and other_dogs columns in a column called mean_rating.\n\n\n# &gt;\n\n\nCreate a column called coat_type2 that categorizes the coat_type values in the following way and puts it after coat_type:\n\n\n“very petable” = “Smooth”, “Silky”, “Wavy”\n“petable” = “Double”, “Curly”\n“not petable” = “Wiry”, “Hairless”, “Rough”, “Corded”\n\n\n# &gt;"
  },
  {
    "objectID": "code/10_selecting.html",
    "href": "code/10_selecting.html",
    "title": "Selecting columns",
    "section": "",
    "text": "For these exercises, we’ll use the iris data set build into base R.\n\nView iris to see what it looks like.\n\n\n# &gt;\n\n\nReturn a data frame with only the sepal columns using inclusion.\n\n\n# &gt;\n\n\nReturn a data frame with only the sepal columns using a helper function.\n\n\n# &gt;\n\n\nReturn a data frame with the sepal and petal columns using a helper function.\n\n\n# &gt;\n\n\nReturn a data frame with the sepal and petal columns using exclusion.\n\n\n# &gt;\n\n\nMove Species to be the first column using select() and a helper function.\n\n\n# &gt;\n\n\nMove Species to be the first column using relocate().\n\n\n# &gt;\n\n\nRename Species to species using select() and a helper function.\n\n\n# &gt;\n\n\nRename Species to species using rename().\n\n\n# &gt;"
  },
  {
    "objectID": "code/09_validating.html",
    "href": "code/09_validating.html",
    "title": "Validating data",
    "section": "",
    "text": "For these exercises, we’ll use the mtcars data set build into base R.\n\nWhat are the dimensions of mtcars?\n\n\n# &gt;\n\n\nIn one line of code, view the data types for all of the columns in mtcars.\n\n\n# &gt;\n\n\nWhat is the range of values for the mpg column?\n\n\n# &gt;\n\n\nWhat are all of the possible values used in gear?\n\n\n# &gt;\n\n\nCheck whether the value 5 is found in the carb column.\n\n\n# &gt;\n\n\nDo any columns have missing values?\n\n\n# &gt;\n\n\nWhat is the 3rd quartile for mpg?\n\n\n# &gt;\n\n\nCheck whether all horsepower (hp) values fall between 50 and 300. Which row numbers fall out of this range?\n\n\n# &gt;\n\n\nMake a codebook for mtcars.\n\n\n# &gt;"
  },
  {
    "objectID": "code/08_importing.html",
    "href": "code/08_importing.html",
    "title": "Importing data",
    "section": "",
    "text": "Download https://jeffreyrstevens.github.io/dpavir2025/data/newdata.csv and save it in your data/ directory.\nImport newdata.csv into an object called newdata using read.csv().\n\n\n# &gt;\n\n\nImport https://jeffreyrstevens.github.io/dpavir2025/data/newdata2.csv directly from the URL using readr::read_csv().\n\n\n# &gt;\n\n\nRepeat the previous import of newdata2.csv, but add the arguments col_select = c(\"Breed\", \"links\") and show_col_types = FALSE and name the object newdata3.\n\n\n# &gt;\n\n\nExport the newdata3 data as a CSV file to your data/ directory.\n\n\n# &gt;"
  },
  {
    "objectID": "code/07_datastructures.html",
    "href": "code/07_datastructures.html",
    "title": "Data structures",
    "section": "",
    "text": "Vectors\nCreate a vector called dog_names with the values Bella, Daisy, and Max.\n\n# &gt;\n\nCreate a vector called sex with the values Female, Male, and Male.\n\n# &gt;\n\nUse the index operator to print to console only Daisy and Max from dog_names.\n\n# &gt;\n\nReplace the Daisy entry with Luna and print dog_names to console.\n\n# &gt;\n\nTest whether the name Sophie is contained in the vector dog_names.\n\n# &gt;\n\n\n\nLists\nCopy/paste and run this code: (mylist &lt;- list(a = 1:4, b = c(4, 3, 8, 5), c = LETTERS[10:15], d = c(\"yes\", \"yes\")))\n\n# &gt;\n\nCheck the data types for each list element individually.\n\n# &gt;\n\nCheck the data types for each list element with one command.\n\n# &gt;\n\nCombine list elements a and b into a single vector.\n\n# &gt;\n\n\n\nData frames\nCreate a data frame called mydf with three columns: x, y, and z and five rows. For x assign any five numbers, for y assign any five character strings, and for z assign any five logical values.\n\n# &gt;\n\nCreate a data frame called dogs that combines the dog_names and sex vectors and print to console.\n\n# &gt;\n\nPrint to console just Luna’s row.\n\n# &gt;\n\nPrint to console the number of rows in dogs.\n\n# &gt;"
  },
  {
    "objectID": "code/06_datatypes.html",
    "href": "code/06_datatypes.html",
    "title": "Data types",
    "section": "",
    "text": "aa &lt;- 3\nbb &lt;- 3L\ncc &lt;- \"3\"\ndd &lt;- \"TRUE\"\nee &lt;- TRUE\nff &lt;- \"NA\"\ngg &lt;- NA\n\n# &gt;"
  },
  {
    "objectID": "code/06_datatypes.html#creating-objects",
    "href": "code/06_datatypes.html#creating-objects",
    "title": "Data types",
    "section": "",
    "text": "aa &lt;- 3\nbb &lt;- 3L\ncc &lt;- \"3\"\ndd &lt;- \"TRUE\"\nee &lt;- TRUE\nff &lt;- \"NA\"\ngg &lt;- NA\n\n# &gt;"
  },
  {
    "objectID": "code/06_datatypes.html#checking-data-types",
    "href": "code/06_datatypes.html#checking-data-types",
    "title": "Data types",
    "section": "Checking data types",
    "text": "Checking data types\n\nGuess what data type each object is then check it.\n\n# &gt;\n\n\n\nHow do we test if aa is an integer?\n\n# &gt;\n\n\n\nWhat will is.logical(dd) return?\n\n# &gt;\n\n\n\nHow do we test if ff and gg are NA?\n\n# &gt;"
  },
  {
    "objectID": "code/06_datatypes.html#checking-if-objects-are-the-same",
    "href": "code/06_datatypes.html#checking-if-objects-are-the-same",
    "title": "Data types",
    "section": "Checking if objects are the same",
    "text": "Checking if objects are the same\n\nAre aa and bb the same? How do we test this?\n\n# &gt;\n\n\n\nWhat about aa and cc?\n\n# &gt;\n\n\n\nA safer comparison tool is identical(). Test if aa and bb are identical. Then try aa and cc.\n\n# &gt;\n\n\n\nNow see if aa is identical to 3 and if bb is identical to 3L.\n\n# &gt;"
  },
  {
    "objectID": "code/03_coding_answers.html",
    "href": "code/03_coding_answers.html",
    "title": "Coding basics",
    "section": "",
    "text": "Let’s go to R’s console, which is the direct connection to the R engine. In the console, you give R a command, and it returns the output."
  },
  {
    "objectID": "code/03_coding_answers.html#assignment",
    "href": "code/03_coding_answers.html#assignment",
    "title": "Coding basics",
    "section": "Assignment",
    "text": "Assignment\nRemember our text string with our names?\n\"My name is Jeff!\"\nIt is repetitive to have to copy/paste text. We can assign things to objects, which store the contents in a variable. The assignment operator &lt;- assigns the value of the right hand side to the object on the left hand side. Use the &lt;- operator to assign the name text to an object called my_name.\n\nmy_name &lt;- \"My name is Jeff!\"\n\nNow print the contents of my_name by just typing it into the console.\n\nmy_name\n\n[1] \"My name is Jeff!\"\n\n\nNow apply the toupper() function to my_name rather than the actual character string.\n\ntoupper(my_name)\n\n[1] \"MY NAME IS JEFF!\"\n\n\nHow do we find out all of the arguments for the toupper() function?\nLet’s specify the argument names not just the value.\n\ntoupper(x = my_name)\n\n[1] \"MY NAME IS JEFF!\"\n\n\nPress the up arrow to navigate to the assignment command and change the object name to something different."
  },
  {
    "objectID": "code/03_coding_answers.html#names",
    "href": "code/03_coding_answers.html#names",
    "title": "Coding basics",
    "section": "Names",
    "text": "Names\nWhy did I assign the text to the object my_name and not, for example, names?\nWhat all is wrong with the file name Qualtrics experiment 3 ~ 01/05/22 [final_FINAL].xlsx?\nWhat would be a better name for this file?\nWhy is this date problematic? 01/05/25\nWhat would be an ISO 8601 format for this date?\nWhy is it useful to include dates in files names?"
  },
  {
    "objectID": "code/01_introduction_answers.html",
    "href": "code/01_introduction_answers.html",
    "title": "Introduction",
    "section": "",
    "text": "Let’s go to R’s console, which is the direct connection to the R engine. In the console, you give R a command, and it returns the output."
  },
  {
    "objectID": "code/01_introduction_answers.html#numerical-operations",
    "href": "code/01_introduction_answers.html#numerical-operations",
    "title": "Introduction",
    "section": "Numerical operations",
    "text": "Numerical operations\nR can be a very fancy calculator. Let’s do some calculations by entering numerical operations into the console. How many seconds are there in a year?\n\n60 * 60 * 24 * 365\n\n[1] 31536000\n\n\nOn average, how many days are in each month of a leap year?\n\n 366 / 12\n\n[1] 30.5"
  },
  {
    "objectID": "code/01_introduction_answers.html#text",
    "href": "code/01_introduction_answers.html#text",
    "title": "Introduction",
    "section": "Text",
    "text": "Text\nR also can store, manipulate, and return text. But working with text requires wrapping the characters in quotation marks (either \" or '). Type this out and replace &lt;name&gt; with your name: \"My name is &lt;name&gt;!\".\n\n\"My name is Jeff!\"\n\n[1] \"My name is Jeff!\"\n\n\nYou can also apply functions to text. If we want to yell our names, let’s convert the string of characters to upper case with the toupper() function. Put the previous text inside the parentheses of toupper().\n\ntoupper(\"My name is Jeff!\")\n\n[1] \"MY NAME IS JEFF!\"\n\n\nPress the up arrow ⬆️ to place previous commands in the console. Navigate to the previous command and change the text a bit."
  },
  {
    "objectID": "code/01_introduction_answers.html#packages",
    "href": "code/01_introduction_answers.html#packages",
    "title": "Introduction",
    "section": "Packages",
    "text": "Packages\nInstall the {nycflights13} package. Remember how to do that?\n\ninstall.packages(\"nycflights13\")\n\nYou should have already installed the {palmerpenguins} package. We want to look at the penguins data set from that package. What do we need to do first to get access to things in the package?\n\nlibrary(palmerpenguins)\n\nView the data set by typing penguins into the console.\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "code/01_introduction_answers.html#plot-data",
    "href": "code/01_introduction_answers.html#plot-data",
    "title": "Introduction",
    "section": "Plot data",
    "text": "Plot data\nExcellent! Let’s say we want to make a scatterplot of the bill length vs. the bill depth for all birds. We can use the plot() function for this by passing the y-variable name, a tilde ~, the x-variable name, and then the name of the dataset. Something like plot(y ~ x, data = dataset). Replace these variables with the ones for bill length and depth in the penguins dataset.\n\nplot(bill_length_mm ~ bill_depth_mm, data = penguins)\n\n\n\n\n\n\n\n\nHey, hey! We have a plot! 📊 Sweet! We’ve viewed and plotted data. Well done! 🎉 💪"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "PSYC 971 Data Processing and Visualization in R",
    "section": "",
    "text": "MWF 3:30-4:30pm\nBurnett 80\nJeff Stevens (he/him)\nVersion 2025-01-26"
  },
  {
    "objectID": "syllabus.html#course-description",
    "href": "syllabus.html#course-description",
    "title": "PSYC 971 Data Processing and Visualization in R",
    "section": "Course description",
    "text": "Course description\nThis course will introduce students to the fundamental concepts and methods used in the R statistical software package (focusing on the tidyverse perspective) to process, visualize, and disseminate data."
  },
  {
    "objectID": "syllabus.html#prerequisites",
    "href": "syllabus.html#prerequisites",
    "title": "PSYC 971 Data Processing and Visualization in R",
    "section": "Prerequisites",
    "text": "Prerequisites\nPSYC 350 or equivalent course in introductory research design and analysis. No previous coding experience is required."
  },
  {
    "objectID": "syllabus.html#course-objectives",
    "href": "syllabus.html#course-objectives",
    "title": "PSYC 971 Data Processing and Visualization in R",
    "section": "Course objectives",
    "text": "Course objectives\n\nLearn how to import, process, and plot data in R using tidyverse functions\nGain a basic understanding of general programming principles applied to data preparation, analysis, and visualization\nApply principles of good data visualization to plot data in an informative way\nProduce reproducible manuscripts and presentations with R code embedded"
  },
  {
    "objectID": "syllabus.html#course-expectations",
    "href": "syllabus.html#course-expectations",
    "title": "PSYC 971 Data Processing and Visualization in R",
    "section": "Course expectations",
    "text": "Course expectations\nThe primary aim of this course is to teach you how to use R. Therefore, reading the assigned texts in advance, attending class, and participating in discussions and exercises is integral to this course and expected. Learning R follows the ‘use it or lose it’ mantra. Plan on working on it a little bit almost every day. Please don’t get behind, as we move quickly through the course, and much of what we learn is cumulative."
  },
  {
    "objectID": "syllabus.html#student-hours",
    "href": "syllabus.html#student-hours",
    "title": "PSYC 971 Data Processing and Visualization in R",
    "section": "Student hours",
    "text": "Student hours\nJeff has time to meet with students Tuesday mornings from 10-11am in his office at B83 East Stadium (CB3). Also, he had a coding hour scheduled and Wednesday afternoons from 1-2pm on Zoom. During this time, you can code on your own with your camera and mic turned off and the unmute to ask questions.\nIn addition to Jeff’s student hours, Quantitative Assistant Harper Jones is available to help with R-related issues. Harper took the course previously and is proficient in R. Note that she is available for general consultation on topics covered in the course not for specific questions about course requirements or assignments. So you can go to her with general R understanding/debugging issues. Find out more about her consultation services at the Canvas resources page for links to her calendar to schedule a time to meet."
  },
  {
    "objectID": "syllabus.html#computing-requirements",
    "href": "syllabus.html#computing-requirements",
    "title": "PSYC 971 Data Processing and Visualization in R",
    "section": "Computing requirements",
    "text": "Computing requirements\nYou will need to bring a fully charged laptop to each class meeting to run in-class coding. While we will not be using very large data sets or running massive computations, having a faster computer will allow you to quickly proceed through the coding. On this laptop, you will need to install R, RStudio, and a number of R packages."
  },
  {
    "objectID": "syllabus.html#readings",
    "href": "syllabus.html#readings",
    "title": "PSYC 971 Data Processing and Visualization in R",
    "section": "Readings",
    "text": "Readings\nThis course will draw from a number of resources, primarily:\n\nHadley Wickham & Garrett Grolemund’s R for Data Science 1st edition.\nHadley Wickham, Garrett Grolemund, and Mine Çetinkaya-Rundel’s R for Data Science 2nd edition.\nClause Wilke’s Fundamentals of Data Visualization.\n\nOther readings are available in the [course materials][materials.qmd]."
  },
  {
    "objectID": "syllabus.html#assignments",
    "href": "syllabus.html#assignments",
    "title": "PSYC 971 Data Processing and Visualization in R",
    "section": "Assignments",
    "text": "Assignments\n\nLearning journal\nAs you learn R, you will pick up all kinds of little gems to help you use it. For example, to add the pipe syntax |&gt; (something you’ll be doing a lot in the tidyverse), you can simply type Ctrl/Cmd-Shift-M. Keep a journal of these little tricks/hints that you are most excited about to submit at the end of the course. I recommend posting them on social media throughout the semester.\n\n\nExercises\nMost class meetings will be followed with sets of exercises to help you practice implementing the concepts discussed. These will be assessed as complete or incomplete. \n\n\nCheck-ins\nAt the end of each module, there will be a summative assignment checking that you understand that module’s material.\n\n\nProjects\nThe aim of this course is for you to be able to use R to process, visualize, and disseminate your data. Therefore, there will be two projects where you apply what you learn in class to your own data. The first project will involve wrangling your data into tidy format and editing values. The second project will involve plotting and presenting your data.\n\n\n\n\n\n\n\n\nWrapped\nCombine everything that we’ve learned to create your own Spotify Wrapped or other summary. If you have a Spotify account and have used it in the last year, download your data. Otherwise, use an existing data set. Then process that data to find the most listened to artists and songs and plot your results. Finally, put these together into a Quarto slide deck."
  },
  {
    "objectID": "syllabus.html#grades",
    "href": "syllabus.html#grades",
    "title": "PSYC 971 Data Processing and Visualization in R",
    "section": "Grades",
    "text": "Grades\n\nGrade scale\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA+\n96.5-100\nB+\n86.5-89.4\nC+\n76.5-79.4\nD\n59.5-69.4\nF\n0-59.4\n\n\nA\n96.5-100\nB\n86.5-89.4\nC\n69.5-76.4\n\n\n\n\n\n\nA-\n89.5-92.4\nB-\n79.5-82.4\n\n\n\n\n\n\n\n\n\nGrades of B- or higher (&gt;= 79.5) count as passing for Pass/No Pass grading.\n\n\nAssessment\n\n\n\nGrade component\nGrade percentage\n\n\n\n\nExercises\n20\n\n\nCheck-ins\n35\n\n\nLearning journal\n5\n\n\nProjects\n25\n\n\nWrapped\n15"
  },
  {
    "objectID": "syllabus.html#course-resources-and-policies",
    "href": "syllabus.html#course-resources-and-policies",
    "title": "PSYC 971 Data Processing and Visualization in R",
    "section": "Course resources and policies",
    "text": "Course resources and policies\nStudents are responsible for knowing the university policies and resources.\n\nInstructional continuity plan\nIf in-person classes are canceled, you will be notified of the instructional continuity plan for this class by email.\n\n\nDiversity, inclusion, and wellness\nWe must treat every individual with respect. We are diverse in many ways, and this diversity is fundamental to building and maintaining an equitable and inclusive campus community. Diversity can refer to multiple ways that we identify ourselves, including but not limited to race, color, national origin, language, sex, disability, age, sexual orientation, gender identity, religion, creed, ancestry, belief, veteran status, or genetic information. Each of these diverse identities, along with many others not mentioned here, shape the perspectives that students and faculty bring to our campus. I would like to create a learning environment in this course that supports a diversity of thoughts, perspectives and experiences, and honors participant identities. To help accomplish this:\n\nIf you have a name and/or set of pronouns that differ from those that appear in your official records, please let me know in the course introduction form.\nI (like many people) am still in the process of learning about diverse perspectives and identities. If something was said in class (by me or anyone else) that was uninformed or insensitive or made you feel uncomfortable, please feel free to raise the issue in class, contact me to schedule an opportunity to discuss the issue in person, or submit anonymous feedback via the course feedback form. I recognize the power differential between student and professor, but I promise you, neither your grade nor my opinion of you will be impacted by your willingness to bring issues to me.\nIf you feel like your performance in the class is being impacted by your experiences outside of class, please don’t hesitate to talk with me. Your wellness is important to me, and I do not want this course to adversely affect your mental health. I am invested in your understanding of the course material and am happy to make accommodations to achieve the longer-term goal of you learning to use R. Beyond requesting specific accommodations, if you notice something about the class structure or assignments that could be made to improve universal accessibility, please let me know. Sometimes you might be able to work around a barrier, and not go to the trouble of going through the SSD to request a formal accommodation – but over time, working around barriers takes a toll. If I am made aware of those issues, we are better able to remove them so you can focus fully on your work.\nUnfortunately, incidents of bias or discrimination do occur, whether intentional or unintentional. They contribute to creating an unwelcoming environment for individuals and groups at the university. Therefore, the university encourages anyone who experiences or observes unfair or hostile treatment on the basis of identity to speak out for justice and support, within the moment of the incident or after the incident has passed. As noted above, if this happens in the context of this class, I encourage you to come talk to me so we can figure out together how to address the issue and find you the support you need. At a broader institutional level, resources are available at Title IX Resources and Support and incidents can be reported through the TIPS system.\n\n\n\nMental health and well-being resources\nUNL offers a variety of options to students to aid them in dealing with stress and adversity. Counseling and Psychological & Services (CAPS) is a multidisciplinary team of psychologists and counselors that works collaboratively with Nebraska students to help them explore their feelings and thoughts and learn helpful ways to improve their mental, psychological and emotional well-being when issues arise. CAPS can be reached by calling 402-472-7450. Well-Being Collective provides one-on-one well-being coaching to any student who wants to enhance their well-being. Trained well-being coaches help students create and be grateful for positive experiences, practice resilience and self-compassion, and find support as they need it. BRRWB can be reached by calling 402-472-8770.\n\n\nAccommodations for students with disabilities\nThe University strives to make all learning experiences as accessible as possible. If you anticipate or experience barriers based on your disability (including mental health, chronic or temporary medical conditions), please let me know immediately so that we can discuss options privately. To establish reasonable accommodations, I may request that you register with Services for Students with Disabilities (SSD). If you are eligible for services and register with their office, make arrangements with me as soon as possible to discuss your accommodations so they can be implemented in a timely manner. SSD contact information: 117 Louise Pound Hall; 402-472-3787.\n\n\nClass materials use and distribution\nMost class materials (anything on this website) are publicly available for anyone to use, assuming they follow the Creative Commons Attribution 4.0 International Public License (CC BY 4.0) as described in the main page of the website. Some assignments are not publicly available.\n\n\nAcademic dishonesty policy\nYou are responsible for knowing and adhering to the UNL Student Code of Conduct. Any student found guilty of academic dishonesty, including (but not limited to) cheating, falsification, and plagiarism, will fail the course and may be subject to disciplinary sanctions.\n\nCheating: Copying or attempting to copy from an academic test or examination of another student; using or attempting to use unauthorized materials, information, notes, study aids or other devices for an academic test, examination or exercise; engaging or attempting to engage the assistance of another individual in misrepresenting the academic performance of a student; or communication information in an unauthorized manner to another person for an academic test, examination or exercise.\nFabrication or Falsification: Falsifying or fabricating any information or citation in any academic exercise, work, speech, research, test or examination. Falsification is the alteration of information, while fabrication is the invention or counterfeiting of information.\nPlagiarism: Presenting the work of another as one’s own (i.e., without proper acknowledgement of the source) and submitting examination, theses, reports, speeches, drawings, laboratory notes or other academic work in whole or in part as one’s own when such work has been prepared by another person or copied from another person. Materials covered by this prohibition include, but are not limited to, text, video, audio, images, photographs, websites, electronic and online materials, and other intellectual property. Copying material from other sources with minor modifications is considered plagiarism. \nComplicity in Academic Dishonesty: Helping or attempting to help another student to commit an act of academic dishonesty.\nImpermissible Collaboration: Collaborating on any academic exercise, work, speech, test or examination unless expressly authorized by the faculty member. It is the obligation of the student to know whether collaboration is permitted.\nAI/LMMs: With the proliferation of artificial intelligence (AI) and large language models (LLMs) like ChatGPT and GitHub CoPilot, it is tempting to use these when you code. Though these tools can be useful once you know how to code, they can be impediments when you are learning to code. In particular do not just copy/paste code from an LLM. Asking an LLM to generate code is problematic because they don’t know anything about the code itself—they just output code that they’ve seen in their training data. And they can’t run the code to know if it even works. If you have some code that you don’t understand, LLMs can be useful to explain existing code (check out AI TutoR for how to use AI to support your learning). But please don’t use LLMs to generate code for this course. And do not use LLMs to write any text for your assignments."
  },
  {
    "objectID": "syllabus.html#course-schedule",
    "href": "syllabus.html#course-schedule",
    "title": "PSYC 971 Data Processing and Visualization in R",
    "section": "Course schedule",
    "text": "Course schedule\n\nNote this is tentative!\n\n\n\n\n\n\nWeek\nDate\nModule\nTopic\n\n\n\n\n1\n2025-01-20\n1\nMLK Day\n\n\n\n2025-01-22\n1\nCourse introduction\n\n\n\n2025-01-24\n1\nWorking in RStudio\n\n\n2\n2025-01-27\n1\nCoding basics\n\n\n\n2025-01-29\n1\nWorkflows\n\n\n\n2025-01-31\n1\nLiterate programming\n\n\n3\n2025-02-03\n2\nData types\n\n\n\n2025-02-05\n2\nData structures\n\n\n\n2025-02-07\n2\nImporting data\n\n\n4\n2025-02-10\n2\nValidating data\n\n\n\n2025-02-12\n3\nSelecting columns\n\n\n\n2025-02-14\n3\nMutating columns\n\n\n5\n2025-02-17\n3\nPiping commands\n\n\n\n2025-02-19\n3\nFiltering rows\n\n\n\n2025-02-21\n3\nSummarizing rows\n\n\n6\n2025-02-24\n4\nPivoting data\n\n\n\n2025-02-26\n4\nSeparating data\n\n\n\n2025-02-28\n4\nMerging columns\n\n\n7\n2025-03-03\n4\nMerging rows\n\n\n\n2025-03-05\n5\nNumbers\n\n\n\n2025-03-07\n5\nStrings\n\n\n8\n2025-03-10\n5\nMatching patterns\n\n\n\n2025-03-12\n5\nFactors\n\n\n\n2025-03-14\n5\nProject workday\n\n\n9\n2025-03-17\n\nSpring break\n\n\n\n2025-03-19\n\nSpring break\n\n\n\n2025-03-21\n\nSpring break\n\n\n10\n2025-03-24\n6\nFunctions\n\n\n\n2025-03-26\n6\nIteration\n\n\n\n2025-03-28\n7\nGrammar of graphics I\n\n\n11\n2025-03-31\n7\nGrammar of graphics II\n\n\n\n2025-04-02\n7\nDesign and themes\n\n\n\n2025-04-04\n7\nColor\n\n\n12\n2025-04-07\n8\nPlotting distributions: histograms\n\n\n\n2025-04-09\n8\nPlotting distributions: boxplots\n\n\n\n2025-04-11\n8\nPlotting amounts: bar charts\n\n\n13\n2025-04-14\n8\nPlotting x-y data: associations\n\n\n\n2025-04-16\n\nNebraska Symposium\n\n\n\n2025-04-18\n8\nPlotting x-y data: time series\n\n\n14\n2025-04-21\n8\nPlotting x-y data: categories\n\n\n\n2025-04-23\n9\nAdjusting axes\n\n\n\n2025-04-25\n9\nAnnotating plots\n\n\n15\n2025-04-28\n9\nPlotting challenge\n\n\n\n2025-04-30\n10\nTables\n\n\n\n2025-05-02\n10\nPublications\n\n\n16\n2025-05-05\n10\nAdvanced R Markdown\n\n\n\n2025-05-07\n11\nStatistics I\n\n\n\n2025-05-09\n11\nStatistics II"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#code-chunk-options",
    "href": "slides/41_advrmarkdown.html#code-chunk-options",
    "title": "Advanced R Markdown",
    "section": "Code chunk options",
    "text": "Code chunk options\nGo in the {r} header of code chunks (in one line)\n\n\n\nlabel = my-chunk - chunk label\n\neval = TRUE - evaluates code chunk\n\necho = TRUE - displays source code in document\n\ninclude = TRUE - displays chunk output in document\n\nmessage = TRUE - displays messages in document\n\nwarning = TRUE - displays warnings in document\n\nerror = TRUE - displays errors in document"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#code-chunk-options-1",
    "href": "slides/41_advrmarkdown.html#code-chunk-options-1",
    "title": "Advanced R Markdown",
    "section": "Code chunk options",
    "text": "Code chunk options\nGo in the {r} header of code chunks (in one line)\n```{r my-chunk, echo = FALSE, message = FALSE, warning = FALSE}\n```"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#code-chunk-options-2",
    "href": "slides/41_advrmarkdown.html#code-chunk-options-2",
    "title": "Advanced R Markdown",
    "section": "Code chunk options",
    "text": "Code chunk options\nCan also be separated from header using #|\n```{r}\n#| my-chunk, echo = FALSE, message = FALSE\n#| warning = FALSE\n```"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#global-options",
    "href": "slides/41_advrmarkdown.html#global-options",
    "title": "Advanced R Markdown",
    "section": "Global options",
    "text": "Global options\nSet options globally with knitr::opts_chunk$set()\n```{r setup, include = FALSE}\nknitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)\n```"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#figures-generated-in-chunks",
    "href": "slides/41_advrmarkdown.html#figures-generated-in-chunks",
    "title": "Advanced R Markdown",
    "section": "Figures generated in chunks",
    "text": "Figures generated in chunks\n\nggplot(penguins, aes(bill_length_mm, bill_depth_mm)) + geom_point()"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#figure-scaling",
    "href": "slides/41_advrmarkdown.html#figure-scaling",
    "title": "Advanced R Markdown",
    "section": "Figure scaling",
    "text": "Figure scaling\nfig.width = 5, fig.height = 5\n\nggplot(penguins, aes(bill_length_mm, bill_depth_mm)) + geom_point()"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#figure-scaling-1",
    "href": "slides/41_advrmarkdown.html#figure-scaling-1",
    "title": "Advanced R Markdown",
    "section": "Figure scaling",
    "text": "Figure scaling\nfig.width = 3, fig.height = 3\n\nggplot(penguins, aes(bill_length_mm, bill_depth_mm)) + geom_point()"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#output-widthheight",
    "href": "slides/41_advrmarkdown.html#output-widthheight",
    "title": "Advanced R Markdown",
    "section": "Output width/height",
    "text": "Output width/height\nout.width = \"30%\", out.height = \"30%\"\n\nggplot(penguins, aes(bill_length_mm, bill_depth_mm)) + geom_point()"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#figure-alignment",
    "href": "slides/41_advrmarkdown.html#figure-alignment",
    "title": "Advanced R Markdown",
    "section": "Figure alignment",
    "text": "Figure alignment\nfig.align = \"center\"\n\nggplot(penguins, aes(bill_length_mm, bill_depth_mm)) + geom_point()"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#figure-caption",
    "href": "slides/41_advrmarkdown.html#figure-caption",
    "title": "Advanced R Markdown",
    "section": "Figure caption",
    "text": "Figure caption\nfig.cap = \"My figure caption\"\n\nggplot(penguins, aes(bill_length_mm, bill_depth_mm)) + geom_point()\n\n\n\nFigure 1: My figure caption"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#figure-alt-text",
    "href": "slides/41_advrmarkdown.html#figure-alt-text",
    "title": "Advanced R Markdown",
    "section": "Figure alt text",
    "text": "Figure alt text\nfig.alt = \"Scatterplot of penguin bill length by depth.\"\n\nggplot(penguins, aes(bill_length_mm, bill_depth_mm)) + geom_point()\n\n\nMy figure caption"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#figure-files",
    "href": "slides/41_advrmarkdown.html#figure-files",
    "title": "Advanced R Markdown",
    "section": "Figure files",
    "text": "Figure files\nknitr::include_graphics()\n\nknitr::include_graphics(\"https://quarto.org/docs/authoring/images/crossref-figure.png\")"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#sec-cross-reference",
    "href": "slides/41_advrmarkdown.html#sec-cross-reference",
    "title": "Advanced R Markdown",
    "section": "Cross reference figures/tables",
    "text": "Cross reference figures/tables\n\n\nMake sure code chunk has a label and a caption\nUse a bookdown output format (e.g., bookdown::pdf_document2, papaja::apa6_pdf, thesisdown)\nInsert \\ref{fig:chunk-label} for figures and \\ref{tab:chunk-label} for tables\nNote for Quarto, labels must start with fig- or tbl- and reference with @fig-label or @tbl-label (e.g., Figure 1)"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#cross-reference-sections",
    "href": "slides/41_advrmarkdown.html#cross-reference-sections",
    "title": "Advanced R Markdown",
    "section": "Cross reference sections",
    "text": "Cross reference sections\n\n\nLabel sections with {#slug}  (e.g., ## Cross reference figures/tables {#sec-cross-reference})\nCross reference with \\@ref(slug)\nFor Quarto, cross references must start with #sec- and are referenced with @sec-label (e.g., Section 4.1)"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#zotero",
    "href": "slides/41_advrmarkdown.html#zotero",
    "title": "Advanced R Markdown",
    "section": "Zotero",
    "text": "Zotero"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#zotero-1",
    "href": "slides/41_advrmarkdown.html#zotero-1",
    "title": "Advanced R Markdown",
    "section": "Zotero",
    "text": "Zotero\n\nInstall Better BibTeX extension\nCreate collection for project\nAdd references to collection\nExport Collection (check Keep Updated) to BibTeX"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#set-bibliography",
    "href": "slides/41_advrmarkdown.html#set-bibliography",
    "title": "Advanced R Markdown",
    "section": "Set bibliography",
    "text": "Set bibliography\n\nIn YAML header, assign bibliography to the project’s .bib file\n\n\nbibliography: zotero-output.bib\n\n\n\nIf using {papaja}’s r_ref() output\n\n\nbibliography: [\"zotero-output.bib\", \"r-references.bib\"]"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#insert-citations-manually",
    "href": "slides/41_advrmarkdown.html#insert-citations-manually",
    "title": "Advanced R Markdown",
    "section": "Insert citations manually",
    "text": "Insert citations manually\n\n\nFind BibTex key in Zotero (e.g., Stevens.etal.2023)\nInsert with [@citation.key]: [@Stevens.etal.2023] yields (Stevens et al., 2023)\nSeparate multiple citations with ;: [@Stevens.etal.2022; @Stevens.etal.2023] yields (Stevens et al., 2022, 2023)\nAdd prefixes and suffixes: [see @Stevens.etal.2023, pp. 25] yields (see Stevens et al., 2023, pp. 25)"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#insert-citations-manually-1",
    "href": "slides/41_advrmarkdown.html#insert-citations-manually-1",
    "title": "Advanced R Markdown",
    "section": "Insert citations manually",
    "text": "Insert citations manually\n\n\nUse parentheses only for date by removing brackets: @Stevens.etal.2023 yields Stevens et al. (2023)\nUse only year by adding -: [-@Stevens.etal.2023] yields (2023)\nAdd reference to bibliography without adding citation with\n\n\n\n---\nnocite: |\n  @Barela.etal.2023\n..."
  },
  {
    "objectID": "slides/41_advrmarkdown.html#insert-with-citr-add-in",
    "href": "slides/41_advrmarkdown.html#insert-with-citr-add-in",
    "title": "Advanced R Markdown",
    "section": "Insert with {citr} add-in",
    "text": "Insert with {citr} add-in\n\nInstall {citr} with remotes::install_github(\"crsh/citr\")\n\nRestart RStudio\nStart Zotero\nStart citr add-in, select Insert citations"
  },
  {
    "objectID": "slides/41_advrmarkdown.html#set-citation-style",
    "href": "slides/41_advrmarkdown.html#set-citation-style",
    "title": "Advanced R Markdown",
    "section": "Set citation style",
    "text": "Set citation style\n\nIn YAML header, assign csl to citation style .csl file\n\n\ncsl: apa7.csl\n\n\n\nGet CSL files from Zotero Style Repository"
  },
  {
    "objectID": "slides/29_color.html#source",
    "href": "slides/29_color.html#source",
    "title": "Color",
    "section": "Source",
    "text": "Source\nData Visualization in R\nSDS 375\nClaus O. Wilke"
  },
  {
    "objectID": "slides/29_color.html#uses-of-color-1",
    "href": "slides/29_color.html#uses-of-color-1",
    "title": "Color",
    "section": "Uses of color",
    "text": "Uses of color\n\nDistinguish categories (qualitative)\nRepresent ordered numeric values (sequential)\nRepresent binary numeric values (diverging)\nHighlight"
  },
  {
    "objectID": "slides/29_color.html#distinguish-categories",
    "href": "slides/29_color.html#distinguish-categories",
    "title": "Color",
    "section": "Distinguish categories",
    "text": "Distinguish categories"
  },
  {
    "objectID": "slides/29_color.html#represent-sequential-numeric-values",
    "href": "slides/29_color.html#represent-sequential-numeric-values",
    "title": "Color",
    "section": "Represent sequential numeric values",
    "text": "Represent sequential numeric values"
  },
  {
    "objectID": "slides/29_color.html#represent-diverging-numeric-values",
    "href": "slides/29_color.html#represent-diverging-numeric-values",
    "title": "Color",
    "section": "Represent diverging numeric values",
    "text": "Represent diverging numeric values"
  },
  {
    "objectID": "slides/29_color.html#highlight",
    "href": "slides/29_color.html#highlight",
    "title": "Color",
    "section": "Highlight",
    "text": "Highlight"
  },
  {
    "objectID": "slides/29_color.html#rgb-color-space",
    "href": "slides/29_color.html#rgb-color-space",
    "title": "Color",
    "section": "RGB color space",
    "text": "RGB color space\n\n\n\nred R (0-255): amount of red\ngreen G (0-255): amount of green\nblue B (0-255): amount of blue\n\n\n\n\nR\nG\nB\nhexcode\n\n\n\n0\n0\n0\n#000000\n\n\n255\n0\n0\n#FF0000 \n\n\n0\n255\n255\n#00FFFF \n\n\n128\n128\n128\n#808080 \n\n\n0\n158\n115\n#009E73 \n\n\n255\n255\n255\n#FFFFFF"
  },
  {
    "objectID": "slides/29_color.html#rgb-color-space-1",
    "href": "slides/29_color.html#rgb-color-space-1",
    "title": "Color",
    "section": "RGB color space",
    "text": "RGB color space\n\n\nHumans cannot reason well about the RGB color space"
  },
  {
    "objectID": "slides/29_color.html#hcl-color-space",
    "href": "slides/29_color.html#hcl-color-space",
    "title": "Color",
    "section": "HCL color space",
    "text": "HCL color space\n\n\nExplore HCL colors with colorspace::choose_color()"
  },
  {
    "objectID": "slides/29_color.html#avoid-high-chroma",
    "href": "slides/29_color.html#avoid-high-chroma",
    "title": "Color",
    "section": "Avoid high chroma",
    "text": "Avoid high chroma\n\n\nHigh chroma: Toys\n\n\nSource: Alexas_Fotos\n\n\nLow chroma: Elegance\n\n\nSource: Saviesa Home"
  },
  {
    "objectID": "slides/29_color.html#be-aware-of-color-vision-deficiency",
    "href": "slides/29_color.html#be-aware-of-color-vision-deficiency",
    "title": "Color",
    "section": "Be aware of color-vision deficiency",
    "text": "Be aware of color-vision deficiency\n5%–8% of men are color blind!"
  },
  {
    "objectID": "slides/29_color.html#consider-using-okabe-ito-scale",
    "href": "slides/29_color.html#consider-using-okabe-ito-scale",
    "title": "Color",
    "section": "Consider using Okabe-Ito scale",
    "text": "Consider using Okabe-Ito scale\n\n\n\n\n\n\n\n\nName\nHex code   \nR, G, B (0-255)\n\n\n\norange\n#E69F00\n230, 159, 0\n\n\nsky blue\n#56B4E9\n86, 180, 233\n\n\nbluish green\n#009E73\n0, 158, 115\n\n\nyellow\n#F0E442\n240, 228, 66\n\n\nblue\n#0072B2\n0, 114, 178\n\n\nvermilion\n#D55E00\n213, 94, 0\n\n\nreddish purple\n#CC79A7\n204, 121, 167\n\n\nblack\n#000000\n0, 0, 0"
  },
  {
    "objectID": "slides/29_color.html#consider-using-viridis",
    "href": "slides/29_color.html#consider-using-viridis",
    "title": "Color",
    "section": "Consider using viridis",
    "text": "Consider using viridis\n\n\n\nSource: viridis package"
  },
  {
    "objectID": "slides/29_color.html#using-color-scales-in-ggplot",
    "href": "slides/29_color.html#using-color-scales-in-ggplot",
    "title": "Color",
    "section": "Using color scales in ggplot",
    "text": "Using color scales in ggplot\n\n\n\n\n\n\n\n\n\nScale function\nData type\nPalette type\n\n\n\n\n\nscale_color_hue()                    \ndiscrete        \nqualitative                                                  \n\n\n\nscale_color_gradient()\ncontinuous\nsequential\n\n\n\nscale_color_gradient2()\ncontinuous\ndiverging\n\n\n\nscale_color_brewer()\ndiscrete\nqualitative, diverging, sequential\n\n\n\nscale_color_distiller()\ncontinuous\nqualitative, diverging, sequential\n\n\n\n\n\n\nReplace color with fill for shaded areas"
  },
  {
    "objectID": "slides/29_color.html#color-palettes-qualitative",
    "href": "slides/29_color.html#color-palettes-qualitative",
    "title": "Color",
    "section": "Color palettes: qualitative",
    "text": "Color palettes: qualitative\n\n\n\n\n\n\n\nscale_color_brewer()\n\n\n\n\nmpg |&gt; \n  ggplot(aes(x = displ, y = hwy, color = drv)) +\n  geom_jitter() +\n  labs(x = \"Displacement\", y = \"Highway fuel efficiency\") +\n  scale_color_brewer(palette = \"Accent\") +\n  theme(legend.position = c(0.8, 0.8))"
  },
  {
    "objectID": "slides/29_color.html#color-palettes-sequential",
    "href": "slides/29_color.html#color-palettes-sequential",
    "title": "Color",
    "section": "Color palettes: sequential",
    "text": "Color palettes: sequential\n\n\n\n\n\n\n\nscale_color_distiller()\n\n\n\n\nmpg |&gt; \n  ggplot(aes(x = displ, y = hwy, color = cty)) +\n  geom_jitter() +\n  labs(x = \"Displacement\", y = \"Highway fuel efficiency\") +\n  scale_color_distiller(palette = \"YlGnBu\") +\n  theme(legend.position = c(0.8, 0.8))"
  },
  {
    "objectID": "slides/29_color.html#color-palettes-diverging",
    "href": "slides/29_color.html#color-palettes-diverging",
    "title": "Color",
    "section": "Color palettes: diverging",
    "text": "Color palettes: diverging\n\n\n\n\n\n\n\nscale_color_distiller()\n\n\n\n\nmpg |&gt; \n  ggplot(aes(x = displ, y = hwy, color = cty)) +\n  geom_jitter() +\n  labs(x = \"Displacement\", y = \"Highway fuel efficiency\") +\n  scale_color_distiller(palette = \"Spectral\") +\n  theme(legend.position = c(0.8, 0.8))"
  },
  {
    "objectID": "slides/29_color.html#additional-palettes",
    "href": "slides/29_color.html#additional-palettes",
    "title": "Color",
    "section": "Additional palettes",
    "text": "Additional palettes\n\nlibrary(paletteer)"
  },
  {
    "objectID": "slides/29_color.html#additional-palettes-1",
    "href": "slides/29_color.html#additional-palettes-1",
    "title": "Color",
    "section": "Additional palettes",
    "text": "Additional palettes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSwitch to R script"
  },
  {
    "objectID": "slides/29_color.html#lets-code",
    "href": "slides/29_color.html#lets-code",
    "title": "Color",
    "section": "Let’s code!",
    "text": "Let’s code!\nColor [Rmd]"
  },
  {
    "objectID": "slides/27_grammar2.html#set-up",
    "href": "slides/27_grammar2.html#set-up",
    "title": "Grammar of graphics II",
    "section": "Set-up",
    "text": "Set-up\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "slides/27_grammar2.html#seven-componentslayers-of-ggplots",
    "href": "slides/27_grammar2.html#seven-componentslayers-of-ggplots",
    "title": "Grammar of graphics II",
    "section": "Seven components/layers of ggplots",
    "text": "Seven components/layers of ggplots\n\nData\nMappings – maps data to properties of geom\nGeom – represents data\nStat – transforms data\nPosition – control placement of data on coordinate\nFacet – split graph into subplots\nCoordinate – places data in coordinate system"
  },
  {
    "objectID": "slides/27_grammar2.html#map-data-to-visual-properties",
    "href": "slides/27_grammar2.html#map-data-to-visual-properties",
    "title": "Grammar of graphics II",
    "section": "Map data to visual properties",
    "text": "Map data to visual properties"
  },
  {
    "objectID": "slides/27_grammar2.html#map-data-columns-to-plot",
    "href": "slides/27_grammar2.html#map-data-columns-to-plot",
    "title": "Grammar of graphics II",
    "section": "Map data columns to plot",
    "text": "Map data columns to plot\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point()"
  },
  {
    "objectID": "slides/27_grammar2.html#size",
    "href": "slides/27_grammar2.html#size",
    "title": "Grammar of graphics II",
    "section": "Size",
    "text": "Size\n\n\nMap data to aesthetic\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy, size = cty)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nApply to all points\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point(size = 0.5)"
  },
  {
    "objectID": "slides/27_grammar2.html#transparency",
    "href": "slides/27_grammar2.html#transparency",
    "title": "Grammar of graphics II",
    "section": "Transparency",
    "text": "Transparency\n\n\nMap data to aesthetic\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy, alpha = cty)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nApply to all points\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point(alpha = 0.25)"
  },
  {
    "objectID": "slides/27_grammar2.html#shape",
    "href": "slides/27_grammar2.html#shape",
    "title": "Grammar of graphics II",
    "section": "Shape",
    "text": "Shape\n\n\nMap data to aesthetic\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy, shape = class)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nApply to all points\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point(shape = 5)"
  },
  {
    "objectID": "slides/27_grammar2.html#shapes",
    "href": "slides/27_grammar2.html#shapes",
    "title": "Grammar of graphics II",
    "section": "Shapes",
    "text": "Shapes"
  },
  {
    "objectID": "slides/27_grammar2.html#color",
    "href": "slides/27_grammar2.html#color",
    "title": "Grammar of graphics II",
    "section": "Color",
    "text": "Color\n\n\nMap data to aesthetic\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy, color = class)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nApply to all points\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point(color = \"dodgerblue\")"
  },
  {
    "objectID": "slides/27_grammar2.html#color-1",
    "href": "slides/27_grammar2.html#color-1",
    "title": "Grammar of graphics II",
    "section": "Color",
    "text": "Color\nWhat happens if we put it in the aesthetic?\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy, color = \"dodgerblue\")) +\n  geom_point()"
  },
  {
    "objectID": "slides/27_grammar2.html#color-points-lines-text-and-borders",
    "href": "slides/27_grammar2.html#color-points-lines-text-and-borders",
    "title": "Grammar of graphics II",
    "section": "Color: points, lines, text, and borders",
    "text": "Color: points, lines, text, and borders\n\n\nMap data to aesthetic\n\nmpg |&gt;\n  ggplot(aes(x = class, color = class)) +\n  geom_bar(show.legend = FALSE, linewidth = 2)\n\n\n\n\n\n\n\n\n\nApply to everything\n\nmpg |&gt;\n  ggplot(aes(x = class)) +\n  geom_bar(color = \"blue\", linewidth = 2)"
  },
  {
    "objectID": "slides/27_grammar2.html#fill-filled-areas",
    "href": "slides/27_grammar2.html#fill-filled-areas",
    "title": "Grammar of graphics II",
    "section": "Fill: filled areas",
    "text": "Fill: filled areas\n\n\nMap data to aesthetic\n\nmpg |&gt;\n  ggplot(aes(x = class, fill = class)) +\n  geom_bar(show.legend = FALSE)\n\n\n\n\n\n\n\n\n\nApply to everything\n\nmpg |&gt;\n  ggplot(aes(x = class)) +\n  geom_bar(fill = \"blue\")"
  },
  {
    "objectID": "slides/27_grammar2.html#lines",
    "href": "slides/27_grammar2.html#lines",
    "title": "Grammar of graphics II",
    "section": "Lines",
    "text": "Lines\nSeparated by groups\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy, group = drv)) +\n  geom_smooth()"
  },
  {
    "objectID": "slides/27_grammar2.html#linetype",
    "href": "slides/27_grammar2.html#linetype",
    "title": "Grammar of graphics II",
    "section": "Linetype",
    "text": "Linetype\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy, linetype = drv)) +\n  geom_smooth()"
  },
  {
    "objectID": "slides/27_grammar2.html#apply-line-aesthetics-to-groups",
    "href": "slides/27_grammar2.html#apply-line-aesthetics-to-groups",
    "title": "Grammar of graphics II",
    "section": "Apply line aesthetics to groups",
    "text": "Apply line aesthetics to groups\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy, color = drv)) +\n  geom_smooth(show.legend = FALSE)"
  },
  {
    "objectID": "slides/27_grammar2.html#apply-aesthetics-to-one-geom",
    "href": "slides/27_grammar2.html#apply-aesthetics-to-one-geom",
    "title": "Grammar of graphics II",
    "section": "Apply aesthetics to one geom",
    "text": "Apply aesthetics to one geom\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point(aes(color = class)) +\n  geom_smooth()"
  },
  {
    "objectID": "slides/27_grammar2.html#apply-aesthetics-differently-to-geoms",
    "href": "slides/27_grammar2.html#apply-aesthetics-differently-to-geoms",
    "title": "Grammar of graphics II",
    "section": "Apply aesthetics differently to geoms",
    "text": "Apply aesthetics differently to geoms\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  geom_smooth(aes(linetype = drv))"
  },
  {
    "objectID": "slides/27_grammar2.html#bands-have-aesthetics-too",
    "href": "slides/27_grammar2.html#bands-have-aesthetics-too",
    "title": "Grammar of graphics II",
    "section": "Bands have aesthetics, too",
    "text": "Bands have aesthetics, too\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth(aes(color = drv, fill = drv))"
  },
  {
    "objectID": "slides/27_grammar2.html#statistical-transformations-1",
    "href": "slides/27_grammar2.html#statistical-transformations-1",
    "title": "Grammar of graphics II",
    "section": "Statistical transformations",
    "text": "Statistical transformations\n\nggplot can calculate statistics on the fly\nmany geoms have underlying statistical transformation\n\n\ndiamonds\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows"
  },
  {
    "objectID": "slides/27_grammar2.html#bar-plots",
    "href": "slides/27_grammar2.html#bar-plots",
    "title": "Grammar of graphics II",
    "section": "Bar plots",
    "text": "Bar plots\nCount observations of variable types with stat_count()\n\ndiamonds |&gt;\n  ggplot(aes(x = cut)) +\n  geom_bar()"
  },
  {
    "objectID": "slides/27_grammar2.html#summarize-data",
    "href": "slides/27_grammar2.html#summarize-data",
    "title": "Grammar of graphics II",
    "section": "Summarize data",
    "text": "Summarize data\n\n\nstat_summary()\n\ndiamonds |&gt;\n  ggplot(aes(x = cut, y = depth)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nPlot mean and standard error\n\ndiamonds |&gt;\n  ggplot(aes(x = cut, y = depth)) +\n  stat_summary()"
  },
  {
    "objectID": "slides/27_grammar2.html#summarize-data-1",
    "href": "slides/27_grammar2.html#summarize-data-1",
    "title": "Grammar of graphics II",
    "section": "Summarize data",
    "text": "Summarize data\n\n\nPlot mean and 95% CI\n\ndiamonds |&gt;\n  ggplot(aes(x = cut, y = depth)) +\n  stat_summary(fun.data = mean_cl_normal)\n\n\n\n\n\n\n\n\n\nPlot median and range\n\ndiamonds |&gt;\n  ggplot(aes(x = cut, y = depth)) +\n  stat_summary(fun.min = min, fun.max = max, fun = median)"
  },
  {
    "objectID": "slides/27_grammar2.html#facets-1",
    "href": "slides/27_grammar2.html#facets-1",
    "title": "Grammar of graphics II",
    "section": "Facets",
    "text": "Facets\nColoring by group difficult to visualize with many groups\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy, color = class)) +\n  geom_point()"
  },
  {
    "objectID": "slides/27_grammar2.html#facet",
    "href": "slides/27_grammar2.html#facet",
    "title": "Grammar of graphics II",
    "section": "Facet",
    "text": "Facet\nPulls out groups into separate panels\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  facet_wrap(~ class)"
  },
  {
    "objectID": "slides/27_grammar2.html#lets-code",
    "href": "slides/27_grammar2.html#lets-code",
    "title": "Grammar of graphics II",
    "section": "Let’s code!",
    "text": "Let’s code!\nGrammar of graphics II [Rmd]"
  },
  {
    "objectID": "slides/25_iteration.html#the-problems",
    "href": "slides/25_iteration.html#the-problems",
    "title": "Iteration",
    "section": "The problems",
    "text": "The problems\n\nRun the same model on multiple data sets\nCreate the same plot multiple data sets\nRead in data files from multiple subjects"
  },
  {
    "objectID": "slides/25_iteration.html#set-up",
    "href": "slides/25_iteration.html#set-up",
    "title": "Iteration",
    "section": "Set-up",
    "text": "Set-up\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(here)"
  },
  {
    "objectID": "slides/25_iteration.html#for-loops",
    "href": "slides/25_iteration.html#for-loops",
    "title": "Iteration",
    "section": "For loops",
    "text": "For loops"
  },
  {
    "objectID": "slides/25_iteration.html#for-loops-1",
    "href": "slides/25_iteration.html#for-loops-1",
    "title": "Iteration",
    "section": "For loops",
    "text": "For loops\n\nfor (counter in min:max) {\n  # What you want repeated.\n  # Index counter-specific vector with [counter]\n}"
  },
  {
    "objectID": "slides/25_iteration.html#building-objects-with-for-loops",
    "href": "slides/25_iteration.html#building-objects-with-for-loops",
    "title": "Iteration",
    "section": "Building objects with for loops",
    "text": "Building objects with for loops\n\nfor (i in 1:nrow(penguins)) {\n  bill_size[i] &lt;- penguins$bill_length_mm[i] * penguins$bill_depth_mm[i]\n}\n\n\nError: object 'bill_size' not found\n\n\n\n\n\n\n\n\nWarning\n\n\nYou must initialize variables that you build in for loops.\n\n\n\n\nbill_size &lt;- NA\nfor (i in 1:nrow(penguins)) {\n  bill_size[i] &lt;- penguins$bill_length_mm[i] * penguins$bill_depth_mm[i]\n}"
  },
  {
    "objectID": "slides/25_iteration.html#for-loops-with-vectors",
    "href": "slides/25_iteration.html#for-loops-with-vectors",
    "title": "Iteration",
    "section": "For loops with vectors",
    "text": "For loops with vectors\n\nfor (i in month.name) {\n  print(paste0(i, \" has \", str_length(i), \" letters.\"))\n}\n\n[1] \"January has 7 letters.\"\n[1] \"February has 8 letters.\"\n[1] \"March has 5 letters.\"\n[1] \"April has 5 letters.\"\n[1] \"May has 3 letters.\"\n[1] \"June has 4 letters.\"\n[1] \"July has 4 letters.\"\n[1] \"August has 6 letters.\"\n[1] \"September has 9 letters.\"\n[1] \"October has 7 letters.\"\n[1] \"November has 8 letters.\"\n[1] \"December has 8 letters.\""
  },
  {
    "objectID": "slides/25_iteration.html#mapping-with-purrr",
    "href": "slides/25_iteration.html#mapping-with-purrr",
    "title": "Iteration",
    "section": "Mapping with {purrr}",
    "text": "Mapping with {purrr}\n\nlibrary(purrr)\n\n\n\n\n\n\n\n\nSource: Malcolm Barrett"
  },
  {
    "objectID": "slides/25_iteration.html#mapping-functions",
    "href": "slides/25_iteration.html#mapping-functions",
    "title": "Iteration",
    "section": "Mapping functions",
    "text": "Mapping functions\npurrr::map() applies functions repeatedly across data\n\nmap(select(penguins, ends_with(\"_mm\")), ~ mean(.x, na.rm = TRUE))\n\n$bill_length_mm\n[1] 43.92193\n\n$bill_depth_mm\n[1] 17.15117\n\n$flipper_length_mm\n[1] 200.9152\n\n\n\nWhat kind of data type does map() return?"
  },
  {
    "objectID": "slides/25_iteration.html#mapping-function",
    "href": "slides/25_iteration.html#mapping-function",
    "title": "Iteration",
    "section": "Mapping function",
    "text": "Mapping function\nNeed different data types as output?\n\nmap_dbl(select(penguins, ends_with(\"_mm\")), ~ mean(.x, na.rm = TRUE))\n\n   bill_length_mm     bill_depth_mm flipper_length_mm \n         43.92193          17.15117         200.91520 \n\nmap_chr(select(penguins, ends_with(\"_mm\")), ~ mean(.x, na.rm = TRUE))\n\n   bill_length_mm     bill_depth_mm flipper_length_mm \n      \"43.921930\"       \"17.151170\"      \"200.915205\""
  },
  {
    "objectID": "slides/25_iteration.html#mapping-function-1",
    "href": "slides/25_iteration.html#mapping-function-1",
    "title": "Iteration",
    "section": "Mapping function",
    "text": "Mapping function\nUse split() like dplyr::group_by()\n\npenguins |&gt;\n  split(penguins$species) |&gt;\n  map(~ lm(bill_length_mm ~ bill_depth_mm, data = .x))\n\n$Adelie\n\nCall:\nlm(formula = bill_length_mm ~ bill_depth_mm, data = .x)\n\nCoefficients:\n  (Intercept)  bill_depth_mm  \n       23.068          0.857  \n\n\n$Chinstrap\n\nCall:\nlm(formula = bill_length_mm ~ bill_depth_mm, data = .x)\n\nCoefficients:\n  (Intercept)  bill_depth_mm  \n       13.428          1.922  \n\n\n$Gentoo\n\nCall:\nlm(formula = bill_length_mm ~ bill_depth_mm, data = .x)\n\nCoefficients:\n  (Intercept)  bill_depth_mm  \n       17.230          2.021"
  },
  {
    "objectID": "slides/25_iteration.html#mapping-function-2",
    "href": "slides/25_iteration.html#mapping-function-2",
    "title": "Iteration",
    "section": "Mapping function",
    "text": "Mapping function\nCreate multiple plots\n\npenguins |&gt;\n  split(penguins$species) |&gt;\n  map(~ ggplot(.x, aes(bill_length_mm, bill_depth_mm)) + geom_point())\n\n$Adelie\n\n\n\n\n\n\n\n\n\n$Chinstrap\n\n\n\n\n\n\n\n\n\n$Gentoo"
  },
  {
    "objectID": "slides/25_iteration.html#importing-multiple-data-files",
    "href": "slides/25_iteration.html#importing-multiple-data-files",
    "title": "Iteration",
    "section": "Importing multiple data files",
    "text": "Importing multiple data files\nFirst, we’ll create multiple data files\n\nspecies_list &lt;- penguins |&gt; \n  split(penguins$species)\nwrite_csv(species_list$Adelie, here(\"data/adelie_penguin_data.csv\"))\nwrite_csv(species_list$Chinstrap, here(\"data/chinstrap_penguin_data.csv\"))\nwrite_csv(species_list$Gentoo, here(\"data/gentoo_penguin_data.csv\"))"
  },
  {
    "objectID": "slides/25_iteration.html#importing-multiple-data-files-1",
    "href": "slides/25_iteration.html#importing-multiple-data-files-1",
    "title": "Iteration",
    "section": "Importing multiple data files",
    "text": "Importing multiple data files\nGet file names and paths with dir()\n\n(penguin_files &lt;- dir(path = \"../data\", \n                      pattern = \"penguin_data.csv\", \n                      full.names = TRUE))\n\n[1] \"../data/adelie_penguin_data.csv\"    \"../data/chinstrap_penguin_data.csv\"\n[3] \"../data/gentoo_penguin_data.csv\""
  },
  {
    "objectID": "slides/25_iteration.html#importing-multiple-data-files-2",
    "href": "slides/25_iteration.html#importing-multiple-data-files-2",
    "title": "Iteration",
    "section": "Importing multiple data files",
    "text": "Importing multiple data files\nMap readr::read_csv() to each element of penguin_files\n\n\n(penguin_data1 &lt;- map(penguin_files, read_csv))\n\n[[1]]\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n[[2]]\n# A tibble: 68 × 8\n   species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Chinstrap Dream            46.5          17.9               192        3500\n 2 Chinstrap Dream            50            19.5               196        3900\n 3 Chinstrap Dream            51.3          19.2               193        3650\n 4 Chinstrap Dream            45.4          18.7               188        3525\n 5 Chinstrap Dream            52.7          19.8               197        3725\n 6 Chinstrap Dream            45.2          17.8               198        3950\n 7 Chinstrap Dream            46.1          18.2               178        3250\n 8 Chinstrap Dream            51.3          18.2               197        3750\n 9 Chinstrap Dream            46            18.9               195        4150\n10 Chinstrap Dream            51.3          19.9               198        3700\n# ℹ 58 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n[[3]]\n# A tibble: 124 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Gentoo  Biscoe           46.1          13.2               211        4500\n 2 Gentoo  Biscoe           50            16.3               230        5700\n 3 Gentoo  Biscoe           48.7          14.1               210        4450\n 4 Gentoo  Biscoe           50            15.2               218        5700\n 5 Gentoo  Biscoe           47.6          14.5               215        5400\n 6 Gentoo  Biscoe           46.5          13.5               210        4550\n 7 Gentoo  Biscoe           45.4          14.6               211        4800\n 8 Gentoo  Biscoe           46.7          15.3               219        5200\n 9 Gentoo  Biscoe           43.3          13.4               209        4400\n10 Gentoo  Biscoe           46.8          15.4               215        5150\n# ℹ 114 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;"
  },
  {
    "objectID": "slides/25_iteration.html#importing-multiple-data-files-3",
    "href": "slides/25_iteration.html#importing-multiple-data-files-3",
    "title": "Iteration",
    "section": "Importing multiple data files",
    "text": "Importing multiple data files\n\nUse purrr::map_df() to return output as data frame\n\n(penguin_data2 &lt;- map_df(penguin_files, read_csv))\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;"
  },
  {
    "objectID": "slides/25_iteration.html#solving-the-problems",
    "href": "slides/25_iteration.html#solving-the-problems",
    "title": "Iteration",
    "section": "Solving the problems",
    "text": "Solving the problems\n\nRun the same model on multiple data sets\nCreate the same plot for multiple data sets\nRead in data files from multiple subjects"
  },
  {
    "objectID": "slides/25_iteration.html#lets-code",
    "href": "slides/25_iteration.html#lets-code",
    "title": "Iteration",
    "section": "Let’s code!",
    "text": "Let’s code!\nIteration [Rmd]"
  },
  {
    "objectID": "slides/23_dates.html#the-problem",
    "href": "slides/23_dates.html#the-problem",
    "title": "Dates and times",
    "section": "The problem",
    "text": "The problem\nWhat’s different between these data sets?\n\n\n\n\ndata1\n\n# A tibble: 12 × 2\n   test_date  birth_date \n   &lt;date&gt;     &lt;chr&gt;      \n 1 2023-01-02 1997-07-14 \n 2 2023-01-02 1998-01-28 \n 3 2023-01-05 1967-07-23 \n 4 2023-01-05 Jan 9, 1960\n 5 2023-01-08 1950-11-09 \n 6 2023-01-14 2001-08-24 \n 7 2023-01-16 1979-09-23 \n 8 2023-01-23 1970-03-22 \n 9 2023-01-26 1957-04-21 \n10 2023-01-27 1989-03-07 \n11 2023-01-27 1983-11-03 \n12 2023-01-28 1989-01-31 \n\n\n\n\n\n\ndata2\n\n# A tibble: 9 × 4\n  test_date  birth_date age_at_testing day_of_birth\n  &lt;date&gt;     &lt;date&gt;     &lt;drtn&gt;         &lt;ord&gt;       \n1 2023-01-05 1967-07-23 20255 days     Sunday      \n2 2023-01-05 1960-01-09 23007 days     Saturday    \n3 2023-01-08 1950-11-09 26358 days     Thursday    \n4 2023-01-16 1979-09-23 15821 days     Sunday      \n5 2023-01-23 1970-03-22 19300 days     Sunday      \n6 2023-01-26 1957-04-21 24021 days     Sunday      \n7 2023-01-27 1989-03-07 12379 days     Tuesday     \n8 2023-01-27 1983-11-03 14330 days     Thursday    \n9 2023-01-28 1989-01-31 12415 days     Tuesday"
  },
  {
    "objectID": "slides/23_dates.html#set-up",
    "href": "slides/23_dates.html#set-up",
    "title": "Dates and times",
    "section": "Set-up",
    "text": "Set-up\n\nlibrary(tidyverse)\nlibrary(nycflights13)"
  },
  {
    "objectID": "slides/23_dates.html#reminder",
    "href": "slides/23_dates.html#reminder",
    "title": "Dates and times",
    "section": "Reminder",
    "text": "Reminder\nDates and times are augmented doubles\n\n(x &lt;- as.Date(\"2023-03-22\"))\n\n[1] \"2023-03-22\"\n\nclass(x)\n\n[1] \"Date\"\n\ntypeof(x)\n\n[1] \"double\"\n\n\n\n\n\n\n\n\n\nNote\n\n\nStandard (ISO-8601) way to represent dates and times is\nYYYY-MM-DD HH:MM:SS, so 2023-03-22 10:30:00"
  },
  {
    "objectID": "slides/23_dates.html#dates-and-times-with-lubridate",
    "href": "slides/23_dates.html#dates-and-times-with-lubridate",
    "title": "Dates and times",
    "section": "Dates and times with {lubridate}",
    "text": "Dates and times with {lubridate}\n\nlibrary(lubridate)"
  },
  {
    "objectID": "slides/23_dates.html#current-datetime",
    "href": "slides/23_dates.html#current-datetime",
    "title": "Dates and times",
    "section": "Current date/time",
    "text": "Current date/time\n\nSys.Date()  # base R\n\n[1] \"2025-02-26\"\n\ntoday() # {lubridate}\n\n[1] \"2025-02-26\"\n\n\n\n\nSys.time()  # base R\n\n[1] \"2025-02-26 09:12:04 CST\"\n\nnow()  # {lubridate}\n\n[1] \"2025-02-26 09:12:04 CST\""
  },
  {
    "objectID": "slides/23_dates.html#creating-datestimes",
    "href": "slides/23_dates.html#creating-datestimes",
    "title": "Dates and times",
    "section": "Creating dates/times",
    "text": "Creating dates/times\n\nas.Date(\"2023-03-22\")  # base R\n\n[1] \"2023-03-22\"\n\nas_date(\"2023-03-22\") # {lubridate}\n\n[1] \"2023-03-22\"\n\nymd(20230322) # {lubridate}\n\n[1] \"2023-03-22\""
  },
  {
    "objectID": "slides/23_dates.html#convert-dates-to-iso-8601",
    "href": "slides/23_dates.html#convert-dates-to-iso-8601",
    "title": "Dates and times",
    "section": "Convert dates to ISO-8601",
    "text": "Convert dates to ISO-8601\n\nymd(\"2017-01-31\")\n\n[1] \"2017-01-31\"\n\nmdy(\"January 31st, 2017\")\n\n[1] \"2017-01-31\"\n\nmdy(\"Jan 31 17\")\n\n[1] \"2017-01-31\"\n\ndmy(\"31-Jan-2017\")\n\n[1] \"2017-01-31\""
  },
  {
    "objectID": "slides/23_dates.html#convert-dates-to-iso-8601-1",
    "href": "slides/23_dates.html#convert-dates-to-iso-8601-1",
    "title": "Dates and times",
    "section": "Convert dates to ISO-8601",
    "text": "Convert dates to ISO-8601\n\n(r_class_schedule &lt;- tibble(meeting = 1:4, date = c(\"23 Jan 2023\", \"25 Jan 2023\", \"27 Jan 2023\", \"30 Jan 2023\"), topic = c(\"Course introduction\", \"Working in RStudio\", \"Coding basics\", \"Workflows\")))\n\n# A tibble: 4 × 3\n  meeting date        topic              \n    &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;              \n1       1 23 Jan 2023 Course introduction\n2       2 25 Jan 2023 Working in RStudio \n3       3 27 Jan 2023 Coding basics      \n4       4 30 Jan 2023 Workflows          \n\n\n\nHow do we change the dates in a data frame?\n\n\n\n(r_class_schedule &lt;- r_class_schedule |&gt;\n   mutate(iso_date = dmy(date)))\n\n# A tibble: 4 × 4\n  meeting date        topic               iso_date  \n    &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;               &lt;date&gt;    \n1       1 23 Jan 2023 Course introduction 2023-01-23\n2       2 25 Jan 2023 Working in RStudio  2023-01-25\n3       3 27 Jan 2023 Coding basics       2023-01-27\n4       4 30 Jan 2023 Workflows           2023-01-30"
  },
  {
    "objectID": "slides/23_dates.html#convert-multiple-formats",
    "href": "slides/23_dates.html#convert-multiple-formats",
    "title": "Dates and times",
    "section": "Convert multiple formats",
    "text": "Convert multiple formats\nWhat if your date column has multiple formats?\n\n(bad_dates &lt;- c(\"Jan 1 2023\", \"2-Jan-2023\"))\n\n[1] \"Jan 1 2023\" \"2-Jan-2023\"\n\nas_date(bad_dates)\n\nWarning: All formats failed to parse. No formats found.\n\n\n[1] NA NA"
  },
  {
    "objectID": "slides/23_dates.html#date-formatting",
    "href": "slides/23_dates.html#date-formatting",
    "title": "Dates and times",
    "section": "Date formatting",
    "text": "Date formatting\nCodes for different components/styles of date components\n\n\nCode\nComponent\n\n\n\n%y\nTwo digit year (23)\n\n\n%Y\nFour digit year (2023)\n\n\n%m\nMonth as number (01-12 or 1-12)\n\n\n%b\nAbbreviated month name (Mar)\n\n\n%B\nFull month name (March)\n\n\n%d\nDay of the month (01-31 or 1-31)"
  },
  {
    "objectID": "slides/23_dates.html#date-formatting-1",
    "href": "slides/23_dates.html#date-formatting-1",
    "title": "Dates and times",
    "section": "Date formatting",
    "text": "Date formatting\nCombine codes to make dates\n2023-03-22 = \"%Y-%m-%d\"\n3/22/23 = \"%m/%d/%y\"\n23 Mar 2023 = \"%d %b %Y\"\nMarch 23, 2023 = \"%B %d, %Y\""
  },
  {
    "objectID": "slides/23_dates.html#date-formatting-2",
    "href": "slides/23_dates.html#date-formatting-2",
    "title": "Dates and times",
    "section": "Date formatting",
    "text": "Date formatting\n\n(bad_dates &lt;- c(\"Jan 01 2023\", \"02-Jan-2023\"))\n\n[1] \"Jan 01 2023\" \"02-Jan-2023\"\n\nas_date(bad_dates, format = \"%b %d %Y\")\n\nWarning: 1 failed to parse.\n\n\n[1] \"2023-01-01\" NA          \n\n\n\n\nas_date(bad_dates, format = c(\"%b %d %Y\", \"%d-%b-%Y\"))\n\n[1] \"2023-01-01\" \"2023-01-02\""
  },
  {
    "objectID": "slides/23_dates.html#convert-times-to-iso-8601",
    "href": "slides/23_dates.html#convert-times-to-iso-8601",
    "title": "Dates and times",
    "section": "Convert times to ISO-8601",
    "text": "Convert times to ISO-8601\n\nhms(\"20:11:59\")\n\n[1] \"20H 11M 59S\"\n\nhm(\"10:30\")\n\n[1] \"10H 30M 0S\""
  },
  {
    "objectID": "slides/23_dates.html#convert-date-times-to-iso-8601",
    "href": "slides/23_dates.html#convert-date-times-to-iso-8601",
    "title": "Dates and times",
    "section": "Convert date-times to ISO-8601",
    "text": "Convert date-times to ISO-8601\n\nas_datetime(\"2023-03-10\")\n\n[1] \"2023-03-10 UTC\"\n\nymd_hms(\"2023-03-10 20:11:59\")\n\n[1] \"2023-03-10 20:11:59 UTC\"\n\nmdy_hm(\"03/22/2023 10:30\")\n\n[1] \"2023-03-22 10:30:00 UTC\""
  },
  {
    "objectID": "slides/23_dates.html#change-time-zone",
    "href": "slides/23_dates.html#change-time-zone",
    "title": "Dates and times",
    "section": "Change time zone",
    "text": "Change time zone\ntz argument\n\nymd_hms(\"2023-03-10 20:11:59\", tz = \"America/Chicago\")\n\n[1] \"2023-03-10 20:11:59 CST\"\n\n\n\nFind system time zone\n\nSys.timezone()\n\n[1] \"America/Chicago\"\n\nmdy_hm(\"03/22/2023 10:30\", tz = Sys.timezone())  \n\n[1] \"2023-03-22 10:30:00 CDT\"\n\n\n\n\n\n\n\n\nWarning\n\n\nSetting tz = Sys.timezone() is dangerous and not reproducible if you are traveling or giving code to others in different time zones."
  },
  {
    "objectID": "slides/23_dates.html#create-dates-from-components",
    "href": "slides/23_dates.html#create-dates-from-components",
    "title": "Dates and times",
    "section": "Create dates from components",
    "text": "Create dates from components\n\nflights |&gt;\n  select(year, month, day, hour, minute)\n\n# A tibble: 336,776 × 5\n    year month   day  hour minute\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1  2013     1     1     5     15\n 2  2013     1     1     5     29\n 3  2013     1     1     5     40\n 4  2013     1     1     5     45\n 5  2013     1     1     6      0\n 6  2013     1     1     5     58\n 7  2013     1     1     6      0\n 8  2013     1     1     6      0\n 9  2013     1     1     6      0\n10  2013     1     1     6      0\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/23_dates.html#create-dates-from-components-1",
    "href": "slides/23_dates.html#create-dates-from-components-1",
    "title": "Dates and times",
    "section": "Create dates from components",
    "text": "Create dates from components\nmake_date(), make_datetime()\n\nflights |&gt;\n  select(year, month, day, hour, minute) |&gt;\n  mutate(date = make_date(year, month, day),\n         departure = make_datetime(year, month, day, hour, minute))\n\n# A tibble: 336,776 × 7\n    year month   day  hour minute date       departure          \n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;date&gt;     &lt;dttm&gt;             \n 1  2013     1     1     5     15 2013-01-01 2013-01-01 05:15:00\n 2  2013     1     1     5     29 2013-01-01 2013-01-01 05:29:00\n 3  2013     1     1     5     40 2013-01-01 2013-01-01 05:40:00\n 4  2013     1     1     5     45 2013-01-01 2013-01-01 05:45:00\n 5  2013     1     1     6      0 2013-01-01 2013-01-01 06:00:00\n 6  2013     1     1     5     58 2013-01-01 2013-01-01 05:58:00\n 7  2013     1     1     6      0 2013-01-01 2013-01-01 06:00:00\n 8  2013     1     1     6      0 2013-01-01 2013-01-01 06:00:00\n 9  2013     1     1     6      0 2013-01-01 2013-01-01 06:00:00\n10  2013     1     1     6      0 2013-01-01 2013-01-01 06:00:00\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/23_dates.html#extract-datetime-elements",
    "href": "slides/23_dates.html#extract-datetime-elements",
    "title": "Dates and times",
    "section": "Extract date/time elements",
    "text": "Extract date/time elements\nFirst, let’s extract a random sample of departure times\n\n(datetime &lt;- flights |&gt;\n   drop_na(dep_time) |&gt; \n   slice_sample(n = 20) |&gt;\n   mutate(departure = make_datetime(year, month, day, hour, minute)) |&gt; \n   pull(departure))\n\n [1] \"2013-05-02 06:00:00 UTC\" \"2013-09-16 20:00:00 UTC\"\n [3] \"2013-09-18 20:05:00 UTC\" \"2013-01-30 22:49:00 UTC\"\n [5] \"2013-05-13 07:05:00 UTC\" \"2013-04-23 16:00:00 UTC\"\n [7] \"2013-06-04 20:40:00 UTC\" \"2013-08-12 13:30:00 UTC\"\n [9] \"2013-05-07 15:25:00 UTC\" \"2013-04-07 22:25:00 UTC\"\n[11] \"2013-05-21 07:00:00 UTC\" \"2013-04-22 20:00:00 UTC\"\n[13] \"2013-09-09 15:35:00 UTC\" \"2013-07-12 09:59:00 UTC\"\n[15] \"2013-08-06 19:39:00 UTC\" \"2013-12-01 10:56:00 UTC\"\n[17] \"2013-07-28 06:55:00 UTC\" \"2013-12-19 06:30:00 UTC\"\n[19] \"2013-06-05 16:29:00 UTC\" \"2013-09-18 17:25:00 UTC\""
  },
  {
    "objectID": "slides/23_dates.html#extract-datetime-elements-1",
    "href": "slides/23_dates.html#extract-datetime-elements-1",
    "title": "Dates and times",
    "section": "Extract date/time elements",
    "text": "Extract date/time elements\nNow let’s extract components\n\nyear(datetime)\n\n [1] 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013\n[16] 2013 2013 2013 2013 2013\n\nmonth(datetime)\n\n [1]  5  9  9  1  5  4  6  8  5  4  5  4  9  7  8 12  7 12  6  9\n\nmonth(datetime, label = TRUE)\n\n [1] May Sep Sep Jan May Apr Jun Aug May Apr May Apr Sep Jul Aug Dec Jul Dec Jun\n[20] Sep\n12 Levels: Jan &lt; Feb &lt; Mar &lt; Apr &lt; May &lt; Jun &lt; Jul &lt; Aug &lt; Sep &lt; ... &lt; Dec"
  },
  {
    "objectID": "slides/23_dates.html#extract-datetime-elements-2",
    "href": "slides/23_dates.html#extract-datetime-elements-2",
    "title": "Dates and times",
    "section": "Extract date/time elements",
    "text": "Extract date/time elements\nNow let’s extract components\n\nmday(datetime)\n\n [1]  2 16 18 30 13 23  4 12  7  7 21 22  9 12  6  1 28 19  5 18\n\nyday(datetime)\n\n [1] 122 259 261  30 133 113 155 224 127  97 141 112 252 193 218 335 209 353 156\n[20] 261\n\nwday(datetime)\n\n [1] 5 2 4 4 2 3 3 2 3 1 3 2 2 6 3 1 1 5 4 4\n\nwday(datetime, label = TRUE, abbr = FALSE)\n\n [1] Thursday  Monday    Wednesday Wednesday Monday    Tuesday   Tuesday  \n [8] Monday    Tuesday   Sunday    Tuesday   Monday    Monday    Friday   \n[15] Tuesday   Sunday    Sunday    Thursday  Wednesday Wednesday\n7 Levels: Sunday &lt; Monday &lt; Tuesday &lt; Wednesday &lt; Thursday &lt; ... &lt; Saturday"
  },
  {
    "objectID": "slides/23_dates.html#extract-datetime-elements-3",
    "href": "slides/23_dates.html#extract-datetime-elements-3",
    "title": "Dates and times",
    "section": "Extract date/time elements",
    "text": "Extract date/time elements\nNow let’s extract components\n\nhour(datetime)\n\n [1]  6 20 20 22  7 16 20 13 15 22  7 20 15  9 19 10  6  6 16 17\n\nminute(datetime)\n\n [1]  0  0  5 49  5  0 40 30 25 25  0  0 35 59 39 56 55 30 29 25\n\nsecond(datetime)\n\n [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
  },
  {
    "objectID": "slides/23_dates.html#create-vectors-of-days-of-the-week",
    "href": "slides/23_dates.html#create-vectors-of-days-of-the-week",
    "title": "Dates and times",
    "section": "Create vectors of days of the week",
    "text": "Create vectors of days of the week\n\nwday(1:7, label = TRUE, abbr = FALSE)\n\n[1] Sunday    Monday    Tuesday   Wednesday Thursday  Friday    Saturday \n7 Levels: Sunday &lt; Monday &lt; Tuesday &lt; Wednesday &lt; Thursday &lt; ... &lt; Saturday\n\nas.character(wday(1:7, label = TRUE, abbr = FALSE))\n\n[1] \"Sunday\"    \"Monday\"    \"Tuesday\"   \"Wednesday\" \"Thursday\"  \"Friday\"   \n[7] \"Saturday\" \n\nstringr::str_c(as.character(wday(1:7, label = TRUE, abbr = FALSE)), collapse = \", \")\n\n[1] \"Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\""
  },
  {
    "objectID": "slides/23_dates.html#set-datetime-elements-with-components",
    "href": "slides/23_dates.html#set-datetime-elements-with-components",
    "title": "Dates and times",
    "section": "Set date/time elements with components",
    "text": "Set date/time elements with components\n\nhead(datetime)\n\n[1] \"2013-05-02 06:00:00 UTC\" \"2013-09-16 20:00:00 UTC\"\n[3] \"2013-09-18 20:05:00 UTC\" \"2013-01-30 22:49:00 UTC\"\n[5] \"2013-05-13 07:05:00 UTC\" \"2013-04-23 16:00:00 UTC\"\n\nyear(datetime) &lt;- 2020\nhead(datetime)\n\n[1] \"2020-05-02 06:00:00 UTC\" \"2020-09-16 20:00:00 UTC\"\n[3] \"2020-09-18 20:05:00 UTC\" \"2020-01-30 22:49:00 UTC\"\n[5] \"2020-05-13 07:05:00 UTC\" \"2020-04-23 16:00:00 UTC\""
  },
  {
    "objectID": "slides/23_dates.html#time-spans-1",
    "href": "slides/23_dates.html#time-spans-1",
    "title": "Dates and times",
    "section": "Time spans",
    "text": "Time spans\nFind or create durations\n\nr_class_schedule$iso_date[2] - r_class_schedule$iso_date[1]\n\nTime difference of 2 days\n\ntoday() - ymd(r_class_schedule$iso_date[1])\n\nTime difference of 765 days\n\nr_class_schedule$iso_date[1] - 7 * 9\n\n[1] \"2022-11-21\"\n\nr_class_schedule$iso_date[1] + 7 * 9\n\n[1] \"2023-03-27\""
  },
  {
    "objectID": "slides/23_dates.html#filter-dates",
    "href": "slides/23_dates.html#filter-dates",
    "title": "Dates and times",
    "section": "Filter dates",
    "text": "Filter dates\n\n(oldsched &lt;- filter(r_class_schedule, iso_date &lt; \"2023-01-30\") |&gt;\n  mutate(week_later = iso_date + 7,\n         days_since = today() - iso_date))\n\n# A tibble: 3 × 6\n  meeting date        topic               iso_date   week_later days_since\n    &lt;int&gt; &lt;chr&gt;       &lt;chr&gt;               &lt;date&gt;     &lt;date&gt;     &lt;drtn&gt;    \n1       1 23 Jan 2023 Course introduction 2023-01-23 2023-01-30 765 days  \n2       2 25 Jan 2023 Working in RStudio  2023-01-25 2023-02-01 763 days  \n3       3 27 Jan 2023 Coding basics       2023-01-27 2023-02-03 761 days"
  },
  {
    "objectID": "slides/23_dates.html#solving-the-problem",
    "href": "slides/23_dates.html#solving-the-problem",
    "title": "Dates and times",
    "section": "Solving the problem",
    "text": "Solving the problem\nWhat code generates data2 from data1?\n\n\n\n\ndata1\n\n# A tibble: 12 × 2\n   test_date  birth_date \n   &lt;date&gt;     &lt;chr&gt;      \n 1 2023-01-02 1997-07-14 \n 2 2023-01-02 1998-01-28 \n 3 2023-01-05 1967-07-23 \n 4 2023-01-05 Jan 9, 1960\n 5 2023-01-08 1950-11-09 \n 6 2023-01-14 2001-08-24 \n 7 2023-01-16 1979-09-23 \n 8 2023-01-23 1970-03-22 \n 9 2023-01-26 1957-04-21 \n10 2023-01-27 1989-03-07 \n11 2023-01-27 1983-11-03 \n12 2023-01-28 1989-01-31 \n\n\n\n\n\n\ndata2\n\n# A tibble: 9 × 4\n  test_date  birth_date age_at_testing day_of_birth\n  &lt;date&gt;     &lt;date&gt;     &lt;drtn&gt;         &lt;ord&gt;       \n1 2023-01-05 1967-07-23 20255 days     Sunday      \n2 2023-01-05 1960-01-09 23007 days     Saturday    \n3 2023-01-08 1950-11-09 26358 days     Thursday    \n4 2023-01-16 1979-09-23 15821 days     Sunday      \n5 2023-01-23 1970-03-22 19300 days     Sunday      \n6 2023-01-26 1957-04-21 24021 days     Sunday      \n7 2023-01-27 1989-03-07 12379 days     Tuesday     \n8 2023-01-27 1983-11-03 14330 days     Thursday    \n9 2023-01-28 1989-01-31 12415 days     Tuesday"
  },
  {
    "objectID": "slides/23_dates.html#lets-code",
    "href": "slides/23_dates.html#lets-code",
    "title": "Dates and times",
    "section": "Let’s code!",
    "text": "Let’s code!\nDates and times [Rmd]"
  },
  {
    "objectID": "slides/21_patterns.html#the-problem",
    "href": "slides/21_patterns.html#the-problem",
    "title": "Matching patterns",
    "section": "The problem",
    "text": "The problem\nWhat’s different between these data sets?\nWhat is needed to create data2 from data1?\n\n\n\ndata1\n\n# A tibble: 12 × 3\n   time      species  resp \n   &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;\n 1 early-day dogfish  yes  \n 2 mid-day   bear dog no   \n 3 late-day  dog      yes  \n 4 daytime   dogfish  no   \n 5 early-day cat      yes  \n 6 mid-day   cat      no   \n 7 late-day  dogfish  no   \n 8 daytime   bear dog no   \n 9 early-day dogfish  &lt;NA&gt; \n10 mid-day   catfish  yes  \n11 late-day  cat      yes  \n12 daytime   bear dog yes  \n\n\n\n\ndata2\n\n# A tibble: 8 × 3\n  time      species  resp   \n  &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;  \n1 early-Day dogfish  yes    \n2 mid-Day   bear dog no     \n3 late-Day  dog      yes    \n4 daytime   dogfish  no     \n5 late-Day  dogfish  no     \n6 daytime   bear dog no     \n7 early-Day dogfish  no data\n8 daytime   bear dog yes"
  },
  {
    "objectID": "slides/21_patterns.html#set-up",
    "href": "slides/21_patterns.html#set-up",
    "title": "Matching patterns",
    "section": "Set-up",
    "text": "Set-up\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "slides/21_patterns.html#mental-model",
    "href": "slides/21_patterns.html#mental-model",
    "title": "Matching patterns",
    "section": "Mental model",
    "text": "Mental model"
  },
  {
    "objectID": "slides/21_patterns.html#strings-with-stringr",
    "href": "slides/21_patterns.html#strings-with-stringr",
    "title": "Matching patterns",
    "section": "Strings with {stringr}",
    "text": "Strings with {stringr}\n\nlibrary(stringr)\n\n\n\n\n\n\n\n\nSource: Allison Horst"
  },
  {
    "objectID": "slides/21_patterns.html#regular-expressions",
    "href": "slides/21_patterns.html#regular-expressions",
    "title": "Matching patterns",
    "section": "Regular expressions",
    "text": "Regular expressions\nConcise and powerful language for describing patterns within strings\n(regex for short)"
  },
  {
    "objectID": "slides/21_patterns.html#regular-expressions-1",
    "href": "slides/21_patterns.html#regular-expressions-1",
    "title": "Matching patterns",
    "section": "Regular expressions",
    "text": "Regular expressions\nHere’s the regex I used to detect IP addresses: ^(?:(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])(\\.(?!$)|$)){4}$"
  },
  {
    "objectID": "slides/21_patterns.html#matching-strings",
    "href": "slides/21_patterns.html#matching-strings",
    "title": "Matching patterns",
    "section": "Matching strings",
    "text": "Matching strings\nView string patterns with stringr::str_view_all()\n\n(x &lt;- c(\"apple\", \"banana\", \"pear\", NA))\n\n[1] \"apple\"  \"banana\" \"pear\"   NA      \n\nstr_view_all(x, \"a\")\n\n[1] │ &lt;a&gt;pple\n[2] │ b&lt;a&gt;n&lt;a&gt;n&lt;a&gt;\n[3] │ pe&lt;a&gt;r\n[4] │ NA"
  },
  {
    "objectID": "slides/21_patterns.html#regex-101",
    "href": "slides/21_patterns.html#regex-101",
    "title": "Matching patterns",
    "section": "Regex 101",
    "text": "Regex 101\n. is wildcard\n\nstr_view_all(x, \".a.\")\n\n[1] │ apple\n[2] │ &lt;ban&gt;ana\n[3] │ p&lt;ear&gt;\n[4] │ NA"
  },
  {
    "objectID": "slides/21_patterns.html#regex-101-1",
    "href": "slides/21_patterns.html#regex-101-1",
    "title": "Matching patterns",
    "section": "Regex 101",
    "text": "Regex 101\n^ to match the start of the string (like starts_with())\n$ to match the end of the string (like ends_with())\n\nstr_view_all(x, \"^a\")\n\n[1] │ &lt;a&gt;pple\n[2] │ banana\n[3] │ pear\n[4] │ NA\n\nstr_view_all(x, \"a$\")\n\n[1] │ apple\n[2] │ banan&lt;a&gt;\n[3] │ pear\n[4] │ NA"
  },
  {
    "objectID": "slides/21_patterns.html#regex-101-2",
    "href": "slides/21_patterns.html#regex-101-2",
    "title": "Matching patterns",
    "section": "Regex 101",
    "text": "Regex 101\n| matches one pattern OR another (e.g., this|that)\n\nstr_view_all(x, \"ap|an|ar\")\n\n[1] │ &lt;ap&gt;ple\n[2] │ b&lt;an&gt;&lt;an&gt;a\n[3] │ pe&lt;ar&gt;\n[4] │ NA\n\n\n\nWrap character groups in ()\n\nstr_view_all(\"Are you here or are you there?\", \"(A|a)re\")  \n\n[1] │ &lt;Are&gt; you here or &lt;are&gt; you there?"
  },
  {
    "objectID": "slides/21_patterns.html#regex-101-3",
    "href": "slides/21_patterns.html#regex-101-3",
    "title": "Matching patterns",
    "section": "Regex 101",
    "text": "Regex 101\n\\d matches any digit\n\n# view digits\nstr_view_all(\"March 10, 2020\", \"\\\\d\")\n\n[1] │ March &lt;1&gt;&lt;0&gt;, &lt;2&gt;&lt;0&gt;&lt;2&gt;&lt;0&gt;"
  },
  {
    "objectID": "slides/21_patterns.html#regex-101-4",
    "href": "slides/21_patterns.html#regex-101-4",
    "title": "Matching patterns",
    "section": "Regex 101",
    "text": "Regex 101\n[abc] matches individual characters (a, b, or c)\n\n# view everything with ab or a&lt;space&gt;\nstr_view_all(c(\"abc\", \"a.c\", \"a*c\", \"a c\"), \"a[b ]\")\n\n[1] │ &lt;ab&gt;c\n[2] │ a.c\n[3] │ a*c\n[4] │ &lt;a &gt;c"
  },
  {
    "objectID": "slides/21_patterns.html#regex-101-5",
    "href": "slides/21_patterns.html#regex-101-5",
    "title": "Matching patterns",
    "section": "Regex 101",
    "text": "Regex 101\n[^abc] matches individual characters except a, b, or c\n\n# view everything except ab and a&lt;space&gt;\nstr_view_all(c(\"abc\", \"a.c\", \"a*c\", \"a c\"), \"a[^b ]\")\n\n[1] │ abc\n[2] │ &lt;a.&gt;c\n[3] │ &lt;a*&gt;c\n[4] │ a c\n\n# view everything except digits\nstr_view_all(\"March 10, 2020\", \"[^\\\\d]\")  \n\n[1] │ &lt;M&gt;&lt;a&gt;&lt;r&gt;&lt;c&gt;&lt;h&gt;&lt; &gt;10&lt;,&gt;&lt; &gt;2020"
  },
  {
    "objectID": "slides/21_patterns.html#detecting-pattern-matches",
    "href": "slides/21_patterns.html#detecting-pattern-matches",
    "title": "Matching patterns",
    "section": "Detecting pattern matches",
    "text": "Detecting pattern matches\nDetect matching elements with stringr::str_detect()\n\nx\n\n[1] \"apple\"  \"banana\" \"pear\"   NA      \n\nstr_detect(x, \"e\")  # results in logical vector\n\n[1]  TRUE FALSE  TRUE    NA\n\n\n\n\nsum(str_detect(x, \"e\"), na.rm = TRUE)  # sum matching elements\n\n[1] 2\n\nmean(str_detect(x, \"e\"), na.rm = TRUE)  # calculate proportion of matches\n\n[1] 0.6666667"
  },
  {
    "objectID": "slides/21_patterns.html#extracting-pattern-matches",
    "href": "slides/21_patterns.html#extracting-pattern-matches",
    "title": "Matching patterns",
    "section": "Extracting pattern matches",
    "text": "Extracting pattern matches\nExtract observations matching pattern with filter() and str_detect()\n\npenguins |&gt;\n  filter(str_detect(sex, \"male\")) |&gt;  # select observations that include \"male\"\n  select(species, island, sex)\n\n# A tibble: 333 × 3\n   species island    sex   \n   &lt;fct&gt;   &lt;fct&gt;     &lt;fct&gt; \n 1 Adelie  Torgersen male  \n 2 Adelie  Torgersen female\n 3 Adelie  Torgersen female\n 4 Adelie  Torgersen female\n 5 Adelie  Torgersen male  \n 6 Adelie  Torgersen female\n 7 Adelie  Torgersen male  \n 8 Adelie  Torgersen female\n 9 Adelie  Torgersen male  \n10 Adelie  Torgersen male  \n# ℹ 323 more rows"
  },
  {
    "objectID": "slides/21_patterns.html#extracting-pattern-matches-1",
    "href": "slides/21_patterns.html#extracting-pattern-matches-1",
    "title": "Matching patterns",
    "section": "Extracting pattern matches",
    "text": "Extracting pattern matches\nExtract elements that match a pattern with stringr::str_subset()\n\nhead(words, n = 20)\n\n [1] \"a\"         \"able\"      \"about\"     \"absolute\"  \"accept\"    \"account\"  \n [7] \"achieve\"   \"across\"    \"act\"       \"active\"    \"actual\"    \"add\"      \n[13] \"address\"   \"admit\"     \"advertise\" \"affect\"    \"afford\"    \"after\"    \n[19] \"afternoon\" \"again\"    \n\n\n\n\nstr_subset(words, \"^rec\")  # select elements starting with \"rec\"\n\n[1] \"receive\"   \"recent\"    \"reckon\"    \"recognize\" \"recommend\" \"record\"   \n\nstr_subset(words, \"ing$\")  # select elements ending with \"ing\"\n\n[1] \"bring\"   \"during\"  \"evening\" \"king\"    \"meaning\" \"morning\" \"ring\"   \n[8] \"sing\"    \"thing\""
  },
  {
    "objectID": "slides/21_patterns.html#replacing-pattern-matches",
    "href": "slides/21_patterns.html#replacing-pattern-matches",
    "title": "Matching patterns",
    "section": "Replacing pattern matches",
    "text": "Replacing pattern matches\nReplace matches with new strings with stringr::str_replace() and stringr::str_replace_all()\n\nstr_replace(x, \"[aeiou]\", \"-\")  # replace only first instance of match\n\n[1] \"-pple\"  \"b-nana\" \"p-ar\"   NA      \n\n\n\n\nstr_replace_all(x, \"[aeiou]\", \"-\")  # replace all matches\n\n[1] \"-ppl-\"  \"b-n-n-\" \"p--r\"   NA      \n\nstr_replace_all(x, \"[^aeiou]\", \"-\")  # replace all matches\n\n[1] \"a---e\"  \"-a-a-a\" \"-ea-\"   NA"
  },
  {
    "objectID": "slides/21_patterns.html#replacing-pattern-matches-1",
    "href": "slides/21_patterns.html#replacing-pattern-matches-1",
    "title": "Matching patterns",
    "section": "Replacing pattern matches",
    "text": "Replacing pattern matches\nYou can use this to recode character variables, but…\n\nset.seed(50)\npenguins |&gt;\n  mutate(new_island = str_replace(island, \"Torgersen\", \"Party\")) |&gt; \n  select(species, island, new_island) |&gt; \n  slice_sample(n = 6)\n\n# A tibble: 6 × 3\n  species   island    new_island\n  &lt;fct&gt;     &lt;fct&gt;     &lt;chr&gt;     \n1 Adelie    Torgersen Party     \n2 Chinstrap Dream     Dream     \n3 Adelie    Dream     Dream     \n4 Chinstrap Dream     Dream     \n5 Gentoo    Biscoe    Biscoe    \n6 Gentoo    Biscoe    Biscoe    \n\n\nIt coerces to character data types\n\nI use this A LOT to clean up text data"
  },
  {
    "objectID": "slides/21_patterns.html#replacing-na",
    "href": "slides/21_patterns.html#replacing-na",
    "title": "Matching patterns",
    "section": "Replacing NA\n",
    "text": "Replacing NA\n\nReplace NA with another value with stringr::str_replace_na()\n\nx\n\n[1] \"apple\"  \"banana\" \"pear\"   NA      \n\nstr_replace_na(x)  # by default replaces NA with \"NA\"\n\n[1] \"apple\"  \"banana\" \"pear\"   \"NA\"    \n\nstr_replace_na(x, \"Missing\")  # but you can replace with other strings\n\n[1] \"apple\"   \"banana\"  \"pear\"    \"Missing\""
  },
  {
    "objectID": "slides/21_patterns.html#splitting-strings-1",
    "href": "slides/21_patterns.html#splitting-strings-1",
    "title": "Matching patterns",
    "section": "Splitting strings",
    "text": "Splitting strings\nSplit a string up into pieces with str_split()\n\nhead(sentences, n = 2)\n\n[1] \"The birch canoe slid on the smooth planks.\" \n[2] \"Glue the sheet to the dark blue background.\"\n\nsentences |&gt;\n  head(2) |&gt;\n  str_split(\" \")\n\n[[1]]\n[1] \"The\"     \"birch\"   \"canoe\"   \"slid\"    \"on\"      \"the\"     \"smooth\" \n[8] \"planks.\"\n\n[[2]]\n[1] \"Glue\"        \"the\"         \"sheet\"       \"to\"          \"the\"        \n[6] \"dark\"        \"blue\"        \"background.\"\n\n\n\nNotice this produces a list. Why?"
  },
  {
    "objectID": "slides/21_patterns.html#splitting-strings-2",
    "href": "slides/21_patterns.html#splitting-strings-2",
    "title": "Matching patterns",
    "section": "Splitting strings",
    "text": "Splitting strings\nConvert to matrix with simplify\n\nsentences[c(1:2, 5)] |&gt;\n  str_split(\" \", simplify = TRUE)\n\n     [,1]   [,2]    [,3]    [,4]     [,5]  [,6]    [,7]     [,8]         \n[1,] \"The\"  \"birch\" \"canoe\" \"slid\"   \"on\"  \"the\"   \"smooth\" \"planks.\"    \n[2,] \"Glue\" \"the\"   \"sheet\" \"to\"     \"the\" \"dark\"  \"blue\"   \"background.\"\n[3,] \"Rice\" \"is\"    \"often\" \"served\" \"in\"  \"round\" \"bowls.\" \"\""
  },
  {
    "objectID": "slides/21_patterns.html#solving-the-problem",
    "href": "slides/21_patterns.html#solving-the-problem",
    "title": "Matching patterns",
    "section": "Solving the problem",
    "text": "Solving the problem\n\n\n\ndata1\n\n# A tibble: 12 × 3\n   time      species  resp \n   &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;\n 1 early-day dogfish  yes  \n 2 mid-day   bear dog no   \n 3 late-day  dog      yes  \n 4 daytime   dogfish  no   \n 5 early-day cat      yes  \n 6 mid-day   cat      no   \n 7 late-day  dogfish  no   \n 8 daytime   bear dog no   \n 9 early-day dogfish  &lt;NA&gt; \n10 mid-day   catfish  yes  \n11 late-day  cat      yes  \n12 daytime   bear dog yes  \n\n\n\n\ndata2\n\n# A tibble: 8 × 3\n  time      species  resp   \n  &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;  \n1 early-Day dogfish  yes    \n2 mid-Day   bear dog no     \n3 late-Day  dog      yes    \n4 daytime   dogfish  no     \n5 late-Day  dogfish  no     \n6 daytime   bear dog no     \n7 early-Day dogfish  no data\n8 daytime   bear dog yes"
  },
  {
    "objectID": "slides/21_patterns.html#lets-code",
    "href": "slides/21_patterns.html#lets-code",
    "title": "Matching patterns",
    "section": "Let’s code!",
    "text": "Let’s code!\nMatching patterns [Rmd]"
  },
  {
    "objectID": "slides/19_numbers.html#the-problem",
    "href": "slides/19_numbers.html#the-problem",
    "title": "Numbers",
    "section": "The problem",
    "text": "The problem\nWhat’s different between these data sets?\nWhat is needed to create data2 from data1?\n\n\n\ndata1\n\n# A tibble: 12 × 3\n     val1   val2    val3\n    &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n 1 0.773  0.470  0.00431\n 2 0.827  0.751  0.00923\n 3 0.746  0.220  0.00814\n 4 0.953  0.199  0.00767\n 5 0.298  0.894  0.00221\n 6 0.860  0.0149 0.00499\n 7 0.0460 0.956  0.00779\n 8 0.947  0.162  0.00875\n 9 0.511  0.189  0.00986\n10 0.712  0.0969 0.00862\n11 0.944  0.370  0.00209\n12 0.834  0.585  0.00420\n\n\n\n\ndata2\n\n# A tibble: 12 × 3\n   percent_val1 log_val2 val3   \n          &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  \n 1         77.3  -0.756  4.3e-03\n 2         82.7  -0.287  9.2e-03\n 3         74.6  -1.51   8.1e-03\n 4         95.3  -1.61   7.7e-03\n 5         29.8  -0.113  2.2e-03\n 6         86.0  -4.20   5.0e-03\n 7          4.6  -0.0452 7.8e-03\n 8         94.7  -1.82   8.7e-03\n 9         51.1  -1.67   9.9e-03\n10         71.2  -2.33   8.6e-03\n11         94.4  -0.994  2.1e-03\n12         83.4  -0.536  4.2e-03"
  },
  {
    "objectID": "slides/19_numbers.html#set-up",
    "href": "slides/19_numbers.html#set-up",
    "title": "Numbers",
    "section": "Set-up",
    "text": "Set-up\n\nlibrary(tidyverse)\nlibrary(nycflights13)"
  },
  {
    "objectID": "slides/19_numbers.html#types-of-numbers",
    "href": "slides/19_numbers.html#types-of-numbers",
    "title": "Numbers",
    "section": "Types of numbers",
    "text": "Types of numbers\nDoubles are floating point numbers\n\n\n\n\n\n\nNote\n\n\nFloating point number: a number without a fixed number of digits after the decimal point\n\n\n\nFloating point numbers ≈ scientific notation"
  },
  {
    "objectID": "slides/19_numbers.html#types-of-numbers-1",
    "href": "slides/19_numbers.html#types-of-numbers-1",
    "title": "Numbers",
    "section": "Types of numbers",
    "text": "Types of numbers\nComputer memory is limited, so you cannot store numbers with infinite precision and floating points are stored imprecisely\n\nsqrt(2) ^ 2 == 2\n\n[1] FALSE\n\n1 / 49 * 49 == 1\n\n[1] FALSE"
  },
  {
    "objectID": "slides/19_numbers.html#comparing-numbers",
    "href": "slides/19_numbers.html#comparing-numbers",
    "title": "Numbers",
    "section": "Comparing numbers",
    "text": "Comparing numbers\n\n\n\nx &lt;- 1\ny &lt;- 1.00000000000001\nz &lt;- 1.001\n\n\n\nx == y\n\n[1] FALSE\n\nall.equal(x, y)\n\n[1] TRUE\n\nall.equal(x, z)\n\n[1] \"Mean relative difference: 0.001\"\n\nall.equal(x, z, tolerance = 1e-2)\n\n[1] TRUE\n\n\n\n\n\n\nsqrt(2) ^ 2 == 2\n\n[1] FALSE\n\nall.equal(sqrt(2) ^ 2, 2)\n\n[1] TRUE\n\ndplyr::near(sqrt(2) ^ 2, 2)\n\n[1] TRUE"
  },
  {
    "objectID": "slides/19_numbers.html#counts",
    "href": "slides/19_numbers.html#counts",
    "title": "Numbers",
    "section": "Counts",
    "text": "Counts\nAs a reminder, we’ve already seen how to use dplyr::count()\n\ncount(flights, carrier)\n\n# A tibble: 16 × 2\n   carrier     n\n   &lt;chr&gt;   &lt;int&gt;\n 1 9E      18460\n 2 AA      32729\n 3 AS        714\n 4 B6      54635\n 5 DL      48110\n 6 EV      54173\n 7 F9        685\n 8 FL       3260\n 9 HA        342\n10 MQ      26397\n11 OO         32\n12 UA      58665\n13 US      20536\n14 VX       5162\n15 WN      12275\n16 YV        601"
  },
  {
    "objectID": "slides/19_numbers.html#counts-1",
    "href": "slides/19_numbers.html#counts-1",
    "title": "Numbers",
    "section": "Counts",
    "text": "Counts\n\n\nWe can also automatically sort by count.\n\ncount(flights, carrier, sort = TRUE)\n\n# A tibble: 16 × 2\n   carrier     n\n   &lt;chr&gt;   &lt;int&gt;\n 1 UA      58665\n 2 B6      54635\n 3 EV      54173\n 4 DL      48110\n 5 AA      32729\n 6 MQ      26397\n 7 US      20536\n 8 9E      18460\n 9 WN      12275\n10 VX       5162\n11 FL       3260\n12 AS        714\n13 F9        685\n14 YV        601\n15 HA        342\n16 OO         32\n\n\n\nAnd sum up totals instead of just count\n\ncount(flights, carrier, wt = distance)\n\n# A tibble: 16 × 2\n   carrier        n\n   &lt;chr&gt;      &lt;dbl&gt;\n 1 9E       9788152\n 2 AA      43864584\n 3 AS       1715028\n 4 B6      58384137\n 5 DL      59507317\n 6 EV      30498951\n 7 F9       1109700\n 8 FL       2167344\n 9 HA       1704186\n10 MQ      15033955\n11 OO         16026\n12 UA      89705524\n13 US      11365778\n14 VX      12902327\n15 WN      12229203\n16 YV        225395"
  },
  {
    "objectID": "slides/19_numbers.html#counts-2",
    "href": "slides/19_numbers.html#counts-2",
    "title": "Numbers",
    "section": "Counts",
    "text": "Counts\n\n\nRemember n() counts inside a summarise()\n\nflights |&gt; \n  group_by(carrier) |&gt; \n  summarise(n = n())\n\n# A tibble: 16 × 2\n   carrier     n\n   &lt;chr&gt;   &lt;int&gt;\n 1 9E      18460\n 2 AA      32729\n 3 AS        714\n 4 B6      54635\n 5 DL      48110\n 6 EV      54173\n 7 F9        685\n 8 FL       3260\n 9 HA        342\n10 MQ      26397\n11 OO         32\n12 UA      58665\n13 US      20536\n14 VX       5162\n15 WN      12275\n16 YV        601\n\n\n\n\nn_distinct() counts instances within a group\n\nflights |&gt; \n  group_by(dest) |&gt; \n  summarise(carriers = n_distinct(carrier))\n\n# A tibble: 105 × 2\n   dest  carriers\n   &lt;chr&gt;    &lt;int&gt;\n 1 ABQ          1\n 2 ACK          1\n 3 ALB          1\n 4 ANC          1\n 5 ATL          7\n 6 AUS          6\n 7 AVL          2\n 8 BDL          2\n 9 BGR          2\n10 BHM          1\n# ℹ 95 more rows"
  },
  {
    "objectID": "slides/19_numbers.html#counting-nas",
    "href": "slides/19_numbers.html#counting-nas",
    "title": "Numbers",
    "section": "Counting NAs",
    "text": "Counting NAs\nTo count NAs, you can sum() up TRUE responses to is.na()\n\nflights |&gt; \n  group_by(dest) |&gt; \n  summarize(n_cancelled = sum(is.na(dep_time)))\n\n# A tibble: 105 × 2\n   dest  n_cancelled\n   &lt;chr&gt;       &lt;int&gt;\n 1 ABQ             0\n 2 ACK             0\n 3 ALB            20\n 4 ANC             0\n 5 ATL           317\n 6 AUS            21\n 7 AVL            12\n 8 BDL            31\n 9 BGR            15\n10 BHM            25\n# ℹ 95 more rows"
  },
  {
    "objectID": "slides/19_numbers.html#counting-nas-1",
    "href": "slides/19_numbers.html#counting-nas-1",
    "title": "Numbers",
    "section": "Counting NAs",
    "text": "Counting NAs\nThis trick can be used for any logical vector\n\nsum(flights$month == 1)\n\n[1] 27004\n\nnrow(filter(flights, month == 1))\n\n[1] 27004"
  },
  {
    "objectID": "slides/19_numbers.html#operations",
    "href": "slides/19_numbers.html#operations",
    "title": "Numbers",
    "section": "Operations",
    "text": "Operations\nMathematical operators are recycled across all elements in a vector\n\n0:10 * 5\n\n [1]  0  5 10 15 20 25 30 35 40 45 50\n\n\n\nYou can operate with vectors &gt; 1, but the larger vector must be a multiple of the smaller vector\n\n0:10 * c(5, 6)\n\nWarning in 0:10 * c(5, 6): longer object length is not a multiple of shorter\nobject length\n\n\n [1]  0  6 10 18 20 30 30 42 40 54 50\n\n\n\n0:11 * c(5, 6)\n\n [1]  0  6 10 18 20 30 30 42 40 54 50 66"
  },
  {
    "objectID": "slides/19_numbers.html#mathematical-transformations",
    "href": "slides/19_numbers.html#mathematical-transformations",
    "title": "Numbers",
    "section": "Mathematical transformations",
    "text": "Mathematical transformations\n\n\n\nsqrt()\nlog()\nlog10()\nlog2()\nsin()\nasin()\n\n\n\nsqrt(seq(0, 100, 10))\n\n [1]  0.000000  3.162278  4.472136  5.477226  6.324555  7.071068  7.745967\n [8]  8.366600  8.944272  9.486833 10.000000\n\nlog(runif(10))\n\n [1] -0.3921567 -0.3017750 -2.4044192 -0.6672081 -0.3630729 -1.9276563\n [7] -1.0672688 -4.2340097 -0.8112143 -1.0013072\n\nasin(sqrt(runif(10)))\n\n [1] 0.8077234 1.1635879 0.1599809 0.8139120 0.5528058 0.6495491 1.2270613\n [8] 0.9685195 0.7673122 0.8240033"
  },
  {
    "objectID": "slides/19_numbers.html#rounding",
    "href": "slides/19_numbers.html#rounding",
    "title": "Numbers",
    "section": "Rounding",
    "text": "Rounding\nControl significant digits with round()\n\nround(123.456, 2)  # two digits\n\n[1] 123.46\n\nround(123.456, 1)  # one digit\n\n[1] 123.5\n\nround(123.456) # whole number\n\n[1] 123\n\nround(123.456, -1) # round to nearest ten\n\n[1] 120\n\nround(123.456, -2) # round to nearest hundred\n\n[1] 100"
  },
  {
    "objectID": "slides/19_numbers.html#formatting",
    "href": "slides/19_numbers.html#formatting",
    "title": "Numbers",
    "section": "Formatting",
    "text": "Formatting\nWhen numbers get too big, too small, or need other formatting, use format()\n\n\n\n(x &lt;- 0.0020)\n\n[1] 0.002\n\nformat(x, scientific = TRUE)\n\n[1] \"2e-03\"\n\nformat(x, nsmall = 4)\n\n[1] \"0.0020\"\n\n\n\n\n\n(y &lt;- 12345678.9)\n\n[1] 12345679\n\nformat(y, scientific = TRUE, \n       digits = 3)\n\n[1] \"1.23e+07\"\n\nformat(y, big.mark = \",\")\n\n[1] \"12,345,679\""
  },
  {
    "objectID": "slides/19_numbers.html#cutting-numbers-into-ranges",
    "href": "slides/19_numbers.html#cutting-numbers-into-ranges",
    "title": "Numbers",
    "section": "Cutting numbers into ranges",
    "text": "Cutting numbers into ranges\nIf you need to bin numbers into ranges, use cut()\n\nset.seed(1)\n(x &lt;- runif(12, min = 0, max = 100))\n\n [1] 26.550866 37.212390 57.285336 90.820779 20.168193 89.838968 94.467527\n [8] 66.079779 62.911404  6.178627 20.597457 17.655675\n\ncut(x, breaks = c(0, 33, 66, 100))\n\n [1] (0,33]   (33,66]  (33,66]  (66,100] (0,33]   (66,100] (66,100] (66,100]\n [9] (33,66]  (0,33]   (0,33]   (0,33]  \nLevels: (0,33] (33,66] (66,100]\n\n\n\n\ncut(x, breaks = c(0, 33, 66, 100), labels = c(\"Low\", \"Medium\", \"High\"))\n\n [1] Low    Medium Medium High   Low    High   High   High   Medium Low   \n[11] Low    Low   \nLevels: Low Medium High"
  },
  {
    "objectID": "slides/19_numbers.html#solving-the-problem",
    "href": "slides/19_numbers.html#solving-the-problem",
    "title": "Numbers",
    "section": "Solving the problem",
    "text": "Solving the problem\n\n\n\ndata1\n\n# A tibble: 12 × 3\n     val1   val2    val3\n    &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n 1 0.773  0.470  0.00431\n 2 0.827  0.751  0.00923\n 3 0.746  0.220  0.00814\n 4 0.953  0.199  0.00767\n 5 0.298  0.894  0.00221\n 6 0.860  0.0149 0.00499\n 7 0.0460 0.956  0.00779\n 8 0.947  0.162  0.00875\n 9 0.511  0.189  0.00986\n10 0.712  0.0969 0.00862\n11 0.944  0.370  0.00209\n12 0.834  0.585  0.00420\n\n\n\n\ndata2\n\n# A tibble: 12 × 3\n   percent_val1 log_val2 val3   \n          &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;  \n 1         77.3  -0.756  4.3e-03\n 2         82.7  -0.287  9.2e-03\n 3         74.6  -1.51   8.1e-03\n 4         95.3  -1.61   7.7e-03\n 5         29.8  -0.113  2.2e-03\n 6         86.0  -4.20   5.0e-03\n 7          4.6  -0.0452 7.8e-03\n 8         94.7  -1.82   8.7e-03\n 9         51.1  -1.67   9.9e-03\n10         71.2  -2.33   8.6e-03\n11         94.4  -0.994  2.1e-03\n12         83.4  -0.536  4.2e-03"
  },
  {
    "objectID": "slides/19_numbers.html#lets-code",
    "href": "slides/19_numbers.html#lets-code",
    "title": "Numbers",
    "section": "Let’s code!",
    "text": "Let’s code!\nNumbers [Rmd]"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#the-problem",
    "href": "slides/17_mergingcolumns.html#the-problem",
    "title": "Merging columns",
    "section": "The problem",
    "text": "The problem\nWhat’s different between these data sets?\nWhat is needed to create data3 from data1 and data2?\n\n\n\ndata1\n\n# A tibble: 12 × 3\n      id  cond  resp\n   &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n 1     1     1 0.092\n 2     1     2 0.878\n 3     1     3 0.449\n 4     2     1 0.911\n 5     2     2 0.33 \n 6     2     3 0.549\n 7     3     1 0.797\n 8     3     2 0.482\n 9     3     3 0.893\n10     4     1 0.638\n11     4     2 0.316\n12     4     3 0.614\n\n\n\n\ndata2\n\n# A tibble: 6 × 2\n     id   age\n  &lt;int&gt; &lt;int&gt;\n1     1    41\n2     2    26\n3     3    29\n4     4    46\n5     5    42\n6     6    41\n\n\n\n\ndata3\n\n# A tibble: 12 × 4\n      id   age  cond  resp\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n 1     1    41     1 0.092\n 2     1    41     2 0.878\n 3     1    41     3 0.449\n 4     2    26     1 0.911\n 5     2    26     2 0.33 \n 6     2    26     3 0.549\n 7     3    29     1 0.797\n 8     3    29     2 0.482\n 9     3    29     3 0.893\n10     4    46     1 0.638\n11     4    46     2 0.316\n12     4    46     3 0.614"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#mental-model-of-merging",
    "href": "slides/17_mergingcolumns.html#mental-model-of-merging",
    "title": "Merging columns",
    "section": "Mental model of merging",
    "text": "Mental model of merging"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#set-up",
    "href": "slides/17_mergingcolumns.html#set-up",
    "title": "Merging columns",
    "section": "Set-up",
    "text": "Set-up\n\nlibrary(dplyr)\nlibrary(nycflights13)\n(flights2 &lt;- select(flights, year:day, origin, carrier, tailnum))\n\n# A tibble: 336,776 × 6\n    year month   day origin carrier tailnum\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;  \n 1  2013     1     1 EWR    UA      N14228 \n 2  2013     1     1 LGA    UA      N24211 \n 3  2013     1     1 JFK    AA      N619AA \n 4  2013     1     1 JFK    B6      N804JB \n 5  2013     1     1 LGA    DL      N668DN \n 6  2013     1     1 EWR    UA      N39463 \n 7  2013     1     1 EWR    B6      N516JB \n 8  2013     1     1 LGA    EV      N829AS \n 9  2013     1     1 JFK    B6      N593JB \n10  2013     1     1 LGA    AA      N3ALAA \n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#set-up-1",
    "href": "slides/17_mergingcolumns.html#set-up-1",
    "title": "Merging columns",
    "section": "Set-up",
    "text": "Set-up\n\n(planes2 &lt;- select(planes, tailnum, year, model, seats))\n\n# A tibble: 3,322 × 4\n   tailnum  year model     seats\n   &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;     &lt;int&gt;\n 1 N10156   2004 EMB-145XR    55\n 2 N102UW   1998 A320-214    182\n 3 N103US   1999 A320-214    182\n 4 N104UW   1999 A320-214    182\n 5 N10575   2002 EMB-145LR    55\n 6 N105UW   1999 A320-214    182\n 7 N107US   1999 A320-214    182\n 8 N108UW   1999 A320-214    182\n 9 N109UW   1999 A320-214    182\n10 N110UW   1999 A320-214    182\n# ℹ 3,312 more rows"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#joining-with-dplyr",
    "href": "slides/17_mergingcolumns.html#joining-with-dplyr",
    "title": "Merging columns",
    "section": "Joining with {dplyr}",
    "text": "Joining with {dplyr}\n\nlibrary(dplyr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource: Garrick Aden-Buie"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#merging-data-1",
    "href": "slides/17_mergingcolumns.html#merging-data-1",
    "title": "Merging columns",
    "section": "Merging data",
    "text": "Merging data\n\nlibrary(nycflights13)"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#keys",
    "href": "slides/17_mergingcolumns.html#keys",
    "title": "Merging columns",
    "section": "Keys",
    "text": "Keys\n\n\nUnique identifiers of observations\nKeys may take some work to produce\n\nDouble check keys for uniqueness/duplicates\n\nHow do we do this?\n\n\n\nCreate surrogate key if no primary key exists\n\nCombine columns to make unique key (which function?)\nCreate column of row numbers with row_number() (which function?)"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#joins",
    "href": "slides/17_mergingcolumns.html#joins",
    "title": "Merging columns",
    "section": "Joins",
    "text": "Joins"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#mutating-joins",
    "href": "slides/17_mergingcolumns.html#mutating-joins",
    "title": "Merging columns",
    "section": "Mutating joins",
    "text": "Mutating joins\nAffects columns"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#mutating-joins-1",
    "href": "slides/17_mergingcolumns.html#mutating-joins-1",
    "title": "Merging columns",
    "section": "Mutating joins",
    "text": "Mutating joins\nAffects columns"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#inner-joins",
    "href": "slides/17_mergingcolumns.html#inner-joins",
    "title": "Merging columns",
    "section": "Inner joins",
    "text": "Inner joins\nKeep only matching observations"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#inner-joins-1",
    "href": "slides/17_mergingcolumns.html#inner-joins-1",
    "title": "Merging columns",
    "section": "Inner joins",
    "text": "Inner joins\n\n\n\n\nx\n\n# A tibble: 3 × 2\n    key val_x\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2   \n3     3 x3   \n\ny\n\n# A tibble: 3 × 2\n    key val_y\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 y1   \n2     2 y2   \n3     4 y3   \n\n\n\n\n\ninner_join(x, y)\n\n# A tibble: 2 × 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n\n\n\nx |&gt; \n  inner_join(y, by = \"key\")\n\n# A tibble: 2 × 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#inner-joins-2",
    "href": "slides/17_mergingcolumns.html#inner-joins-2",
    "title": "Merging columns",
    "section": "Inner joins",
    "text": "Inner joins\n\n\nglimpse(flights2)\n\nRows: 336,776\nColumns: 6\n$ year    &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 20…\n$ month   &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ day     &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ origin  &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\", \"JFK\",…\n$ carrier &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"AA\", \"B…\n$ tailnum &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N39463\", \"N…\n\nglimpse(planes2)\n\nRows: 3,322\nColumns: 4\n$ tailnum &lt;chr&gt; \"N10156\", \"N102UW\", \"N103US\", \"N104UW\", \"N10575\", \"N105UW\", \"N…\n$ year    &lt;int&gt; 2004, 1998, 1999, 1999, 2002, 1999, 1999, 1999, 1999, 1999, 20…\n$ model   &lt;chr&gt; \"EMB-145XR\", \"A320-214\", \"A320-214\", \"A320-214\", \"EMB-145LR\", …\n$ seats   &lt;int&gt; 55, 182, 182, 182, 55, 182, 182, 182, 182, 182, 55, 55, 55, 55…"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#inner-joins-3",
    "href": "slides/17_mergingcolumns.html#inner-joins-3",
    "title": "Merging columns",
    "section": "Inner joins",
    "text": "Inner joins\n\nflights2 |&gt;\n  inner_join(planes2, by = \"tailnum\")\n\n# A tibble: 284,170 × 9\n   year.x month   day origin carrier tailnum year.y model       seats\n    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;       &lt;int&gt;\n 1   2013     1     1 EWR    UA      N14228    1999 737-824       149\n 2   2013     1     1 LGA    UA      N24211    1998 737-824       149\n 3   2013     1     1 JFK    AA      N619AA    1990 757-223       178\n 4   2013     1     1 JFK    B6      N804JB    2012 A320-232      200\n 5   2013     1     1 LGA    DL      N668DN    1991 757-232       178\n 6   2013     1     1 EWR    UA      N39463    2012 737-924ER     191\n 7   2013     1     1 EWR    B6      N516JB    2000 A320-232      200\n 8   2013     1     1 LGA    EV      N829AS    1998 CL-600-2B19    55\n 9   2013     1     1 JFK    B6      N593JB    2004 A320-232      200\n10   2013     1     1 JFK    B6      N793JB    2011 A320-232      200\n# ℹ 284,160 more rows\n\n\n\nWhat do you notice about the result?"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#inner-joins-4",
    "href": "slides/17_mergingcolumns.html#inner-joins-4",
    "title": "Merging columns",
    "section": "Inner joins",
    "text": "Inner joins\n\n\n\n\n\n\nOnly use inner joins when you want the intersection of the two data sets!"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#outer-joins",
    "href": "slides/17_mergingcolumns.html#outer-joins",
    "title": "Merging columns",
    "section": "Outer joins",
    "text": "Outer joins\n\n\nKeep observations that appear in at least one of the tables\n\nLeft\nRight\nFull"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#left-joins",
    "href": "slides/17_mergingcolumns.html#left-joins",
    "title": "Merging columns",
    "section": "Left joins",
    "text": "Left joins\nKeep only left observations"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#left-joins-1",
    "href": "slides/17_mergingcolumns.html#left-joins-1",
    "title": "Merging columns",
    "section": "Left joins",
    "text": "Left joins\n\n\n\n\nx\n\n# A tibble: 3 × 2\n    key val_x\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2   \n3     3 x3   \n\ny\n\n# A tibble: 3 × 2\n    key val_y\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 y1   \n2     2 y2   \n3     4 y3   \n\n\n\n\nleft_join(x, y, by = \"key\")\n\n# A tibble: 3 × 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    &lt;NA&gt;"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#left-joins-2",
    "href": "slides/17_mergingcolumns.html#left-joins-2",
    "title": "Merging columns",
    "section": "Left joins",
    "text": "Left joins\n\nhead(flights2)\n\n# A tibble: 6 × 6\n   year month   day origin carrier tailnum\n  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;  \n1  2013     1     1 EWR    UA      N14228 \n2  2013     1     1 LGA    UA      N24211 \n3  2013     1     1 JFK    AA      N619AA \n4  2013     1     1 JFK    B6      N804JB \n5  2013     1     1 LGA    DL      N668DN \n6  2013     1     1 EWR    UA      N39463 \n\nhead(planes2)\n\n# A tibble: 6 × 4\n  tailnum  year model     seats\n  &lt;chr&gt;   &lt;int&gt; &lt;chr&gt;     &lt;int&gt;\n1 N10156   2004 EMB-145XR    55\n2 N102UW   1998 A320-214    182\n3 N103US   1999 A320-214    182\n4 N104UW   1999 A320-214    182\n5 N10575   2002 EMB-145LR    55\n6 N105UW   1999 A320-214    182"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#left-joins-3",
    "href": "slides/17_mergingcolumns.html#left-joins-3",
    "title": "Merging columns",
    "section": "Left joins",
    "text": "Left joins\n\nflights2 |&gt;\n  left_join(planes2, by = \"tailnum\")\n\n# A tibble: 336,776 × 9\n   year.x month   day origin carrier tailnum year.y model       seats\n    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;       &lt;int&gt;\n 1   2013     1     1 EWR    UA      N14228    1999 737-824       149\n 2   2013     1     1 LGA    UA      N24211    1998 737-824       149\n 3   2013     1     1 JFK    AA      N619AA    1990 757-223       178\n 4   2013     1     1 JFK    B6      N804JB    2012 A320-232      200\n 5   2013     1     1 LGA    DL      N668DN    1991 757-232       178\n 6   2013     1     1 EWR    UA      N39463    2012 737-924ER     191\n 7   2013     1     1 EWR    B6      N516JB    2000 A320-232      200\n 8   2013     1     1 LGA    EV      N829AS    1998 CL-600-2B19    55\n 9   2013     1     1 JFK    B6      N593JB    2004 A320-232      200\n10   2013     1     1 LGA    AA      N3ALAA      NA &lt;NA&gt;           NA\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#left-joins-4",
    "href": "slides/17_mergingcolumns.html#left-joins-4",
    "title": "Merging columns",
    "section": "Left joins",
    "text": "Left joins\n\n\n\n\n\n\nSelect columns used to join with argument by.\nOtherwise, it uses all shared columns, which may be wrong.\n\n\n\n\nflights2 |&gt;\n  left_join(planes2)\n\n# A tibble: 336,776 × 8\n    year month   day origin carrier tailnum model seats\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt; &lt;int&gt;\n 1  2013     1     1 EWR    UA      N14228  &lt;NA&gt;     NA\n 2  2013     1     1 LGA    UA      N24211  &lt;NA&gt;     NA\n 3  2013     1     1 JFK    AA      N619AA  &lt;NA&gt;     NA\n 4  2013     1     1 JFK    B6      N804JB  &lt;NA&gt;     NA\n 5  2013     1     1 LGA    DL      N668DN  &lt;NA&gt;     NA\n 6  2013     1     1 EWR    UA      N39463  &lt;NA&gt;     NA\n 7  2013     1     1 EWR    B6      N516JB  &lt;NA&gt;     NA\n 8  2013     1     1 LGA    EV      N829AS  &lt;NA&gt;     NA\n 9  2013     1     1 JFK    B6      N593JB  &lt;NA&gt;     NA\n10  2013     1     1 LGA    AA      N3ALAA  &lt;NA&gt;     NA\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#right-joins",
    "href": "slides/17_mergingcolumns.html#right-joins",
    "title": "Merging columns",
    "section": "Right joins",
    "text": "Right joins\nKeep only right observations"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#right-joins-1",
    "href": "slides/17_mergingcolumns.html#right-joins-1",
    "title": "Merging columns",
    "section": "Right joins",
    "text": "Right joins\n\n\n\n\nx\n\n# A tibble: 3 × 2\n    key val_x\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2   \n3     3 x3   \n\ny\n\n# A tibble: 3 × 2\n    key val_y\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 y1   \n2     2 y2   \n3     4 y3   \n\n\n\n\nright_join(x, y, by = \"key\")\n\n# A tibble: 3 × 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     4 &lt;NA&gt;  y3"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#full-joins",
    "href": "slides/17_mergingcolumns.html#full-joins",
    "title": "Merging columns",
    "section": "Full joins",
    "text": "Full joins\nKeep all observations"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#full-joins-1",
    "href": "slides/17_mergingcolumns.html#full-joins-1",
    "title": "Merging columns",
    "section": "Full joins",
    "text": "Full joins\n\n\n\n\nx\n\n# A tibble: 3 × 2\n    key val_x\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2   \n3     3 x3   \n\ny\n\n# A tibble: 3 × 2\n    key val_y\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 y1   \n2     2 y2   \n3     4 y3   \n\n\n\n\nfull_join(x, y, by = \"key\")\n\n# A tibble: 4 × 3\n    key val_x val_y\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    &lt;NA&gt; \n4     4 &lt;NA&gt;  y3"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#different-column-names",
    "href": "slides/17_mergingcolumns.html#different-column-names",
    "title": "Merging columns",
    "section": "Different column names",
    "text": "Different column names\nWhat if datasets have different column names for the same key?\n\n\nglimpse(flights2)\n\nRows: 336,776\nColumns: 6\n$ year    &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 20…\n$ month   &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ day     &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ origin  &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\", \"JFK\",…\n$ carrier &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"AA\", \"B…\n$ tailnum &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N39463\", \"N…\n\nairports2 &lt;- select(airports, faa, name)\nglimpse(airports2)\n\nRows: 1,458\nColumns: 2\n$ faa  &lt;chr&gt; \"04G\", \"06A\", \"06C\", \"06N\", \"09J\", \"0A9\", \"0G6\", \"0G7\", \"0P2\", \"0…\n$ name &lt;chr&gt; \"Lansdowne Airport\", \"Moton Field Municipal Airport\", \"Schaumburg…"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#different-column-names-1",
    "href": "slides/17_mergingcolumns.html#different-column-names-1",
    "title": "Merging columns",
    "section": "Different column names",
    "text": "Different column names\njoin_by()\n\nleft_join(flights2, airports2, by = join_by(origin == faa))\n\n# A tibble: 336,776 × 7\n    year month   day origin carrier tailnum name               \n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;              \n 1  2013     1     1 EWR    UA      N14228  Newark Liberty Intl\n 2  2013     1     1 LGA    UA      N24211  La Guardia         \n 3  2013     1     1 JFK    AA      N619AA  John F Kennedy Intl\n 4  2013     1     1 JFK    B6      N804JB  John F Kennedy Intl\n 5  2013     1     1 LGA    DL      N668DN  La Guardia         \n 6  2013     1     1 EWR    UA      N39463  Newark Liberty Intl\n 7  2013     1     1 EWR    B6      N516JB  Newark Liberty Intl\n 8  2013     1     1 LGA    EV      N829AS  La Guardia         \n 9  2013     1     1 JFK    B6      N593JB  John F Kennedy Intl\n10  2013     1     1 LGA    AA      N3ALAA  La Guardia         \n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#solving-the-problem",
    "href": "slides/17_mergingcolumns.html#solving-the-problem",
    "title": "Merging columns",
    "section": "Solving the problem",
    "text": "Solving the problem\n\nlibrary(tidyverse)\nnrows &lt;- 12\nset.seed(20250228)\ndata1 &lt;- tibble(id = rep(1:4, each = 3), \n                cond = rep(1:3, times = 4), \n                resp = round(runif(nrows), 3))\ndata2 &lt;- tibble(id = 1:6, \n                age = sample(19:75, 6, replace = TRUE))"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#solving-the-problem-1",
    "href": "slides/17_mergingcolumns.html#solving-the-problem-1",
    "title": "Merging columns",
    "section": "Solving the problem",
    "text": "Solving the problem\nWhat code combines data1 and data2 into data3?\n\n\n\ndata1\n\n# A tibble: 12 × 3\n      id  cond  resp\n   &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n 1     1     1 0.092\n 2     1     2 0.878\n 3     1     3 0.449\n 4     2     1 0.911\n 5     2     2 0.33 \n 6     2     3 0.549\n 7     3     1 0.797\n 8     3     2 0.482\n 9     3     3 0.893\n10     4     1 0.638\n11     4     2 0.316\n12     4     3 0.614\n\n\n\n\ndata2\n\n# A tibble: 6 × 2\n     id   age\n  &lt;int&gt; &lt;int&gt;\n1     1    41\n2     2    26\n3     3    29\n4     4    46\n5     5    42\n6     6    41\n\n\n\n\ndata3\n\n# A tibble: 12 × 4\n      id   age  cond  resp\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n 1     1    41     1 0.092\n 2     1    41     2 0.878\n 3     1    41     3 0.449\n 4     2    26     1 0.911\n 5     2    26     2 0.33 \n 6     2    26     3 0.549\n 7     3    29     1 0.797\n 8     3    29     2 0.482\n 9     3    29     3 0.893\n10     4    46     1 0.638\n11     4    46     2 0.316\n12     4    46     3 0.614"
  },
  {
    "objectID": "slides/17_mergingcolumns.html#lets-code",
    "href": "slides/17_mergingcolumns.html#lets-code",
    "title": "Merging columns",
    "section": "Let’s code!",
    "text": "Let’s code!\nMerging columns"
  },
  {
    "objectID": "slides/15_pivoting.html#name-that-function",
    "href": "slides/15_pivoting.html#name-that-function",
    "title": "Pivoting data",
    "section": "Name that function",
    "text": "Name that function\n\n\nreturn subset of rows based on position in data frame\nreturn subset of rows based on column values\nreturn subset of columns based on position in data frame\nreturn subset of columns based on name\nreorder rows by column values\nreorder columns manually\ncreate new columns\naggregate rows with summary functions"
  },
  {
    "objectID": "slides/15_pivoting.html#mental-model-of-data-analysis",
    "href": "slides/15_pivoting.html#mental-model-of-data-analysis",
    "title": "Pivoting data",
    "section": "Mental model of data analysis",
    "text": "Mental model of data analysis"
  },
  {
    "objectID": "slides/15_pivoting.html#the-problem",
    "href": "slides/15_pivoting.html#the-problem",
    "title": "Pivoting data",
    "section": "The problem",
    "text": "The problem\nWhat’s different between these data sets?\nWhat needs to happen to create data2 from data1?\n\n\n\ndata1\n\n   id condition   response\n1   1     cond1 0.20826607\n2   1     cond2 0.98142701\n3   1     cond3 0.08186109\n4   2     cond1 0.96427203\n5   2     cond2 0.07697982\n6   2     cond3 0.67866334\n7   3     cond1 0.22544114\n8   3     cond2 0.43792412\n9   3     cond3 0.62341431\n10  4     cond1 0.18529764\n11  4     cond2 0.07576630\n12  4     cond3 0.94208550\n\n\n\n\ndata2\n\n# A tibble: 4 × 4\n     id cond1  cond2  cond3\n  &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1     1 0.208 0.981  0.0819\n2     2 0.964 0.0770 0.679 \n3     3 0.225 0.438  0.623 \n4     4 0.185 0.0758 0.942"
  },
  {
    "objectID": "slides/15_pivoting.html#today-we",
    "href": "slides/15_pivoting.html#today-we",
    "title": "Pivoting data",
    "section": "Today we …",
    "text": "Today we …"
  },
  {
    "objectID": "slides/15_pivoting.html#mental-model-of-tidy-data",
    "href": "slides/15_pivoting.html#mental-model-of-tidy-data",
    "title": "Pivoting data",
    "section": "Mental model of tidy data",
    "text": "Mental model of tidy data"
  },
  {
    "objectID": "slides/15_pivoting.html#tidying-data-with-tidyr-and-dplyr",
    "href": "slides/15_pivoting.html#tidying-data-with-tidyr-and-dplyr",
    "title": "Pivoting data",
    "section": "Tidying data with {tidyr} and {dplyr}",
    "text": "Tidying data with {tidyr} and {dplyr}\n\nlibrary(tidyr)\nlibrary(dplyr)\n\n\n\n\n\n\nSource: Allison Horst"
  },
  {
    "objectID": "slides/15_pivoting.html#what-is-tidy-data",
    "href": "slides/15_pivoting.html#what-is-tidy-data",
    "title": "Pivoting data",
    "section": "What is tidy data?",
    "text": "What is tidy data?\n\nEach variable has its own column\nEach observation has its own row\nEach value has its own cell"
  },
  {
    "objectID": "slides/15_pivoting.html#tidy-data-1",
    "href": "slides/15_pivoting.html#tidy-data-1",
    "title": "Pivoting data",
    "section": "Tidy data",
    "text": "Tidy data\nEvery variable is a column, every observation is a row, and every value is a cell\n\n\n\nIs table1 tidy? Why/why not?\n\ntable1\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\n\n\n\n\nIs table2 tidy? Why/why not?\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583"
  },
  {
    "objectID": "slides/15_pivoting.html#tidy-data-2",
    "href": "slides/15_pivoting.html#tidy-data-2",
    "title": "Pivoting data",
    "section": "Tidy data",
    "text": "Tidy data\nEvery variable is a column, every observation is a row, and every value is a cell\nIs table3 tidy? Why/why not?\n\ntable3\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583"
  },
  {
    "objectID": "slides/15_pivoting.html#tidy-data-3",
    "href": "slides/15_pivoting.html#tidy-data-3",
    "title": "Pivoting data",
    "section": "Tidy data",
    "text": "Tidy data\nEvery variable is a column, every observation is a row, and every value is a cell\n\n\nIs table4a tidy? Why/why not?\n\ntable4a\n\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n\n\n\nIs table4b tidy? Why/why not?\n\ntable4b\n\n# A tibble: 3 × 3\n  country         `1999`     `2000`\n  &lt;chr&gt;            &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan   19987071   20595360\n2 Brazil       172006362  174504898\n3 China       1272915272 1280428583"
  },
  {
    "objectID": "slides/15_pivoting.html#tidy-data-4",
    "href": "slides/15_pivoting.html#tidy-data-4",
    "title": "Pivoting data",
    "section": "Tidy data",
    "text": "Tidy data\n\nThink about tidy from a model perspective\nTidyverse assumes tidy data\nEasier to analyze and plot tidy data\nBut sometimes easier to store non-tidy data"
  },
  {
    "objectID": "slides/15_pivoting.html#pivoting-data-1",
    "href": "slides/15_pivoting.html#pivoting-data-1",
    "title": "Pivoting data",
    "section": "Pivoting data",
    "text": "Pivoting data"
  },
  {
    "objectID": "slides/15_pivoting.html#pivoting-data-2",
    "href": "slides/15_pivoting.html#pivoting-data-2",
    "title": "Pivoting data",
    "section": "Pivoting data",
    "text": "Pivoting data\n\n\n\nSource: Garrick Aden-Buie"
  },
  {
    "objectID": "slides/15_pivoting.html#wide-data",
    "href": "slides/15_pivoting.html#wide-data",
    "title": "Pivoting data",
    "section": "Wide data",
    "text": "Wide data\n\n\n\ntable4a\n\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n\n\n\nWhy is table4a not tidy?"
  },
  {
    "objectID": "slides/15_pivoting.html#wide-data-1",
    "href": "slides/15_pivoting.html#wide-data-1",
    "title": "Pivoting data",
    "section": "Wide data",
    "text": "Wide data\nUse pivot_longer()\n\n\npivot_longer(table4a, cols = c(`1999`, `2000`), \n             names_to = \"year\", values_to = \"cases\")\n\n# A tibble: 6 × 3\n  country     year   cases\n  &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt;\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766"
  },
  {
    "objectID": "slides/15_pivoting.html#long-data",
    "href": "slides/15_pivoting.html#long-data",
    "title": "Pivoting data",
    "section": "Long data",
    "text": "Long data\n\n\n\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\n\n\n\nWhy is table2 not tidy?"
  },
  {
    "objectID": "slides/15_pivoting.html#long-data-1",
    "href": "slides/15_pivoting.html#long-data-1",
    "title": "Pivoting data",
    "section": "Long data",
    "text": "Long data\nUse pivot_wider()\n\n\npivot_wider(table2, id_cols = c(\"country\", \"year\"), \n            names_from = type, values_from = count)\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583"
  },
  {
    "objectID": "slides/15_pivoting.html#solving-the-problem",
    "href": "slides/15_pivoting.html#solving-the-problem",
    "title": "Pivoting data",
    "section": "Solving the problem",
    "text": "Solving the problem\nWhat code turns data1 into data2? And vice versa?\n\nset.seed(20250224)\ndata1 &lt;- data.frame(id = rep(1:4, each = 3), condition = paste0(\"cond\", rep(1:3, times = 4)), response = runif(12)\n)\n\n\n\n\ndata1\n\n   id condition   response\n1   1     cond1 0.20826607\n2   1     cond2 0.98142701\n3   1     cond3 0.08186109\n4   2     cond1 0.96427203\n5   2     cond2 0.07697982\n6   2     cond3 0.67866334\n7   3     cond1 0.22544114\n8   3     cond2 0.43792412\n9   3     cond3 0.62341431\n10  4     cond1 0.18529764\n11  4     cond2 0.07576630\n12  4     cond3 0.94208550\n\n\n\n\ndata2\n\n# A tibble: 4 × 4\n     id cond1  cond2  cond3\n  &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1     1 0.208 0.981  0.0819\n2     2 0.964 0.0770 0.679 \n3     3 0.225 0.438  0.623 \n4     4 0.185 0.0758 0.942"
  },
  {
    "objectID": "slides/15_pivoting.html#lets-code",
    "href": "slides/15_pivoting.html#lets-code",
    "title": "Pivoting data",
    "section": "Let’s code!",
    "text": "Let’s code!\nPivoting data"
  },
  {
    "objectID": "slides/13_filtering.html#the-problem",
    "href": "slides/13_filtering.html#the-problem",
    "title": "Filtering rows",
    "section": "The problem",
    "text": "The problem\nWhat’s different between these data sets? What can we use to create data2 from data1?\n\n\n\ndata1\n\n  cond id       date\n1    1  1 2025-01-18\n2    3  2 2025-02-20\n3    1  3 2025-02-02\n4    2  4 2025-01-21\n5    1  5 2025-02-25\n6    3  6 2025-02-11\n7    3  7 2025-02-15\n8    2  8 2025-01-10\n\n\n\n\ndata2\n\n         cond id    month       date\n1 Condition 1  1  January 2025-01-18\n2 Condition 3  2 February 2025-02-20\n3 Condition 1  3 February 2025-02-02\n4 Condition 2  4  January 2025-01-21\n5 Condition 1  5 February 2025-02-25\n6 Condition 3  6 February 2025-02-11\n7 Condition 3  7 February 2025-02-15\n8 Condition 2  8  January 2025-01-10"
  },
  {
    "objectID": "slides/13_filtering.html#the-problem-1",
    "href": "slides/13_filtering.html#the-problem-1",
    "title": "Filtering rows",
    "section": "The problem",
    "text": "The problem\nWhat’s different between these data sets? What can we use to create data3 from data1?\n\n\n\ndata1\n\n  cond id       date\n1    1  1 2025-01-18\n2    3  2 2025-02-20\n3    1  3 2025-02-02\n4    2  4 2025-01-21\n5    1  5 2025-02-25\n6    3  6 2025-02-11\n7    3  7 2025-02-15\n8    2  8 2025-01-10\n\n\n\n\ndata3\n\n  id cond\n1  1    1\n2  2    3\n3  3    1\n4  4    2\n5  5    1\n6  6    3\n7  7    3\n8  8    2"
  },
  {
    "objectID": "slides/13_filtering.html#the-problem-2",
    "href": "slides/13_filtering.html#the-problem-2",
    "title": "Filtering rows",
    "section": "The problem",
    "text": "The problem\nWhat’s different between these data sets? What needs to happen to create data4 from data1?\n\n\n\ndata1\n\n  cond id       date\n1    1  1 2025-01-18\n2    3  2 2025-02-20\n3    1  3 2025-02-02\n4    2  4 2025-01-21\n5    1  5 2025-02-25\n6    3  6 2025-02-11\n7    3  7 2025-02-15\n8    2  8 2025-01-10\n\n\n\n\ndata4\n\n  cond id       date\n1    2  8 2025-01-10\n2    1  1 2025-01-18\n3    2  4 2025-01-21\n4    1  3 2025-02-02\n5    1  5 2025-02-25"
  },
  {
    "objectID": "slides/13_filtering.html#data-wrangling",
    "href": "slides/13_filtering.html#data-wrangling",
    "title": "Filtering rows",
    "section": "Data wrangling",
    "text": "Data wrangling"
  },
  {
    "objectID": "slides/13_filtering.html#set-up",
    "href": "slides/13_filtering.html#set-up",
    "title": "Filtering rows",
    "section": "Set-up",
    "text": "Set-up\n\nlibrary(tidyverse)\nlibrary(nycflights13)\n(flights2 &lt;- select(flights, year:dep_delay, air_time))\n\n# A tibble: 336,776 × 7\n    year month   day dep_time sched_dep_time dep_delay air_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1  2013     1     1      517            515         2      227\n 2  2013     1     1      533            529         4      227\n 3  2013     1     1      542            540         2      160\n 4  2013     1     1      544            545        -1      183\n 5  2013     1     1      554            600        -6      116\n 6  2013     1     1      554            558        -4      150\n 7  2013     1     1      555            600        -5      158\n 8  2013     1     1      557            600        -3       53\n 9  2013     1     1      557            600        -3      140\n10  2013     1     1      558            600        -2      138\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/13_filtering.html#what-is-a-pipe-doing",
    "href": "slides/13_filtering.html#what-is-a-pipe-doing",
    "title": "Filtering rows",
    "section": "What is a pipe doing?",
    "text": "What is a pipe doing?\n\nflights |&gt; \n  select(month:day, contains(\"_time\")) |&gt; \n  mutate(across(contains(\"_time\"), as.character)) |&gt; \n  head(n = 2)\n\n# A tibble: 2 × 7\n  month   day dep_time sched_dep_time arr_time sched_arr_time air_time\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;   \n1     1     1 517      515            830      819            227     \n2     1     1 533      529            850      830            227     \n\n\n\nis equivalent to\n\n  head(mutate(select(flights, month:day, contains(\"_time\")), \n              across(contains(\"_time\"), as.character)), n = 2)\n\n# A tibble: 2 × 7\n  month   day dep_time sched_dep_time arr_time sched_arr_time air_time\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;   \n1     1     1 517      515            830      819            227     \n2     1     1 533      529            850      830            227"
  },
  {
    "objectID": "slides/13_filtering.html#filter",
    "href": "slides/13_filtering.html#filter",
    "title": "Filtering rows",
    "section": "filter()",
    "text": "filter()\n\n\n\n\n\nFiltering keeps rows/observations/cases that fulfill the conditional statement"
  },
  {
    "objectID": "slides/13_filtering.html#filter-1",
    "href": "slides/13_filtering.html#filter-1",
    "title": "Filtering rows",
    "section": "filter()",
    "text": "filter()\nWhat does this return?\n\nflights2 |&gt; \n  filter(dep_time == sched_dep_time)"
  },
  {
    "objectID": "slides/13_filtering.html#filter-2",
    "href": "slides/13_filtering.html#filter-2",
    "title": "Filtering rows",
    "section": "filter()",
    "text": "filter()\nWhat does this return?\n\nflights2 |&gt; \n  filter(dep_time == sched_dep_time)\n\n# A tibble: 16,514 × 7\n    year month   day dep_time sched_dep_time dep_delay air_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1  2013     1     1      559            559         0       44\n 2  2013     1     1      600            600         0      152\n 3  2013     1     1      600            600         0      134\n 4  2013     1     1      607            607         0      157\n 5  2013     1     1      615            615         0      182\n 6  2013     1     1      615            615         0      120\n 7  2013     1     1      635            635         0      248\n 8  2013     1     1      655            655         0      294\n 9  2013     1     1      739            739         0      249\n10  2013     1     1      745            745         0      378\n# ℹ 16,504 more rows"
  },
  {
    "objectID": "slides/13_filtering.html#filter-3",
    "href": "slides/13_filtering.html#filter-3",
    "title": "Filtering rows",
    "section": "filter()",
    "text": "filter()\nMultiple conditions: Logical AND\n\nflights2 |&gt; \n  filter(dep_delay &lt; 0 & month == 2)\n\n# A tibble: 13,397 × 7\n    year month   day dep_time sched_dep_time dep_delay air_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1  2013     2     1      456            500        -4       98\n 2  2013     2     1      520            525        -5      209\n 3  2013     2     1      527            530        -3      233\n 4  2013     2     1      532            540        -8      195\n 5  2013     2     1      552            600        -8       58\n 6  2013     2     1      552            600        -8      227\n 7  2013     2     1      552            600        -8       42\n 8  2013     2     1      553            600        -7      134\n 9  2013     2     1      553            600        -7      125\n10  2013     2     1      553            600        -7       49\n# ℹ 13,387 more rows"
  },
  {
    "objectID": "slides/13_filtering.html#filter-4",
    "href": "slides/13_filtering.html#filter-4",
    "title": "Filtering rows",
    "section": "filter()",
    "text": "filter()\nMultiple conditions: Logical OR\n\nflights2 |&gt; \n  filter(month == 11 | month == 12)\n\n# A tibble: 55,403 × 7\n    year month   day dep_time sched_dep_time dep_delay air_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1  2013    11     1        5           2359         6      205\n 2  2013    11     1       35           2250       105       36\n 3  2013    11     1      455            500        -5       88\n 4  2013    11     1      539            545        -6      229\n 5  2013    11     1      542            545        -3      147\n 6  2013    11     1      549            600       -11      359\n 7  2013    11     1      550            600       -10       57\n 8  2013    11     1      554            600        -6       40\n 9  2013    11     1      554            600        -6      126\n10  2013    11     1      554            600        -6       93\n# ℹ 55,393 more rows"
  },
  {
    "objectID": "slides/13_filtering.html#filter-5",
    "href": "slides/13_filtering.html#filter-5",
    "title": "Filtering rows",
    "section": "filter()",
    "text": "filter()\nLogical %in%\n\nflights2 |&gt; \n  filter(month %in% c(11, 12))\n\n# A tibble: 55,403 × 7\n    year month   day dep_time sched_dep_time dep_delay air_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1  2013    11     1        5           2359         6      205\n 2  2013    11     1       35           2250       105       36\n 3  2013    11     1      455            500        -5       88\n 4  2013    11     1      539            545        -6      229\n 5  2013    11     1      542            545        -3      147\n 6  2013    11     1      549            600       -11      359\n 7  2013    11     1      550            600       -10       57\n 8  2013    11     1      554            600        -6       40\n 9  2013    11     1      554            600        -6      126\n10  2013    11     1      554            600        -6       93\n# ℹ 55,393 more rows"
  },
  {
    "objectID": "slides/13_filtering.html#filter-6",
    "href": "slides/13_filtering.html#filter-6",
    "title": "Filtering rows",
    "section": "filter()",
    "text": "filter()\nNegating conditional\n\nflights2 |&gt; \n  filter(month != 1)\n\n# A tibble: 309,772 × 7\n    year month   day dep_time sched_dep_time dep_delay air_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1  2013    10     1      447            500       -13       69\n 2  2013    10     1      522            517         5      174\n 3  2013    10     1      536            545        -9      132\n 4  2013    10     1      539            545        -6      172\n 5  2013    10     1      539            545        -6      186\n 6  2013    10     1      544            550        -6      191\n 7  2013    10     1      549            600       -11       46\n 8  2013    10     1      550            600       -10       38\n 9  2013    10     1      550            600       -10       39\n10  2013    10     1      551            600        -9      117\n# ℹ 309,762 more rows"
  },
  {
    "objectID": "slides/13_filtering.html#filter-7",
    "href": "slides/13_filtering.html#filter-7",
    "title": "Filtering rows",
    "section": "filter()",
    "text": "filter()\nNegating multiple conditionals\n\nflights2 |&gt; \n  filter(month != 1 & day != 1)\n\n# A tibble: 299,578 × 7\n    year month   day dep_time sched_dep_time dep_delay air_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1  2013    10     2      449            500       -11       73\n 2  2013    10     2      513            517        -4      180\n 3  2013    10     2      537            545        -8      190\n 4  2013    10     2      540            545        -5      181\n 5  2013    10     2      543            545        -2      134\n 6  2013    10     2      546            550        -4      192\n 7  2013    10     2      548            600       -12       48\n 8  2013    10     2      548            600       -12       42\n 9  2013    10     2      550            600       -10       32\n10  2013    10     2      552            600        -8       40\n# ℹ 299,568 more rows"
  },
  {
    "objectID": "slides/13_filtering.html#filter-8",
    "href": "slides/13_filtering.html#filter-8",
    "title": "Filtering rows",
    "section": "filter()",
    "text": "filter()\nCheck if NA with is.na()\n\n\nflights2 |&gt; \n  filter(is.na(dep_time))\n\n# A tibble: 8,255 × 7\n    year month   day dep_time sched_dep_time dep_delay air_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1  2013     1     1       NA           1630        NA       NA\n 2  2013     1     1       NA           1935        NA       NA\n 3  2013     1     1       NA           1500        NA       NA\n 4  2013     1     1       NA            600        NA       NA\n 5  2013     1     2       NA           1540        NA       NA\n 6  2013     1     2       NA           1620        NA       NA\n 7  2013     1     2       NA           1355        NA       NA\n 8  2013     1     2       NA           1420        NA       NA\n 9  2013     1     2       NA           1321        NA       NA\n10  2013     1     2       NA           1545        NA       NA\n# ℹ 8,245 more rows"
  },
  {
    "objectID": "slides/13_filtering.html#filter-9",
    "href": "slides/13_filtering.html#filter-9",
    "title": "Filtering rows",
    "section": "filter()",
    "text": "filter()\nCheck if NA across multiple columns with is.na() and if_any()\n\n\nflights2 |&gt; \n  filter(if_any(everything(), is.na))\n\n# A tibble: 9,430 × 7\n    year month   day dep_time sched_dep_time dep_delay air_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1  2013     1     1     1525           1530        -5       NA\n 2  2013     1     1     1528           1459        29       NA\n 3  2013     1     1     1740           1745        -5       NA\n 4  2013     1     1     1807           1738        29       NA\n 5  2013     1     1     1939           1840        59       NA\n 6  2013     1     1     1952           1930        22       NA\n 7  2013     1     1     2016           1930        46       NA\n 8  2013     1     1       NA           1630        NA       NA\n 9  2013     1     1       NA           1935        NA       NA\n10  2013     1     1       NA           1500        NA       NA\n# ℹ 9,420 more rows"
  },
  {
    "objectID": "slides/13_filtering.html#drop_na",
    "href": "slides/13_filtering.html#drop_na",
    "title": "Filtering rows",
    "section": "drop_na()",
    "text": "drop_na()\nFilter column with any NAs with drop_na()\n\n\nnrow(flights2)\n\n[1] 336776\n\n\n\n\nflights2 |&gt; \n  drop_na() |&gt; \n  nrow()\n\n[1] 327346\n\n\n\n\n\nflights2 |&gt; \n  drop_na(dep_time) |&gt; \n  nrow()\n\n[1] 328521\n\n\n\n\nEquivalent to\n\nnrow(drop_na(flights2, dep_time))\n\n[1] 328521"
  },
  {
    "objectID": "slides/13_filtering.html#arrange",
    "href": "slides/13_filtering.html#arrange",
    "title": "Filtering rows",
    "section": "arrange()",
    "text": "arrange()"
  },
  {
    "objectID": "slides/13_filtering.html#arrange-1",
    "href": "slides/13_filtering.html#arrange-1",
    "title": "Filtering rows",
    "section": "arrange()",
    "text": "arrange()\n\nflights2 |&gt; \n  arrange(sched_dep_time)\n\n# A tibble: 336,776 × 7\n    year month   day dep_time sched_dep_time dep_delay air_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1  2013     7    27       NA            106        NA       NA\n 2  2013     1     2      458            500        -2      108\n 3  2013     1     3      458            500        -2       94\n 4  2013     1     4      456            500        -4       77\n 5  2013     1     5      458            500        -2       85\n 6  2013     1     6      458            500        -2       88\n 7  2013     1     7      454            500        -6       86\n 8  2013     1     8      454            500        -6       77\n 9  2013     1     9      457            500        -3       87\n10  2013     1    10      450            500       -10       78\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/13_filtering.html#arrange-2",
    "href": "slides/13_filtering.html#arrange-2",
    "title": "Filtering rows",
    "section": "arrange()",
    "text": "arrange()\nSort multiple rows\n\nflights2 |&gt;\n  arrange(sched_dep_time, dep_time)\n\n# A tibble: 336,776 × 7\n    year month   day dep_time sched_dep_time dep_delay air_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1  2013     7    27       NA            106        NA       NA\n 2  2013     5     8      445            500       -15       78\n 3  2013     5     5      446            500       -14       90\n 4  2013     9     4      446            500       -14       79\n 5  2013    10     1      447            500       -13       69\n 6  2013     9    19      447            500       -13       81\n 7  2013     1    29      448            500       -12       88\n 8  2013    12    27      448            500       -12       92\n 9  2013     5     7      448            500       -12       80\n10  2013    10     2      449            500       -11       73\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/13_filtering.html#arrange-3",
    "href": "slides/13_filtering.html#arrange-3",
    "title": "Filtering rows",
    "section": "arrange()",
    "text": "arrange()\nSort in descending order\n\nflights2 |&gt;\n  arrange(desc(dep_time))\n\n# A tibble: 336,776 × 7\n    year month   day dep_time sched_dep_time dep_delay air_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1  2013    10    30     2400           2359         1      182\n 2  2013    11    27     2400           2359         1      230\n 3  2013    12     5     2400           2359         1      182\n 4  2013    12     9     2400           2359         1      195\n 5  2013    12     9     2400           2250        70       41\n 6  2013    12    13     2400           2359         1      192\n 7  2013    12    19     2400           2359         1      193\n 8  2013    12    29     2400           1700       420      161\n 9  2013     2     7     2400           2359         1      186\n10  2013     2     7     2400           2359         1      194\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/13_filtering.html#solving-the-problem",
    "href": "slides/13_filtering.html#solving-the-problem",
    "title": "Filtering rows",
    "section": "Solving the problem",
    "text": "Solving the problem\nWhat code turns data1 into data4?\n\n\n\ndata1\n\n  cond id       date\n1    1  1 2025-01-18\n2    3  2 2025-02-20\n3    1  3 2025-02-02\n4    2  4 2025-01-21\n5    1  5 2025-02-25\n6    3  6 2025-02-11\n7    3  7 2025-02-15\n8    2  8 2025-01-10\n\n\n\n\ndata4\n\n  cond id       date\n1    2  8 2025-01-10\n2    1  1 2025-01-18\n3    2  4 2025-01-21\n4    1  3 2025-02-02\n5    1  5 2025-02-25"
  },
  {
    "objectID": "slides/13_filtering.html#lets-code",
    "href": "slides/13_filtering.html#lets-code",
    "title": "Filtering rows",
    "section": "Let’s code!",
    "text": "Let’s code!\nFiltering rows"
  },
  {
    "objectID": "slides/11_mutating.html#data-wrangling",
    "href": "slides/11_mutating.html#data-wrangling",
    "title": "Mutating columns",
    "section": "Data wrangling",
    "text": "Data wrangling"
  },
  {
    "objectID": "slides/11_mutating.html#mental-model-of-mutating-columns",
    "href": "slides/11_mutating.html#mental-model-of-mutating-columns",
    "title": "Mutating columns",
    "section": "Mental model of mutating columns",
    "text": "Mental model of mutating columns"
  },
  {
    "objectID": "slides/11_mutating.html#set-up",
    "href": "slides/11_mutating.html#set-up",
    "title": "Mutating columns",
    "section": "Set-up",
    "text": "Set-up\n\nlibrary(dplyr)\nlibrary(nycflights13)\nglimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…"
  },
  {
    "objectID": "slides/11_mutating.html#changing-and-creating-columns",
    "href": "slides/11_mutating.html#changing-and-creating-columns",
    "title": "Mutating columns",
    "section": "Changing and creating columns",
    "text": "Changing and creating columns\ndplyr::mutate()"
  },
  {
    "objectID": "slides/11_mutating.html#changing-existing-columns",
    "href": "slides/11_mutating.html#changing-existing-columns",
    "title": "Mutating columns",
    "section": "Changing existing columns",
    "text": "Changing existing columns"
  },
  {
    "objectID": "slides/11_mutating.html#changing-existing-columns-1",
    "href": "slides/11_mutating.html#changing-existing-columns-1",
    "title": "Mutating columns",
    "section": "Changing existing columns",
    "text": "Changing existing columns\nChanging all values\n\nmutate(flights, month = as.character(month))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;chr&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013 1         1      517            515         2      830            819\n 2  2013 1         1      533            529         4      850            830\n 3  2013 1         1      542            540         2      923            850\n 4  2013 1         1      544            545        -1     1004           1022\n 5  2013 1         1      554            600        -6      812            837\n 6  2013 1         1      554            558        -4      740            728\n 7  2013 1         1      555            600        -5      913            854\n 8  2013 1         1      557            600        -3      709            723\n 9  2013 1         1      557            600        -3      838            846\n10  2013 1         1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/11_mutating.html#changing-existing-columns-2",
    "href": "slides/11_mutating.html#changing-existing-columns-2",
    "title": "Mutating columns",
    "section": "Changing existing columns",
    "text": "Changing existing columns\nConditional changes\nifelse()\n\nmutate(flights, month = ifelse(month &lt; 10, # conditional statement\n                               paste0(\"0\", month), # what to do if TRUE\n                               as.character(month))) # what to do if FALSE\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;chr&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013 01        1      517            515         2      830            819\n 2  2013 01        1      533            529         4      850            830\n 3  2013 01        1      542            540         2      923            850\n 4  2013 01        1      544            545        -1     1004           1022\n 5  2013 01        1      554            600        -6      812            837\n 6  2013 01        1      554            558        -4      740            728\n 7  2013 01        1      555            600        -5      913            854\n 8  2013 01        1      557            600        -3      709            723\n 9  2013 01        1      557            600        -3      838            846\n10  2013 01        1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/11_mutating.html#changing-existing-columns-3",
    "href": "slides/11_mutating.html#changing-existing-columns-3",
    "title": "Mutating columns",
    "section": "Changing existing columns",
    "text": "Changing existing columns\nConditional changes\ndplyr::if_else()\n\nmutate(flights, month = if_else(month &lt; 10,  # conditional statement\n                                paste0(\"0\", month),  # what to do if TRUE\n                                as.character(month),  # what to do if FALSE\n                                NA)) # what to do if missing\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;chr&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013 01        1      517            515         2      830            819\n 2  2013 01        1      533            529         4      850            830\n 3  2013 01        1      542            540         2      923            850\n 4  2013 01        1      544            545        -1     1004           1022\n 5  2013 01        1      554            600        -6      812            837\n 6  2013 01        1      554            558        -4      740            728\n 7  2013 01        1      555            600        -5      913            854\n 8  2013 01        1      557            600        -3      709            723\n 9  2013 01        1      557            600        -3      838            846\n10  2013 01        1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/11_mutating.html#changing-existing-columns-4",
    "href": "slides/11_mutating.html#changing-existing-columns-4",
    "title": "Mutating columns",
    "section": "Changing existing columns",
    "text": "Changing existing columns\nMultiple changes\n\nmutate(flights, \n       month = if_else(month &lt; 10, paste0(\"0\", month), as.character(month), NA),\n       day = if_else(day &lt; 10, paste0(\"0\", day), as.character(day), NA)\n)\n\n# A tibble: 336,776 × 19\n    year month day   dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;chr&gt; &lt;chr&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013 01    01         517            515         2      830            819\n 2  2013 01    01         533            529         4      850            830\n 3  2013 01    01         542            540         2      923            850\n 4  2013 01    01         544            545        -1     1004           1022\n 5  2013 01    01         554            600        -6      812            837\n 6  2013 01    01         554            558        -4      740            728\n 7  2013 01    01         555            600        -5      913            854\n 8  2013 01    01         557            600        -3      709            723\n 9  2013 01    01         557            600        -3      838            846\n10  2013 01    01         558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/11_mutating.html#creating-new-columns",
    "href": "slides/11_mutating.html#creating-new-columns",
    "title": "Mutating columns",
    "section": "Creating new columns",
    "text": "Creating new columns"
  },
  {
    "objectID": "slides/11_mutating.html#creating-new-columns-1",
    "href": "slides/11_mutating.html#creating-new-columns-1",
    "title": "Mutating columns",
    "section": "Creating new columns",
    "text": "Creating new columns\n\nmutate(flights, avg_speed = distance / air_time * 60)\n\n# A tibble: 336,776 × 20\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 12 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, avg_speed &lt;dbl&gt;"
  },
  {
    "objectID": "slides/11_mutating.html#creating-new-columns-2",
    "href": "slides/11_mutating.html#creating-new-columns-2",
    "title": "Mutating columns",
    "section": "Creating new columns",
    "text": "Creating new columns\nMove column when creating\n\nmutate(flights, avg_speed = distance / air_time * 60, .after = day)\n\n# A tibble: 336,776 × 20\n    year month   day avg_speed dep_time sched_dep_time dep_delay arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1  2013     1     1      370.      517            515         2      830\n 2  2013     1     1      374.      533            529         4      850\n 3  2013     1     1      408.      542            540         2      923\n 4  2013     1     1      517.      544            545        -1     1004\n 5  2013     1     1      394.      554            600        -6      812\n 6  2013     1     1      288.      554            558        -4      740\n 7  2013     1     1      404.      555            600        -5      913\n 8  2013     1     1      259.      557            600        -3      709\n 9  2013     1     1      405.      557            600        -3      838\n10  2013     1     1      319.      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/11_mutating.html#creating-new-columns-3",
    "href": "slides/11_mutating.html#creating-new-columns-3",
    "title": "Mutating columns",
    "section": "Creating new columns",
    "text": "Creating new columns\nConditionals with multiple outcomes\ndplyr::case_when\n\nmutate(flights, season = case_when(month %in% c(3:5) ~ \"spring\",\n                                   month %in% c(6:8) ~ \"summer\",\n                                   month %in% c(9:11) ~ \"fall\",\n                                   month %in% c(12, 1:2) ~ \"winter\"),\n       .after = day)\n\n# A tibble: 336,776 × 20\n    year month   day season dep_time sched_dep_time dep_delay arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;     &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1  2013     1     1 winter      517            515         2      830\n 2  2013     1     1 winter      533            529         4      850\n 3  2013     1     1 winter      542            540         2      923\n 4  2013     1     1 winter      544            545        -1     1004\n 5  2013     1     1 winter      554            600        -6      812\n 6  2013     1     1 winter      554            558        -4      740\n 7  2013     1     1 winter      555            600        -5      913\n 8  2013     1     1 winter      557            600        -3      709\n 9  2013     1     1 winter      557            600        -3      838\n10  2013     1     1 winter      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/11_mutating.html#creating-new-columns-4",
    "href": "slides/11_mutating.html#creating-new-columns-4",
    "title": "Mutating columns",
    "section": "Creating new columns",
    "text": "Creating new columns\nConditionals with multiple outcomes\nSet .default for leftovers\n\nmutate(flights, season = case_when(month %in% c(3:5) ~ \"spring\",\n                                   month %in% c(6:8) ~ \"summer\",\n                                   month %in% c(9:11) ~ \"fall\",\n                                   .default = \"winter\"),\n       .after = day)\n\n# A tibble: 336,776 × 20\n    year month   day season dep_time sched_dep_time dep_delay arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;     &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1  2013     1     1 winter      517            515         2      830\n 2  2013     1     1 winter      533            529         4      850\n 3  2013     1     1 winter      542            540         2      923\n 4  2013     1     1 winter      544            545        -1     1004\n 5  2013     1     1 winter      554            600        -6      812\n 6  2013     1     1 winter      554            558        -4      740\n 7  2013     1     1 winter      555            600        -5      913\n 8  2013     1     1 winter      557            600        -3      709\n 9  2013     1     1 winter      557            600        -3      838\n10  2013     1     1 winter      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/11_mutating.html#creating-new-columns-5",
    "href": "slides/11_mutating.html#creating-new-columns-5",
    "title": "Mutating columns",
    "section": "Creating new columns",
    "text": "Creating new columns\nRemove old columns\n\nmutate(flights, date = paste(year, month, day, sep = \"-\"), \n       .before = 1, \n       .keep = \"unused\")\n\n# A tibble: 336,776 × 17\n   date     dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\n   &lt;chr&gt;       &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;\n 1 2013-1-1      517            515         2      830            819        11\n 2 2013-1-1      533            529         4      850            830        20\n 3 2013-1-1      542            540         2      923            850        33\n 4 2013-1-1      544            545        -1     1004           1022       -18\n 5 2013-1-1      554            600        -6      812            837       -25\n 6 2013-1-1      554            558        -4      740            728        12\n 7 2013-1-1      555            600        -5      913            854        19\n 8 2013-1-1      557            600        -3      709            723       -14\n 9 2013-1-1      557            600        -3      838            846        -8\n10 2013-1-1      558            600        -2      753            745         8\n# ℹ 336,766 more rows\n# ℹ 10 more variables: carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;,\n#   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,\n#   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/11_mutating.html#creating-new-columns-6",
    "href": "slides/11_mutating.html#creating-new-columns-6",
    "title": "Mutating columns",
    "section": "Creating new columns",
    "text": "Creating new columns\nKeep only new column\n\nmutate(flights, date = paste(year, month, day, sep = \"-\"), \n       .keep = \"none\")\n\n# A tibble: 336,776 × 1\n   date    \n   &lt;chr&gt;   \n 1 2013-1-1\n 2 2013-1-1\n 3 2013-1-1\n 4 2013-1-1\n 5 2013-1-1\n 6 2013-1-1\n 7 2013-1-1\n 8 2013-1-1\n 9 2013-1-1\n10 2013-1-1\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/11_mutating.html#extract-column-into-vector",
    "href": "slides/11_mutating.html#extract-column-into-vector",
    "title": "Mutating columns",
    "section": "Extract column into vector",
    "text": "Extract column into vector\ndplyr::pull()\n\npull(flights, flight)\n\n    [1] 1545 1714 1141  725  461 1696  507 5708   79  301   49   71  194 1124\n   [15]  707 1806 1187  371 4650  343 1919 4401 1895 1743 1077 3768  303  135\n   [29]  709  575  245 1837  496 4626 4599   27  413 1665  303 4646 1019 4144\n   [43]  711  389 1002  556  926 1701  102  883 1496  203  117 1383 1415 1865\n   [57] 2003  305 1815 4534 1115 1879 1547  399 2279  981  831  960 1203  671\n   [71] 1092  715  825  544  850  987  962  715   11 2083 1162  473   11   20\n   [85] 1601 1111   44  643  309 1479  983   33  341  495   59 1668 3737 2263\n   [99]  477 1733 2267 2047  733  517 1843 2119 4406 1172 1838  223 1959  219\n  [113]    3 4490  269 4388 3538 2395 4260 4576  675 4537  914  346 1051  717\n  [127]   27  301  181 4418 4104  487 1223 1855  611  443 1480  905 1506  443\n  [141] 1592  313 4610 4412 4521  835  717 4558 1357 2304  553 3944 1741 4548\n  [155]  869 1626 3848   59 1747    1 2143 1296   51  181  485 1670 4478 1885\n  [169]  407 1170  580 4655 1401 1061 1643   56 1467 1220  655  647 1601 1519\n  [183] 1589  783  721   41 1103 1305 4582  120 1004  215   57 1597 1335 4636\n  [197]  766 1148  375  255  251    4   17 3895 2137 1903  361 1807  319 4654\n  [211]  679 4175  600 4681 4670  222   75 1847  856 2379 1177  503  196 1625\n  [225] 3795 2319 1103 1441 5736 1529  347 4709 4471  731  501   19 1004  179\n  [239] 4277   23 1294 4180  779  321  985   31 4322  455 1060  739 1275 4589\n  [253]  373 1647 4479 2185 2171  321 3792  369  545 2071  688 4485 2099   24\n  [267]  285 1031 1086 4495 1057  405  641 1171 1085 4294  703 1143  987  327\n  [281] 2219 4553  133  409 1623 2175 1010 4876  353 4693 4275    1  863 1174\n  [295] 4658    3 1443 1947 4425 4511 4431 1197  743 1568  701 1443 4347 1663\n  [309] 3850   25  523 1461 4216  625 4135 3697  391 1757 1715  133 4679   27\n  [323] 1114 5311 1131  428 1850  564 4118 2253 4404 4129 2174  315   66 1280\n  [337]   85  745  754  781 1251 4601 1459 2128  209 4426  348  329 1853 4646\n  [351]  765 1006 1435 4640   32 4564 2041 2596  991 1615 4112 4340 4475 4106\n  [365]  393 1425 1185 2043  411  906 3849  615 4665  673 1073  431  117 3832\n  [379]  753   15 2335 4254  602 4434 4171 4370 2068 4552 1783 2162 4577   32\n  [393]  617 1258  688 4869 2247 4516  349  505  683   16 3728 1010   83 1531\n  [407] 4491  257 5710 4687 4935  355  278  997 1161  601 1819 1322 1972 1231\n  [421] 1813 4292  337 4669 1769 1445 4403 4105 3295   61 4172 2179 4390 3843\n  [435] 1467  119 1053 1997  685 1134  379  720 4429 5675 1105  377  456 4497\n  [449] 4447  759  407 3792 4309 1687  537 2347 1456  153 4223 4333  347 1699\n  [463]  883 3823 1593  507 4146  530 1600  141  525 4525 4105 1039    8  137\n  [477] 1695 3806 2223  459 1665 3369 4372 4572  365 4093 2081    4   85  133\n  [491] 1222  705 1283 1773  636 3338 1942 4588 4181   80 3372 5709  620 3459\n  [505]  565 3331  847 3985 5163 1508  687 4502 5712  509   91 4088  702 1861\n  [519] 3272  917  591 4415  367 4579  341   12  465  763 1467  157 1411 1619\n  [533] 1939 1635 4406 4661 1178   95   35 1635  675  702   63   27 4133  920\n  [547] 4352  143 4299  656 1726  190 3695   69  162 1176 3321 4580 4540 1790\n  [561] 1587 4336 4705  985  185  773 1807 4539  706 3260  575   31  413  257\n  [575] 2773 1609 4323  695  689 1259 1905 1447 2121  342 1066 4194 1085  369\n  [589]  509  635   15 1351  511  703 1623  345  699 4479  513  449 1712  543\n  [603]  512  145 3843 1284  623  179 1715 4092  139  547 2331 1339 2139 4413\n  [617] 1585 3651  527  163 1935  128 1307  535    9 3384  391  376 4373 1047\n  [631] 1016  989 1676 4581 1111 1053 1006 1165 4382 4622  373 1152 4484 1228\n  [645]    7  217  618 4202  173 4417  731 4626  638  353  119  924  269 3286\n  [659] 1973 1611 1643 1139 4334 1684 4326 3830 1075 3730  668 4179  130 4517\n  [673]  389 4633 1292 2019  904  329  785 1613  177  645 5714 3364   29 2187\n  [687] 4674  947 1128  181  155  951 2944 4131 1967   91 2159 1444  853 2391\n  [701]   87 1629 3807 3359 1491 4569 1485  927    6 1606  359 3267  541 4125\n  [715]  171 5742   87 2075 4261 1071  503 4255 4085   21 4300 3325 1787  698\n  [729]  381 4410 3361 4532  711 4333  415 1416 3409 4091  645  299 1181 1233\n  [743] 4361 3664 1709 1680 4644 1271 4649 4555 4440 1204 1762 3320 4204 3783\n  [757] 3899   47 1299  354 1069 3352  359 1318 1615 4224   39  195 4660  371\n  [771]  629  115  834  994 1482 4356  619 3357  926 4423  165  147 4573  380\n  [785] 4170 4692  399 4507 3744 4088  946 1241 4584 1020 1180 1668  677 1517\n  [799]  529 4662 4119 3347 4404 4543  383  227 4660  185 4449   97 1106  515\n  [813]  701   43 4103 1999   35 1109  104  713   21 4462 4206   11  608 1018\n  [827] 4276   30  128  112 4312 4257  199   22 4321  739  707  727 4308  791\n  [841] 1925  125  707   22 1030 1453 1141  407  725  125   49  371  707   71\n  [855]  731 5708  461  544  345  303  402 1077 4334 5147 4171   79 3136 4401\n  [869] 1280 1833  301 1676  421 1743 1919 1895  507 5310  575 1563  343  709\n  [883] 1141 1567 1837 4599 4650 4576  473  516 1019 2137 3641 4144 4460  245\n  [897]  135 1879 4648 4150  387  303 1276  908 3829   27 1162 1002 1627 3831\n  [911]  711  102  389 1433  320  785  926 1415  392 1865 1701 1815  203  763\n  [925] 1383 2003  981 4534 2163  399 4471  305 2279 1445  756  117  831 1152\n  [939]  413 3737  443  671 1547 1223  825  987  223 1526 3768   11  393   11\n  [953]  277  311  850 1601  495  715   33   44 1509   20  643   20 1199  983\n  [967]  309   59 1296 1581 4348  328 3373  807  715 1668  341 1724 3643 4166\n  [981] 4233  251 4241 2263  517    3 2047 1843 1733 2267 1172 1959 2083 4406\n  [995]  423  655 1271  269  675 1051 2119  914 1167 4655 2395 4490 4418 4235\n [1009] 3521 1838  219  181 1429  611  717 1218 1067  346  313 1335 1855  452\n [1023] 4160  835  301 4610 3845 3383  905 4138  717  572  651 4691 2392 4420\n [1037] 4220 1357 4521  397 4610 3754 4558 3323   59 1643 4255 3538  553 1506\n [1051] 4537 1670    1 4974  869  120 4478  647  485 1747 2143  974 4409  222\n [1065]  448  667 1885 1741  235  407   56 4140   17   51 1429  181 1305  493\n [1079] 4582 1519 1004 4690  721 1589 4104  215 1103  375  251 4388 1061 1148\n [1093]  487 1903 1597 1018 1484 1109  279    4 1807 4600   57  361 4159 4636\n [1107]  319 4654 4548  600 4108 5736 1222 1765 4681 1623 2379  503   75 4495\n [1121] 3694  679 1625 1177 1441 3795 1103 1529  347  196 1847  731 4195 1026\n [1135] 2319 4471 1563 2343   23 4709 1702 4175   31 1294 4246   19 4589  545\n [1149] 1573  375  373 4670 1275  460 1060  739 1785 2124   41 1647 3792 1605\n [1163] 2171 1143  641  491  642 3094 2099   24 1031 4485  321 2071 5218  695\n [1177] 1477  327 1085 5026 3658  703 1171  316  133  569 1663  409    1 2175\n [1191] 1623  401 1010 2219 4646  353 2185 4425  743  523  625  863 4658 1248\n [1205] 1174 1705 4247 1443 1443 3018 1461   25 4553    3 4479 4431 4216 1037\n [1219] 3850 1492 1757  673 3697   27  391 4347 4322 4640 4294 5311 4404   66\n [1233] 1114 1131 3223 4601 4147 1672 2253 1853 2174 4118 4412  315  745  209\n [1247] 1850  633 3903  781 1459   85 1869  408 4129  673 1434 1251 4426 1186\n [1261] 1200  991 1006  329  348 1615 4552  393 1425 3294 4475  505 2043  411\n [1275] 4254  355 4511  705 4364 4316   32 4660  525 4417  615  431 1164 4135\n [1289] 3832  117 1947 1073 1685   15 2041 4577  688 2967 4497   83 1783 1153\n [1303] 5712  602 4564 4370 2068  349  981 3728  468  257 4588 4340 3835 1187\n [1317] 1122 2247 2079 5710 1322 4859  566 1184  347 4516 1161 1531 1819 1972\n [1331] 1445    8 3295 4172 3793  141 1231 1121  119  377 1166 1861 3806 1925\n [1345] 1010 1997 2179 1053 1687 3653  337 4669  720 2347 4429 1467 1552 2132\n [1359]  883  984 1769   63 4309 4105  537 1483 4633 4572 1629 2081 2223  759\n [1373] 4491 1600 1695 1107 3369 1939 3799 3823  530  153 1665 3843 4579 4403\n [1387] 4090 1039 4333 1222   85   61 1935 4525 4447  289 3792 4146    4  703\n [1401]  507 3338  763 1942 3321  317  379 4617  137  917 1283 1773   95 4922\n [1415]  667 1467 4181  369 1508 1242  565  509   80  620 3985 1215 5675 3459\n [1429]  479 3331 4576   91 1473 4580 4415   12 1411  847 1635 4088  179 4372\n [1443] 1635  157 5709 3392  985 4622 3372 2305  341  315 1178 3384 2231 1587\n [1457] 4292 1043  675  702 1051 1619   27  920  985  864  656 3843  139  161\n [1471]  773 4390 3695 1641 1556 1790 1085 1078 1176   31  995  413  706 3347\n [1485] 3358  257  143 4540  185  627 4645  575 1447 1905 1259 4502  509  342\n [1499] 5132 2521  163 4323  695  181 1351 4255  623 1779 1499 1185  513  543\n [1513]  784  449 4299 4133  511  618 1139 1125  512   74 4661  145 1120 4317\n [1527]  345 1339  503 4382 4413 1109  785    9 2331 1585 3260  535 4479 1177\n [1541] 4194 1016 1307 2827 1186 1813   15 4702 3272  177 1999  989 4180 1111\n [1555] 1047 3925   35 2019 1053 4705 4484 4626 4308 1209  547 1158 4272 1611\n [1569]  179 2529 4844  217  979    7 4373 4674 3830 1643  597 1973  924 1407\n [1583] 1075 4151  754  926  173 1462 3944  391  857 1292  373  359  329  269\n [1597] 2450   91  904 1649 4649  389 3983 4202 3325  119 4321 2019   29 3730\n [1611]  645 1613  947 2187 5714  951   87 3414  155  699 1491  130 1456 2159\n [1625] 1269 2075 1629 3807   21  353  884 1059 4092 2391  171   87 1128 3359\n [1639]  927 1715  541 4569 4543 4517 1485 1967 5742  791 1435   39 3401    6\n [1653] 2370  527 3783 1433 4153  853  762 1787 4085 4131 3899 1416 1444 4326\n [1667] 3352 3361 3798  381 1221  711 4033  359 3420 1147  415 2131 4333  645\n [1681]  695 3664 1709 1680 4410 1854 4312  540 4662 1244 1762  354  165  115\n [1695] 4555 1482 3409   47 1447 4224 1318 1069 1615  629 3364 4423  926 3357\n [1709] 1595 4695 1071 4462  371  619  147 4581 5114 4361  677 4573 3744 3274\n [1723] 4532  299  227  399  946  437 2363 4584 4507  834 1422 1241 4371 1108\n [1737] 1627 4088 4125  529 4660 3320   97 4119 1575 4404   21  383  199  488\n [1751]  185  701  104   35  515 2139 1299 4170 4091 1109   11  942 4204  713\n [1765]  608   30 4206 4276 1247  112 4485 4449 4257   43  128  739  727 4352\n [1779] 4406 4434 4935 3849  133  753  623  707  104  727 1030 1018 1136 1141\n [1793]  725   79  731 5716  125 4650 3768 4201  343  371  461 4401 1833 4708\n [1807]   49   71 1318 5694  345  301  328  959 1036  303 1895 1837  135 4941\n [1821]  575 2057 4518 1567 1919 1570  709  413  991  707  507 2006 1019  849\n [1835]   27 3849  772 1433 4424 1483 4576 4560  245 4646  910  711 1528 4419\n [1849]  468 3839 1002 5259 4122  102  926  389  338 1415 1865 2285 1555 1547\n [1863] 2003 2163  763 4583 1815  981  203 1879  399 1162 4246  671 1455  510\n [1877] 4534  117 1701   20  604 1524  715  550  443  825  850 4559 1526  831\n [1891]  799  987 3737 1724   11 1601 2083   11   20  807   33 1091   44 1889\n [1905]  482 4106  759   59  643  983  549 3611 4023 2119 2047 4214  517 1481\n [1919] 2143  733  397  505 3538    3 1271  900 1733 4294 4406  429  341  346\n [1933] 1172 1838  655 1959 1167 1051 1109  269 1429 4490  675 3521  914 4457\n [1947] 4655 4418  487 4537 4220 3815  871  905 2395  341  301  457 4388 4690\n [1961] 4412 4610 4548  835 1170 4409 3405 3422  611  181 1517 1268  553 4558\n [1975]  717 1626   59 4125 4164 4250 4406 2279  667 3353 1747 1429  303 4364\n [1989]    1  120 4334 4691  485 1885 4478  407 1643 4051  647 1718  430   17\n [2003] 1305  548  565  589  181 2379 1061  305   41 1519   56  634   76  715\n [2017] 1004 1529   51 1589  219 1103 4140  375  766  215  251 4582 4234 4636\n [2031]    4  986 1357 1223 2267  679   57  309  361 1807  503 5711 3961 3667\n [2045] 4521 5736 4670 4654  258  196 1765 1597   75 1623 1847  789 1529 1177\n [2059]  499 1855  600 3795 1441  651  313  319 1903 1103 3661 1871  347 5026\n [2073]   19 4471 4255  179   23 2343 2319   31 4694 1573 4589  373 4411 4662\n [2087]  583  212   40  545 1647 2124 1275 3792 1298  642 2171  641  321 4485\n [2101] 2099  739 1143 4391 1235  315  409  695 1250 1277 1085  703  133 1031\n [2115] 4553 1057 2219 2044 1623 1174   24 1875 4646 3483  401 1707  353    3\n [2129] 1174 4090   25 4425 4658 1105  523  625 4601  930  794 4431    1 1443\n [2143] 4301  743 4087  673 3697 1947 1227  133 1668 4347   66 4135 2174 4404\n [2157]  863  831 2041 1853  564 1850 1131 1685 2253  428 4893 3638 4426 3762\n [2171]  329 1219 4158 1006 4950  991 4450   32 1251 1673  348 2596 1205 4564\n [2185] 1140 1459 4129 1186   27  781 1615 4640  393  209 3826 4368 4475 4628\n [2199] 5273 3840  411 1110  654  745  753  505  355  525 4231  117  431  688\n [2213] 1705 1249 2162  602 5712 1073  705 4577 1783 4280 2247   83  349 4120\n [2227] 1164  935 4171  980 3728  424 4370 1010   15 4491 4687  257 1618 4588\n [2241] 3750  883 1902 1344  347 1819 1161 4596 1445  615 1246 4181 4434 4669\n [2255] 4172  407 3303 3452 4403  223 2132 4372 2179 1769 1231 1053 2126 1175\n [2269]  337  963 4429  473 4326  377  477 4571    8  720 4357 4113 2347 1054\n [2283] 3318 2079 4447   61  551  745  471 3817 4333  685  141 1813 4309  235\n [2297] 3393 2115  759 4579 4146 3835   63 2081  315 4581  537 2223 1452 4525\n [2311] 4576 1665 4381 1039  680 1624  153 1925 3719  137   53 3267 3523 1942\n [2325] 4178  133  917 3635  161  703 4572 1138 4105  119 3427 3771 3985  509\n [2339]  565  161 1771 1580 3820 3355 4415  847  256 1331 1200  387    4   95\n [2353]  620   91 1508  350 4352  341  157   12 3325 2377  985 3823   35 4141\n [2367] 2043 4661 4645 3689  675 1773 2231 1078 3695 1695  559  656 3387 1619\n [2381]  190 4092 4997 4027 1638  139  773  763 1790 4622   27 4485 4705  706\n [2395]  733  185 4323 1473 3805   15 2042 2773 3453   31 4540  127  689  257\n [2409]  329 1499 1905 1066 1447  699  695 4410 4342 1585  531  509 1467  143\n [2423] 4202 1259  503 4271  163 1779  623  181 1999  413  449  543  512 5486\n [2437] 1176 4480 1418 4479  145 1134 1637  630 4299  179 1185  345 1351 4413\n [2451] 1109 2331   74  547 4144 4373 1927  535  391 1721  785 1394  426 1047\n [2465] 1292 4300 1635  989 1111 4626 4321 1085 4382 1611  128 1053  738  217\n [2479]  731 1269 4277  812 1016 2019  373  173 1454 5054  627    7  119 1703\n [2493] 5203  926 4674   85 1228 1973 3542  593  612 2582  359 1030  269 3730\n [2507] 4207 3424  575 2019    9 4410 2190  527 4649 4484 1613  951 4255 4520\n [2521]   45 5038  177 2391  645 1255 2187 1491 5714  171  947 2944 1465  711\n [2535]   87 4627 4131 3375 4569 2075  643 4085   21 1307 1729   29  272  359\n [2549] 4670   83  954 1345    6 1485 3828 2139 4019 1139 1435 1715 4532 1643\n [2563]  353  511 3369 4127 1022 4543 3373 4091 4304  979 1723 4204 1854 2159\n [2577]  155   91 4423 1787 3783 3314 1709  381  645 1147  983 1094 3798 3899\n [2591]  402 3944 1596 1222 4224 2370 4517   87 2027 4462  369 4312 4333 3525\n [2605] 1762 4555  415 4033  354 2131  771 3822  165 4662 3609 4309 4108 4227\n [2619] 1225 1243  791  115   47 4348 4133 1417  891  305  371 1020  619 1601\n [2633]   39  195 4573 1692 3744 3459  227 1069  946 5676 3274 4695  677 3819\n [2647] 4119  299 4507 4584  147 3320  399  629  130 2363 5693 4449 3833 1071\n [2661]  529  199  528 4313  383  185   21  515  701   97   43 4257   11 4322\n [2675] 4162 4660 3395   35  713 2155  128 1109 3439  608   22   30  112 1018\n [2689]  739 4241  321  327  717  721  731 1757 4599  714  719  707  608 1030\n [2703] 1018  404 1141  343  731   49  461   71 4911  507 5716  125 4650 1833\n [2717] 4708   79  303 1036 4401  345 3768  959 6055  707  370  654 4941 1895\n [2731]  135  301 1919 1669 1837  725 1429 4201 4518  709  575 1701 1567 3856\n [2745] 1019 1662 4559 4576  245 4599 1433  413   27 4419 4424 4471 4646 3839\n [2759] 4560  772  849  910 1627  371  421  303 4122  711 2006  926 1002  389\n [2773]  102  338 4241  719 1415 1879  550  117 1547 1815  203 2003 2163  399\n [2787]   20 4534 1665 1506 1162 4304 2279  775 1655 4334  799 3737 1526  443\n [2801]  825  831  884  763  981  850 1865  671  987  715  715 2083   11  441\n [2815]   11   33  807   44   20 2285  643 1889 1179  305 1601  341  393 4023\n [2829]  983   59 3611 2119 1481  309 3259 2267 2047  733  248 2143 1539 4214\n [2843] 1172 1271  397 4457  517 4246 1733  900 3538 4406  328 4537    3 1429\n [2857] 1959 1167 4490  346   10  675 3521 1838 4294  655  219 3578 1109 4655\n [2871] 4691  914  181  717 4652 2395 4418 4690  487 4051  301 1601 1480 4220\n [2885] 1051 4521  269  611 1170  835  112 4388 4610 1268 3422  313 3832  553\n [2899] 1357 4558 1626  905 4409 4260 4478 4913 1429 1855 1885  673 4364  717\n [2913]  485 1747  407  714  430    1  647  120  181 1548   51 2379  565 1718\n [2927] 4125 1643 1305 1153  544   59   17  634   41 1519 1589 1223   56 4582\n [2941]  375 1061 3661  251 4636 1004 1871  215  361 4638    4   57  986 3961\n [2955] 4164 1807 3667 4548  319  766 1117  503 1027 5711 4670 1765 1103 1847\n [2969]  789   75  196 1529 1177  499 1597  679 4250 4234 1639 2319 3795 4140\n [2983] 1441 1103 1903  600 3681  731 4471  347   23 2343   19 4384  179 1623\n [2997] 4689  545 4240 4694 1573 5736   31  373 4662  354 1060 2044  642  952\n [3011] 1275 3792 2124  641 2171  739 4654 1298 1647 1143 4589 2099 5273  321\n [3025] 4485 1031 3353   24 1493  703  315 4553  695 1707 1085 4301 2219 1625\n [3039]    1  409 1623 1250 1661  327  930 1174 1875  401 1057 4347  794 4646\n [3053] 1174 4425 3815  523  863 1443  353 1461    3 1947  743 4431  625   25\n [3067] 3826  133 3697 1757  551  673 1227 4087   27 4113 2174  133 1186  831\n [3081] 4090 1850  564 4193 2253 1685 1131 4426 4601  317 4404 4950  991 1251\n [3095] 1641  329 1699 1006  781  343 1612 1459 4658  209 4640 3694  321 4158\n [3109]  348 1256 4129 1615 4564  505 3483   32 1110   66 2596 4475 4120  431\n [3123] 2043 3840  355  411  654  393  117  525 4280  753 4641   15  428  688\n [3137] 4171 4577 3638 4370 2079 2162 2041 1073 2247  424  615 4231 4491  349\n [3151] 1783  705 1164   83 4687 1734 5164 3728  257 1705 1819  602 1902 1618\n [3165] 1853 3750 1344 4372 2126 1175  471  437 1445  935 4669 4572 3452 4596\n [3179] 4357 1813  347 1231 4172 4181 4403  477   61 1053 1579  337 2179 1010\n [3193] 2132  141 2347 4434 3393  963 3762  720 4571  759    8 4588   63 1161\n [3207] 4326 3318 4309  459  745 1418 1925 4544 1769 4333 4447 4429  537 4368\n [3221] 2115 3719 4105  315 4525   53 4146 1452 3823 1665  595 3835 1039  680\n [3235] 4352 3817 3267  763  377  407 4667  137 3635  153 2377 3523 1624 1942\n [3249] 2027   95 1773  161 1138 2081 1116 1695 3985 4579 3601  687 4178 1771\n [3263] 4576 1635    4  473  509  620 4415   12 1508  847 3459 5712  161 3820\n [3277] 5486 1467  350 1550   91  369 1619 4092 1331 4271 4622  917 2231 3355\n [3291] 4661   35   85 1593  341 1200  565  675 3453  656 4540 3695 1672   27\n [3305] 1078 4027  985 1473 4997  773 3325 3387  181 1638 1790  185 3689  157\n [3319] 1176  119  733  706  190 1499  329 4323 3375  257  127 4581   31 1259\n [3333] 1066 4410 2042  630  133 1905 1447  695  143 2773  139  250  503 1585\n [3347] 4702  509  699  413 4479 1351  531   15  703 4255 4144  512  623 1185\n [3361] 1109   74  449 4485 4202 4705 3771 4316 4373  163  543 4411 2331 1134\n [3375]  145 1085 1779  785 1999  391 1394 1927 1637 1307 1016  989  738  241\n [3389]  535  128    9 1047  373  547 4484 1053  689 2019 1221 4277    7  527\n [3403]  217 4019  731 5054 1611 1292  691 1739  243 4299  345  173 4382 3424\n [3417]  119  353  812 4300 4674 1973 1111 4573 3944  593 4502  269  272 1139\n [3431]  511 1643  926 2582 1269 4517 4626 1703 2019 3730 2190 2159  612 4520\n [3445] 2131 2391 1613  359 4480 1491 5038 4649 5714  947  711  171 4627   87\n [3459] 1255  891 2075 1127 2944 4569 1443 4543 3369   29 2187  954 4227  155\n [3473] 1345  645  359 1168  575 2139 2370    6 3525 3798 4127 1485 5683   83\n [3487] 3274 1435 4532 3542 1854 1416 1715 4333 4204 3368 1465 1729  791 3783\n [3501] 4131  645  951 4091   21 1709   39 1787  130 3320 3899 3314  195 4423\n [3515]  695  402 1147 3439 4033   91  381  983 4085 4555  711 4108  177 4106\n [3529] 5693  415  771 1069 4348 4412  354 1574  115    1 1417 4309 1299 4312\n [3543]  371 3395   47  227  629 1243  890 4133  165  677  147  619   87 3744\n [3557] 4662 4584 4507 1482  399  179 2363 3373 1020  946 3822 3609  529 4660\n [3571] 4404 4119  383 1066 3805 4573 4449   97 4645 1077  185 3819  701 2155\n [3585] 4224  515   21 1071 1109 4162   43   11 4322 4257 4695 4536 1762  199\n [3599] 1111  713  104   22  112  128 1018   30  727  739 3405 3716  721  745\n [3613]  883 2223  739   11 1030 1556  431 1141  403 4911  345  461  707   49\n [3627] 1030 1671  343   79   71 1627 1935  725  303  429  301  507  135 1895\n [3641]  371 3170 4201 1837 2057  575 6012  549 1806  122 1641  709 4707 1888\n [3655] 1433  413  125  245 1019  726   27 4248  303 1002  470  102  926 1815\n [3669] 2003 1245 1415 4122 1879  711 1865 2285 4583  550  305 2279  399 1255\n [3683] 3995  117  389 3737  443  397 1665  831  825  715 1479  850  305 4227\n [3697]   11  799 4303  807   11  715   20  987 1889  983  643  981 1601 1274\n [3711]   44   59  783 1162  731  341 3812 3611 2267 2143 4498  517    3 1733\n [3725] 1172  369 1108 2047 2165 3538 1838 1959 4406 4425  346  655  269  219\n [3739] 1051 4490 3768 1167 1429 3149  675  914 4604 3317  611 3517  341 4696\n [3753] 4220 4418  487 2395  301  313  441 4051  717 4548  101 4610 4521 4389\n [3767]  835 4297  112 4388 4558  344 3405  717   59  553 4233 1506 4913  481\n [3781]  762  336    1  214 4478 3353 3261 4364 1747  120  407   51  647 1061\n [3795]  181  485  486 1643 1429 2379   56   41 1519  675 4582 1103  317 1004\n [3809]  721 3661  375  251 4636   57  168  448  215 2108  515 1871 1589 1594\n [3823]  319  679    4  361 1885 2119   17 1847  503   75 4670 5698  927 1177\n [3837] 4090 5711  196 2044 1441 1357 1705 1903 1036  332  347 1026 3852 3667\n [3851]  731 4471  415  600   19  545   31 1875 4139  237  373 1873 4131 1616\n [3865] 3792  642   55   24 1647 1606 2099  327  179  695  499 1085 3551  362\n [3879]  664    1 3324 2219  930 1623 4594 2115 1031 1174 4646 4347 1120 1690\n [3893]  409    7  998  353 4679  863 4601 1680 1443 4193  523  421 2173 4425\n [3907] 4431  954  625  743 3483 1757 1174   25  133  673 3697   66  408 4950\n [3921] 4404 4658 3273 3521  641 1131 1850 1853 2253   55 1685 4212 4087 1437\n [3935] 1185   85  781  315  418 4129   10 4247  348 4426 4564    3 1181  991\n [3949]   32 4475 2101 1615  209 4368  705  393  753 4119  505 4099 2748 1124\n [3963]  525   15 2043  431  411 3244 1073 1109  319  117 4577 1232 1715 2079\n [3977]  355 1195  688 2247 4434 2041   83  349 1029 1783  935  501 1623 4588\n [3991] 3728  615 1006 4370 1819  394  347 1161  424 1445 4126 3318 4414 4381\n [4005] 3983 3854 5469 3452 2126 4572 1813 1231 4172 4357 4403 2074  119 2347\n [4019] 1053 4429 1925    8   61 4669 1769 1485  141 2010  324  720  377 4447\n [4033]  759   63 3393 1573 4133  750 4105   53 3823 4502 4579  537 4369 1039\n [4047] 1048 4309  153 4580 1480 1618  243 3267 4333 3635 4146   85  133   95\n [4061] 1125 1569 2027  963 2522 4178  917   12  703 1771 3985 1902 2223 3427\n [4075] 1331 3523 2139  565    4 4415 1508 1527  620 1467 3459 1635  509 1695\n [4089]   91  161 3689  341  157 3640 4183 1773 4667 3325 3453  325  985 2890\n [4103] 1600 3841 4271   35 5085   27 3355 2231 4622 1692 1085  675  482  734\n [4117] 3805 4702 1178 4997 1093 4485  181  773  177  139 1716  185 1655  706\n [4131] 1790  250  257  575  137 1825  143  329   31 1499 4410 1447  695  413\n [4145]   15 1713 4246  369 1905 4300  699  503 1585 4479 1999 1351 1779  127\n [4159] 4255  623 1529 4323  511  145  449 1100 2774 1109 1139 1730  179  512\n [4173]  163  543 1131 1585  391    2  527    9 1279   74 2019 4397  989 4509\n [4187]  547 1394 4484 4962 1471    7  373 4277 3640 1580  119  669 3375 2155\n [4201] 4674 1208 4174 4527 1307  173 1973 1176  433 1611  269 1111 1481 3650\n [4215]  217  130 3944  359 1643 1225 2190 1491 3542 2159  711 3368  951   29\n [4229]  808 1174  155  628 1465 4700   87   21 3369 3525  527    6 3730   83\n [4243] 3373 1186 2801 4703 2391 5693 1417  947  256 3694   87 1729 3798 3314\n [4257]  171 1345 4091 3783 4670 1787 4127 3439 4662 4309  402 1023   91   39\n [4271] 1708 1709 1656 4423  415 1762  386 1613   47  381 3609  489 1299 4695\n [4285]  354 1069  115    1  371  629  165 3395 3899  677  147  619 4573 4430\n [4299] 1071  399  162  645  529  383  227 4449 4373 1066  199   97  701 4305\n [4313]  104  515 4257  185 4276 3320 1109   21   35  608 1018  713   22  112\n [4327]  128   43   30  707  727 5712 3422  883  707 1030  799 1141  691  461\n [4341]   49  707  343  125   79   71  371 1837 4201  345 1895 1737  575 2057\n [4355] 4292  709 1919  819 1019  772  135  303  413  245 4226 2006  421  470\n [4369]  725 1575 1662  711  926  389  102 1415 1815  507  117 2285 1865  541\n [4383]  671  399  981  297  550 1506  203  532  833  443 1525 2279  746  825\n [4397]  731  715  987 3737   11 1153  715 1599 1627   33   11   20  646 1889\n [4411]  759  309   59 3611 1481   27 2267  643   44 2119 4584 1733  397  517\n [4425] 2047 1601 2143    3  983 1271 4406  692 1558 3538  655 1838  600  219\n [4439] 4185  269 1959 1429 4424 1229 3521  665  346  675 1172  181  517  914\n [4453] 4051 1167 3259  341 4418 4372  313 1162  301  487  717 1072  611  717\n [4467]  835 4220  905 4610 3422 4521  112 1477 1626 3405 4625 1202 4529 4558\n [4481] 4913 4478 1110 4383 1357   59 1885  565  120  407 1643  181 1747 3353\n [4495]  647    1 2379   17 4140   56 1519  673   41 4178  721 1529 1589 1004\n [4509]  375 4582 3661  361 3494   57 1051 4636  553 4479 1871  251 1061    4\n [4523] 1548 4304  469 3667  319  679 4654   75  503 1847 1103 1177 1529  789\n [4537] 2044 1765  196  600 5736 5711  499 3795 4175 1036 2319  680 1903 4187\n [4551] 5026   51  952  179  321 2343 4471   19  731 3317   23 1174 1103   31\n [4565] 1573  448 4663  373 4090  518  545  374  642 1580 1647  215 1873 3792\n [4579] 1298 4589 2099 4670 1031 4485 3815 2171 5273  641 1275 4279 1085  315\n [4593]  327  695 4431 4553  703  980  409  145  133 2219    1 4347   24 1623\n [4607] 1000  353 1707  930 4679 4646 1875  863 4601 1283 4087  523  625 4425\n [4621]    3  743 1947   73   25 1722 1443 1174  477  673 3697 1227  644 4692\n [4635] 3483 4689 4404 4658 3826 1757 1623  283 4135 1131  238 1850 1853 2253\n [4649] 1142 4893 2041 1685  744 4640  745  390 4368 3638  991 3762   85 2128\n [4663] 4950  329   32 4426 1006 2239  348 1459 4148 4306  209 4564 1615 1641\n [4677] 3829 4231 4129 4475  355 2043  753  411  525 1272 4158 1078   66 5683\n [4691] 1073 4171  705  117  688  431 1705  393 4577 1137 1783  602 2079  620\n [4705] 4370   15 1604  348 2247 4431 1122  615  935  505 4588  349 4519 3728\n [4719] 1166  560 1161 5712  883 1819  347 1344 1902  459 5623 5164 1445 5968\n [4733] 2126 3452 4181 4669  275 1418 4381 1813 4687 1010 4172 4357  256 1183\n [4747] 3318 4403 4572 1769 1053 1231  268 4596 2347 2179 4434 4429 4491 4571\n [4761]  720   83 1925  141 1197  963 4447 3393 4309   63 4579  377 1601  745\n [4775]  759    8 4212  750  279 4326 1285 4333  404  337 3817  119 2115 2223\n [4789] 3832  537 3719 4170 4105 3823 1665 1039  763 4146  161 1710  137  153\n [4803] 4178 1205   61 1942 3835 2027 3427 2377 1773  133   95  581 1624 4349\n [4817] 1635 3355  703 3635 3985  847 3453 1695 1771 4415  620    4 1331 1467\n [4831] 3771  369 4667 3523   91  161 1508  562  341 5486 3325 3820 3689  565\n [4845] 4092  917  157   85 1111 1619 3387 4622 4215   35 4299 2231 1176   27\n [4859]  675 3695 1178  656 1197 1719  171 4997   12 4540 1200  891  372  509\n [4873] 1262  181 4352 4411 1163  627  706 1790 1473  773 2136  413 3375 1499\n [4887] 4323  329  741   15  127 1905   31  257 2042 4373  185 4316  695 4410\n [4901]  503  531 1447 1615 4479 1999 4702  575  143  163 4255  985 1779  512\n [4915] 4485  440 4705  511 3843 1185 3459   74 4661  449 1134  623 1284  508\n [4929]  345  699  179 1109 4382  408 2331 1351  509  785  139  535 4202  177\n [4943] 1585 1228 3805 4300 1394 1307  216 1637 4271  989 1047  145    9 1111\n [4957]  808 4626  373 4581 1611 4484  709  543 1085  389 4301  527 4019 4277\n [4971]  119  217  926  979    7  547 1222 5054 3424  391 1053  173 2019 4674\n [4985] 1165 3716  269 4413  326  272 1612 1973 3944 3730  130 1643 1656  428\n [4999] 4573 4517 4437 1016 2190   91 2131 4649 2019 2159 2391 1491   29 1703\n [5013] 1613  645 3369   21 1255 4520 5038   87 1675 5714  155  947 1465  981\n [5027] 4543 3368 4227 2075 4569  171 2187 4131 4085 3525  359  951 1345 4127\n [5041]  711   83 4627 1485 3373 1607 2139 1435 1729 1854 3542 3798 1715  347\n [5055] 1574 1669  359 1787  633   39 5693 2370 4532  645  120 4191 4091 3783\n [5069] 4204 1709 3272 4536    6 4312 4033 1147 1482 4224 3439 3320 1018 3314\n [5083]  402 3822 4309 4412  890 4106  381  415 4555 4333 4662 1416   47 1069\n [5097] 3609   87  299  771  983 1762 1417  354  629  115 4695  371  677  165\n [5111] 4133  619 3395  405 1178 4573  353 4584 2363 1071 1020  530 3833  399\n [5125] 1225 4423 3744 1243 4119 4660 4619 4449 3819 4507  383 3899 4348 4108\n [5139]  701  199   21 4698  185 1066 4322 4404 1593  104 2155   11 4162 4257\n [5153]  529  515  713 4645   22  112   30   97  608 1018  128  739  727 4364\n [5167]  739 1117 1545 1141  725  927  380  371 5716 4911  345  507  707  461\n [5181]  731 4650 3768  303 2114 6055 4401 2161  135 4201 4708 1895  370 4941\n [5195] 1919 1837 3839  654  709  255  575 4518 3856 4533 3223 1791 4559   79\n [5209] 1030 1663 2006 3127 2057 1433 1507 4576 4599 1627  905  772 4419  135\n [5223] 4560  413  125  983   71  421 3839  711 4122  303  849  910  926  102\n [5237]  719 4241 1701 2279  399  117  338 2116 1415 1547 1879 4534  305 2285\n [5251]  763 4424 2003 1209 4304 1865 2163  389  604  203  671 3483 1162  981\n [5265] 3737 1665  715  550  799 1506  443 1655 4334  850  825  831 1299 1815\n [5279]  393 1724 2083 1601   33  715 1305   11  341   11 1889  305   10  309\n [5293]   59 4099 3611 1481  643 2267  451 2118 2119 4457 1179 2165 4392 1271\n [5307] 2047  328 1539  145 2143  517  397 5663  655 4214 1959 3538 4406  219\n [5321]  269 3935   17   44  675 1051 1109  346 1838 1172 1167 1558  914 4490\n [5335] 3521 4051 4655 4691 1429 4230 4652 2395 4418 4537  181 4471 1855  313\n [5349]  611 4610 3259 4220 1059  835  301 4233 1117  369  717 3422 4521 1480\n [5363] 1601 1626  553 1150  487 4409 3405 4246 1357   59 4558 4913 2167   80\n [5377] 2120 4478 4364 1061  485  647  407  430 4125  120  225  181 1885  807\n [5391] 3353 2379 1602   20  544  634    1 4638 4388 1001 1643 4582 1519  565\n [5405]  375 4234 4548 4023 1004   56 4278 1223 3661 1747    4   25 4140  361\n [5419]   41  251 1589 1871  469 4636  600 3961  319 1597 1964 3667 2122  503\n [5433] 4654  450 2169 1765 5711  789 1529 1277  197 3494  717 4250  721  714\n [5447] 4187 3795 1623  215  499   75 1903 4663 1427 5736 1130  347  179 1103\n [5461] 1103 5026 4471 4689  641 2343 1847 2319   23  321  731   31 1573   51\n [5475] 2124 4694  739  325  373 1275 1555 4662  642 3815  583 2171  542 3792\n [5489] 4589  271   24 4670 1873 1143 2044 1031 1647 4485 1493 5273 2099  258\n [5503] 4553 1625  327  523  673  703 2219 1250 4671  133  315 4391  145 1277\n [5517] 1623  409  353 1283 1707 1875  930 4347 1174  401 3483  625 1174 4601\n [5531] 4646 2126    3 4425 1461   19 4658 1947  863 1443   25  644 2173   42\n [5545]  477 4349 3697 4087 4431  209   66  551 4404 2174  283 1186 1850 4640\n [5559] 2041  745 2253 4950 1685 4893  743 1120 1006  317 1131 1641 3762  390\n [5573] 4426 2128 2175 1459 3638 4158 4240  781  695 2239  561  991   32 1227\n [5587]   85 4129  348 4368 3826 1723  329 4564 1612 4628 4475 1110  525 4120\n [5601]  705  112  431 1483 3840 4280  505  753 2043  411 1073 1161  602   83\n [5615]   15  117 1783  186 4171 4577 1078 1734 4370  348  424  428 2130 2247\n [5629] 2177 4090 5712   63 4491  935 1010 4588 4464 1705 3728 1618 1819  257\n [5643] 2126 3750 4372 1853  347 1344 4687 4596 4135 5164  349  141 1579  437\n [5657] 1445 4572 3452 1813  153 4669 1567 1902  615 4181 4434 4172 2079 4403\n [5671] 4357 1231 3318 2179 1769 1925 2132 2347  963  750  720  337   12    8\n [5685] 1175  244  685  393 4429 4571 3393  759 1600 4544 4579 4309 1164 1527\n [5699] 4326  315 1580  471  323 1421 3719 4105 4525 2115 4576 2223 3823 4146\n [5713] 4581  537 3267 1039  473 1665  763  745   85 3835 1942 1710 4667 4178\n [5727] 4447 1624 4352  883  119 1200  133 1773 4215  161   95 3523 4333 3820\n [5741] 1116 3355 1053 2134  620 3985 1771 2181  703 1467  985  847 3771 3427\n [5755] 4415 1508  157    4  565 2377  269 5486 3325  917 4381 3817 1331 3453\n [5769]   91 4092 3635 1619 2027  341 3459  161  161 4622 4299 4661 4271 3387\n [5783]  675 3689  139   35 2231 1638 3805 4705 1176 1178 3695 1635  656  773\n [5797] 1695  372 4485   27 4997 4027 1473  891  559  630  733  181  706 2183\n [5811]  257 2136 1550 4411 1499 2042  689  185 4702  127  329 4373 3375  509\n [5825]   31  440 1790  575   36  359 1905 4202  695  531 4316  143 1585 1085\n [5839]  345 1078 1259  503 4410  894 4479  509 1418 1779 4300 1999 4301 1351\n [5853] 4323 4255  837   15  449  623 1109  145 1185  413  512 1134 4382  179\n [5867]  543   74 1593  216  408 4480  785 4413 1111  547 2331 1394  738 1637\n [5881]  535  177  808 2185 2138  391  989 1047 4626    9 1228 1221 1611  173\n [5895]  691 4484 5054  389  373  217   77 1269 1307 4588 4019 2019 1139  926\n [5909] 4540 1053 4277 3542 3424  353 1860 4674 5203  119  593 1703  711    7\n [5923]  272 1292  250 2131  815  527 1643 1165 3730 3944 1016 4517 2190 3369\n [5937] 2019  269  130 4649 2391 2140 5714 2187 1255 5038 5683  645   91 4131\n [5951]  951 1465  954 4573   21 3368   29 4543  981 4569 2075   87 1613  155\n [5965] 4085  359 3525  171 4437  947   83 3373 2139 1345 1485   87 1729 1435\n [5979] 1854 4127 2159 4532 3798  791  369    6 1715 5693 3899 4204 4333 1787\n [5993] 3783 4520 3314  633 4091 1416 4312 4536 1709 2370  695 4108 2142 1147\n [6007]  645 4033 2189 1574  801  402 4423 3439 3320  711  415 4224  890  983\n [6021]  891  354 1762 4662 4627  377  771 1225 3609 4555 4348   21 4133 1069\n [6035] 4695 1178  371 4106 1071 1462  677 3395  165  115 3833 1383 4309  979\n [6049] 3744 3274  399 4584 4507 2191 4412 4573  530 2144 4119 2363 4644  529\n [6063] 3822  629 4660 1243 4449 4619  381 4404  701 4088   97   11  185 1020\n [6077]  515 4322  104 2155   43 4162  199  383 3819  713 1066   22  608   30\n [6091]  112  299  128 4257 1018  727  301 1757 3317 1117 1018 1141  725  404\n [6105]  707  461 2114  345  125 2161 4911  731  371 1833 4252 4650 3768 5716\n [6119]  135 3223 1030  507 1895 4401  781 4201  301  541 1791 1837  709  145\n [6133] 3839 1919 3856  303  575 1507   79 1014  380 2006 1627 1433 3127 4576\n [6147] 4599  983 4150 4533 4560 4424 4393  711 1002 4471  413  772  470  905\n [6161] 1701  926  421  102 4241  251  135 1245 1474  117 2279 1415  305 1547\n [6175] 1717 2163 4534   80 1815 1865 2003 1142  763  604 4172 1200 1506 2116\n [6189]  303  671  981  203 4583 1655 3483 3737  825  261 3839  399 1299  443\n [6203]  799  831  850  389 1724 4246   11  601 1601 2083  715 1305   33  341\n [6217]  807   11 1889 4099 3611  715 4334  309 1162   59  356 1481 2119 2267\n [6231]   44 1410 2118 4023 4688 1733 2165 2047 1271 3935 1539   17  397  517\n [6245] 4406 4233 4537 3538  346  429 1959 4490  655 1838 1051 1429 1109 1167\n [6259] 2143  914  675 4655 3317 4655  717 1558 4691 4392 4051 1172 4418 4380\n [6273] 3521  313  269  487 3815 4529  611 3259 4220 2395 4610 4250  717 1117\n [6287] 1601  835  369  301 4521  112 3422 1429  553 1480 4107 4548 3405 1289\n [6301] 1357 4500 4913 4125 4558  377  714 1626 2167    1 1061 4364  219   59\n [6315]  248   20 1747  385 3353 2120  485  181 2379 4478  430 1153 1522  120\n [6329]   51   56 1643  407 4638  565 1519 1103 4112  721   25 1589 4711 3661\n [6343] 1517 4636  215  375    4 1004 3494  251   41  361 4582 3961  469 1597\n [6357]  319  181  405 1964 4670 2122 4654 1623 1847  450  503  655 1171 1529\n [6371] 2169 4156  197  600 1277 3795 4445 2319 1427   75  375  347 1642 1885\n [6385] 1903  731 4663 5026 4187 4471  641 4462  179 2343   23   31 4240 5711\n [6399]  647 1573 4589 4222  739  566 1275 2171 3792  789  442  373 1647  816\n [6413] 2044 1873  501 4485 2124  542   24 2099  587 5273 4662 1031 1493 1625\n [6427] 1222  327 1143  133  695 4553  673  145  523 2219  409  315 1623  930\n [6441] 1875 1250 4693 1174 4298 4264  353   19  401 3667  703  998 4646 4658\n [6455] 4601 4349 2126 2173 3483    3 1174 4425 4431 1443 4090 1947  863 1461\n [6469]  625  644  477 3697 1227  551 4641   66 4404 1853 1186  283 1850 3826\n [6483] 1131 3263  745 2253 4893  674 1685 1641  991 2128 1612 4426 3638 1006\n [6497]  329  781 4129 1656 1459 3762 2175  390  743  717 5736  348 4564 4368\n [6511] 4542 4087 1895  431 4640 4120 4475 3840  411 1004  209 2043  505 1161\n [6525] 1073   85  117  615 4628  164 1783   15   83 4171 1078 2041 4577  688\n [6539] 2130 1164 2177 4370 2247  424 2079  583   63  348 4491  349  935  753\n [6553] 1010 3728 4687 5164  619 4434 1344 1618 4335 1819  883 2126  257 1705\n [6567] 1902 3750 4372 1579 4572 3452  337  607 4181 1445  153 4669  337 4172\n [6581] 1813 3318  425  473 2132 1175 1769  119  705 4357 4381 2347 4403 1925\n [6595]    8  720   12 1527  963 2179  759 1566  395 4571  745 3817 4447 4579\n [6609] 4634 4309  377  393  141 2115  323 1231 1600 4105 1602 2223 4525 4429\n [6623] 3719  763 3823 4146 1624 3267 1665 4333 4352   85 4326 2027  244 2377\n [6637] 1710 3523 3635 4581 3427 1942 4667  133 1773 4215 1116  161 3820   95\n [6651] 3355 4588  917 2134 4178  703  161  502 4170 4205 1635 4415 1331    4\n [6665] 1695 3771 2181 3453  847 1039  562 3985  315  620  157 3459 1467 1508\n [6679] 5486  341 1504 3689 1619   91 3325 3387  525 4622  559 4271 4299 4661\n [6693] 4588 4411 2231  675 5712 4702 1771   27 4540 1638 1078  773  891 3805\n [6707]  139 4705 4997 4027 3695 1085  369 4092  372 4485 1178 1176 1473 1790\n [6721] 1668  985  161 4202 4323 2042 2136  509  359   31 4410  689 2183  257\n [6735]  127  329 1580  250 1905  440  143  990  894  575 1585 4316  695 1499\n [6749]  446  345 1779 4479  565  537 1064  181 4301 1351   36 1999  512 1418\n [6763] 1185 4255  145 1109  837 1134 1593 3393 4480  408 1403  449  623  413\n [6777] 4413  543 1562  216  547 1394 2331 4382  177 4373 1228  535 2185  503\n [6791] 1047  391 4397  989  691   15    9 2138 1016 4626  326  373 4300  979\n [6805] 1307  217 1611 1111 4484  477 4019 4277 2019 4520  926 1269 1053  353\n [6819]  389 1860 3542  119  593  527  711 1139  808 4674  272  612 3424  269\n [6833] 1165 1703  371 2131 1643 3730 4517 3369   74 4227 4649  130  951 3944\n [6847]    7 2190 2159 2140 5038 1613  645 5714   29 2187 3368 2019  947 2391\n [6861]   87 5683   21 1255 1465  891 4543  981 4569 4175   87 1729 3525  179\n [6875] 1485   83  359  954    6 3798  155 2370 1127 1435 4127 4532 3373 4333\n [6889] 3274 4204  785 1854 1345 4085 4312 1787  633 3783 3899 4108 1416 4091\n [6903] 1709 5693 2142  645 2189 4412 4536 3439   21  402  695 3320 1147 3822\n [6917] 1715 4133  801 4423 1574  890 4131  983 1692 4033 2139 4555 4309 3314\n [6931]  415 2075 1762  354  381 4662 1225  771  791 4106 4348 4695  371 1069\n [6945] 1178  226 1243 1071 4224  677 3833  629  115 3609 3395 4645  399 4573\n [6959] 2191 3744 4584 2144  530 3819 1020 4507 2363 4660 4404 4449 4088  701\n [6973] 4619  185   97 4119   43  910  199   11 2155 4162 4519 4322  713  128\n [6987]  608   30 1018  383   22  112  727  739 6055 1855 2239  123  739  727\n [7001] 1117 1564  650 1141  725 4650 2114  345 4911  301  125 1833  707  303\n [7015]  461  731 4252 2161 1919 3223 5716 6055 4401  380  135 4150  371 1895\n [7029]  541 1837 1030 3839  709  715 4201  507 1791  575 4941 3856 4533 1410\n [7043] 4471 3127 2006 4560 1125  413  303  905  983   79 4599  772 1433 4576\n [7057] 1002 4334 4424  135  711  145 1627  470 4393 1701  926  719  251  102\n [7071] 1156 4241   51  311 1665  117 3839 2116 2163 1415 2003  305 1865  203\n [7085] 4172 2279 1815 4534 1547  763  457  604 4583  671 1655 1162  693  389\n [7099]  981 3483  443  399 3737  850 1724 1299  799 4246  825  715 1142 1601\n [7113]  715  305  601  807   33   11 1305  341 1889 1179   11  309 3611 2083\n [7127] 1481 4233  393  683 2119 2267 4392   44 1733 2165 1271 2047 3935 2118\n [7141] 4498  429 2143 4655  346 1539  397 1558  219   17 3538 4537   59 4406\n [7155] 1838 1172  269 1109 4490 1051 1429 4099  655  675 4691 4051  914 3317\n [7169] 3259 3521 4655 3815 4220  181 1167 4652  517 2395  301  717  611  717\n [7183]  611  369 1480  313 1601  112 4610 4418 4521  553 4548 4112 3422 3405\n [7197] 4558 1150 1429 1357 4125 1959 4185 4913 4107 4250 4364  831 2120 3353\n [7211]  181  448  120  377   80  485 1643 2167   20  385 1153 1747 4478  647\n [7225]    1   56 4638  407  565 1469 2379 1626   59 1519  634 4582 1103   25\n [7239]  721  835 1589 4711 1885 4636 1004    4 1061  361 1223  487 3661  215\n [7253] 3494  375 4140   41 3961  319  469  600  251 1964 4654 1597 4670 2169\n [7267]  258  714 1847  196 1277  503 1529  655 2122  197 1623 1642 4445 5711\n [7281] 3795 5736 2319   75  375 4094 4663 1903  731  347 1427 5026 1026 4689\n [7295] 4471 2343  235   23  641 1573 4589 4688  454 3667  373 4662  566 4240\n [7309]   31 2124 2171  816 1647 3792 2044  569 1873  179 1275   24  542 4485\n [7323] 5273 1031 1143 4279 4694 1654  523  673 1289  315 1625 1690  703 4671\n [7337] 2219   19  695 4553  930  353  145 1875 1623 2099 1277 1174 1707  401\n [7351] 1174  327  133 3483 4646 4425 4601 4658 4090  863 2126 2173 1705 1947\n [7365] 4349 4264 4431 1443 1461  625  743  477 1227  644 4087    3 4640 3697\n [7379] 4641   66 3826  283 1000 4404 1131 1850 2253 3263 4893 1685 1853 1006\n [7393]  390 1612  329 1641 4129 3638 1459 2128  991  781 4426 3762 2175 2041\n [7407] 1249 2239 4564  717  745  348 4368 4120 1895 4335 4628 4475 4277  431\n [7421] 1110  525   85 3840  753 1078 2043  411  705 1073   15  117 1164 1705\n [7435] 1207 1783 4577  615  186 4370 4434 2079 5712  523 2177 2247 1567 2130\n [7449] 1734 1161  348 4491   63  209  349  935  505 4588 1010 3728 5164   83\n [7463] 1618 1819  883  257 2126 4687 4171 4372 1344 1902 3750 1175 1579  377\n [7477]  141 4669  368 1445 4596 4572  153 1231 4181  337 4403  439 4381 3318\n [7491] 3452  473 1813 4172   12 4357 2347 1925 2132 1769  720  119 4429 1107\n [7505]  963 4326 4634 4571 1111 3393 1600  708 4447 4309    8 4579  323  745\n [7519] 3817 2179 4581 4333 2115  537 3719 2223 1116 3267   85 3823 4525 1624\n [7533] 1665 1039  393 4352  763 4146 3835 4170 4178  315 3635 2027 1710  161\n [7547] 1942 4215 1502 3523 4667 3820 3427  703 1635   95  620 4105  985 1695\n [7561] 1467    4 3771  685 3453  847 4415 2134 1771 3355  133 1331  565  157\n [7575] 3985  252  917 1508 3459  161 1773 1200  341 5486 3325 2377 3387 3689\n [7589]  161 4622   91 4092 4661 4271 4299 1132   35 1178 4702  675 1078 4588\n [7603]   27  750  369  656 1176 2231 3805 3695  773 1085 4540   17 4411  891\n [7617] 2181 4485  139 1473 4705  372 1619 1790 1440  687  706  257 2042 4373\n [7631]  359  689 2136 1499  413   31 1545 4316 3375 4027 4323 2183  329  181\n [7645]  127   36 1905  250 1259 1284  143   15  695 1999 1585  509  440  503\n [7659]  345 4255 4323  575 4479 1351 1185 4480  837 1779 4202  543  623 4410\n [7673]  449  502  145 1134  894 4382  512 4413 1111  785 2331  509 1394  177\n [7687] 4300 1637   74 1307  216  408 1593  535 2185  989 1228  691  547    9\n [7701]  391 1047  808 2138 1016 4626 1139  389 4997 1053  979 1109  373 1269\n [7715] 3542 4484 4277 2019  119  353 1221 4397 1611  593 5203  711  926 1703\n [7729]  612 4520    7  272 1973  269 4674 3730 1643 4019 3944 2131 1292 4517\n [7743] 1165 4227  130   29 2019  527 2190 2159 3369 5038  645 1491 5714  891\n [7757] 2140 2391  947   87 4649 3424 1255 4131 1465  951  179  120 4175 4569\n [7771] 2187 3368  981 2075   21 1100 1729 4085  155 1127   83 3373   87    6\n [7785] 1485 2139 4204 2370 1435 1345 5683 3798 3899  359  791 5693 1787 3783\n [7799] 1854 1416 3525 3314 4108 4536 4127  381 3274 4532 1709  645 4091 3320\n [7813] 3822 4412 4309  415  402   21  695 2189 1147 4423  890 2142 4033  801\n [7827]  983 4312 4543 4555 1762  752  633 4662 1613  771  354  299 1069 3609\n [7841]  405 3439 4333 4106 4348 1243 3395 4224  371  115 3833  677 4507 4573\n [7855] 1225  629  530 1178 2191  399 2144 3819 4584 4119 2363 4133 1020 4695\n [7869] 4660 4088 4449 1071 4404 4619 4645   11  199  701  185 2155  910 4322\n [7883] 4162 1715 3744 4519  383  477   43  713  608  128   30  112   22 4023\n [7897]  739  759 1855  421  727  739 1117 1018  404 1141  725  380 6055 2114\n [7911] 5716  707  507  731  301 4401 2161  371 3223  345 4650  135  303 4708\n [7925] 4911  125 4201  461 1833  963 4941 1919 3839  370 1895 1837 4518 1030\n [7939] 4559  145  709 1791 3856  575 4533 4576 2006 3127 1125   71 4599 1663\n [7953] 4419  983  303 1433 4560  135 4471  849 1002 1627 3839 4334 4424  910\n [7967]  421  413   79 1701 4122  338 4241  102  926 1415 1547 2116 1815 2003\n [7981] 1162 4534 2163 2285 1865 1879 1122 1142 2279  763  305 3483  550  399\n [7995] 1655  671 3737 1506 4583  772  715  604  850  443  235  799  825  831\n [8009] 4246 1724   11 1305   33  981   10  715 2083 1299  341  807   11  389\n [8023] 1889 1179 1410  309 4099  643 1481  560  905 3611 2119   44 4023 4214\n [8037] 4392 2267 2047  397 1733 2118 2165 3935  429 4393 1539 4233 4457  517\n [8051] 1271  219  346 1172   17 2143 1558   59 4406 4537 3538  203 1959 4691\n [8065] 4490 1626  655 1051 1838  675 3521  269 1109 1429 1167 4652 4051  914\n [8079] 3317  717 4655 4418  313  611 4230 1855  487 3815 4220  181 2395  112\n [8093]  369  835 4610 1480  301 1601  717 3259 3422 1117 1268 4388 4548 4409\n [8107] 3405  553 1429 1357 4383 4376 4913 4364 1061 2120 2167  565  120  181\n [8121]  714 1405  225    1  485 4521 1643   59 1747  430   51 1885 4478 1602\n [8135]  647 2379 4638  634 1103 1194 1519   20   56 4582   25  721 1589 4636\n [8149] 1275 1004  117  215 4140 3661  251 4234    4 3353 1601  375 1871  600\n [8163]  319  407 3961  469 4558 1597 4187   41 1964  258 2122  503 4670 3667\n [8177] 4250 3494 4654  499  197 1847 1277 1529 2169  789  450 1623 3795 1765\n [8191] 1171   75 4663 2319 1427  731  347 1903 2343 5026 5711   19  641   23\n [8205] 4471 1103   31 4694 1573  406  179 4662 1277  343  739 4240 1026 2044\n [8219] 1647 2124  570  642 2171 3792  542   24  361 2099 4589 1873 1120 5273\n [8233] 1031 4485 1143 1654 5736  327 4269 3695  315  523 1625  133  695  145\n [8247]  703 4553 2219 1230 1275 4264 1625  930 1875  673 1707 1623  401 1174\n [8261] 4349  353 4298  625 4646 3483 4658 1443 1174  863 1947 4431 4425 1461\n [8275] 2173 2126    3 4671  743 4090   42  477  644 4087 4641 3697  209   66\n [8289] 4640  552  283 4404 3826 1131 1227 1000 2174  745 1853 1850 4950 2253\n [8303] 1006 4158  428 2128 1685 1641 1612 3638 2041  991 4426 2175  329 1459\n [8317]   32 2239 3762 4628 4601 4120  390 4129 4368   85 4893 4564  348 4475\n [8331] 1643  411 1483 1110  431 3840 4432  505 2043  753  750  602 1164  424\n [8345] 4280 1161  117  705  781 1078   15  385 4171 4577  615 1705  186   83\n [8359] 1073 4464 4370 2177 1783 2079 2130 5712 2247   63  349 4491  373  348\n [8373] 1010 3728  935 4434 4687 4588 5164 1734 1618  883 1344  347 2126 3750\n [8387] 1902 4372 1819 1493 1175 4596  717  337 1445 4181 4669 3452 4172  377\n [8401] 4572 4403 1769 1231 3318 1579  473 2179 4357    8 2132  525   12 4429\n [8415]  337 1642 1813 1925 2347 3817  393  963  720 4125  471 4447 1702 4326\n [8429] 3393 4579  759  141  745 1600  315  323 4309  537 4333 4105  119 4581\n [8443] 4381 2115 4576 4571 3823   53 3719 2223 3835 1665 3267 4352 1039 4525\n [8457]  257  544   85 4146  763 3635 3523 4178 2027 1710 2377 1624  161  133\n [8471]   95 1773 1942 1635 3355 1695 1771 1053 1116  157 4215 2181 3459 5486\n [8485]  153  703  161  847  620 2134 1200 1331 4415  630 3453  565  985  559\n [8499]    4 3325 1550  917 1467   91  407  341 1619 4622  161 3387 1508 4661\n [8513] 3771 4667 4092 2231   35  675 4588 4411 3805   27 3985  369 4540 1078\n [8527]  656  891 1085  139 4027  773 1473 4485 4997 1638  181 4705  372 3375\n [8541] 1176  733 3689  706  464  413 4323  257 2183  509  329 2136  575 2042\n [8555] 4702  127   31 4410 1905 4299 4373  359  440   15   36 1499 1739  894\n [8569] 3427  503 3820 1585 4316  345 4202 1999 4479 1351 1779 4255 1259  509\n [8583]  512  145 4323 1109 4480 1185  408  623  449   74  837  531  185 1134\n [8597] 1593  216  738  543 2331 4413  689 4382 1637  785  177 1394  535 1228\n [8611]  695  989 2138  547  250 1111 1016    9 2185 1047  808 4484 4300 4626\n [8625] 1221 4271 1139  143  812  217  173 4397 2019 1611  979 3542 4277 4019\n [8639]  119    7  926 5054  711  373  353 4520 5203 3424  593  691  389 4674\n [8653] 1973  272 4410 1790  391 3944  612 1292 1165 1053 1703 1643 3730  130\n [8667] 1307 2131 1269 3369 4517 2159 2190 4649 2391  891 1491   29 2019  947\n [8681]  951 1255 2187 5038 4131  171 3368  527 2140   21  179   87 1465 4543\n [8695] 5714  981  645  954 1111 2075 3525 4227  155   87 4085   83    6  359\n [8709] 3373 2370 1345 1485 2139 1729 3798 4127 1435 1715 3274 4532 5693 1854\n [8723] 4670   91  791 4204 4437  633 1416 4091 4569 1787 4312 4108  381 3314\n [8737] 1613  645 4423  890 3822 2189 1147 1482 4536 4106 1709   21  402  415\n [8751]  695 2142 3439 3320  711 4412  983 4333 1094 4224 3899  269 4555 4662\n [8765]  299  801  771 4348 1069  354 4133 1225 1071 1243  629  165 3395 1178\n [8779] 3783  677 4645 4033  371 4695  399 4573 3744 2144 2191 4507  530 4584\n [8793] 1020  115 2363 3819  529 3609 4449 4404 4088 4660   97 4309  701  383\n [8807]   43 3271   11  104 1178 3833  515  185  199 1762 4162 2155 4519 1066\n [8821] 4322  713  608  128   22   30 4119  112 1018  711  685  719  739  727\n [8835] 1117 1018  650 1141  725  380  731 2114 2161 4650 1833  507 4201 4911\n [8849]  707  371  461 4401  125 4708  301 1030  345 3223 1895  303 1837  370\n [8863]  963  135 4518 6055 1919 5716 4559 3839  145 1791  575 4533  709 1497\n [8877]   79 4576 3127 1507 4471   71 4424  413 2006  711 4599  303 1002  983\n [8891]  135  905  849 1433 4419 3856 1701  772 4334  910 4560 4122  421  719\n [8905] 4941 1627  926  338 4241  117 2003 1415 2116 4534 3839 2163 2279  550\n [8919]  305 1865 2285  763 1122 1879 1815 1547 1142 4583  671  298 1162  203\n [8933] 1655 3483  235 1506  102  399  389  981  443  825  715  305  850 1299\n [8947]  831 1724   11 1305 1601   11 2083  807   33   10  715  799  341 1889\n [8961]  560 1179 4099  309  643 1481   59 4023 2119 2267 2118 2165 2047  429\n [8975]  451 4214 4246  517 2143 4392 3611 4393 4457 3935  346 4233 1271 1539\n [8989] 1733 4490 4537 3538 1051 1558   17  914 1959 1838  219 4406  269 1172\n [9003]  675 1429 1167  655 3317 4655   44  717 3815 4418  181 1109 2395  487\n [9017] 4652  313 1855 4230  369 4220  611 4051 1117 1480  717 3521 4548  553\n [9031] 4388 4521 3422  301 4610 4409 1268 3259 1601 1626 3405  112  835 1429\n [9045] 4558 4376 1061 4383 1747 4913 2120 2167 1602 1357   41  430   56   59\n [9059]  181 1405   51  120 4478  544 1885 1643  485 2379 4638 1519  225  407\n [9073]  565   20    1 4582 1103   25 3353 1589 4234  634 1004  714 1657 3661\n [9087]  375 3494    4 4691  215  251  647  361 4636 4364 1871   41 4140  319\n [9101]  469 3667 3961  600 1964 2169 4187 4654 4670  503 2122  197 1847  499\n [9115] 1623  789 1765  450 1529 1277 4250 5711 1171 4663 1597   75 1903  347\n [9129] 3795 1427 2319 5736 5026  731  721 4689 1103   19 1026   23  179 2343\n [9143] 4471 4240  258   31  641 4694 1573  373 4589  406 4662  739  397  343\n [9157]  570 2124 2044 1120 2171 1275 1873  642  542 1485 5273 2099 4485   24\n [9171] 1647 1031 1143 1654 4298  523  327  703  673  315  695 1625 1625  133\n [9185] 4553 2219  145 1623 1230 1174  930  353 4671 4264 1707  401 1875 4646\n [9199] 1174 4349 2126 1443  625    3 4431 4601 2173 4658 1461 4090  743 4425\n [9213] 1947 3483   42  644  477 4087  552 1227 3826 4640  209 3697 4404  283\n [9227] 2174 1000 4641 1853 1131 2253 1850 2041  863  745 4950 3694  997 1641\n [9241] 4426  390 2175 3638   66 1459 3762 2128 1037 4158 1006  991 4129  781\n [9255] 2239 1612  348   85 4564  561 4120 3737 1895 4368  431  411 4464 1110\n [9269] 3840  525 3792 4280  505  705 2043  753 1685 1078  329 1073  117  602\n [9283] 4475 1783 4171 1705 4577  385  186 4370   83 2130 1164 2177 1161 2079\n [9297] 2247 5712  615  348  424 4434 4628   63 1010  349   32 4588 3728 1734\n [9311] 5164  935   15  377 1618 4687 1819  347 4372 1344 2126 4113  153 4181\n [9325]  437 1175  471 1493 1813  337 1231 4669  141 4403 4381  473 1579  119\n [9339] 2179 4572  257 3318   12  337 1769 1105 1925 2132 4429 2347 4125  759\n [9353]  685  720 3393  393  963    8 4309 4326 4596  323  407 4333 4447 1527\n [9367] 4571  537 4579   53  745 1702 4581 4105 3835 4525 2223 1902 4576 4357\n [9381] 4491 3719 3267   85 4352 1624 3452  763 2027  161 4146 1039 2115 1710\n [9395] 4667 3523 3635 4178 1942 2377  133 3820   95 1116 1665 1200 1771 1550\n [9409] 3355 3427  917 1053 4215 1600  847 3985 1695 2181  985  630  157 2134\n [9423] 3771 5486  565  620 1467    4 3817 3459 1331 3453 1635  883  703 4622\n [9437] 4271 3325 4172 4661  341   91  161 1773 4299 1619   35 3387 2231 4588\n [9451] 3689  675 3695 1176 1078   27 4092 1638 4702  656 1178  891  773 4540\n [9465] 4705  139 4485  872 4997  372 4027 1473 4411 1790  706  181  369  464\n [9479]  413  359  733  689 2183  329 4323 3805  161 1259  575  509   31 3375\n [9493] 1499  127 2042  531  257 3823  250  143  440  695  894 4410 4373 1739\n [9507] 1585 4316   36  503  345 1999  509 1779 1351 4255  512 1085 4323  623\n [9521]  145  837 1185  216 4300  449  543 1109 1593 1637 4382 4202 1134  738\n [9535] 4480  547 1394 2331  785  177   15  808  691  989    9  391 1016 2185\n [9549] 1047 1228 4626 2138  373   74 1221  389 4484  926  535 1053 1269 5054\n [9563] 1443 1611 2019  173 1292  711  812 3424  593  217  594    7 3716 4674\n [9577] 1307 1973  272  315  612 3944  269  353 4019 3730 2131 1643 4517 4227\n [9591]  527  185  130 1703 4520 2159 2190 5714 3542 5038   29  891  947 2187\n [9605]  645 2140 4649  179 2391  954 3369 1465   87 1491 4543  171  951 1255\n [9619] 1111 1435 1139 1508 2075   87  155 4085   21 1111  359 3525   83 1485\n [9633] 1345 2139 1729 2370 3368 1715 4127    6   91 4532 1854 4204 5693 1416\n [9647] 1787  381 3798 4108 3314 5683 4437 4091 4033  645 4412 2189 1709  402\n [9661] 1574 4309  801  415 2142 1147 3899   21 4333  633  711  983 4312 4555\n [9675] 3373 3439 4277 1762  354 4536 1069 4662  771 4131 1225 3609 1243  981\n [9689] 4224 4348  695 4695  165 3395 1178  629 3783  371  677  115  890 1071\n [9703] 4573  399 2191 3320 4106 3744 4584  530 4645 4119 2363 1020  299 4133\n [9717] 1613 4660  529 2144 4404 4449 4162  701  791  383  185   11   43 4088\n [9731] 4619  408 4397 3833 4519 2155  104   97 3819 3822  515  199 4322  713\n [9745]  128  608   30 1018  112   22 1066 3274  119 2019 1905 2136 3750 4423\n [9759] 4569 4479 4507 4415  739 1117  785  219 1141  725 1833  507  461  303\n [9773]  301 6012  707  125  380  371  731 1627 4201  135  855 1671 1895  541\n [9787] 1837 1681 1919 1296  145  709  947 4911  345  575 3856 1774   79  905\n [9801] 4707 1507  241   71 1057  711 1002  403  413  983  470 1433  303 4248\n [9815]  926  339  102 1255 4122  117 1415 1865 2003 2285  550  305 2279 1083\n [9829] 1815  389 4583  399 3658 3737 1665  715  397  443  825  831  850 1479\n [9843] 1299 1879  754 1641  715  799   11  981  807 1889 4459 1601   59  643\n [9857] 1274 2267 1733 1162 3812   11 4498 4696  517 2143 3611 2047   44  369\n [9871]   17 3538  851 4604 1109 3521 1172  346  341 2119 1959 4425  655  219\n [9885]  269  675 1167 1838 1429  914 3317  717 4233  671  894  487 4189 4490\n [9899]  336  301 1305  441 4392  835  313 3422  717 4297 4051 1480 2395 4610\n [9913]  481 4548  611  553 1645 1506 4558  112 4418 1429 1357 4388 3405 4913\n [9927] 3353 2167  761  181 1623 3261 4364 4389    1 1747  485  214  647 1643\n [9941] 2379 4478   56  120  317  486 4220   51   59  407   20  675 1519 1589\n [9955]  714  721 1051 3661   25 1594 1146  215    4  375 4636  515  448   41\n [9969]  251 1871  319 1061 1004 4582  361 1885 3667  600 1177 4670  503 1277\n [9983] 4090  338 1847  655 5698 5711 2044 1103   75  197 3852 1705 1036 1903\n [9997]  731 1257  415 1026  179   19   31 1875  237  373   55  499 1521 1606\n[10011] 1647  642 4456 3792 4471 2171 1031  523  327 1403  133  695  673 1690\n[10025]  362  664 4131 1141 1625 2219 2099 4594 1707  353   24 2115 1516 4147\n[10039] 1174 4264 4679 1174  930 4646 3483 4601  863 1443 4658 2126    3  310\n[10053] 1461 1599 4431  743   66 1045 4087  209 1001  238 3273 1853 1131 4404\n[10067] 2253 2041 1623 1850  625 1685  921 3697 4247 4426 1185 4139 1055 2175\n[10081]  781  991 1011   10 1227 4513 4129   32  628  348 4425  315 4241   85\n[10095] 4564  431 1199 1629  411 4475 4368 4119  505 1232 2043  705  753  843\n[10109] 1161 1073   15   83  186 1715 4577  117  672 4434 5469 2079  615 2247\n[10123] 1006  349 1703   53 1783 4370 1010  935 4588 4950   63 3728  883  394\n[10137]  668 1819 2126 1285 5712 4572 1579 1250 1587 3452 4092 4414 3854  153\n[10151] 4669  141  347 3983 1769 2132 4357 1231 4381 1925  393 1485  720 3318\n[10165]  963   12  759    8  262 4403 3393 4133 1813 2347   61  377 1600 1205\n[10179] 2223 1575 4580 4105  501  577 4502 1039 4579 3823 3267 4146 4333   85\n[10193]  275 1527 3635 4178 4369 4429  119  600  243  133  687  256 2027   95\n[10207] 4447 4522  734 3355 1053  620  703 4172 4667  985 1695  161 1331  625\n[10221] 3453 1467 3427 1902 4415 1635  157 1508  325 3459  341   91 3689 1771\n[10235] 3325 4616 1773 4183    4  565  917 4271  675 5085   35 3814 4702   27\n[10249] 3805 3640  369 1692 1085 1443 4485 2231 1093  139 4309  773  123 4997\n[10263] 1178 1790  413  359  250  181  706 1896   63  257   31 3523  509  329\n[10277] 4323 4246 1499 4410   15 1580 2499  143  185 2139 1585 4479 4300 1999\n[10291]  503 1131  695 4622  623 4255  145 1176  127 1279 1351 1529 1109  512\n[10305]  543 1905  997 1100   74  894 1730 3375 1139 1111  920 1713 1394 1748\n[10319] 2019  391  989 4962  535 1228  537  547 4484    7 1616 3542    9  373\n[10333] 1779 4277  525 4630  119  711 1611 1208 1643 2155  593 4674 4174 3944\n[10347] 1225  662  681 3579 4397 3730  433  527  130  269 1491  951 1497 2159\n[10361] 1613  947  645  179 2190  575 1465 2391 4700 3368   21 1729   87   87\n[10375]  155   83 5693 3373 4127 3525 1345 4703 3798  381 4670 1787    6 3314\n[10389] 3783  492 3694 1709  645 4662 4091 4423 3369 4125 3320  402  386 4309\n[10403]  801 3439  825  600 1762 3899  527 4695  354 3609 1069  629  115 1071\n[10417] 3395 4573  529  677 4430 1568  399 4449  383  199 4232  185 4404   11\n[10431]  515 1066  701  104 4276 4162 4693   43  608  128   30   22  112 1018\n[10445]  713  727 2120  640 3985 4521 4406  297   22  739 1069   11  727  104\n[10459]  112  128  801 1545  725  507  707  541  135  461  345  125 1837 1895\n[10473]  145 1919  575 1269 3856  371  304   79  711 1575  983  303 2006 3271\n[10487]  905 1701   71  470  413 1485  421  926  117 2279 2285 4292 1865 1415\n[10501]  550 1627 1815 1277  981  671  772 4304  389 3737 1506  746 1525  203\n[10515]  443  311   11  709  731  825   11 1599 1141 1305   33  715  341 1153\n[10529]  608  691 1889  309  715  643  646 1601   59  468 2119 3611 1481  669\n[10543] 2267  517   44  346 2047 1271 4584 1733 4372  102   17 2143 1558  692\n[10557]  369 3538 1959 1838 4479 1172 4406  219  675 1051 4051 1429  397 3521\n[10571] 3259  914 4424 1167  665  717 3317 3815  487  313  181 4220  835  611\n[10585] 1477 1492 4610 1072  112  717 4418 4521 1572 3422 4364  553 1626 4529\n[10599] 3405  377 1357 4558   59 4625 3353  524 4913    1 4478 1885 2167 4383\n[10613] 1202   51  181 1110  647 1061 2379  120  673 1643 1747   20  407 1519\n[10627] 4140   56 1529 1103 4178  721 1589   25 4582 1669 4636 3494 3661  251\n[10641]  215    4  361  375   41 1871  319 1004  469  600  503  499 1177 4187\n[10655] 1765 4654  338 1529 1847 4670 2044 4175  789 5711 1277 3795 2319 4663\n[10669]  887   75 5736 5026  731 1903  680   19   23 4240 2343 4471  179  641\n[10683]  197  927 4090 1174 4589  575  373  448 1573 2171 3792  642 1873  952\n[10697] 1275 1647  374 1233 1120   24 4485   31 4279 1031 2099 5273  301  523\n[10711] 4553  315  695 4429  145  703 1707  327  980 4264  673  930 1875 1623\n[10725]  975 2219  353 4601 4646 1443 3483    3 4689 2173   73 4679  863 4658\n[10739] 4087 1174  743 1947 4431  644 3697   42 4446   66 1549 1227  209  477\n[10753]  283 4404  238 4135 4425 1734  625  565 1853 2041 4640  745 1850 2126\n[10767] 3826 1612 1685 2253 3762  390 4158 2175 4368 4950 2239 1459   85 4426\n[10781] 1641 4893 4148  991   32 4564 1006 1895 1054 4306  431 4475  505  411\n[10795] 4129  329  753  525 5683 2043 1131  705 1137  602  117  620   15 4577\n[10809] 3829 1783 1705 4628  615 4434 1161 4370 2247 1073   83 2079  186 4231\n[10823] 2177  348 1122 1604   63  133 4491 1078 1000  935  349 1010 3728  348\n[10837] 4588 1166  560  377 2126 5164 1344 1819 5968 1902 1297 4171 1753 4669\n[10851]  883  343 3452 1107 1769 1183 4172 4429 3318 1231 5712 1925  347 1146\n[10865] 4357 1601 2179  153  393 5621 4447  279 1813 4687  745  963 3817 3393\n[10879]    8 4596 4579 4309  402  404  750 4572  759 2115 4105 2130 3638  337\n[10893] 1111 2223 4403 3835 4146  161 3719 4212   85  763 2347  141 4349 4178\n[10907]  133 4333  537 2027 1665 1205 1197   12  627 3355 3427 1600 1942 3832\n[10921] 1039 1771 1635  119 1695 3820 4352  275 2134 1197 3985 4181  720 3459\n[10935] 1053    4 4415  562 1508  565 2181 3325 5486 1467 4667  917  161 1624\n[10949] 3823 1331   91 1710   95 4661  369 1262 4571  508 4170  703 2377  847\n[10963] 1078 3805 1619 1719  675  891 3523 3635   27 4622  157 2231 4540  181\n[10977]  620  531 1615  341  773 1790 1473  257  359   31  329  413  372  575\n[10991] 2183  171 4581  127 4381 1905 1499   36   35 1284 4997  250  894 4373\n[11005] 3453  185 1585 4479  503  656 1779  139 1773  512 4271 1200  326 1100\n[11019] 4326  145 1185 4410  216 1178  623 1351 1109  985 4215  602  449  408\n[11033]  837  509  706  785 4413  177  543 1394  345 1085  391 4255 1307  535\n[11047]  143 1176 1228 3387 2331 4397  989 3695 4323 3375 3542  709 4702 4484\n[11061]  373  173 4705  269 4019 2019 1047 2185 1053 1703  711  695  389 3843\n[11075] 2138  217  353 1269 4202  272 4299 4674   15 4626  440 1973 1462  269\n[11089] 1643 2131 1437 1016  119   74 2042 1999 4517 4092    7    9 2190 2019\n[11103]  130 2391  951   29 1139 4649  454  645 1255 1465 1491 4316  926  947\n[11117]   21  120 2187 4569  547  171  179 1111 3424 1611  981  594 4411 2159\n[11131] 1729 3368    6   83 1345  891 4323 1485 5693 1435 3730  492 1715 5038\n[11145]  509  359  593 1854 4300 1416 3716 4382 4485 5054 1482 4532  155 2142\n[11159] 1709 1147 2189  402 3272 4437 2370 1018 4520   87 4555 4333 4662  347\n[11173]  381 4277 1637  299 5714 4131 4127 4627 3369  645  405  354 3525 4309\n[11187] 1243 2075 4536 4204 3314  754 4085 4227 4191 3373   91 4412 4108 2191\n[11201] 2144 1225 2139  530 4584  371  633 3320  808 3798 4660 3439 1178  399\n[11215] 4507  629  963 1020  165   87  199 4645  185 4133   21 4312  383 4404\n[11229] 4573  415 4698 1578 3833 1613 2155  771  529   97 2363  527 4695 3744\n[11243] 3819   43  677 4519  515 4224  713 4619 4119 1787 1018 3822 4543 1071\n[11257] 4033 4348 4162 4322   30  608  115  701 4106 4201 3395 3609 3689 3667\n[11271] 3899 4091  655 1762 3771 3944 4423 4449 3783  791 1117 1497  650  725\n[11285] 1141  371  507  345  707  731 1833 4650  380 2114 2161  303  135  461\n[11299]  301  125 4401 1030 4201 4708 6055 1895 1919 3223 1837  963 3839  370\n[11313]  709 4941  575 4518  145 1507   79   71 2006 4471 4533  983 4911 2057\n[11327] 4560 1408 4559  711 1627 4419  413 1433  135  303  905 3127 4334  910\n[11341]  772  849 4424 4599 1701  338  926  719 4241 1815  117 4576 3856 2003\n[11355] 1415 1122  305 1547 2285 1162 1879 2279  981  399 3839  389 2163 4534\n[11369]  203 1865 4583  671  235 3483 1142 1506  421  102 1655 4122 3737  443\n[11383] 2116  298  550  825  715  850 1299  799 1724   11 4246 1002  831 2083\n[11397] 1305  715   33  341  807   11 4099   10 1889 3611   59 1481 1601  643\n[11411] 1179  560 2119  309  451 4023 2267 3935 4392 2165 4233 2143 1558 1271\n[11425]  397 2118 4230 4457  655  219 1959 2047  675 4393  346 1539 1109 1172\n[11439] 1167 3521 4490   44 1429  914 4214   17  429  517 4691 1051 4537 2395\n[11453]  487 4051 4652  611 3259 3317 1855  717 4406  112  313  301 1117 1838\n[11467]  369 4655 3815  717  269  835 1480  181  763 4409 3422 1268 1357  553\n[11481] 4388 4220 4521 1733 4913 4548 1061 4383 4376 1601 3405  485 4364  181\n[11495]  565    1  120 4610 1602  225  430   51 1885 2379 2167   56   59 2120\n[11509] 1519  407  634 1643 4638 4478 3353 1429   20  544 4582 1589 1103  714\n[11523] 4558 3494 1657 4234 4140 4636 1405  215 1004  361  251   41 4700   25\n[11537]    4 3661   41 1597  319 4187 3538 1847 1964 4670  375 2122  258 1765\n[11551] 3667  503  600  469 1871  789 1623  499  450 5711  197 1277 3795 1529\n[11565] 2169 3961 1427   75  647 4663  731 1747 4654 1103 5026  347   23 1171\n[11579] 4689 5716 2343  179   19 1626 1573  406  739 2319   31 4662 4471 4694\n[11593] 5736  570 3792  642 2124 1903 1647 1275 1873  343 2044 1120 1485 4589\n[11607]  373  542   24 1031 2099 4240 5273 4485 1143  315 1654  133  327  145\n[11621]  673  695 4418 1230 4553 4671 2219  641 1625  523 4298  703 1623 2171\n[11635] 1625  353 1875  930 1174  401 4264 1707 1174 4646 3483 4349 2126 4658\n[11649] 1461 4090 1947 2173  743  644 1443  625  863   42    3  477 3697 4135\n[11663] 1227  209 4250 4640 4601   66 3826  283 4425 2174  552 1853 1131 2253\n[11677] 1186  745 4087 4950  428 1850 1006 1685 3762  390 2175 1641 4129 2128\n[11691] 4426  329  781 1459 1612 3638   32 2239   85 1037  561 4158 4893 4368\n[11705]  991 4564 1723 4120  348 1110  431 4628  411 4464 2041  525 4475  705\n[11719]  753 1078 2043  505 1073  602 4431  117  385 1783   15 1705 1161 4577\n[11733] 5712  186 4171  615   83 4370 1164 3840 2177  348 2130 2247 4434 2079\n[11747] 1734   63  424 4491  349 1010 4687 4588 4280 3728 1618  377  257  883\n[11761] 1819 1902 1344  347 1493 3750 4669 1579 4404  337 1445 1175  935 4403\n[11775] 1231 4181 1813  750 4596 4572  473 4372 4381  337  119 2132   12 4429\n[11789] 1925 4357 1769 3318  963 2347  685 4571    8  717  759  720  393 3393\n[11803]  153 1522 4125  323 4309 2179 4447 1600 1702 4579  315 4326  141 1421\n[11817] 4105  537 2115 3823 3835 1039  745 3719 1624  763 1665 2223 4333 3267\n[11831] 4581   85 4172 4146 4525 3817 4352 2027 5164 3523  161 2377 1710 4576\n[11845]  133 3635   95 1942 1773 4215 1116 3427 1695 1200 2126 3820  917 2134\n[11859] 1053 1508  565 1635  847  157  985    4 1331 1619 3985 4415  630 4667\n[11873] 3453  341 1550 5486 1467 2181   91 3689 3387  161 3325 4622 4271  620\n[11887] 4661  407 4299 3355 3459 2231  952  703  872 4588 4702  675 3695 4027\n[11901] 1176 1078 1085   27 4178  773  656 1638 1771 4705 4411 4092  372 4997\n[11915] 1473  161  181 3805 1790 4485  413  464  509 3771  359  369 1499 2136\n[11929] 3452   31 2183   36  689 1905  733 4373 3375  329 2042 1259  531 4323\n[11943]  127  143  440 4410 4316  891  695  894  250   15 1585  503 4479 4323\n[11957] 1779 4202  345  509 1109 1134  185 1351 4480 1178  512 1185 4382  623\n[11971]  449  145  216 1637 1593  738  543   74  139  837 1999  547 4300 1111\n[11985] 2331  177 4413 4540  257  785  408 1307  391  989 1394    9  808 4255\n[11999] 1228 2138  575 2185  691  535 1047 1221 1016  373 4626  389 1611   35\n[12013] 4484 1053  217  594 3542  353 5054  926  812 2019 1269  119 1292 4277\n[12027] 4019 1703 4397 1860  272  593  173 5203    7 1643 3944  711  612 4674\n[12041]  527 2131 3730 4227  130 2159 2190 1139  891 5038  269 2019  645 3369\n[12055] 2391 2140 4649  954 5714  951 2187   87 1255  947 5683   21 3368 1465\n[12069] 4131 1613  981 4437 4517 4520  179 4569 1054 1729 4085   87 3525 2075\n[12083] 1165  155  359   83  171    6 1345 1854 2139 3424 1715 4127 1435 3274\n[12097] 4532 5693 1485 1416  791 2370 4333 3798 4204   91  381  633 4536 4091\n[12111] 3783 3314  645 1709 2189  695 4312 4033  801 1147 2142  402 3320 3822\n[12125] 4106 4412  890   21  415  754 1574 3439 4555 4133 4423 1762  354 4662\n[12139]  299 4309 1069 4224  647 4348 1225 4695  371  629 1071 1243 1178  165\n[12153] 4108 3395  115  399 4573 4543 2144 3744 2191  529 4507  771 4644 2363\n[12167] 4584 1020 4119  677  530 3373 3609 3833 1787 4449   97  383 4660 3819\n[12181] 4619  185   11  199   43 4088  701 4404 1066  104  515 2155 4162 4519\n[12195] 4322  706  608  128   22 1018   30  112 3899   29  727  739  721 1791\n[12209] 1117 1018 1564 1141  725 5716  380  707 1833  507  345  371  461  731\n[12223] 2114  301  125  303  135 4201 2161 4401 6055 3223 4650 4252 4911 4941\n[12237] 1837  963  145  709  541 1030 1895 3839 1919 1791 3856  575 3127 1507\n[12251]   79 4576  711 4599 4150  413  905 1627 4533 1002 4393  303  983 4334\n[12265] 4560 1433 2006  772  135 4471 4424 1602  470  102  926 4241  343 1701\n[12279]  117  251 2003 1415  305 4172  763 1815 2116 2163 1609 3839 1547 1162\n[12293] 2279 4534  203 4583  981  457 1865 1142  671 3483 3737  389  235  715\n[12307] 1506  298  799 1655  850  443  825  831 4246   11 1299 1724 1601   11\n[12321]  601 1305   33  807  341 1889 4099   59 1179 1481 3611  309  673 2119\n[12335] 1733   44 4233 2267 2047 2165 2118  311 1665 4392 3935  517 1558 4023\n[12349] 1539  397  655 1167 1172 4406 4693 1051 4490 1959  346  219 1429  675\n[12363] 4380 1109 3538 1271  914   17 4537 3521 1838 4051 4655 3317 4418  717\n[12377] 4691  487 1855  611 2395 3259  181  269  112  369 4529  301 3815  835\n[12391] 4250 4610 4220  313 1601 1117 4413 4548 1480 1626 4107 3422 1429 3405\n[12405]  553 4521 1357 1289 4558 4500 3353 4125 4913 1061  714 4478 1885 4364\n[12419]   41  430 1643   56 2120 2167  385 1747   51  181  485  544 4638    1\n[12433]   20   59  120  407 2379 1519  565 1153  634 1405 1103 4582 1004 3494\n[12447]  405 4711 3661  375  215    4   25  251  421 4636  361  647   41 4530\n[12461] 4112 2143  469 1597 3961 4156  319  600 4654 1964 3667 4187 1277 4445\n[12475] 2122  197 2169 4670 1847 5736  450 1529  529 1623  503 1025 3795 2319\n[12489] 1427 4663 1171  375   75  347 4471  731 4462   19 2343  179  641 4240\n[12503] 5026 5711   23   31 1573 4222 4589 4662  733  373  739 2124  655 1647\n[12517]  952  816 2171 1873 3792 1120 2044   24  542 5273 1031 1275 4485 2099\n[12531]  342 1143 4298 1495  315  695  703  327  673  523 1625 2219 1623  145\n[12545]  133 4553  353 1230 1174 4264  930 1875 4335 4646  401 1903 1174 4090\n[12559]  625 1707 3483    3 4349 2126 4658 2173 4431 4601  644 1443 1947  863\n[12573]  477 4087 4640 1227 3697  209 4425  583   66 3826  283 4404 1186 1131\n[12587] 1853  368 2253 1850 1502 1685 3762 2041  745 4426 1641 1006  390  781\n[12601] 2128 2175 2239  329 1459 3638 4641  348 1612  991 1483 4129 4564 1461\n[12615] 4120 1895 3263  431  411 4475 4542 4628 4893  743   85 2043  705 4368\n[12629]  750 4688  525 1078  117 1783 1705  688  615 4370  164 4577 1164 2079\n[12643] 2130  348 2177   63 2247   83 4491 4434  349   15 4171 1110 4687  267\n[12657] 3728 1010  935 4588  257 1819 1902 3750 2126 1161 4372  883  595 1579\n[12671] 1073  153  717 1175 4572 1445 5712 4172 1618  141 4669 3452 4181  471\n[12685] 4596 4571 3318 1925  505    8  119 4403 1344 1231 2132 2179 4381  473\n[12699]  685 1600 4429 1522 4326 4357 1769 2347  963  720  393 4634  323 4581\n[12713] 3393 4579 4309 1566 1813  745 3817   12  759  377 1029 4333  337 2115\n[12727] 4170 4105 3823 3719 4146 3267 1039 2223 1258 4525 1624   85 4352 2027\n[12741]  133 1942 4667 3635 1200 1710  161 3523 4215 1773 1695 5164  447 1116\n[12755]  703 1665 3427 4178 3820  917 3771 2134  620 1467    4  847 2181 3453\n[12769] 3985  161  157 1331 4415 1508  985 3325 3355  337 3459 3689  341  565\n[12783]   91 5486  161 1619 4205 4092 4271 4447 3387  872 2377 4622 4588 1771\n[12797] 1176  675 1078 4661 4702 4705  369 3805 2231 3695 1085  592   27 4540\n[12811]  773  139 1638 4027  372  891   95  123 4299  181 1473  372 1635  257\n[12825]   31 2183  413 4202  329 2136  250 1064 4323  509 1499  127   36  537\n[12839] 2042 1259 1905  440 4410 1284  143  689 4316  359 4373   15  446 1585\n[12853] 1999 4300  464 4479  503 1779 1351 4323 1185  512 4255 4382  837  449\n[12867] 1109  623  345   74  894  216  145 1403 1790 1100 1593  408 4413  547\n[12881] 1111 4480 4485 2331 1134  177 1394  785  535 1307 4397  391  691  989\n[12895] 2185  373  808 1228 1611    9 1047 2138  364 4484 1016 4626 1053  543\n[12909] 4019 3424 2019  477  594 1139 3542 1292 1269  119    7  926 4277 4520\n[12923]  612 1860  272 4674 1703  269 2131  593 3944 1165  527  353 1643  389\n[12937] 3730  627 2019  130 2190 4517 3369  645 5038  891 2159  951 4227 1613\n[12951] 2140  954   29 4997 5683 5714 2391 3368 4175 1465   87 2187 1255 4131\n[12965] 4543  695  179  947 1054  981 2075  711   21 4085   87  155 1729   83\n[12979] 3525  359 1485 1345 2370 2139    6 4649 4532 4127 1435 1854 3274 3798\n[12993]  791 1715 1416  633 1787  381 3899 4108 3314 5693 4569 1709  575 3783\n[13007]  645 2189 4309 2142 1574 4091 3320  695 4033  801   21 4333 1578 4204\n[13021] 1147  402  415 3822 4536 4423 4224 3439 1692 4555 4312 3373 1762 4662\n[13035]  354 1069 3609  226 4348  771  489 4106 1243  371 1178  629 4133  115\n[13049] 4645 3395  399 2191 1071 3744 2144 4573 3819 1020 2363  530 4119 4507\n[13063] 3833 4584 4695  754 4660 4404 4619 4088   11   43 1066 4449 4322 4519\n[13077]  185  677 2155 4162  608 1018  112  383   30   22  128  727  739 3840\n[13091] 4412 4411  715  717  721  753  763 1589 2083  424  719  399 4660 4536\n[13105] 1117  725 1141  371  303  345  507 4650  125 1833 2161 4911  380  707\n[13119]  135 1030 6055 2114 1837  709  145  731 3856 5716  575 1791 1895 4941\n[13133] 1125 4201 4252 1433 3839 4576  905  983 1002 4150 3127  413  541 4401\n[13147]  479   79  711 4599  301  102 4471  117 1627  963 1415 1251  251 3223\n[13161] 4533 2003  203  763  772  303 1815 1547 4534  671 2163 1692 1701  719\n[13175]  305  389 4424  399 3737 1609 3483  287 1865  715 1420 2116  235 2279\n[13189] 1605 4172  443  825  831 1724  799  850   11  135 1305 4583  807  981\n[13203] 1162   33  341  693   11  298 1889 1655 2083 1299 3611  721 1179   59\n[13217]  816 4023  309 2119  336 2165 1481 1601 1733  397 2267 2143 1539 3538\n[13231] 1271  346 4406 1959  219 1109  715 1051   44 1167 1838 4655 3317  914\n[13245]  655 2118 1558 4392 4051   17 4490  487 4610 3259  675 1855  181  112\n[13259] 4250 3935 4498  835  301  553 1172 4418  561 1480 4521 4548 1429 1607\n[13273] 1357 4558 3405 1626 4652 4107 1061  485 1885 2167 2395 4478 4913 4125\n[13287]  120   51 2120  714 4638   20  313   56 1429 4099  647  407 1117  717\n[13301] 3353  311  634  611 4691  369 1747 1103 4582 1589 1004  430   25 1207\n[13315] 1580 1643 3815 3661    4 2379 1657  238    1   41 3494  375 4112  251\n[13329] 1519 4364 4530 4693   41  544  361 4233 4636  319  469 1142 4654  565\n[13343]  717   59 2169 1964 4094  503 1597 4670  197  258 4537  196 2122 1529\n[13357] 3795  385 4185  215 5711 1427 4140 1903  731   75  680 2319  375  269\n[13371]  347 1026 1847   19 4711   23 4689  641 2343  179   31 4663 1277 1573\n[13385] 4589 4662  373  739 4240  642 1623 4471  600 3792 1275   24  542 1873\n[13399] 1031 5273  720 1647 4279 2044 4445 2099  721 1690 1525 4694  703  315\n[13413]  595  327 1143  695 1625  145  523 1623 2171 1289 1663 1875  401  930\n[13427] 4553 4485 3483  625 1108 1515 1443 1461 4090  863 3667  644  743    3\n[13441] 4264  477 4425 4646 1174 4087 1947 4349 3697 5736   66 2219 1707 4640\n[13455] 4671  209 1047  583  353 2173 4658 1227 1853 1131  575 3263 2041  283\n[13469]  673  133 4601  745  743  781 1612 1685 3762 5026  390 4404 1483 4893\n[13483] 1174 1006  991 2175 1459 2239 2128  471 4564 1641   85 3638 4120  329\n[13497] 1895 4129  505 1110 2043  705 3840  753 4475 4688  411 4426  348 4104\n[13511] 2253  117   83 4577  186  615 1078 1164 3826 1705  431 1567 2177  683\n[13525] 4368 1783 2247 1000 4434 2079   15 2130 4491 5712 1010   63 4370  523\n[13539] 1073  525 3728 4641 1819  883 1618 1161  257 5164 1344 2126 1250 1902\n[13553] 3750 4588 1445 4596 1175 1608 4669 4628  935 1107 4403  141 4172 4381\n[13567]  153 1579 1925 2179 1769 1850  473  119 4523 4572  720 4372 2347  337\n[13581] 1231 4579 1600 1698  685  997 4447 4171 1813  348 4687 2115 2223 2132\n[13595] 1695  315 3823  323 3267 1039  425   85 4146 1116 4571 4429 1665  745\n[13609]  377 3817 4581  133 2377 4181 4667 1624    8 1771  763 1635 2027  157\n[13623]  620 1773 1200 1942 1508 4333  454  161  627  917 1331  703 4634    4\n[13637]  985 4326 4215  963 3835   91   95 4525 4309 4415  537 1619 4661 2181\n[13651]   35 4170 1467  847  517   12 1132  161 2231  675 3820 1078 1695 2134\n[13665] 4540  656   17  773   27  551 3771 4622  139 1473 3985  372  464  341\n[13679]  706  181  257 4092  509   31  891 4323  357  127 5486   15 1710  575\n[13693]  413   36 4410  894 1085 1284 1499 2136 1259  329  565  509  345  372\n[13707] 1351 1790 4255  503  161  837  512 4299  143 1585 2183 1134 3805  623\n[13721] 1176 1593 4479  543   74 1905  359  369 1779  449  216 3719 1100 1394\n[13735]  177  250  689 4702 1307 1111 1185 1016  989 4997    9  535  785  391\n[13749] 1109  477 1047 2331 4484  594 1053  119 2019  353  808  440  711 4411\n[13763] 2185  373 1999  393  408 2138  272 1228  389 4357 3695    7 1637 3944\n[13777]  612  130  547 1643 1269 4202 4227 2131 2190 2019 2042 1165  645 2159\n[13791] 4316 5714   29 1611  951 1255 2391   87  947 4373  145 2187 1465 1292\n[13805]  179 1221   21   87 3730 1703 1491  155 1973 1729 4178  359  120 3427\n[13819]    6  593 2140 4271   83 2370 4300 1485  891 1435 4626 1345 4674 4520\n[13833]  791 3783  633 4649 1787  269 1613 2139 1139 1854 3355 4413 2075 1416\n[13847] 4085  645 4423 4569 2189 1147 5203 4309  415  801  402  981 1054 4517\n[13861] 1018 3375 4382 4532  405  926  691   21 2142 3393 4333  354  771 4323\n[13875] 4662 1069 1715  677 1071 1225  299 1243  115  629  890  371 3899 3822\n[13889]  754 3459  527 4584 1020  695 2363 4131 3368 2191 3744 3369 3542 4175\n[13903] 4204 4106 4108 1709 4449  910 4412 4397 4619 3274 3373  695   43 3395\n[13917] 4645  185 3819   11  381 2144 4091 4519 4133 4555 5693 1178 2155 4507\n[13931] 3798  399 4695 4348 1762 3320 4088 4224  530 3609 4033 5683 4404  608\n[13945] 4119 3525 3833 4573  112  128 4162   22   30 4322  383  739  727 3839\n[13959] 4241 4246 4334 4352 4312 4393 4588 4543 4480 4485 4705 5038 1919 2006\n[13973] 2047 4560  349 3325 3521 3523 3387 3422 3424 3439 3452 3453 3689 3635\n[13987] 3961 4019 4027 4105 4127 4277 4220  759 3314 3318  181  461 2124 2126\n[14001]  926 4431  708 1117 1018  479  725 1141 4708  380 2161  345  135  371\n[14015] 2114  731 5716  461 4650 4401  507  301 3223  303 1833 1030 1837  733\n[14029]  963  709 1919 3839 4559  125  575 4518  145 3856 1791 4201 4533 3127\n[14043] 2006  905 4576 4599 4419 1002   79 1433  303   71 1497  849  413 3839\n[14057]  421 1627  711  983  135  772  910 1701 4560 4334  102 4122 1415 2003\n[14071]  117  305  763  429 2116  399  203 2163  550 1547 1815 1865  926 2279\n[14085]  671 2285 1142 1162 1879 1125 3483  298 1485 4583 3737 1655  389 4534\n[14099] 4471 1472  715  235  850  825  981 1299  831   11  799 1724 4941 1305\n[14113] 2083   11  807   33 1601  341  715  309 1179 4099  560 1481 1410 4023\n[14127]   59  643 2119 4393 4246   44 1539 2165  397 4392 2118 3935 1271 2047\n[14141] 4424 1558 4537 4911 2267 3611  517 3538  219   10  328 4241  655 1733\n[14155] 1959 4214 4406 2143  346 4490  269 1167 4233  675 1889 3521 1051  717\n[14169] 4655   17  914 3317 4691 4051  487 3259 4418 4652  707 4457  611  181\n[14183]  313 1855 1429 4230  835 4220  301 1601 2395 1109  369 4610 3815 1117\n[14197] 3422 1626  112 1357 4521 1429 4913  553 4558 4376 4364 1061 4548 1747\n[14211] 2120 1172 2167 1405    1 1838 4638  485 4478  714  225  544 1480   59\n[14225] 1289 1885   51  407  430  565 3353  120  634 1602   20 2379 1643 3405\n[14239]  181 1519 1194   25 1103  647 1589 4234 4582  721 1275 4636 1004    4\n[14253] 3661  215   56 3494 4140  361 4388  375  251 1871  319   41  469 3667\n[14267] 3961  600 4383  503 1964  258 1597 4187 2122 2169 4409  197 4654 1765\n[14281] 4670 1847 1529 5736 1277  450  454 1623 1495 5711  499 2319  717 1895\n[14295] 1103   75 1903 4663 6055  347 4471  641 2343   19   23 4269  179 3795\n[14309]   31 1427 1573 4662  373 4694  471  739  570 2124 2044 2171   41  406\n[14323] 1275 1647 1873  642 3792  542 1120 4589   24 5273 2099 4250 1031 4485\n[14337] 1143  523  673 4298  327  731  133 1623 1736  145  695 1403  443 1625\n[14351] 4553  703 2219  315  353  930 1174 1625 1875 4349  401 4646 3483 1707\n[14365] 1174 4264  625 4240 4601  743 2173 4431 2126 1443  644 1461 1947 4425\n[14379] 4658  863   42 4090    3  477   66 4641  345 3697  209 4087  283 1227\n[14393] 1000 2174 1853 1131  428 4404 1685  745 2128 4893 1850 2175 4129 4426\n[14407]  595 1249 3762 2253  781 1459 4158  991 1612 3638   85  329  390 2239\n[14421]  348 4564 1641 1643 4628   32  705  431  505 1110  525 4475  424 2043\n[14435]  753 4280 4120  411 2041 1078 3840 4950 1164 4640 1006  117  602 1705\n[14449] 4671 1073   83 4171  615 1161 1783 3826 2130 2177 2079 5712   15  348\n[14463]   63 2247 4687  935  186 4491 1734 3728  377 4370  349 4588 1010 5164\n[14477] 4577 1618 4231 1819  347  257 1344 1902 2126  883 4113 4368  385 4372\n[14491]  141 4596 1445 4172  750 1579 3452  407  153 4403  717 1231  337  393\n[14505] 4181 4381 3318 4357  119    8   12  473 1813 2132 2179 1925 2347  720\n[14519] 4669 1698  337 4429  685 1175 4434 4125 1493  745  323 4572 4326 1702\n[14533] 4309 4333  537  963 2115 4447 4105  759 3817 4146 1502 3719 3835 2223\n[14547] 1665 4525 1039   85 1769 4178  763 4579 1710 3823 2027 2377 4667  133\n[14561] 1200 3820 4215  917 1116 1550 1624 1771 1695  565  985    4  157  703\n[14575]  847 2181   95 2134  161 3985 3453 3771 4415 4352  161 4576 1331  620\n[14589] 3427 1600   91 1635 3325  627 3267  341 1619 3387 5486 1467 1773   35\n[14603]  675  872  315 4661  139 1078 2231  369 4540 3805 4571 3459   27  656\n[14617] 1638  372 3689 1053  477 1473  161 3695  181 1790  372  464  413  891\n[14631]  185 4323  706 1085 4705  359 2183 4702  329 1176  509 2136 1499  143\n[14645]   31  127  689  773  257 4485 1259 3635 1905  531 4410 4588  695   36\n[14659]  250 1585  503 4479 4997 1351 3375 1779  512  509  345 4255 4271  575\n[14673] 1185  449 1109  623 1178  837  543  440 1134 1637   74   15  408  738\n[14687] 3523  177  391 4413 2331  216 1394 1999 4299  785 1307  894  535 1228\n[14701] 4316 3355 4622  145 4581    9 1111 4202 1016  989 1047 1593 2138 4626\n[14715]  691 4484  217 2185 1611 1508  594 4277 1292 1703 2019 1269 3424  389\n[14729]  812 1139  119  173  711  353 4092 4373 3542  547 1973 4674 4323 1053\n[14743]  612  272    7 3944  926 5203 1643 1165  808  593 4480 5054 3750  527\n[14757] 2131  373  130 4517 1221 2190 3369 2019 3730  269 2391  891  645 3368\n[14771] 2140 1255  171 5038 5714 2187 1465   21  947   87 2159 1491  981 1054\n[14785] 1613  951   29 4382  179   87 1729 4397 4569  155 1345 3525   83 4027\n[14799] 3373 1485 2139 1435 1715 1854 2075 2370    6 3274 3899 4649  359 5693\n[14813] 1416   91 3783  954 4091  381 4085 1787  645 1709 2142   21 3822 3314\n[14827]  890  695 3439 3320  415 4536  801  402 4033 1147 1094 4410  647  754\n[14841] 4423 4555  633 4670 4520 4204 4333  354  299 1225 1069 1071 4127 4543\n[14855] 1762 3833 4348 4131 3395  677  791 2189 4312  371 4437  115 1243 4108\n[14869] 4573 4584 3609 1020  399 2191  530 4507 2363 3744 4119 4224 4532 4662\n[14883] 4309  165 2144  529 4227 4449 1066 1178 4660  383   11 4106 4645   97\n[14897] 4133  185  104   43 4404 3819  629 4088 4322 2155  771 4695  515 4412\n[14911] 4162 4519  128  112   30 1018   22  608 3271  727  739 1942 2042 4300\n[14925] 4411 5026 3393 3798 4019  719 1117 1018  479  725 1141  380  345  125\n[14939]  461 2161 4201  301 2114 4911  507 1833 4401 4708 5716  303  731 3223\n[14953] 4941 1030  963 3839 6055 1837 4559 1895  709  575 1919 4518 4533  707\n[14967]  145  371   79  135 3127 4560 1497 1507 4419 4599  983 4576 4650 2006\n[14981] 1002  905  303  135 1627  849 4471  413 1433 4424  711  421  772 1701\n[14995] 4122   71 1791  102  719  926  311  733  910  117  305 2116 2285 3856\n[15009] 1415  671 1547 1879 1815  399 1865 3839 2279 2163  550  763 2003 4583\n[15023] 4534 1142 1162 3483 1655 1472  981 4334  203  389 3737  298  715  831\n[15037]  443  799  850  825   11 1724 4241 1299 1601 2083  807   11 4246   10\n[15051] 1305  235  715  341 1485   33  309  560 1179 3611 1889  643 2119 1481\n[15065]   59 3935 1539 4099 2118 2165  397  451 2047  328 4214   44 2267 1271\n[15079] 1733 2143  517 1558 3538   17 4233 1051 1959  346  219  675 4392 1172\n[15093]  914 1167 4490 4537 3317 1838 1109  717 1429  269 3521 4406 4691 4051\n[15107] 4393 1855 2395 3259  369 1601 4220 4652  835  313  717 4655  112  301\n[15121] 1480 4230 4023 4418  611 1117 4521  553 4610 1626 3405 3422 1289 1357\n[15135] 4409 4548 4383  544 1061  430  647  485 2120 2167 4457 4913  181   59\n[15149] 1430 1747    1 1643 3353  565 1405   56  120  407 4364  634 1602 4376\n[15163] 1519 2379   25 4558  225 1103 4582  721 1589 1275 1004  714 3494 1429\n[15177] 4636 4478  375  215    4 3661 4234 1871  251   41  181 4140  469 4388\n[15191]   20  600 1964  258 4654  503 1597  655 2169  319 2122 3667  197 4670\n[15205] 5736 1277  454 1623 1847 4187 1765 3795 5711  450 1885  499   75 2319\n[15219] 1515 1903 5026  347  731  361 4663 4471   19 2343   23 4689   31  179\n[15233]  641 1427  406 4694 4589 1573  373  471 1103 2124 2044 2171  739  570\n[15247] 1647 4250 1873 1275 1120   24   51  542 4240 4485 1031 1525 2099 1143\n[15261]  523 4671  327 1625  703 1736  133  145 4553  695  673  315 1403 2219\n[15275] 1623  930 4298 5273  353 1625 1707 1174 3792  401 1875 4646 3483  625\n[15289]    3 2126 2173 4349 4264 1947 4090 1174  863 1443 4662 4431 4658  644\n[15303] 4425 4601  743   42  477   66 1227 3697  209 1529 1461  283 4404  345\n[15317] 1853 1000 1131 4950 4087 1850 3961 2041 1685 1006  390  317 3826 1612\n[15331] 2253 2175  329 3762 3638 4158  781 1459 2128 4426 1641 4129 2239 1249\n[15345]   32 4564 4120   85  348 4368 4628 1110  431 4231  991 1895  505 3815\n[15359]  525  411  705 4475 2174  753 1161  745 1078  602  117 1073   15   83\n[15373] 4577 4171  186 2079 4370  615 1783 2130 2177  424  348 2247 5712 1164\n[15387] 1705  561 3694 1010 1618  935 4588 1734  349   63 4491  883 1819  257\n[15401] 3840 1344 3750 1493  347  377 4280 4669 1105 1902 5164  153  141  407\n[15415] 3452  595  337 4172 1579  437 2126 4429 1813 4357 1769  119  720 1231\n[15429] 4403 4381   12 2132 1175    8 2179 2347  685  393  745 1698  385  963\n[15443] 3393  323 4596 4579 1702  759  337 4309 1925  537 3817 4125   54 4181\n[15457]  473 2115 4641 1502 4105 4333 4525 3719 4146 4581 4352 1039 1624 4447\n[15471] 3523  763  161 2027 3318 2377 1665 3835 1942 1200 1710 1773 3635 3355\n[15485] 3427  133 4178  917 3823 1771 3820  703 2134 4572 4576 3985  161 1116\n[15499]  157 2181  620 3453 4215 4415  565   95 1635  530  985 1550 4687 3459\n[15513] 1508 2043 4434 3771 4571 3689 5486    4  315  847  341 1331 4622 1619\n[15527] 3387 3325 4092 4661  675 1078  369   35 2231 4588  139  773 1085  656\n[15541]  872  952 4027 1053  372   85  891  181  372  161 1790  359  706 4540\n[15555]  185 1176 1473 1638 2136 2183 2042  257 4705  464 1499 3805 4997 4702\n[15569]  127  329 3375 4323   15   91 4410  143   31  413  250 4485   36 1905\n[15583] 1695 3695  509  894  531   27  695 1178  503 1259 1779 4479  575 2223\n[15597] 4255  512  623 4411  145  216 1134  837  543 1593   74 1109 1585 1637\n[15611]  408 2331 4323  449 1111 4299 1351  440 1307  177  785  345 1185  989\n[15625]  738 1228    9 2138  391 2185 4382 4373 4626  535 1016  373 4484 1047\n[15639] 1053 1221 4202 3542 1394 4300  173  389 4019  691 4316  217  808 5054\n[15653] 2019 1611    7  547  119  711  926  593  269 4271 1973 3944 4277 4520\n[15667] 1467 1703  527 1172 4674 1643 4372 3730 4517  594 1999  130  272 3369\n[15681]  612 1139 1292 1269 2159 2190 2391 2131 2140  951  645 3716  353  947\n[15695] 1613  171 1465 2187 5714 1491  891   87   29  981 4649  179 2019 4569\n[15709] 3368 1729   21  155   87  954 3525   83  359    6 4085 4127  812 1485\n[15723] 1054 2370 2139 1435 1715 3274  791 3798 4227 4333 5693 1345  509 1255\n[15737] 4204 5683   91 4532 3373 3424 1787 4437 4543 1416 1854 3899 4091 4108\n[15751] 1574 1709  415  645 4423 3822  381 2142  633 3320 2189 3439 4033  890\n[15765] 4309  801   21  647  402  695 4555 4131 3783 4480  771  354 1069 1147\n[15779] 3609 1225  299 1071  165 1243 4106 3395  629 4133 1178  677  371  115\n[15793] 4695 4645 4412 4573 1762 3833  530 1020  399 2144 4536 3744 4584 2191\n[15807] 4662 4348 4507 2075 2363 3819  529 4404 4660 4224  383 4449   97  185\n[15821] 4162   43  104 4119  754 1066 4322 3314 4088 4519  515 2155 4619   11\n[15835]   30  128 1018   22  608  112 4397 5038  739  727 3267 4326 4312 4667\n[15849] 4638 4640  487 3728  642  689 1117  219  725 1141  461  345  707  731\n[15863] 4911  371 1833  135 1627  301  125  303 6012  855 1671 1030 1681 4201\n[15877]  380 1919 1837  541 1895  145  709  947  575 3856 1057  507 1774  785\n[15891]   79 1433 1507  905  413  403  303   71 1002  241  470  711  983  926\n[15905]  102  741 1299 4248 4122 2285 1083 1865 2279 1415  117 1815  305 2003\n[15919] 4583  550  397  389  399 3658 3737  715  981 1665  825  481 1255  339\n[15933]  443 1879 4707  850 1479  799  807  715 1641   11  341  754 1889   59\n[15947] 3611 1274   44 4459 2267  643 1162  517 4696   11 1733 2143  851 4392\n[15961] 3538 1172 2047  219  369  269   17 1959 1838 2119 4406  655 4490 1429\n[15975] 1109 4604 3521 1167  914 3317  717  675 4233 4425 2395 4548  346 4220\n[15989]  336  671  313 1601  301  835  852  112  894 3422 4610  717 1051 4521\n[16003]  611 1296 4418  553 3405  487 4051 1429 1645 1357  441 1506 4558  761\n[16017] 4913 1061  714 3353 4388   51   59  181  485 4364 1623  407  317 3261\n[16031] 2167  647   56  214  120    1 1305 1747 4478  486 1643   20 2379 1519\n[16045]  675   25 1103  721 1004 4582 1589 1146 3661    4  251 4498  215   41\n[16059]  515 1871  361  448 1594 1885 3667  319  600 4636 3812  503 4670 1177\n[16073] 1277  197 5698  375 1847 5711 2044  338  655 1705   75 3852 1257 1903\n[16087]  415  731 1026   19  179 1036 4090 4297   31 1875 4471  237   55  499\n[16101] 4456  373 1647 3792  642  279   24 1031 2099  327 1690  664 4131  362\n[16115] 1403 1141  695 2219 2171  673  523 1625  930 1707 2115 4264 1516 4594\n[16129] 1174 4147  133 4646  353 3483 1443 4679    3 4431  863 1174  310 1623\n[16143] 1599 4425 4658 4087 1045 3697  209  640 1575 1412 1120 3273 4950 1131\n[16157] 1227   66 1006 1685 2253 1850  921 1853  743  625 4247   72 4426 4139\n[16171] 2041 1185 1055 1011 4129  991  781 1461   32  315  628 2175 4564  348\n[16185] 4241 1199 1629 4475  411  431 2043 4119  705  843  525   85  753  505\n[16199]   15 1161 1232 4368 1783 1715 1073 4577 4601  615  186 1703  117  672\n[16213] 2247 4370   53   63 4434  349 1010 3728  394 1819  883 4588 2126 1285\n[16227]   83 1231  347 5712 3854 1250  377 4381 3452 4404 1587 4572 4669 4403\n[16241] 3318  141  153  668 4172 1813 4429 1579 1485 3983 4357  119 4092  275\n[16255] 1600  759    8  393 1925 2347 5469  720  577  963 1178   61 4447 2079\n[16269]  262 3393 1205 2223 4579   12 3823 4580 4502 3267 4522 4133 4178  537\n[16283] 4146 1039  687 4309  243 2027 4414 3523  600 4369  133 3427 3635 1522\n[16297]  620  791 1771 4667 1769  625 3985 4415 2139  985 1695  157  565 1902\n[16311]  325    4   95 1508 3459 1467 3689  341 1635   85 3325  703 3453 3355\n[16325] 4271 4183  917 1053 4616   35  161  501 4333 4622  675   91 3814 2231\n[16339] 4702  369  508  734  139 1692 1093 3805 4485 1443  181  773   27 4997\n[16353] 3640  250 1896 4105 1790  359  185  706 3375 1331   63 4246  575 4323\n[16367]  509  127 2499 1131  257 1176 1580  935 1905  894  695 1085  503 1713\n[16381]  329   15 4479 1585 1499 4410  143 1999  413  512 4255 1109  623 1111\n[16395] 1481 1773  920  997 1139 1100 4300 1529  145   74 1394 1748 2019  391\n[16409] 1228 4962 1616 4484    9  535 1611 1497  989 3542 1208  373 1730 4277\n[16423]  119    7 2155 4630 4397  711 4674 1643  681 1225  269  527  593   31\n[16437] 3730 3369 1351  130 2190 2159 1491 2391  951 1729 1465   87 4700 3368\n[16451]  179  492  433 3944  527 5693   87  155  547 1345   83 4703   21  645\n[16465] 3373 1613  543 4670 1787 3783  381 1709 4127 3314 4662 4125  645  825\n[16479]    6 3320  662 4309  801 4423 3439  386  600  402 1762 3525  354 3899\n[16493] 4091 4695 3609  677 1071 3798  629 3395  115 4573 4430  399  529 4449\n[16507] 4276 4404  383 4232  104 1066   11   43  185 4162  515 4693  128 3694\n[16521]  608   30  112   22 1018  727  739  123 1545 1141  507 4201  691  345\n[16535]  135  461  371 1837  125  709  145 1895 1737  725 3856  707  304 4292\n[16549]   79 1269 1485  772  470 1575 3271  983  413   71  711  905  421 1701\n[16563]  303  926  102  311  117 1506 1865 1415 2279  671 4304 1815  203 2285\n[16577] 1277  550 3737  981  389   11 1525  715  825  443 1627  746 1599  715\n[16591]   33 1601   11  341 1153 1305 1889  646  309  608 1481   59  468  643\n[16605] 2267   44  669 2119 4584  517  369 2047  692 1558  397 1271 1172 2143\n[16619] 4372  655  219  346 1959 4406  269 3538 1838 1051 4424 1429 3521  914\n[16633] 1167 3259  675 1733 3578  717  487   17 3815  181  611  313  835 4418\n[16647]  112 1477 4610  301  717 3422 4529 4625  553 4521 4364 1572  238 1492\n[16661] 1357  665 4479 4558 4383 1072 1061 4913 1626 3353 4478 1110  181    1\n[16675]  673  524  647 1747   59 2379 1643   51  407 4178   56 1202 1519 1103\n[16689] 4582 1529   25 1004  721 4636 1589 3494  215  565 3661    4  251  361\n[16703] 1871   41  375  319 1885  469  600 3667 1765  503 4187 5711 1445 1847\n[16717] 1277 4654 2044   20 4175  197  338  454 1529 5736 1177 4663  887  680\n[16731] 3795 1705 5026  499 4471 1903   19  731 4670  179 2343 4140 4240  641\n[16745]   23  927 1174 4090  575  448   31 3792  374  642  373 1669 1647 1233\n[16759] 1275 1873 1120   24 4700  952 1031 2099 4485  120 4279 4589  315  327\n[16773]  703 4319  673  145 4553  695  975 2219  523  980 1707 1000  133 1875\n[16787]  353 4264 1623  930 3483 4689  625  863 4679 2173 4601 1549 1947 2126\n[16801] 4425 4646 1443  743 1575 4087    3  644  477 4431 4658 1174   42 3697\n[16815] 4446  209   66 4640 4135 3826  782 1734 2041 1853 1227  745 1850 4404\n[16829] 1685 2253 4368 1612 4158  283  390 4893 1459 4426  329 2239  991 1185\n[16843] 4950   85 4129 1641 4306  348 1006 4148 4564 1895 4628   32  431 4231\n[16857]  411 4475 1054 3829  705 2043 1137  753  505  525 1078 1161  117 4577\n[16871]  602 1073 1715   83  615 2130 4370 4434 2079  348 2247 2177  186 1122\n[16885] 4171 1604 4687 5683 4491   63  935 3728 4588  349 5712 1819  560   15\n[16899]  402  883  377 2126 1010 1166 1297 5968 1753 4669  404  595  620 1687\n[16913] 1183 4357 1783  347 4172 1231 3452 3318 4403  153  337 1813 1107 4381\n[16927]    8  963 4181  393 3832  720 4429 2347 2377 1769 2179  759 1925  119\n[16941] 4212   12 1600 4579 1601  279 3393 4309  141 4333 4447  745 1205 4105\n[16955] 4349 1111 3823 1665 4572 1039  763 1197 2027 4581 2115  537  275 4178\n[16969] 4596 3523 4146 3601 4571 1942 4352 3635   95  750  627 1635 2134 1695\n[16983] 2223 1771  133 1710 1773 3355 1197 1624  847  985  917 2181 3820  161\n[16997]  703    4 1053 1467 2370  565 4415 1200 3835 4215 1331 1692 1508   91\n[17011] 4667  620  157 3771 3387 3689  161 3985  171 3453   35 4661  339 4271\n[17025]   27  675 2231 3459 3325 1078  369 4092 3695  656 1719  891 1262 4326\n[17039] 4411 5469  773 4540  181 1085  139  413 4323 1615 1176  706 1790  326\n[17053] 1854  127 4997 3375 1499   31  257  359 4410  509  185  329  695 1284\n[17067] 4299 3805  894  250  575   15 1905  143 1585  372  791  503  512 3817\n[17081] 1999 4255 1178  145  449  440 1351 1100 1109  623  345   74  216 2042\n[17095]   85  408 4705  341 1111 4485  177 1394  785  535 1307   36 4413  391\n[17109]  989 1228 1016 1047    9  373 3843 2185  531  173  389 4484 4202 3542\n[17123]  217  808 3424 4019  119 1053  509  709 4323 4300 2019 1703  711 2155\n[17137] 1973 4397 1611 4382 4674  594  272  269  342 1139 1643  353 3944 4479\n[17151]  837 2190 2131 3369  130 2159 4517   87   29 4649 5054 2019 1437  951\n[17165] 2391  645 1613  527  171 1465 4437 5714 1491  547  179 4520  981 1269\n[17179] 4569   21   87 1637  120 2139 3322 3368 3525 1729 2075    6 1345   83\n[17193] 3373  155 1462 3730 1435 4227  359 4127  593   91 4626 3798  891 1416\n[17207]  347 4702 4091 3899 1787 3783 2187 3314  645  381 5693  801 4423   21\n[17221]  415  890  402 4543 3439 1018 1482 3822  754 3272 4555 1709  492  299\n[17235] 4627  405 4412 4131 4662  771 4536 4085 4532 3609 1762 1069  354  629\n[17249] 4312  371  165  633 1071 3395  677  543 4695 1243 4133 4573 4106  530\n[17263] 4373 4584 4507 2363 1020  399 3744  115 4660 4449 4224 4404 1225  185\n[17277]   97  104 4204   43  602  963 4309 1178  383 4348 4108 4322 4191    7\n[17291]   11 3833 4619 4119  529  608  128  112   30 1018 3819 4519 4162 4698\n[17305]  727 4333  739   22  515 4645 4170 4316   75 4622 1117 1497  479 1141\n[17319] 4911  380  507  725  461  731  301 1030  707 1833 4650  371 2161 4201\n[17333]  345  303 5716 6055 4708 4401  963 1837  733 4559 1919 1895 4518 1791\n[17347] 3839  709 3856 3223  575 4533  135 2006 3127 4576 1507 1433 1410   79\n[17361]  983 4599  125 4560  303 4419 4424 1002  413   71  905  711  135 1627\n[17375]  145  772  849  910  102  926  421 1701 4122  311 4241  719 4471  117\n[17389] 1415 2279  203 1472 1865 1879  305 1815 2116 1547 2285  671 1142  389\n[17403]  763 3839  550 4534 1655 3483 3737  235  298 1485 1162 1299  715  825\n[17417]  399  799  981  443   11  850 1724  807 1305 2083   33   11 1601 4246\n[17431]   10  341 1889   59  309  715 1179 4583 1481 4023  643  560 3611 2047\n[17445] 2267  451 3935   44  397 1539  517 1733 2165 2143 1558 1271 2119  655\n[17459] 1172 4214   17 1959  219  675  269 4457 4406 1167 3538 1051 1429 4393\n[17473]  914  346 4490 3521 1838  717 3317 4537 4418 4230 1855  313  611  487\n[17487]  112 1601 2395 4220 3259 4392  835  369  301 4652 4610  717 1109 1117\n[17501]  181 4521  553 1626 3405 4548 3422 1429 1289 1480 4558 1357 4233  544\n[17515] 2120 1430 4364 4383   51 4334 4376 4478  714 1405 3353  485  225  181\n[17529] 1747  120 4388   20  430 1885 2379  647  407 1602 1643 1061   59  634\n[17543]    1   56 1519 4638 1103  721  565   25 1589 1275  215 1004 4655 3494\n[17557] 4691 4140 3661  375    4  251 4636   41 4582 1871  361  319  469 3961\n[17571] 1964 4234  258 1765 4409  503 1597 2122 4187 4654  450 1623  197 2169\n[17585] 1847 5711  454 1277 4670 1529 3795 4250 4663 1257   75 2319  731  499\n[17599] 1903 1103  347   19 4471 3667  179 5026  641   23 4689 2343 4694  406\n[17613] 1573  373   31  471 4662  600  739 2124 2171 1284  642 1275 1647 4099\n[17627] 2044 1873 3792 4589  542 3815   24 2099 1031 5273 1403 1143 1120 4485\n[17641] 1427  523  673  315 4553  703  695 1625 1736 2219  327 1625  133  930\n[17655] 4240 1623 1707 4264 1875  401  145 4646 3483 1174  625 1461 4601 4349\n[17669] 4425 1947 2173  863  743 1443    3 4671 4431 1227  644  209  353  345\n[17683] 3697   66   42  283 4404 2174 5736  328 4640 1186 1131 1853 1850 4893\n[17697]  745 2253 4135 1006 1685  390 4426 1612 4129 2041 2128 4158 3638  329\n[17711] 2175 1641  781  991 1459   32 1249 2239 1174 4658 4564 3826 4087  561\n[17725]  431 1723 4231  505  411 1110 4628   85  348 4475  753 1078 2043 4368\n[17739]  525 1783   15  117  615  186 3762 4577 1705 4950  348 2079  428 4298\n[17753] 1734 2247  424  705 2177 4090   63   83 1161 4434 1164  935 1073 4370\n[17767] 3728 1010 1618  349 5164 4280 3750 4491 5712  883 1902  257 4588  347\n[17781] 1175 1493  717 3452 4572 1445  595 1344 4403  153  407 4172 4120 3318\n[17795] 2132 2179  337  141 1231 1769 1925    8  119 4669 4171   12  393  473\n[17809] 1698 1819 4372  720 4429  745  685 1813 3393  759  963  602 4125 4181\n[17823] 4571 4326  323 4596  537 4581  385 1421 1600 2115 2347 3719 2223 3823\n[17837] 1624 3835 1665 4309  763 1710 1039 4146 2126 4333 2027  161 1942 2377\n[17851] 4579 3523 3427  315 1116 1635 1773 4667  985 3840 4105  703 1771 4357\n[17865] 3985 1695 4576 3771 1550    4 3459  161 1508 2181  157  627 3453 1467\n[17879]  620  565 1331  847 4687 4215   95  341   91 1619  161 4622 4092 4271\n[17893] 4415 1702   35 1200 1579 4299 3387 4661 2231 3817 4702 1053  477  656\n[17907]  952 1176   27 3695 4178 1638 3355  891 3267 1085  139  872  377  675\n[17921]  372   85 4027 4525 4540 1078 3805 4997 4411 4705 4447 1473  706  133\n[17935] 4485 1790  464  509  773  185 2136 2183 2042   31  329 4323  372  143\n[17949] 1499 3375  127  695 1905  917   36 4410  250  413 1585  440  337  531\n[17963] 4316   15  689 1178  359  503  345  257 1999 4479  509 1779  894 4588\n[17977] 3325 4255  951 1109  837  145 1351 1134  449  512 1185  738  623 1637\n[17991] 3689 4382 4373 4480  216 2331 3635   74  547 4413 4381 1394 1307  989\n[18005]  391  181  535 2138 2185 1016  373 1228    9  808 1221 1259  691 4323\n[18019]  389 1611 4484  217  812 1047  785  926 2019 3542 4019 1292  173 4277\n[18033]  353  711  119  593 1703 1139  269 5054  272 1053 3944  527  612    7\n[18047] 1643 2131 3730 1593  408 2190 1269 1860 2391  543 4626 4674 1165  891\n[18061] 5714  575 1613 2140 1255 4227 4649 3368 2187 5683  179 1111  954 2075\n[18075]   87 1465 2159 4397 4520 4202 4543  130  981 4517  594 1054  171   21\n[18089]  359  155  947 1729 3525   29 1485 2370   83 4131  645    6 1435 2139\n[18103] 1345 5693 4333 1715 3373   91 4300  791   87 1854 4437 3783 4412  633\n[18117] 1416 1787 4569 3369 4312 2142 4423  645 4106 3822 1574 4133 3424   21\n[18131] 1147 4204 4033 3320  890 4555 4224  754  771 3439 4532  299 1069  801\n[18145] 1762 1071 5203 1709  402  354  415 1243 2189 3274 3833  629 4645 4662\n[18159] 1225 5038  177  165 4085 4573 3744 4536  371  677 4108 2191 1020 2144\n[18173] 2363 3314 4507  530 4584  115 4348 4119 3395  529  369 4695  381 4449\n[18187] 4404 4619   11   97 2019   43 4660 2155 1066  515  104  647  695  185\n[18201] 1178  399 4519 3819 4162 3609 4309 4322  383 4088  112  128 1018   22\n[18215]   30  608  727  739 3820 4352 5486 3798 3899 4091 4127  570  739 1117\n[18229] 1018 1219 1141  725  380 2114  707  125 2161  303  731  301  135 4201\n[18243] 5716 1833 4252  461  345  507 4941 1030  371 4401  145  963 1919  541\n[18257]  709 1837 1791  575 3856 3839 3223 4650 6055 3127 2006 1507 1627 4576\n[18271] 4599 1895  983 1602  905  135  303  413  711 4393 4533 1433 4150 4424\n[18285] 4560 1002 4334 4471  470  421  772  102 1701  721 4241  926  719  117\n[18299]  305 1415  399 3839 1815 2116 1142 1547  251 2003 2163 4534  298  203\n[18313]  671 4583  763 1865 1655 1162 3483  389 1609  799 3737 2279  981 1485\n[18327]  715  825  443  831  457 1601  235 1724  715 2083 4172  850   33   11\n[18341]  212   11  807 1305 1299 1889 1179 4099  309  673   59 1481 2119 1665\n[18355] 2267 4023   44 2165  397 2143 1733 3935 2047 4392 3538 2118 1539 4233\n[18369] 3611 1558 1271  517 4406 4530  429 1959 1051  346 1167 4537  914 4490\n[18383] 4693  675 1109 4246  219 1429   17  717 4051 4418 4655 3317 1172  269\n[18397]  301 2395  611  487 1855 4250 4220  717 1601 1838  341  835 3521  313\n[18411] 1028  369 4521 4610 3422 1480 1580 4548  181 1626 3259 1357 1429  112\n[18425]  553 4380 1747 4558 1061 4913 4125  181 4364   51  647 2120 2167 4107\n[18439]  385  714   59 1405 1430  430 4478 4112  485 1885   56  120 1643 4638\n[18453] 2379  544    1   20  407 1519 3815  634 4500  721 4582 4691  405   25\n[18467] 1589 3353 4529 1004  655  565 1103 4636 3661    4  361 3405  251  215\n[18481]   41 3494  375  469  600 1597 3667 4654 1964 2169 2122  503 1277 4670\n[18495] 1623  529 1847  197  450 1529 5736 4187 4445 1427 4663  375 1171  731\n[18509] 1903 4471   23 2343   19  641   31 4240 4222  368  575 1573 1025 4662\n[18523]  347 4589  179 5026  471  655  739 1275 3792 1873 2124  373 1289 2099\n[18537]   24  542 1031  816 4711  319 4156 4462  315 1143   63  342 1625  673\n[18551]  695  133 1736 4553  327 4485  523 5273   75  703  930 4298 4335 1623\n[18565] 1707  401 1875 4646 3483  145  625 1461 4090  863  743 1443 4431 2126\n[18579] 4425 1947  353 2219    3 2171 1647 5711 4087  477  644 1227   66 4641\n[18593] 1174  583 4640 2173 2044  209  283 3697 4404 1853 1174 1186 1131 4893\n[18607]  745 3795 3826 2253  390 4658 1685 3263 1641 3638 2041 2128 2175 4601\n[18621] 1250 1612  991 4426  348 3762  781 4349 4129 2239 1249  329 1459   85\n[18635] 4564 1895 4120 4264 1850 4368  244  411 1110  753 2043 1078 4542 4688\n[18649] 4475  431  615  117 4171  525  688   83 1705  164 1783 1006 2130 1164\n[18663]  705 2177 4434 2247  424   63 4491 1073 4628 1161 4577 2079 3840 5712\n[18677]  267 4687 3728  349  257  505  883 5164 4372   15 1902  935 3750 1344\n[18691]  348 1819 1175 2126 4596 1445  337  141 1010  750 1579  717 3452  119\n[18705] 4403 4172 1231 4572 4357  337  473 1618  685 1029    8 2132  595 4581\n[18719] 1925 1600  963 4326 4370   12  720 4381  393 3393  759  153 4447 4309\n[18733]  745 1769 1566 3817 1813 4105 4333 1698  377 3318 4579 4525 4146 2347\n[18747] 3823 1039  763 2223 1624 4352  323  537 4634 4178 3267 2179  161 3523\n[18761]   85 3635  917 1200 1635 1942 3820   95 2027 3427 1116 1665 4588 1773\n[18775]  447 4205 4415    4 4181  565 2134 1508  161 3355  703  985 3325 3459\n[18789] 2377 1331 4667  341 4215 1467 1710 4170 3689 5486 3387  157  847 1619\n[18803] 1695  620   91 4661  872  675 1771  592 2181   27 1078 4429 3453 1638\n[18817] 3695 4540 1085  627  123 4092 4271  181  773  139 4622 2231 4997  464\n[18831]  372 1790  161  413 3985  329  257  575 4323   31  689 1176  509  359\n[18845]  127 1064  369 4410 1178   15 2136 1284 2042  446  503 1351   36  372\n[18859] 4588 4479 1499  145  894  695 1905 4255 4323  449 1109 4027  512 1403\n[18873] 1185 2115  250  891   74  440  837  133 4645  143 1259  543 4413  216\n[18887] 3771 1134 1585  785 1473 1779 1228 4202  177  535 1100 1394 2331 1307\n[18901]  391  989 1111  373 2185 4299    9 2183 4571 1016 1139 4705 2138  408\n[18915]  477 4373 4277 1292 1053    7  594  808 4019  119  711  345 4300  612\n[18929]  593 1593  272 1611 4669 1703 1047 1643  364 3944 3542  547 4382 4485\n[18943]  130 3719   29 3730 1165 2190  527 2019 4480 4411  691 2019 2391 5714\n[18957]  951 1613  926 2140  947 2159  353   87  389 1465 1269 4543 1860  155\n[18971]  954  623   87   83 3525 4484  269 1345  359 3373 4085 3805 2131    6\n[18985] 4127 3798 1416  179 1787 1729 1485 4674 3783 3314 4091 1054 1854 1435\n[18999] 2187 1255 4520 4517  645 2075 4423 3439 1147 2142 1741 1715  801   21\n[19013]  415 1574 4131 3368 3424  754 2370 4133 4555 1762 4649 4316 3822 4532\n[19027] 2139 4204 2189  402 4175   21 1709 3609 3899 1069  645  226 4695  629\n[19041] 1071 4412 1243  489 1692  695 3395 4569  791 5038  115 4397  371 3369\n[19055] 1020 4108  633 4702 3744 2363 1178  677  981 2144 4507 5693 4224 4106\n[19069] 1999 4449 4662 1066 4033   11 3833 4309 3274 4119  185 4404 4536 4348\n[19083] 2191 4312 3819 4565  354 3320 4619  530 4162 4573 4088 4227 4333  381\n[19097]  128  771  112   30   22 1018 4660 4519  608 4322  399  383 2155  727\n[19111] 4584 2319 3961 4626 1153  891 4519 1117  479 1251  725 1141  303  461\n[19125] 4650 2114  380  371 1833 3223 4201 5716  301  507 4401 1030  731 2161\n[19139] 1837 1919  145  541 4252  345 1895 3839  709 4150 3856  575 3127 2006\n[19153] 1791 4576  413 1125 4599 4533  711  983  303  125 1433  421  772  963\n[19167] 1420 1627 1701 4334  251  719 1002  926  721  102 1609 4471  305 1547\n[19181] 4534 2116 1162  763 2003 2279 6055 4560 1815  203  298  393 1865 1142\n[19195] 1415 4424  671 2163  235 4583 3483  981  135  389  399 3737 4393  707\n[19209]  825  799 1299 1655 1724  443  831  850 1601  693   11  807   33  715\n[19223] 2083 1305 1889  135  715   11 1179  816 3839 4099  309   59 4023  341\n[19237] 1602 4241 2267 3611 4911 1481   44 2118 2165 3935  336 1539 2047  517\n[19251]  429  397 1558 4498 1733 1172 4693 3538   17 1167 4537  346 4392 4406\n[19265]  655 1838 1051 1109 4655  675 4530  905 4418 3317  219 4691 4051 4652\n[19279] 4490  914 3259 3521  313 2395  112  611  369 1410 4250 1855  561 3815\n[19293]  835 1739 4610 4521 4548  117 1580  717 1626  269 3422 1357  717 4233\n[19307] 2143  238  553 1117 4913  487 1194  181 2167 1747 2120  714 1285  120\n[19321] 3353 4558  485 1120    1   56   20   59 1885 1207  407  544 4478 2379\n[19335] 4220 1643 4107 1519  721 1589 1061 1004 1103 4582 1594 4125   25 3494\n[19349] 4112 4172  375 1429  215 3661    4  251  361  647 1429  634 4638  565\n[19363] 1959  319 3961  469 4636   41  600 1964 4654  503 3667  258  197 1277\n[19377] 2122 2169 4670 1597 1847 4140 1623 5711 1529 3795  720  731 2319   75\n[19391]  375  680 1427 4094 1903 1026 4471 5026  347  179   23 4689   19  641\n[19405]  181 4246  301 1573 2343   51 4589  575   31 1271  373  739 1047  471\n[19419]  642 2124 2044 3792 1647 1873 2171 1275 4240 1525 4694   24 4485 3405\n[19433] 1143 1289 1031  315 4662  327 4279 5273 4185  523 2099  673  133 1663\n[19447] 1625 4553 4671 1625  145  703 2219 4364 1623 1875 4663  401 4711  391\n[19461] 1690  353 1174 4646 3483 1174 2173  930  542 2126  196    3 4425 4658\n[19475]  695  863 1947 1461 4431 1443 1227  477  625 4264 3697 4349 4640  583\n[19489] 4404 1853  283  644 1000 1131 1850 4641 2253   66 3826  745 1685 4893\n[19503]  209 1612 3638 4426  743 1515 1641 3762 2175 2128 1249  991 4090  781\n[19517] 1459  329  390  717  348 4120   85  431 1895 1110  743 4601  411 4231\n[19531] 4129 4475  525 2239  505 4564  705 1078 2043  753   15  117 1073 1250\n[19545]  615  186 2079   83 1705 4577 1783 1006 1161 4434 2247  683 1567 3840\n[19559] 4370   63 5712  935  349 4588 4491 1164  348 1010 1618 4445 1819 5164\n[19573] 1175 1344 4372 4181 1902 4596 2126 1608 3452 3750 1231 4368 4669 1445\n[19587] 4403  425 4381 4572 4357 2041 1925  153   12 4688 2347  337  473  119\n[19601] 2132  720    8 4429 1107 1579 1769 4172 3393  759 1813  708 1600 1698\n[19615] 4171  323 4687  685 4579 4571 4309 4333  315  745  963 4581 4634 4105\n[19629] 3817 2115  537 1695 4087  377 2223 4525 3823 3835 3719 1039  141 4170\n[19643] 1665 3267 4628  393 1624 1116 4667 3318 2027  523 4326 1710 2377   95\n[19657] 1942 1635  133 4215 3355 4447  917 1773 4146 4178  161 3263 1695 2119\n[19671] 3427   85  703 3820 1771  157    4  161 3453  627 3985  454  620  565\n[19685] 1467  847 3325 3523 3635  257 2134 4415 1331 2181 3387 3689  341   91\n[19699] 1619 4622 4092 1132   35 4661   27 2231  675 4702  369   17 3459 1085\n[19713]  139 4705  891  656 4540 4027 1473  997 1200 4485  372 4997  181  372\n[19727]  706  985   31 2042 3375 1790  359 4323  329 1499 2136  161  413  257\n[19741]  689 1176  509 2183 1259 5486 4410  127  883   15  763   36  695  250\n[19755] 4373  773  509 1585  575  464  357 4271  143  503 1284  345 1779 3805\n[19769]  440  837 4479 4255 1109  449 1134 4323  145  551 1351   74 1185  408\n[19783] 1593 1637  894 4588  216 1100  785 2331 1508 1394  547 1905 3695 1228\n[19797] 4202  512  391  177  535 2185 1047  989 2138 4397    9 4300 4411  808\n[19811] 2019  373  389 1053 4277 1221 4299 4019  594  623 3542 1611 4484  477\n[19825] 1139  593    7  926  119 1016 3424 4626 1292  269 1973  272 1307 4674\n[19839]  711 3944 2131 2019 4517 1643 3369 2190  353  130 2159 1999 1269 3368\n[19853] 4316 2140 2391 5714  951 1255  645 1613 4649 1165   87  947 1491 1465\n[19867]   29 3730  120  179   21 1111  981 4569  527 1054 2075  891  155 1729\n[19881] 4085   87 1703 4416 2139    6   83  359 1485 3525 4127 4333 4480 2370\n[19895] 4520  791  691 5693 4543 1435 1715 4131 4227 3373 4175 1787 4532  381\n[19909] 1416 3314 1345 1078 3783  645 4413 1709 2142  415  801 1018 1147 4033\n[19923] 4133   21  402  890 3320  405 1854  695 4555  754  612 5038 3822 4108\n[19937] 4423 4204  354  771 1762 4662 3798 4412 1069 3899  299 3609 4224 4312\n[19951] 1243 1071  543  629  677 3395 4695 1225  399  115 2144 4573 3744 1178\n[19965] 1020 4584  530 2363 2189 4507 4119 4309 4645 3819 3833 4091 5203 4348\n[19979] 4660 4088 4449  371  383 4619 3274   11  185 4106 2191 2155 3439  910\n[19993] 4162 4536   22  608   30  112  128  633  739 4404  727 4322 4352 4382\n[20007] 5736 2130 2177 2179 2187 3771 3728 3819 4322 1117 1018  479 1141  725\n[20021]  380  707  461  135 1833 1030 5716 2161  125  371  731  345 4401  303\n[20035]  507 3223 4650  733 6055 1895  145 1919 4201 4518  709 3839 3856 1837\n[20049]  963  575 1497 1791   79   71 2114 4576 1002  711  301 1125 1433 3127\n[20063] 4419 4559  905  135  421  413 4599 1627  849  983  772 4560 1701  303\n[20077]  719  102  338 1415  926  117 4334 1865 1547  305 2163 1472 2003  671\n[20091]  389 4534  550  763 2279  203 1142 1879 1815  981 3483 1655 3737 1162\n[20105] 1485 4471  235  715  399  298 4424   11  831  443  799 1299  850  825\n[20119]   10 1724 4708   11 2083  807 3839  715 1305 1601 4241  560 1889 4099\n[20133] 1179 1410  910 3611   59  643 2119   33 2267  309 4023 3935 2118  517\n[20147]  397 2143 1733 1271 4537  429 1539 3538 1558 4393 1172   17  346 1959\n[20161] 1167 1838 2116 2285  655 3521  269 1429 1109 2047  675   44 3317 4406\n[20175] 4214  717 2165  313 4490 4418 1855  181 3259 4610 1626  914  835 1601\n[20189]  301 4583 4220  369  112 4392  219 1480  611 3422 2395  341 1117  553\n[20203] 1429 4376 1289 3405  717 3815 4383 1357 4364 4913 1194 4233 4409 4246\n[20217] 1061 2120 4230 4388   51  565 1885  544 4478  120  485  407  430   59\n[20231]   20 1602 4558 1481 4652 4655  634 2167 2379 1519 4548 1643  721 1004\n[20245]  225 1103 4521 4051    1 1589 4582 4636 1275   56 3494 3661 1051  375\n[20259]  215  714    4 4691   25  251 1871   41 4638 3961  319  469  600 3667\n[20273] 1964 1405 1597  361  258 1765  503 4140  197 4654 1529  450  454 1847\n[20287]  499 4457 1623 3795 2319  181  731 4670 2169 1903 4250 1427 1103  347\n[20301] 5026 2343 4269 4122   63 4187 3353  647   23 4471  641  179   75 5736\n[20315]   31   19  406  739  471 2044  570 1573 1120 4694  642  373 1275 1873\n[20329] 5273 4485   24 1031 1647 2099 1284 1403  542 1277  523 1143 4663 4298\n[20343]  315  673  327  695  145 4553  703 2219 4234 2124  401 3792 1625 1736\n[20357] 1875 1174  353 4646 3483 1174    3  625 4658  863 1947 2126 1461 4431\n[20371]  930 1443  644 2171   42  477 2173 4240  209 3697  345 1623 4662  743\n[20385] 1625 1707 4264 4425 3826 4404 4601 1850  283 1000 1131 2041  428 1685\n[20399] 4349 2253 4426 4158 1612 5711 1853  390 3762 4589  781 4950 2128 1641\n[20413] 2175 4893  595 4641 1249 2239  329   32 1227 4129  348 1643   85 4368\n[20427] 1459  133 1110   66  411  431 4564 4475  991 2043 4090  753 1006 1078\n[20441]  505   15  117 4087  705 4231 1783 4120  424 2130 2177 1073  615 2079\n[20455] 4491  186  385 1164   63 3638  348 1010  349 3728 1734 2247 4588 4280\n[20469] 4171 4434 5164  883  257 5712  935 1161 1493  377 4687 1618 1175 1819\n[20483] 4403 4523 1445  717 1579 1231  141 4669 4572 1813   83 3318  602 3452\n[20497]  407 4357  119 2347 3840 4429 1698  963  720 4381  337 4172  685  473\n[20511] 4181  745 3393 4309 1600 4370  347 4326 1705 1769  323 4577 1502  759\n[20525]  750 3719 2179 4525 3835 2115   85 4105  537 2126 3267  763 1665 1624\n[20539] 4178  161 3523 1925 2377 4146 1942 1039  133 4596   95 1116 1710 3820\n[20553] 2132 3750 2174 3635 1200 2027  620 3427 3459 4215 1331 4372 3453 1344\n[20567]    4  153 3985 1771 3325    8 4352 4667 4640 4333 4415  525 4579  847\n[20581] 3689  565 1635  393 5486 3771 3823  157 1695 1467 4622 1619  985   91\n[20595]  703  341  675  872  337 4671  917   35 2134  656  477  891   27 2231\n[20609] 1078  773 1638  139 4299 1176  161 4540  369 1790 4447 3387  464 1550\n[20623]   31 1473  181  127 3375  413 3695  329  359 1499   36 4323  257 2136\n[20637] 4410 4581 1259  531 2183  627 3355  509  695  250 1053  185 1178  689\n[20651]  503  575  509 3817  143 1905  706 4255 1351   15  345 1779 4571 1134\n[20665]  161  372 1085 1109  512  145  837 1637  449 4027 1508   12  372   74\n[20679] 4479 1585 4271 1111 4997 4661 2331 1394  216 2042 4411 1999  177  535\n[20693] 1307  391  408 3805 4588  440  989 2138 4413  623  785  373 2185 4277\n[20707] 3542 1047  547  217  543 4019 4485 4702 4323    7 4125 1292  389 3424\n[20721]  691 1053  119    9 1269 1703  711 5054 1221  269  894 2019 1973  272\n[20735] 4300 1016 1593 3944 5203 4626  353 1165 4316 4517 2131 3730 4674 1228\n[20749] 2190  173 4382 1611  130  593 3369  594 2019 1139 4373 2391  808   29\n[20763]  315 5714 1613  951 3368 1465 4705   87   21 1054  947 4569 1491  926\n[20777] 2187 2075  645 3525 3373  954 1729  891  155   83 1773 2140 4127 5038\n[20791]  179 1643   87 1345 3798 4202 3899  527 5693 4397 2139 1787 1485 4092\n[20805] 1715 1435 3314 2159  359 4091  415 1255 1902 3439 2142 4106 2370 3320\n[20819] 1094  402 3274  791   91 4649 4227 4480  645 4555  381 1709  812 1147\n[20833]  738 4423 3609 4437    6  771 4410 4033 1416 1762 1069  801  981 3783\n[20847] 1225 1243 3395  165  171  754  371 4204 1071 3822 4536 2189 3744 4520\n[20861] 4576 4584 2363   21 1020  677  399 4532 2144 4412 4662  633  115 4348\n[20875] 4224 4543 4507 4131  890 4449  530 4085   97  629 1066   11  185 4312\n[20889]  383 2191 4573  354 1185 1178  104  612 4162  299 2155  647 4645 3833\n[20903] 4309  529 4108 4133 4088 4404 3271  128  608   30   22  112 4695  515\n[20917]  695 1018 1854 4119 4519  727  739 4333 1747 2006 4533 4670 4628 4911\n[20931]  745 2223  487 2122 2181 4660 4484 1702 4019   22 1491 4309 3609 1117\n[20945] 1018  479 1141  725 5716 6055  380  707  301 2114 4708  461  731  125\n[20959]  135 4911  345  371 4401 3223  303 4650 1833 2161  507 1837 3839 1919\n[20973] 1030  709  575 1552 4518 1497 4201 3127  145 4576 1895 1791   79 4599\n[20987]  303 1507 1433 2006  905 4533  413   71  421 1627  711  733 1701 4334\n[21001]  926  338  117  910 4122 2285 1547 2163 1865  763  671 2116 2003  305\n[21015] 2279 1142  719 1879  963 4241  203  298 1815  135  399  849 1655  981\n[21029] 3483 4534 1485  799  389 1002  443 1472  715  831  850  825 1162  550\n[21043]   11 1299   10 1724 2083  102   33 1305  341 3737 1601  235 4099   11\n[21057] 1889  807   59  309  643 1179 4023 1481  451 4471 2047 2119 4214 4392\n[21071]   44 2165 4457 1271 4559 1733 1558 1539 3935  517 2143 3611  429 4246\n[21085] 3538   17 4419 2267 1172  219 1959 1415  346 1167 4560  655 4406 4233\n[21099]  269 4490 1838  914 1109  675 4051 4655  717  560 4652 4418 2395  313\n[21113] 1855 4537 1429  611  369 1480  301 2118 4220  835  715 1601 4230 3317\n[21127]  553 1117  717 1626 4558 4521 4376 1289 4548  112 1429 1357 4409 3405\n[21141] 3259 3353 4610  714  181 2120 4913  430 4364 3422 1405  485 3521 1061\n[21155] 2167   20 1430  120  407  181   56   59 1747 2379 4393    1  397 1519\n[21169] 1602 1885 4478  634 4638  544 4691 1103  487  565 4582  647 1589   25\n[21183] 4234   51  721 1004 1275 3661  983    4 1051  215 4636  251 3494 1871\n[21197]  361 4140  469  600 4388 3667 2122 1597  503 1643 1765 1847  258  319\n[21211] 2169 4187 1964  499 1277 4654  454 1529 4250 5711 3815  450 1623 5736\n[21225]  197 4670 2319 4663 1515   41 1427  347  731 1103 5026  179 2343   23\n[21239] 4471 1903   19 4583   75  641  406 4694 4240   31 1525 1573  739 3795\n[21253]  570 4662 2124  471 2171 2044 1647 1120 3792 1275 1873  642   24 5273\n[21267] 4485  542 2099  375 1031 1403 4298 4689  523  673  315  695 4589 4553\n[21281]  703  145  133 1625 1736 1143  353 4264  327 1625  401 1174 1707 4646\n[21295] 1875 1623 2126 3483 4601 4383  930 4349 4658    3 1461 1947 1443  863\n[21309] 4425 1174 2173  743 2219  644 4431   42 4090 1227  209 4640  477  283\n[21323] 2174  373 4404 1850 1853 1131 1000  745 2253 1006  317 1612  390 3697\n[21337] 1685  781 2175 3826 3762 1249 4158 2128 2041  991 1641 4950 2239 4641\n[21351]   85  348 4564 4129 4087  411 4671 4426  345 2043 4475  705 1110 1895\n[21365]  505  431 4368  525  753 1459  602 4171  117   83 4280 1705  329 2079\n[21379] 1073 1783 2130 2177 1161 3840   63 2247 1078 4577  385 5712 4370  625\n[21393]  348  424 4588 3728  561 1734 1618 5164  883  347  257 4687   66 1164\n[21407] 1819  349  377 1902 4120  437 1493  935 3452 1175  595 1010 2126 4181\n[21421] 3318  141 4403 1769  153 2179 1579 1231 1344    8  119 4172 4429   12\n[21435] 2132 3393  337  473 2347 4434  759  963   54 4125  745  323 4669 4309\n[21449]  337 1925 4447  315  537 1502 4372 1698 4581 2115 2223  685 4576 4491\n[21463] 4105 1624 4525 1039 3523 3694 4333 4146 2027 4352  763   32   85 1710\n[21477] 2377 1942 3355  133 1773  720   95 3817 1105 1771 1813 4215 1200 2134\n[21491] 1695  565 3985  530 1116  161 1053  703 2181 3453    4 4231  847 1550\n[21505] 1508  620  985  917 3427 3771 1702  157 1467  341 4596 1331 1619 3820\n[21519] 1665 1635   35 4271 5486   91 4622 4661  675 4299 4092   27 1176  872\n[21533]  161  891 4667  139 1078 4705  773 4997 1473  372 2231 4027  706  464\n[21547]  952  372 4411 4178  413  689 4571  359 2136   31  575  509  185  257\n[21561] 1905  127 3375 4323 2042  329 1499  531   36  161  143 1638  181 1790\n[21575] 1259 2183  440  250 3267  503 1178  509  345  393  369 4540 1779 1999\n[21589]  615 4382 1185  512 1593 3325   74  216 4373 3719 1134  738 4300  837\n[21603]  145 4255 4326  543  547  623  177 1109 1394  407  785 3695 3823  373\n[21617]  989  808  535 3459   15 1047 1016 4626  217 1172  391    9  173  656\n[21631] 1053 1637  389 1228 3424    7 1221 4277   15  812 4520 1351 1292  926\n[21645] 3542  711  691 3716  119 1269 4381 4674 1703 3944  353 1643  408 3730\n[21659]  695  593  894 2019 2190 4316  272 1611 1085   29  951 3368  171 2187\n[21673] 1585 2140 4227 1111  981  179 4517 1729  155   87  891   87 4588  645\n[21687]  359  269  791 5714  947 2391 1255   91 4480 1465 1613  645    6 4569\n[21701]  633 4484 1416 4202  381 1973 2142  415  754  130 1345   21  695 1709\n[21715]  801 1054 4702 1574 4127 4555  954 1139 3635   21  890   83 4662 3835\n[21729] 4085 1485 1787 1307  299  771 2139 4416 3689 1243 3274  594 1762 1178\n[21743]  647 3744 1225 2075  629  165 2159  677 4323 4695 5038 1020 2131  354\n[21757]  530  399  402 4543  529 1071 3899 1069 3395 4437 3525 4584 1147 4449\n[21771]  612 4532 1715 2370 1066 3314 5693 4106  371  383 4119 4133  115 4660\n[21785] 4088  515 4645 3439 4519 4649 3805 4536 2019 4333   97 4423   11 3822\n[21799] 4131 4412 1435 4204  185  128 3819 4404 1018  112 3320 4162 4322 2363\n[21813] 2155 4619 1854  527  104 4573 4108  608 2191 4091   30  727  739 2331\n[21827] 3833 3839 4224 4348 4424 4312 4397 4485 4628 5054 4572 3369 3373 3387\n[21841] 3798 3638 3961 4033 4357  186  449 2138 2144 2185 2189 3750 4579 4479\n[21855] 4507 4410 4415 3783  225  772   30 1117  785  219  725  707  731  301\n[21869]  125 1030  461  507  371 6012  345  135 1919  855  709 1833  541 1671\n[21883] 4201  575  303  947 1627 1507 4707 1774   71  403 1433  241  983  741\n[21897] 1837 4248  303 1141  102  905 1002  339   79  305  711 1895  117 1415\n[21911] 4122 1865 2285  380 1815  550 1299  470 2003  926  389 1879 3737  399\n[21925]  981  715  397  825 2279 3658 4583  831  481   11  850 1479   11  807\n[21939] 1255  754  443 1305  341 1601 1057 1641 1665 2267  517 1162   44 1889\n[21953]  643 4392 2143  799 2047 2119   17  369 1083 4498 3812 3538 1838 1274\n[21967]  269 4233 1109 1959  346 3521  851 1167 1733 1172  219 1429 3611  145\n[21981]  675  914  715 4425  894 4220 3317  655  313  671 2395  611  487  112\n[21995]  301   59  835  441 4610  852 1645 4297  336 4459  717 4388 1051 4558\n[22009] 1296 3405  717 4548  413 1357  761 4490  214 3353  181 1747 4389 2120\n[22023] 1061 2167  120 2379  647  714 1623 4913   51 1506 3261  407 4364  553\n[22037]  486 3422 1519    1 1429 1103 1643 1589 4604  675 4418 4582  721  317\n[22051]   25 1146 1004 4478  375  515 1594  251  361 4696   56 1871    4   41\n[22065]  485 4636 1885  319  448 3667 4670  197 4090  503 1277 1847 2044 5698\n[22079]  655   20 5711   75 1705 1903 1257 1036  338 1026 3852   19  600 1875\n[22093]  237   55 1177   31   59 2171  179  279  642 1120 1647  499  215 1031\n[22107] 2099  415 1403   24  523 3661 4131  327 1625 1141  362 1690  695 2219\n[22121]  353 1623  930 1707 4594  673 1174 2115 4646 4264 4679 3483 1516 4147\n[22135] 4658 2126 4601    3 1174  863  310  625 1461 4431  743  373 1443 4087\n[22149] 1045 3697  209 1575  640 1412 3273 1131 4950 1850 1227 2253  921 2041\n[22163] 4425 1006 2175  781   72 4139 1185 4129   66 1055  628  348 1011 4564\n[22177]  315 4247 1629   85  431 3792  411 4426 4475 4368 2043  505  525  705\n[22191]  843 4119 1232  753  117  186   15  133   83 4577 1783 1703  672 1715\n[22205] 1161 1685 5469   53 2247 4513 2079 4370  615  349   32 4051  935 1010\n[22219] 3728 4241 5712 1073 4588 2126  883 1819  394  668 3854  347 1285 4434\n[22233]  377 4381 3983  153 4669 4414 4572 3452 1250 1813 1587  991  664 1231\n[22247] 3318  119 4172   12 2132 1579  393  275 1769 1485 2347  577 1178  963\n[22261] 4092  759  141  720 4429 1600 1925 4357 3393   61 4447    8   63 4309\n[22275] 4133 1199  537 4105 2223 4502 4579 4146 3267 4333 1522  243  501 1039\n[22289]   85  600  687 3635   95 2027 4580  791  262 1771  985 1695 4667 3355\n[22303] 3459 1635  917 1053 2139 3523  625    4 1902  325  620 4403 3985  157\n[22317]  161 1508  703 3453  341 1331 1467 3325 4415 3640  565 4183 4271   91\n[22331] 4178 1773   35   27 4616 2231 1176 5085 4622 3814 3805 1443  675 1093\n[22345] 4485 1692  369  181  508  250 1896  706  185  413   63 3375  773  257\n[22359] 4369  509  329   31 1580  143 1905  575 1499 4997 1790 2499 1713 1085\n[22373] 4323  734 1131 1585  133  894 4300 3823 4255  503 4702  359 1999  695\n[22387]  139  127 1779  145 1100 1529  623 3689   74 1481 4246  920 4410 1109\n[22401] 1351 1139 4479 1205  547 1394  543 1111  391 1748 1228  535   15 4962\n[22415]  989 1616 2019 4397  373    9 4484    7 3542 1208 2155  119 1611  512\n[22429] 4674 1497  711  681 4174 3427  593 1643  527  269 3579 4277  433  997\n[22443] 4630 3730 3944 3369 2190 1491  130 2159 3368 1730  179 1729 1613  947\n[22457]  951 2391 4700  645  492 1465   21   87 1225   87  527  155 1345   83\n[22471] 4127 3373 3525 3694 3798 3899    6 4670 4091 3783 3314 1709 4662 3320\n[22485]  662  645  801 4309 4125  402  386 1787  825 1762  381 3439 4695  354\n[22499] 3609 4423  629  677 1071  115 4573 3395 5693 4430 4703  529  399 4404\n[22513] 4449  185 4276  104 1066  383   11 4232 4162  515  608 4693 1018  112\n[22527]  128   22  600  739  727 3856  731 1853  123 1681 4471 4521 4404 4406\n[22541] 1545 1141  725  507  135  371  345  707  461  691 1919 1837  709 1269\n[22555] 1737  575  145 4292 3856  983 1485 1575  304  470  772 3271  303 1895\n[22569]   71  413  905  421  711 1701  926  102   79  117 1415 2285 1865 1815\n[22583]  203  671  550 1506 4304 2279  389 4201 3737 1525   11  443  825  746\n[22597] 2006 1627  731  715  981   33 1153  341   11 1599 1601  715  309  608\n[22611]   59  646  643 1481 1889  468 2119  125  669 2267  517   44 1733 2143\n[22625]  397  346  692 1558 1172 4479 3538   17 4424 3521  269  369 1167 1271\n[22639] 1838  675 4372 1429  655 1051 3317 2047 3259  181  487  313 4406 4220\n[22653]  611 1572  835 4610 1477 4418  914  301  311 1492  717 4529  717 4521\n[22667] 1072  112  238  665 3611 1626 3815 3422 3405 4558  553 4625 4913  565\n[22681] 1110 1061 2167 3353    1  120  181 1885  407 1202 2379   51  647 1529\n[22695] 4584   59 1519 4140 4478 1643   20   56 1357 4178 4582  524 4051 4636\n[22709] 1589 3494 4364 1305  215   25   41  251 1747 1871 1103 1004  375  361\n[22723] 1669  600  319  469 3667 4383 1277 4654 1765  499 4187  197 4670 1177\n[22737] 1847  503 5711 2044 5736  338    4 4175 4663 1529   75  680  887  454\n[22751] 1903  731 5026 4240 4471 1959  179 2343  927   23 1174 1573  641  575\n[22765] 4090  219   31  373 4589  448 2171 1275 1873  642  721 1647  374 3792\n[22779] 1120 1233   19 1031 4485 2099  315  145  703 5273   24 1000 4319  673\n[22793]  975  695  980 1707  930  523 4553 4264 1875 2219  353 4279 4601 4679\n[22807] 3483 2126 2173 4425 1623 1947    3  743 4658 1575 1174  863  625 1443\n[22821] 4431  644 4646  133 4087 1549 3697  477 1227  209 4446 3661  782 3826\n[22835] 4135 4640 4689   66 1734  283 1131  745 1850 4404 2253 1006   42 1685\n[22849] 1612  390 4950  991 3762 4306 1459 3638 4426 4148 2041 1853 2239 4564\n[22863] 1641 1895 1054 4129 4475  431  505   85 3829  753 1078  411 2043 4171\n[22877] 5683 1137   32  117  525 1073  620 4434  705 2175 4577 2079  615 2177\n[22891] 1783 2130 1161 2247 1122 4158 4491   63 4370  935  952 4893  349 1705\n[22905]  348 1166 1010 4588  602 5712 5164 3728  560 1604 1819 5968 1344 2126\n[22919] 3832  275 4231 4181  595 4669 1297   83 1753 4403 1183  377 1813  141\n[22933]  404 1107 1231 3318  153 4172 1769 4572 1687 1902    8 4429 4381 1925\n[22947] 1601 3817  963 3393  119  279 2179 1197  393 4309  759 4579 2347 4571\n[22961]  745  750 4326  186  720 1205 2115 4687   12 4333  537  347 3823 4170\n[22975]  348 2223   15 4349 4146   85 3719  763  161 1039 4352 2027 3835 1111\n[22989] 4178 1710  133 2377 3355 4215 1773   95 3427 3820 1665 1695 3985 1053\n[23003]  562 1508 1624    4 3453 2134 1197  565  985  847  161 2181 1600 1331\n[23017] 1771  157 1200 5486 3771 1635 4415  703 3325 3635  171 4581 3459 4702\n[23031] 4357   35 4661 4212  675  369 4092  883 2231 3805 1078 1085 4368   27\n[23045] 4411 4667  891 1262 1942 1619  656 1719 3387   91  620  341  372 4540\n[23059] 4596  773  339 1473 1790 4447 4271 1176 4105 4622  181  359 4997  706\n[23073] 1615  185  531  413 2042  329  250   31   36 4323 1499  127 4316 3452\n[23087] 1905 3375  575 4410  509 1467  139 4705  257  695  627  143 4479 4373\n[23101] 3689 4323 4255 4300 1999  509  512  602 2183 1100 1178 1185  837  894\n[23115]  440  543  449  216  145  503  623   74 4202 4413  177  785 1394 1284\n[23129]   15 3843 1307  547 1111  535 2138  391 2185 2331 1047  989 4626 4382\n[23143]  345  808  709 1779  217    7 4484 4019 4277  373 1637 1053  594 1611\n[23157] 2019  173 4485  926 3716  119 1351 1269 4674  593  272 3944 1462  269\n[23171] 1973  408 1228 1703 4437 5054  342 2131 4520 1139 4227 3369  130 4517\n[23185]  951  527 2019 2159  891 1613  947 1643 1491 1255 1465  645  171   29\n[23199] 2391 5038 3368 2187   87 5714 4191 4627  981    9 1016  179 1109   21\n[23213] 4569 2075   87  492  347 1729 1345   83 3373  917    6  389 2190 2370\n[23227] 1435 1485 4127   91 5693 1715 4333 1854  155 4299  353 3783 1416 4532\n[23241] 4091 2139 4204 4543 4108 4397 1787  381 4085  645 3439 1482 3822 1709\n[23255] 3320 2142  415 4106  801 1147  402  890 4033 3314  405 4536 2189   21\n[23269] 4309 1018  711 3798 4133 4131 3899 4662  771 4348 4423  354  359 4555\n[23283] 1437 3609 1069  120 1585 1178 4695 1071  165  371 3395 4645 1762 1243\n[23297]  115  399 4507  629 4573 3424 4584 2363  529 1020  530 4312 2191 4119\n[23311] 3272  677 1225 3542  383 2144  754 4660 4404 4449  963 3525 4412 4619\n[23325]   11  185  633   97  104 3833 4162 3819 4322  299 4519  515 2155 4224\n[23339]   30   22  128 1018  112 4698  608  739  727 2319 4628 3523  337  327\n[23353]  329  326 3695 3744 3795 3730 4649  402  673  791 1277  727 1117 1497\n[23367]  479  725 1141 4650  380  461  135  507  371 5716  345 1030 2161 4911\n[23381]  707 1833  731 4201 2114 3223  301 1919  709  145  963 1895 1791 3839\n[23395] 4518 1837 6055 3856  575 4708  733   79 4576  413 1433 2006 4471 4560\n[23409] 1002  983 1507 4599  303  711 1627  135 3127 2057  905 1701  421 4334\n[23423]  849  910 4122 1410  102  926  719  303 1415  117 2116 2285  763 2003\n[23437] 1879 1547 1142 2163 2279  203  671  389 4534 1865  305  981 1815  399\n[23451]  235 1162  772 1655  550  715 3483 4419  825 3737  443  799   11 1724\n[23465]  850 1299 1472 4583  298 1485 1601   10   33 3839  341  807   11 4559\n[23479] 2083  715 1889 1305 4246 4099   59 1481  309  643  831  338 2119 4023\n[23493] 1179 4401 2267   71   44 2118  517 1539 1558  397 2047 3538 1733 1271\n[23507] 2143 4233  219 4230  125 1959  655 1838  269 1109  675  560 4241 3521\n[23521] 1051 1429 4393 4537 1167  914  346  717 4418 4457 4655 4691  487  181\n[23535] 3611  611 4424 4652 3815 3935  835 4220 2395 1601  369 4490  429  313\n[23549] 1480 3422 4521 4533 1357 1117 3405   17 1289  301  485 4388 1429 4376\n[23563] 4913  717 3353   59 1405 1626 1430 2167    1 2120  120 1747 4383  714\n[23577]  225   51 4051  430  181 1643 1885   56  112 1061 4610  634 4214 1519\n[23591]  407 4478  647  565  544 1602 4548 4558  451 4582 1103 4364 4406  721\n[23605] 3494 1275 4636 3661 1589  215  375 4140  251   41   20  361 1004  503\n[23619] 1871 2122 4234 4409  319 1597 3961 2169 1765    4 1277 4638 5736  197\n[23633] 4654 1623 1172  450  454 1847 4670 1529 1964  499 1427 3795   75   25\n[23647]  469 3317  731  258  553 2343  347   23 5026   19 1103 4471 1903 3667\n[23661]  641 1257 2319   31 4694  406 4663 4589  471 5711  373 1284 2124  570\n[23675] 1647 1275 1120 2171  600  642   24  179 1873 2044 1143  315 1625  695\n[23689]  327  523 2099  133  703 1031 1736  739 1623 1403 1625 1174  673  542\n[23703] 4264  353  930 1707 4553 4298 4646 3483  863 1461 4090 2126  743 4425\n[23717] 4658  625 1947 2173    3  644 1855  477   42  345 3697 4431 4485 4601\n[23731]  209 1227 4250 1875 2174  283 1850 1131   66 1685 2253 1006 4087 1459\n[23745] 3762 2128  390 4135 2175  145  781  745 1186  329 1174   32 1641 1443\n[23759] 1249  428 4893  561 1612  348 1723 2041 4158 4120 4368  991   85 2043\n[23773]  705 2239 1110  411 4564 4950 4404 3638 3840  505  117  615 1705 4231\n[23787] 1164 1161  753 2079 1783 2130 1073 2247 3792   83 1734 1010  348  377\n[23801]  525 3728 4588 1618 4280  385 2177 1078 5164  349 2126  257 4171  186\n[23815] 1344 3750 1175 1579 1902  717 1493  337  883  431  141 1445 4669 1813\n[23829] 3452  153 4172  473 1231 1769 3318 1925 4403  337    8 2347 2132  759\n[23843] 4429  685   15 1702  745 4447 4596  323  347 4571   12 4309 1600  602\n[23857] 4687  119 1421 4105 4577 2115  720 4525  407 4125 1698   85 5712 4581\n[23871] 3719   63 1624  401 1039 1665  763 3835 3523  161 2027  393  133 2377\n[23885] 3427 1710   95 3355  963 1695 4381 1200 1331  935 1550 1116 2181 4415\n[23899]  627 1771  703 3985  595  565  315  161 3393    4  847  985 1773 3635\n[23913]  157 1467 4372  341 5486  872 4146 2223 4661 1078 2231  537 4092 4705\n[23927]   27 3805  952  620 1053 1638 4271  372 4540 2134 1635 1473 4702 3817\n[23941]  917  372  706 2136 1790 1499  509  413   31  127  329  257 4333 1259\n[23955]  675 2183  250 1178  689 1508  185 4202 1585 3387  181   36  531 4215\n[23969]  503  143  139  359 1779  656 1942 1619 1134  894 1351 1085 1905 1109\n[23983]  509 4382   74 3325 1593 1637  543  512 3459 4479   35  345 4255  440\n[23997] 1185 4413 4316   15  369  837 1394  391 4357  145 3375  177  535  408\n[24011]  785 1307  989 2138   91 1047  623 2331 2185    9  691 1016 1221 4485\n[24025]  547 4397 4626  217  173 1053  738  594  575 1228  389  891 2042 2019\n[24039] 4019 3823 1703 3695  695  711 3542 1292  269 3424  353 4411  612 3944\n[24053] 1139 4674  593 1643 1165  272 4484 1611 2131 3730 5203 4517  216 4410\n[24067] 2019   29 2190 5038    7   87  951  645 4277 1269 2140  424 1465  947\n[24081] 1613  171 1819 1255 2391 1999 2159   21  161 5714  527  179 4416 3373\n[24095] 3525  359  981 1715 1860   83  155 4323    6 1854 2139 3453 4569  119\n[24109] 1435 1729  449   91  891 1416 4333 3369 1054 4227 1345 5693 1787 1111\n[24123]  791  130   87 2370 4033  415 2189 1147  801  954 3899  402 4536 3822\n[24137] 4106 1709 3320 4555 3274 2075  645 1574 4423 4178 4662 4131 4520 1225\n[24151] 4091   21  754  299 3833 4127 1243 4649 1071  381  695 4108  371  808\n[24165] 4309  677 1762 3744 2142  165 2191 2363  354 3314 1020 4584 4119  115\n[24179] 3439  771 4507 1069 5054 2144 1178  530 4404   97  529  399 1066 4088\n[24193]  185 4660 4348   11  104 2155  629 3609  383 4322  515  890 4449 4619\n[24207] 4573 3783 3368 4162 1485  812  128 3819  112   22 3798 1018  647  608\n[24221]   30  739 2219 2379  926 1573 3820 3826 4085 3259 3267 4181 4204 4224\n[24235] 4240 4299 4300 4326 4349 4352 4412 4312 4323 4392 4370 4373 4187 4588\n[24249] 4434 4437 4519 4532 4543 4480 4689 4695 4645 4662 4667 4671 4628 4640\n[24263] 4997 4129 4133 4572 4576 5273 3395 3689 4027  773 1853 1176  373 2165\n[24277] 2179 2187  633 3771 4426 4579 4475 4622 4491  464 1117 1018 1219  725\n[24291] 1141  371 4650  125 6055  707  461 5716 2114 2161  731  345  301 4201\n[24305]  507  135 1833 4252 1030 4401 3223  303 1837 4941 1895  963  145  709\n[24319] 3839 1919  575  541 3856 1507 1002 3127 1627  905  983 1791 4576 1602\n[24333]  470  413 1433  135 2006  303 4599  772 4533  711  251 4334 4471 1701\n[24347]  421  926 4241  343  102  719 4424 1815  117  671 1415 1865 4534 1609\n[24361] 2003  380  763 1547 2279 2116 2163 1162  457 1142 4150 4560  399 3839\n[24375]  981  305  389  298 3483 4583  235  825 1655  443   11 1485 3737 1299\n[24389]  831 4246  850  715 1724   33 1601  212  715   11 2083  807  799 4099\n[24403]  341 1179  673  309   59 1305 1481 1889 2119 3611 4023   44 1733 2267\n[24417] 1665 2047 3815 2118 1271 2143 4392  517 2165 1539 4172 3538  346  397\n[24431] 1558 4406  655  311 1838  203 1959 4537 3935 1167 1429  675 4490 1109\n[24445] 1172  269 3521 4051 1051  717  914 4380 4655 4233   17 4393  611 4418\n[24459]  301  181 1601 1855  487 2395  717 4610  112  835  369 1480 1028 4548\n[24473] 4521  553 3422 1580 4691 1626 1429 1357 4693 4112 3405 4529 4107 4125\n[24487]  219 4500 4913 1061 2120 1430 3353    1 1405  565  714 3259 2167  181\n[24501] 1747  385   51 4478  544  485  430 2379   20  407 1643  634   56 1885\n[24515]  647 4558  120  313 4582 1519 3661 3494  405 1589 1004 4364 4711  215\n[24529]    4   25   59  251 1103  361 4638  375   41 1153  319  600  469 4220\n[24543] 4187 4654 4670 5736 1964 1597 2122 2169 1623 4156  503 1847  197 1277\n[24557]  450 1529 4445  529 3795 1025 2319 1171 4663  731   75  347 1903 1427\n[24571] 5026   19  375 4471  179   23 4462 2343 4222  575   31 1573  641 4240\n[24585] 4662  368 4589  471  655 2124 2171 1289 1647 1275 4530 1873  816  373\n[24599]  542 5711 4636   24 4485 1031 3667 2099  342 5273 2044  315 4298   63\n[24613]  673  695  327  523  703 4335 4553  133 1143 1736  930 1875 1174 1623\n[24627] 4264  353  401 1174 4646 1707 3792 3483 1625 2173  863    3 1461 4349\n[24641] 2126 4425 4658  743 2219 1947 1443 4431  477 4087 4641 1227  644  209\n[24655] 3697  283 4404 3826 1131 1853 1850  625 3263 4893  745 4090 1250  583\n[24669] 1685 2041 2128 1612 2253  390  781 1006 1641 3638 2175 4426 4129 3762\n[24683]  329 1459   85 4601 1186 2239   66 1895  348 4564  244 4542 1110 4628\n[24697]  431 4368  411  505  525  991 4120  753  705 2043 1078  164 3840  117\n[24711]   15 1705  615 1249 1073 1783 4577   83 4370  688 2079 1164 5712 2177\n[24725] 2130 2247  348  424 4434   63  349 1161 4171 4491 1010  935  267 4687\n[24739]  377  257 5164 1819  883 1344 2126 4588 1902 1618 4181  337  717 1445\n[24753] 1175  750 3452 1579 4381 1029 4669 4403 1231  153 2179 4357 1813 3728\n[24767] 4172  473  595  337   12  963 4581 3318 1925    8 3750 1600 4326 4429\n[24781] 2132 2347 1769 1698  720  119 4688 3393 4634  393 4579  323 4447 3817\n[24795]  141 1566  745 4309  537 1178  685 4571 3719 4105 2115 4372 4333 4205\n[24809] 2223 3267 4170 1039 4572 1665 4146 1624  763  161 4352 2027 4178 1942\n[24823] 3635 4667 3355 4215 3823  133 1200 1710 1116 3427 1773 1695 3985  161\n[24837]  985 2134 1331  620    4 4525  447  627 1467 3771 3820 3459  565 2181\n[24851] 2377 1508   95  847 3325  157 5486 3689  703   91 3387 4596  161 4271\n[24865] 1619 4092 4622 4415 1078 1771  369 4661  592 2231 1176 1638 4411 4299\n[24879]  675  891  872 4705 4485 4702 4540  139  372 3453 1473 4027  123  181\n[24893]  359  372 1635  509  127  575 2183  413  250  257   27 2136 2042 4323\n[24907] 1064 4373 1499   36 1259   31  329  143 1085  837   15 4410 1284 4316\n[24921]  695 3695  440  503   85  894 4202 1134  341  446 1999 4479  145  512\n[24935] 4382 1109 1185 1100 4255 1403 4480  449  216  623 1585  408 4588   74\n[24949] 1593 1111  543 2331 1779 1394 4323  177  547  391 4413  535 1307 1228\n[24963]    9 2138 1016 1047 2185  373 4626  808 1053 4484  477  594 3542  389\n[24977] 4277 2019 4019    7 1269  926 4300  119 4520  711 1351  612 1292 1611\n[24991]  269  272 1790  527 3424 1643 2131 3944  989 4517  364 3369  345 2019\n[25005]  130 2190 4674  593 2159 4649 1165 2391 1613   29  951 5714 4543 2140\n[25019] 1465  645 3368  891  947 4416 5038 1703 4175  981   21 4569  689 4085\n[25033]   87 1860 3730 1054  353  785  155 1905 1729 1255    6 1345 3805 2139\n[25047] 3373 1485 3274  691   87  179 3798 1715 1854 5693 4127 4397  917 1416\n[25061] 4091  633 1787 2370 3314 3783 4312 2075  381 1435  645   83 3899 3525\n[25075]  415 4423 1139 3439 3822  801 2142 2189  695 1147 4133   21 1692 3320\n[25089] 4555 4412  402 4106 4224 4532 4204 4227 4131 4033 4536 1574 1741 4662\n[25103] 3609  489  359  771 1069  354  791 1709 4108 4348 4333  677  115  226\n[25117] 3395 4997 4695 1762 1178  954 1243  399 4645 1071 2191  371 1020 4507\n[25131] 2363 4584 2144  530 4573 4309 4119 3819 3833 4660 4404  383 4449 4088\n[25145]   11 4619 1066  185 4162 4519 2155 4322  629 3744  754  128  608   22\n[25159]   30 1018  112  727  739 4250 4640 3523 3961  773  721  739  759 3317\n[25173] 2187  145 4475  464 4322 1117  479 1251 1141  725  507 6055  707  135\n[25187]  461  731  125  371 2161 4401 1030  301 3223 4911 5716 1833  380  303\n[25201] 4252 2114 4201  345 1837 4650  963 1919 1895  709 3839  145 1791 4150\n[25215]  575 3856 1410 2006  905 1125 3127 4576  711 1433 1627  135 4560  303\n[25229]  413 4599  772 1701 1002 1420 4424 1517  541 4334  251  926  721 1609\n[25243]  719 4241  102 1415 1865 1815 2163  763 1547 2003 2279  671 2116  235\n[25257] 4172 1162  399  693  981  389 4534 3483  393 1142  715 1655 3737  298\n[25271]  117 4583  825  799  203 4246  443   11  850   11 1724 2083 3839 1601\n[25285] 1602  715  807 1305  341 1299   33 1889 1179 4471   59 1481  336 2119\n[25299]  309   44  311 2047 2267 2118 2165  517 1733 3935 2143 1271 1539 1558\n[25313]   17  655 1172  219  346 1051  269 1959 1167 3538 3611 4490  675  914\n[25327] 1429 1838  397 1109 4051 4655  831 3317  717  816  487 2395 4537  112\n[25341] 3815 4220 1855 4099  611  301  835 3521  369  181 4610  561  553 4521\n[25355] 1117 1580 1626 1429 1357  313 1739 4693 1061 4913 2120  238 2167  181\n[25369] 1885 4250  120 1747 4533   51  385  485  714 2379 3353  407 1194  430\n[25383]   59 1207  544  565   20    1 4638 4652  634 1519 1643  717 1103   56\n[25397]  721   25 1589 1004  375 1594 3494  215   41    4  361  251 3661  319\n[25411]  600 4185 3422 4654 4393 1597 3961 4094 1515 1847 2122  503  197 1623\n[25425] 4107  720 1529 4548  375 1427  469  680 2319  196   75 4663 1903 3795\n[25439]  731 1026 5026   19  179  983 4689 2169 2343 1277   23 4636  641 4364\n[25453]  647   31 4233 3667 1573 4471 4670  575 1275 1525 1047 4240 1289 2044\n[25467] 4662  642 3792 4392   24 4589 5711 1873  739 1031  471 4498  673 3405\n[25481]  373 3259 1625  133  315  703 1143  145 1690  523 1623 5736  353  542\n[25495]  695 1625 4530 4553 2124 1707 2219    3  625  863 1647 1443 4425 1875\n[25509] 1461 1174 4112 4279  477 4090 1174 2171  327 1227 2099  209 5273 4023\n[25523]   66  583 4646 8500 4404 3826 2126  401  930 4671 4691 1850 1000 2173\n[25537] 1853 1006 1947 1612 2253 3762  745  991 1663 4694   85 3697 2041 1249\n[25551] 4658 4445 4120 4564 4087 1641 3263 4641  717 1895 4893 2128 1110 4711\n[25565]  525  743  411 4475  283  505 1685 1459  781 2175  117 1250 3638   83\n[25579]  615 1164   15  705 1567  523 3483   63 4426 2130 4129  683 1618 3728\n[25593] 1078 4577 1705 4588 2079  257 1344  186  329 1175 4231 5712 1010  153\n[25607] 4171 4523 1608 2126  425 4172 4628  390 4403 4357 1813  473  963 1925\n[25621]    8 1769 1600 5164  883 4429 1107 3393  685  745  759 2132 3817 4447\n[25635] 4688 4370 1698 1579 1161  720 4333  315 2223  348   12   85  753 1783\n[25649] 4525 1039 3823 4634 4352 4181 1445  141  997  161 4368  133 3427 4579\n[25663] 2347 1231  703 3750    4  565 1467  119 1819  454 1331 1200 3985 3267\n[25677] 4326 2134  627 1695 4572   91 4215 1773 1771  537 4415 2027 2115  393\n[25691] 1665 4271 4299 1132 2043  377 2231  656 1078   27 1902 3835 1085 4705\n[25705]   17  773 4540 4622 4581  348  847 4411 1635  161  181  891 3318  464\n[25719]  551  372  257  359   31  127   95  329 4661  341  372  143 1790 1284\n[25733]  157  503  894  413  509  509 4479 4323  763  575  620  512 1109 3719\n[25747] 1134 4300  345 2136 1585  543 2183 1593  177 4413 4373 1905  250 1228\n[25761]  145 1307 4397 1100 1710 1499 1394    9  535  917   15  989  139 1269\n[25775]  785 1695 1473 1139 4484 4178  695  440   36  477  593 1611  594 1942\n[25789] 2138  357 1259 2331  711  985 3805  269 2042 2185 4027 1165  706 1185\n[25803] 5486  272 1703 1643  623  373 3944 3369 1016 2131 4410  612  369 1176\n[25817] 2159 4316 2019 1047 1255 3355 1221  951   87  119 1465  891 2019  179\n[25831] 2187 1508  216 1779 4674   35  808 4569 1054  408  120  689 1116 1729\n[25845] 1345   21 1999 4626  353    6 4520 1624 1435 4649 4416 1613  161 1485\n[25859]   87 1351 1111 1416 3542  675 1053 2370  391  389 1709 3783 2139 2190\n[25873] 1787 3375  645 1292 1854  754 1715  801 4423 4204 4532 4543 2142 3730\n[25887] 4517 4109   83    7  405   74  359  890 4127 1762 4702 4131  771  645\n[25901]  791  415 1225   29 1243 4695 1071 4019  677 1637 4106  547  633  299\n[25915] 4348 1973 2144 2363   21  402 4227 1020 1491  695 4119 4662 3320  449\n[25929] 4584  399 4645  981 2191 3525  115  910 4175 4133 4507  371 4555 4108\n[25943] 3424  185  837 4573 2155 4519 4085 3744 3822  155  530 1069 3819  381\n[25957] 4333 4309 1147 3395 1018 4162 4619  128   11 4660 4404  354 3833  629\n[25971]  608   22 3373 3439   30  112  727  739  926  935  947 2391 1619 2247\n[25985] 2377 3820 3840 1131 4088 3274 4140 4092 4170 4202 4224 4349 4412 4312\n[25999] 4381 4382 4372 4264 4588 4434 4536 4480 4485 4687 4596 4667 4640 4997\n[26013] 5203 5038 5693 5714 4125 4571  347  349 3325 3368 3523 3387 3452 3453\n[26027] 3459 3609 3689 3798 3635 3899 4033 4091 4105 4277  337  305  743 1073\n[26041] 3314 2075 1178  527  130  383  431 2140 2177 2179 2181 2189  323 1964\n[26055] 2239  644 3771 3695 4146 4323 4418 4431 4558 4582 4601 4449 4478 4669\n[26069] 4485 4491 4406 4309 4255  691  708  258  530  739  727   30  515 4162\n[26083]   22  608 1117 1018  650  725 1141  380  345  707  301  731  461  125\n[26097]  371 4650 4708 1030 4201 2161  507 1833  303 1895 3223  135 4401 4559\n[26111] 1919  963 1837  709 4518  145 3839  733  575 3856 1125   79 3127 4576\n[26125]  303  905   71 2006 4424  711 4599  135 1002  983  413  910 4122  421\n[26139]  102 1701  926 4241 3839  719  849 1415  305  772  117  763 1865 2003\n[26153]  550 1472 1879  671 1547 2279  203  399 2285 1627 4533 1815  338  389\n[26167] 1655 3483  235  298 1485 3737 1142 4334  850  799  831  825   11 1724\n[26181]  715 2083  443 4534  807 1305 1299 1601   11 4419  715   10 1889  341\n[26195]   33 1179  309 1410   59 4099 1481 2119 2267   44  517  981 3935 2047\n[26209]  560 1733  397 2143 4393 4457 3538 1959 4214 4471  346  655 1838  429\n[26223] 1558 1429  269  675 3521 1051  914 1167 4490 4392 1791 4246 4583 3317\n[26237]   17 4560 4230 4652 4051 4655  112 1539 4233 1855  643  369  301  835\n[26251]  313  611 4220  717 1289 1601 3422  553 1117 1626 1429 1480  717 1357\n[26265] 4548 3405  219 1061 1747 4383 3353  647   59  714  225 1885    1  181\n[26279] 1226   77  181  485   51  407  544 1602  565 1643 4638 1194 4478  430\n[26293] 4558 4376 2395 3611  634 1103 1519 4388 1162 1589 2379  721 4234   56\n[26307]    4 3494 4691  375 4140 1004 4406  361  215  251 1871 4537 3661  319\n[26321] 4636  600 1275   41 1964 3961  503   25 4654 1847 5711  197  469 1765\n[26335]  258 1597 4364  499 1529  450 1623 4521  120 4250 1427   75  731   63\n[26349] 3815   19   23 2343 4269  179 4670  641  454 2169 1573 4589 4610  406\n[26363] 1103 3795   31  570 1284 2319  471 4187 1925 1647 1903  642 1275 2124\n[26377] 1120 3792  373 2171 4694   24 1277 1031 2099 4663  523  315  695  327\n[26391]  673  145 2219 4671  133  703 1623 4471 1625 1736  353 3667  930 1873\n[26405] 1707 1875  542 4485  625 1461 3483 1443 4425 1172  644   42 2173  477\n[26419] 1174 5273 4553 4601  209    3 2122 4431 1227  345 2044 4264 1131 2174\n[26433] 1850 4646 1000  863 1403 1685 1612  390 3638 2239 1641 1459 4893 3762\n[26447] 2041 4950 2175  283 4087 2120 4240   20 4368  348   85  411  539 3697\n[26461]  745 1006 1895 2043  431  705  991 4090  525 4280 4298  117   83 1249\n[26475] 4628   15  428 2079 4158  385 5712 1783 4577 1143 2247   63 1705 4662\n[26489] 4404 1715  349  935 1734  602 4588 3728 4120 1073   66  257 2177 2126\n[26503] 1618  883 1110 1344 1902 2130 1175 1567  717 1579  781  505  750  141\n[26517] 1753 4403 4172 1813 1010   32 3452 1164  753  337 1769  153 2347  473\n[26531] 4429 2179    8  685 1231 3393 4669  745  759 3840 4309  963 1078  315\n[26545]  348  595 1702  407 4105 1039 2223   85 1698   54 2115 4333  763 4178\n[26559] 4447 4326  347 3427   53 2377   12  133  119 1116 1635 3719 1665  161\n[26573] 1771 1161 3985 2181   95 4146  537  847 1550 3325 3523 1508 4352  703\n[26587] 1624    4 1437  186 1331  565 4415 1710 3689 1467  157 2027 1200 4525\n[26601]   91 1773  620 4687 3355  161  341 4125 2134 3823 4661 5164  872  675\n[26615] 4299   35 3635  627 3387 1085  477  139 1638 4705 4579 4027 3771 1619\n[26629] 1790  181 1473 1925  706 3318 2042  917  985 3375 4323  773  413  127\n[26643]  359  531   31  257  393 4410  185  372  689   36  329  143 3817  575\n[26657] 1178 1499 2183  250  509  695 1585 3267  503  345 1351  464  509 1695\n[26671] 4300 1053 1819  145 4255 1176 1109   74  738 3820 1637  512  543 1593\n[26685] 1779   27 2331 4540 1394  177 1134  535 1047    9 4215 2185  989  369\n[26699]  217  173  894 2138 1111 1053 1078 2019  785 4479 1259 2136 4520  594\n[26713] 1703 4202  656 1269  711  130 4277 1228  269  623  449 4626  612 4576\n[26727]  391 3944 4382 2131 2231 3805 1643 4019  615  891 4622 1139  373 4413\n[26741]  353  272 4517 2159 1255 1165  951 2140 1465 1185 1613 5038  947 3424\n[26755]   87   87   29 5203 4569  179 1611 2187 1729 1345 3368   83  593    6\n[26769] 3798  155  161 2370 1485 1491  372 1435   91   21 1016 1221 1054   15\n[26783] 2391 2019 1416 1787 4312 4316 1715  130 1854 4484  812 1292 4670 4323\n[26797] 1999 2189  954 4649  171  119  645 1905 1973 2190  890  547 2139  801\n[26811]  402   21 4091 3899  415 5054  381  754  645 4131  771  299 4397    7\n[26825]  216 1071 4588  408 4348 5714  359  647  165  691  797 4532  115 1169\n[26839] 1243 3542 3369 1069 3730 1307  389 4507  695 4085  440 4662 4127  399\n[26853] 1094 1225 2363 4271 3819 3783 4674 1020 3744 3320 5693  677 1147 1178\n[26867] 3314 1762 2075  891  791 4204 3525 1066 3271 3609 2142 4088  808 3395\n[26881] 3373  185  527  926 1709  629   97 4423 2191 4033 4437 4224  371 4449\n[26895] 4404  354  104 4660 4412 3274 4108 4555 4584 4333 3439  529 3833 2155\n[26909] 1018   11  112 3822  383  128 4119 4519  981 4322 4573  401 1109 1271\n[26923] 3826 3835 1942 1947 3259 4092 4106 4171 4181 4227 4231 4349 4309 4381\n[26937] 4409 4370 4372 4373 4581 4434 4536 4543 4410 4411 4480 4485 4695 4596\n[26951] 4645 4667 4640 4641 4911 4913 4997 5026 4702 5736 5716 4129 4133 5486\n[26965] 6055 4571 4572  347 3453 4023 4357  329  739  743 2253 1853 1174  377\n[26979]  487 1625  720 2114 2116 2118 2126 2128 2132 2144 2163 2165 2167  323\n[26993]  633 3750 3695 4418 4426 4564 4582 4475 4658 4491  337 1497 1877  252\n[27007] 2243 1714 1403  939 5716 1909 2167  279 1029 2180 1175  601  563 1014\n[27021]  371   27 4137 5068  303 3267 2134  345  731  698  301 5747 2609 1919\n[27035] 4533 1772 6177 1103  840 4471 3550 5503  464 4241  423 4150 3525 1454\n[27049] 1205  211 1686   16 4334 1099  421 4424 4393 2023  303  797  905  675\n[27063] 2085 4535 2802 1144 4422 4918 3496  525  621 4522   27 1149  511  318\n[27077]  537 3599  404   23  343 1439 3829 4122 1263 2136 3769 1547  482 1183\n[27091] 1107 1879  420  331  347  269 3845 4155 1415 2169  305  315 2285 1265\n[27105] 1345 2493  261 4166  399   15    3 1381  461  424  831  212  683 1289\n[27119] 2003 1548 3547  183  163 1808 3821 4111 3759 3351   11   59 1289 1273\n[27133] 3676 4246 1717  901  807 1216  307 3052  450  561 3370 3827 1733 1111\n[27147] 2047  245 2138 2171  183  909 3507  544 3353 3611   33 1511  885 4364\n[27161] 3538 5242 4866 2279 1109 2395 3363  346 1271 2457 3489 2702  454 3272\n[27175] 5463  857 1167 5231 1959  183 1429  677  281 1154  929  294  403 1357\n[27189]  409  397 1831 5195  219 2267   84 1157 2431  189 4537 3579 1843 3478\n[27203] 1044 3521 4419 2280 3355  447 3492 2119  443 1583 4249 3528 4252 2071\n[27217] 5475 1492 5813 1401 3841  434 1626 4711 2445 3419 4638 5288 3868 1643\n[27231]  795 5286   15 3407 2173 5220    5  235 1030   63 2140  997 1747  301\n[27245]  120  502  431 1581  181  207 3810 4388 1121    1  313  208  161 5109\n[27259] 1499 1711 5211 1885 4065 1634   73 4880 1223  271 3565 4087  746 4380\n[27273]  497  116  124  407  199  994  223 3814  317 4714 5222 3531  654  251\n[27287] 5736  256  673 2054 2175 2142  357 1030 1847  276 4255 3574  586 1735\n[27301] 4060 3644  411 2319 5208 2067  456 4187  515 5711  925 1131   53 3611\n[27315]  488  325  187 4412 1529 4495  518 1745 4297 3675  642  604 4632 1456\n[27329] 6181  625   19  179  483 2343   23  971  954 2602    1  914 3689 1275\n[27343] 2452 3281 1110 3828 4628 1647  798 2144 1341 2098 3230 2177  695 1875\n[27357]  453 3493 4679 1599 1307 1422 1479  703  327 1951 3302 2380 1211 4445\n[27371] 1139  127  401 1519 1174 2219 3807 1191 1947  667 4567 2179  533 1618\n[27385] 3330  264  323  423  222 3404 1256 1685 1978 2451 2146 5273  766  482\n[27399] 3461 1143 3670    3 3386 3616 1496   34 3361  551 4640  329 5675 2502\n[27413]  352 3848 3817 4335 1401 3466 3616 1318  137 1131 5797  178 1375 1444\n[27427]  553 5373 2148 2181 1697 3211  781  165 6054 3812 5378 5207 5569 2083\n[27441]  411 1145  432 1734 5299 1280 5395 3291 1651 2095  681  507 1641  431\n[27455]  436 1158  348 1639 3340 1122 3937  331 1054 4395 2043 5283 2402 1779\n[27469]  643 5309 3305   15 2449 3317  581 1073 3388 5181 2480 4100 3567  431\n[27483] 4091 2150 4687  118 3493 2183 1663  246 1373  456 4193  117 1151 2247\n[27497] 1783 1199  349 5712 1170  673 3669 1945 1232 4171  213    1  337  477\n[27511] 1493 4696 1296  286  527  460 5370 5713 1902  587  703 1231 6049 1819\n[27525]  301 3393 4949 4141 1171  841 3983  365 3070 1995 3359 3588 3231  370\n[27539]  395 1744  446  325 1935  685 2297 4978 2285 1734 2152 2185 3822 4662\n[27553] 3846  573  635  575 2347 3391 4596 2815  802 1107 4133  500 3318  161\n[27567] 2181 1155 5199 1164 4144   95 3326 3202 3663  745 4377 4572 1615 4181\n[27581]  145 3532  341  320 1554  404 1982  133 1638 4502 1942  292   85  424\n[27595] 4576 1600  322 3580   83  834 3825  799    4 3416 1246 1729 5293  843\n[27609] 3488 3199 4580 2280 1802  134   31 2154  256  415 2088 3075 1117 1593\n[27623] 2459  269 2187 3357  543  141  847 3748  343 1156 1105 2793 3824 4352\n[27637] 2302 1463 4326 1619 1151 1410 3357  485 3540   65  172 3327 1705 2443\n[27651]  283 3523 1373 2231 3459 3771 3622 1695 5601  423  181  581 2949 1801\n[27665] 4175   27 1161  415  884 1284 3216 2042 4294  423 1365 1394 3411 3813\n[27679] 4684 4201 2223  257 2189 2988 1585 4695   89  706 4705  578  708 3932\n[27693] 2156  199   45  413  211 1499   95  512 4113 1171 3365  246 1448  894\n[27707] 1119  408  226 1064  167 2067 4411 1682 2580 2488  918  345  291 2471\n[27721]  598 4195 1516  327 1109 3849   86  687 1078  193 5091  327 1185 2751\n[27735] 3310 4667 3556  209 5298 3448 3347  418 1635  626 2351   19   67 1185\n[27749]  691 3301 3843  299  511 1321 2158  263 1407   61  359 1629 2139 3713\n[27763] 2191  318 5387  926  353  535 1224 1139 3513   17  491 1022 5287 4245\n[27777] 2019   83 2331 4202  305 3486 3044 1053 1611 2002  711 1854  442 5268\n[27791]    5  389  153 3526 2391 1177 1113 5274 2202 1576 3542  177   87 2698\n[27805] 3320  669  119  360   29  359 1715 3591 1259  258 2160 3433 3134 5383\n[27819] 4191  645 3330  947 1528  169 3445  883  435 2454 4131   21  693 1193\n[27833] 1473 2159 5909 1729  490 4382 1102 2307 3555  245   71 3304 1435 1485\n[27847] 4361 2370 5769  235  363 1691 3349 3470 3331 3674 4370 3854  208 1429\n[27861] 3374 5306 5604  617 1271 3573 2193  225  795  201 2437 5038 3843 4127\n[27875] 2195 2131 1147  695 1451 2677 4204   65  652  415 5714 3325 4321 4543\n[27889] 3604 3885 1049 4333 2162 4106 3535  771  418  702 1526 4085 2065 1464\n[27903] 2314 4348  354 3662 5209  915  105  382 1039 4536 2520 3850 4033  306\n[27917]  375 3395 4312 2680  523  135  985 3384 4368 2164 1295 4885 5048 1205\n[27931] 2197 3317 4397 4672  427  475 1416 1066 1247 4224 3603 4682 3823  242\n[27945]   97 4509 4276 1371 4373 3621  185 1103 3660 3842 5904 3525  234 2002\n[27959] 1816  718  486  108 5311  745 3572 4691 5811 3475  300 1877  252 1403\n[27973] 1714 2243  939 4533 2180 1909 2134 5716   27 1029 2167  563  698  464\n[27987]  301  371 5068  345 4137 5747 5956 1175  731  303 1919  840 6177 1772\n[28001] 1103 2609 4471  279 5503 3351 4241 3525  423 4150   16 4393  797  211\n[28015]  675 1686 1454 1099 4424 2023 2085 4334  303 1668 2802 4918 1205  525\n[28029] 1144 4522  905   27 4166 3496 4422 4535 3550  343 4122 1149 3599 2136\n[28043]  318 3676  482  404  331 3769  683  315 3829 1879 3845    3  537 1263\n[28057] 1547  269  479  821 2169   23  420 1107 2285 4155 2493 1439  305 1415\n[28071] 1265  261 1345  621 3547  399  212  461 1381   15  831 2003 1548 1289\n[28085]  424 3821  163 3759 2279  183 1808 1273  307 4111 4246  807 1289 1216\n[28099]   11  901 1717  454   59 3363 3052 1733 2395 3370  909 3827 3528   33\n[28113] 1111  885  561  450 1511 2138 1959 1177  245  307 2047 4866 3611 4364\n[28127] 5242  346 2431 3353 3538 1271 2457 3272 2702 2171 1167 3489 1109 3507\n[28141]  327 3317 1429  857 5463  914  183  929 4691  281 1154 1357  397  403\n[28155]  677  478 4537 3868 2267  443 5195 3478 4388 3579 3521   84  219  189\n[28169]  447 3355 3492 2119 1843 4249 4711 1157 2280 1294 4252 4419 1831 4638\n[28183]  587 2071 3841 1401 3531 1626  401 3419 5813 3810 5288 2445 5286 1643\n[28197]   15 3407    5 2140  434  301  997 1747 2173  476 1030 1048  431  502\n[28211]  795 1581   63  120 1711  409  313  208 1121 5475    1 5220 1499 5109\n[28225]  161 1713 1634 4065 3565 1223  407 4380 4091  456 1112 4087  124  116\n[28239]  271  199 4880 1885  317 3814  223  746  181 5211  251  310 4714 4060\n[28253]  586 2175 1030 2054  544 2142  357   51 5736 3574  299 4255 1480  411\n[28267]  276 5711 2319 5208 3675 3644 2067 1745 4187  518 3611  925  488  642\n[28281] 4412 1131 1529  325   53 4297 4632  179  187 2343  483 1025   23  625\n[28295]  971 4495   19  954 1110 3689 6181 4628 1275 2144 2177 1341 3828 3281\n[28309] 1479    1 3475  695 1647 3230 2452 1599  453 3493 1875 2602 2098 3466\n[28323]  604 4679 1307  703 1139  127  798 1951  327 1211 2380 4445 5373 3302\n[28337] 2219 1847 5309 1165  401 1131 1519 1174 5273 1212 3807  264 1256 3404\n[28351]  766 2146 3572    3 1191  598  998  255 1947 2179 2451  323 3386  423\n[28365] 1978 3330 1685 4567  482 3616 5675 3361 3670 1163 1496   34 2502  329\n[28379] 1401  352 3461 4335 1143 1697  137 1651 3616 3848 5797  300 3291 1318\n[28393] 1131 1444  178  553 1572 3806 2148 1145  781 5207  681 1895 2181 5378\n[28407] 6054 3388  165 1158 4640 5569 1734 3937 1641  411 1280 3795 5283 3812\n[28421]  348 1639 3822 5395 2095 3211  507 3340 5299  331 1054 2043   15  436\n[28435] 4395 4687  643 1143 1779  432  431  581 3305 5181 1802 2449  117  431\n[28449] 1073 1373 1783 3493 1151 4091 2402 1663 4100  246 2183    1 2480 2247\n[28463] 3567 1199 2150  686  118 4193 1170  673 1232 5712  349 1945  337 3669\n[28477] 1493 4171  477 1296  213  578  365 5370  460 5713 3983  286 4949 1231\n[28491]  703 1819 3393 1902 6049  301  841 3318 4596 4141 3588  294  395 1171\n[28505] 4696  575 1995  652 2285 1744 3359 2185 2815 4978 1734 5199 3070 2347\n[28519]  500 3231 3391 2152 1155 2297  802 4377  258  446  573  325 1935 4144\n[28533] 3326  161 1164 4572   95  407 4133  145 3663 4326  320 2181 3532  685\n[28547] 4662 1107 1982 3202 1483  341  133 1729  242 4502 4576 4181  424 1942\n[28561]  257  322   85 1638  292 1554 1600   83    4 3459  256 3580 5293 3488\n[28575]  491  834 4580 2088 2280   31 3416 1117 3199  415 3075 1156  843 2793\n[28589] 1705 2154 3825  543  134  141 2459  375  847 2187 1593  343 1105  269\n[28603] 3523 3357   65 3824 3357 2302 4352 1619  485 1410 3540 5091 3327 1463\n[28617] 2231 3771  172 2443 3622 4684 1695 1161 1373  629   27 1394 3813 2949\n[28631]  283 1801 3347  181 3216 4175 1365  423 4294 3448 2042  884 3411 5601\n[28645] 2223  415  627 4201   89  708 3932 4695 2189  211 1284 2156  413  199\n[28659] 1171 1585  512 2988  996 4705   95   45  706 1499  408 1119 3365 4113\n[28673] 1060  894  246 1064  306  918  345  167 2580  387  291  404 2067 1109\n[28687]  837   86 3748 3849 5298 1682 1635 4411 2471 1516  687 2751 1230 4195\n[28701] 1185  434 1078  327 1083 3843 1692 2351  209 4202 3310   67 4382 3713\n[28715]  193  299 1629 2191  263  626 5387 2139 2158 1321  535  244  353 1455\n[28729]   61  360  359 4667   19 3526 3513 2331 2019 1611  926 1139 1407 1022\n[28743]   83  426 3542  726 5287 4245 3044 1053 1854 3486 2094  318  305 2002\n[28757]  425  711 2057 5268  442 3134  389    5  615 3325  153  745 4131 1185\n[28771] 3556 2202 3320  177  669 1113  119 2488 2391 3674  359   87 2193   29\n[28785] 3854  691 2160 2698 3445 1576  947  169  237 1691 3591  883  245  435\n[28799] 1259  490 1526 2454 2039 4191 1528 3433 1473 5909   21 1729 1715 1127\n[28813]  693 3555 5604 5769  645 2159 3349   71 3304 1435 1193  235 2437 3330\n[28827] 4361 2370 3470 2307  225  208 4370 5714  363 1271 1485 1618 5274 3374\n[28841] 2131  161  795 5383 5306 3573 5038  201 2195 3662  695 4127  292 1147\n[28855] 3604 3301 2162 4543 3846 4321 3535 4106 3843  418  702  771 4312   65\n[28869] 1703 5959  415 3331  105 4204  135 3885 1464 4085 2065 1039  371 4224\n[28883]  354 1680 3395 2314 4348 2680 4536 4033 5209  985 2520  499  915 5048\n[28897] 3384 2197  523 1416  382 4368 4397 3317 1066 4672 1205  347 1295 1247\n[28911] 5815  475 2164 5811  427 3603  617 4333 4509 1371 4247 4372   97 3833\n[28925] 4885 1543  185 1103 3660 3621 3837 5311 3842 3525 5904  108  234 1816\n[28939] 2002  718  486 1429  745  183 1843  252 2243 1403 1714  939 2180  371\n[28953] 2167 4533 5716  301  731 1909   27  563 1198  303  491 4137 5747 5068\n[28967]  464 1175  279  345 2609 6177 1919 4241 1103 4471  883 3351 4150 3525\n[28981] 1099 4334 4918 5503 3550  675   16 4535  300 1686  905 4424 2802  211\n[28995] 1205 2023  303  797 1772  453 4522 4422 3496   27 2085 2134  495 4166\n[29009]  525  511 4393 3599 1177  318 2136 4122 1144  423  315 3676  331 3845\n[29023] 1439 3769 1183  343 1879  821    3 1547  404  537 2169  683   23  482\n[29037] 1107  269  420 2285 1263 2493 1345  305 2003 1415 1265   15  399 1381\n[29051]  261 3547 1289 1548 1289  424  461  183  831 3829 2279 3821  183 4155\n[29065] 3759 4111 1273  163   11  807   59 3052 1717  450  901  421 2138 1216\n[29079]  885  212  544 3363 2171 3507 2431  561 1733  909   33  307 1111 1959\n[29093] 2047 5242 3353  245 1492 3538 1511 4866 3611 1455 4246 4364 3489 3528\n[29107] 2702 1109 2395 2457 3272 1154  327 3317  857  183  914 1429  346 4691\n[29121]  677  281 3868 1357  409  478 4537  403 3478 1831   84  219  443 2267\n[29135] 3355 4249 5195 2280 1808 3827 4419 2119 1271  447  929 2818 1157 1843\n[29149] 3521 4711 5813 3841 4252 1294 5475 2071 4638 3407 5288 3419 1401  994\n[29163] 3810 5286 1626 5220 3492 2445 4388   15  434  997 1643  207 2140 2173\n[29177]   63  431  235  301 3370 1030    5  502 1747 1581  313  795  120 1711\n[29191] 5463  181 1121    1 5211  874 5222  161  208 1499 1885 5109 1634 3565\n[29205] 4065   73  407  497 3579 1223  116  746 4880  271  199  456  223  397\n[29219] 4087 4380  124  317 1160 3814 3531 4714 4060  258  406  251 5711 3574\n[29233] 2054  276 1030 2175  357 1847 2142 1735 2319 4255  673 3644 1480 5208\n[29247] 3675  586 2067  925 1131  411 3611 1808   53  642   19  488  325  518\n[29261]  604 2343 1025  483  179  625  189  187 1529   23  971 1110 2602 1167\n[29275]  954 3689 3281 2177 2144 1275 3475 2098 2452  798 1647 1479 1341 3230\n[29289]  695 3493 1875 3466  453    1 1599 1010 2380  127  703 2069 1454 3302\n[29303] 1139 2219 1211 1618 1307 1519 1174 1623  401 1256 1212 2146  264    3\n[29317] 1978  323  423 1947 3404  766 3330 3508 1685  998 3572 3461 2451  667\n[29331] 1143 1191 3670  327 1496 5273 3361 2502 2179  482 4632   34 4495 5675\n[29345] 3807 4679  566 4187 3616 1163 4445 1401 4412 6181 3386 4567 4628 4297\n[29359] 3291 3828 5736 3616  300 1131  352  137 1697  553  178 3388 1583 1280\n[29373]  316  781 1895 2181  329 1444  432 2148 5569  505 1318 1375 1158 1145\n[29387]  411 3848  165 3812 3211 1641 5309 3937  348 3795 1734  436 2095  431\n[29401] 4141 1311 3822  308 2043  681  927 1122 1712  507 1054 1779 2402 1639\n[29415]  581  117 2449   15 3305 5395 1073 1802 1783 3493 2183    1 2480  118\n[29429] 1373 3567 2150 1481 2247 3340 1151 5283  213 3852 1170 5373  673  246\n[29443] 1945 5712  587  686 1338  349 1493 4395 4193 3527  365  286  477 4687\n[29457] 1819 1232 1902 1663 5181  703  331  460 3983 1231 5207 3318 1296  294\n[29471]  395  337 1171  431  841 3393 5299 3231  222 2815 3359 3846 1935 1164\n[29485] 2152 1107 2185 4596 3070  301  325  399  446  802  573 2347 1744  575\n[29499] 1995 3391 4978 5199 3326 2297 4133 1155 1734  145  161 4140 2181 4572\n[29513] 1483 4335   95 2285 4100 3532 4171 6054 3669 4181 1729 3663 1982  698\n[29527]  598  133 4326  685  322 1638 1942  257  292   85  320 4502 5370 2088\n[29541] 4640 1600 3588  341   83 1714 3459  363 3580  424 3202  500  843    4\n[29555] 3416 4696 3199  375 6049 1117  141 2187  134 1554 4377  256 4576  543\n[29569]  847 3357   31 3748 5713 3488 3540  643  745 1705 2459 5378 1619 3357\n[29583] 2302   65  283 3327 1410 2443  172  589 1373 2231 2154 3622  485 3771\n[29597] 1161   27 1801 1394 1463 3075 1593  181 2793 1695  423  343 2280  629\n[29611] 5091 1365  884 4294 3347 4144 3411  516   89  415 2189 3932 2223  269\n[29625]  578 2156  894  413  408  706 1665 1171 1499 4352 1119  525  211 3824\n[29639]   45 4695   95 3216 1284  527 4949  167  246  509 2067 1156 2988 4580\n[29653] 5601 2580  345 2488  918 3556 1064 2949  291 2042 1185   86  652  687\n[29667] 1516 1109  193 1105 1078  434 2751  327   19 1668 3849 2471 3310 4705\n[29681] 2351 4684 1048   67 4411 4662  837 3448 3365 1200 1635 4175  199  209\n[29695]  299 3301  626 2191 1407 3526  359  263  360   61 2139  926  512 5387\n[29709] 3825  353 1139  691 2331   83 1629  535   17  708 2158 4382 4245 2019\n[29723] 1585 1013 1022    5 1854  318 1321 3044 3486  775 1059  425 1751  305\n[29737] 5287 1611  153 2002  711 2057  442 1053  389 1113 3513 3542 2202 3320\n[29751]  669 2039 3813 4201  177  119 3713  726 4410   87 3674 2193  169 3843\n[29765] 3433  883 3445 2160 2698  645 1715 3854  947 1526 3523  359 3591 3134\n[29779]   29 4195  435 1691 2454 1528 1473   21  490 1193 1729   71 2159 4667\n[29793] 1185  237 5604 1435 5769 2307 1128  693 4224 2370 3349 3325 3331  795\n[29807] 3304  225 1485 3555 4361 3470 1429 3374 1271 4131 5714 2437  245 2391\n[29821] 1576 4191 3843 3662 4370  235 3573  201 5909  161   65 2195 2162 1147\n[29835] 1651 4321 4204  404  363  415 1083 3535 4202 3885 4127 2131 1049  702\n[29849]  418 4085 5293 1464  105 2314  354  915 2065  203  382 1224  771  288\n[29863] 5383 3395  135 1039 1680 4033 1115 2520  985 1295 2680 3317 2197  371\n[29877] 1205 1247 2164  523 4885 3384 1416  499  427  475 3604 1066 4543  775\n[29891]  347 3603 4397 5811 4682 5956 1677 5268   97 3330 1371 4372 3621 4509\n[29905] 1543 3833  471 4672 4333  185  523 4312 1103 3842 4536  695 5048 4106\n[29919] 5209 5038 5311 5274  234 3660 1816  108 4368 2002  486  718 5904 5815\n[29933] 3525  208 4348  745 4113 5306 5298  745 1843 1403 2243 1714 5716  939\n[29947] 1909  303 2167 2134  371  563  731  407 5068   27  601  279 4137 1175\n[29961] 2180  464 1198  301 5747 1103 6177 2609  883 4533 4471 3525 3351 1772\n[29975] 1919 5503 4150 1205 3550 1099 2085 4334   16 4393 1686  797  905 4424\n[29989] 4918  675 1088 2802 1454 2023  211  303 4422   27 1668 4166 1144  511\n[30003]  525 4522  453 3599  318 3676  252  343  347    3  315 1439  404 4122\n[30017]  537 1622 2136 1879 1547  683  269  331 3769 1299 2169 1263  420 2285\n[30031] 3845 3829 1415  482  305 1107 2003  421 4155 1265 2493 1345  399   15\n[30045]  261 3547  183  424 1381 1548 3496 2279  322 1289  461  831 4111  183\n[30059]  163 3759   11 1717  807 1808  901 1273 3052 3363 1216 4246 2047  431\n[30073] 3370  307  561  245 2138   59 1111 2171 3827  544  909  885 1959 1733\n[30087] 3353 1271 3528 1511 1491 3507 2395 3272 2702 1109 2457 4866  327 1154\n[30101] 1177 3489   23 3538 1167   33  857 1429  183  914  677  281  929 4691\n[30115]  409 4364 3521  219 4537 1157 3821   84 2119 3478  478  346  397 5195\n[30129] 3579 1357  443  617 3868  403 1843 2267 3492  189 2280 3355  447 3531\n[30143] 5463 4249 5813 4711 4419 1401 4638 3841  994 4252 2071 4241 2431 3419\n[30157] 5288 3810 3611 1643 1626 5242 2445 3407 5220  207 2173   63  997 1831\n[30171]  301  434  423 2140  120    5  431 1747  502  795  235 1711 5286 1581\n[30185] 1030    1  181  208  874  161  313 5211 1885 5475  271 1499  407 4065\n[30199]   15 1634 4380 5109 1223  456  746 4087 1121  199 1727  497  116  251\n[30213]  124  317  223 4714 3565 4060 1160 3814  586 2175 1030 4880  406  673\n[30227]  357  698 4388   51  276 3317 3574 5736  411 2142 5208 2319 1480  495\n[30241] 4255 3675 3644 1735 1847 1808 2067 4187  925 1025   53 3611  518  604\n[30255]  642 4412 2343   19  187 1131  488 4495  625 6181  179  325 4297  483\n[30269]   23 1529 2054  971  954 3689 2602 3828 1275 1110 4628 2177 1479 1341\n[30283] 2144 2452 2098    1  695 3230 4632 5309 1599 1875 3466 3493 4679 1307\n[30297]  453  327  398 5373  127 1139 2380 2069 1211 4445 1048 2219 1647 5222\n[30311] 1618 1519 1174 1623  401 1212  998 3807 1191  423 5273 2179    3 1947\n[30325] 1685 3404 3386 3572 2146  766  264 1256  323 3461 3330 1978 5711 5675\n[30339] 3508 1143  667  476  482 3616   34 1496  436 4640 3361 3848 2502  329\n[30353] 4141 2451 4335 3291  300 1401 3670  137 3616 1318 1629  178  553 3852\n[30367] 1131 1697 2181 3211 1145 1583 1158 1895  165  411  316 3388 2148 1375\n[30381] 5378 5569  781 3302  505  681 1280  432 6054 1641 5816 1734 3937 3822\n[30395] 5283 5207 5395 5299 3281 4567 1639 2095 3795  308 1122  483 3340  456\n[30409]  348  431 1054  927 2043  331 1565 4687 2402 1779 3305   15  117 4395\n[30423] 1338 2449 1073  581 1802    1 3567 2480 1783 4100 5181  118 3493  527\n[30437] 1663  686 2150 2183 1151  246 4193 1373 1481 2247  507 1232  673 1170\n[30451]  213  587  349 4171  337  643 1493 4696 3669  286 5713 3527  591 1945\n[30465] 1231  703 1296  477 1171 1902 4949  301  841 3393 1819 4596 3359  395\n[30479] 3846 3588 1995 2815  371 1935 2152 2285 1164 3231 2297  573 1734 2347\n[30493]  685 2185  311 1107  802  500  635 3391 4133 4572 3983  446  745 3070\n[30507]  325  161 3663 4377 5199  460  145 2181 3202   95 4326 3326  575 1483\n[30521]  598 1729 1600 4576  320  554 5370  494  257 4580  133 4502   85 4140\n[30535] 1942 1714  424 1246 1554 1638 2088  292 1982 5293 3825  341    4 3580\n[30549]  134 3488   31 6049 4662 1117   83  256  843 3199  847 3459 2154 2280\n[30563]  375 1705 3416 5712  543 2459 2187 3748 1593 3357  141 3318 4144 2793\n[30577] 3824 3357   65 2302  269 2443 1619  172 1156 2231 3622  485  287 1410\n[30591] 5601 1161 4352 3347 3540 1373 3075 3771  283 4181 3327 1801  343  423\n[30605]   27 4684 1365 1064 3216 1695 4175 4294 2223  516 3813 2949  415 4695\n[30619] 2156 4201 1105  578 3932  708 1171 1499   89  706 2189  211 1585  413\n[30633]  408 1119  512 1665  199   95  525  884 3448 3523  181 2042 1206  215\n[30647]  246  509 2580 3365 1284 4411  256  629 2488 1155 4113 3556  894 5091\n[30661] 1394  291  404 1109 2751  345  918   86 1692  687 3849 1635  193 1516\n[30675] 1185 2471 2067  418 2351 3411 5298  167 3532  434   19 3843  626 4382\n[30689]  209 3301 1185  359 1407 2158  299 2139  535 1078 5387  691  360 4202\n[30703]   61  263 2988 4667 4978 3526   45  926  775 1321 1139 5287   67 1611\n[30717]   17 2331  726 2019 1629 2191 3513   83  318 4245 1022 1751  837 1854\n[30731] 3044  305  442  353  153 5268 1053 2057 3486 3542  425 2002 1165 2391\n[30745] 3134  389    5 1013 2202   87 3320 3310 3325 3674 4131  119 5274  177\n[30759]  669 3591  415 1528 2193 3433 2160  169  947  359   29 3854 1715 1473\n[30773]  693  883  327  435 1128  237 2454 1691  245 1113 5909  645 4191   21\n[30787] 1193 5383  490 2698   71 1526 2159 1576 1729 4195 3304 2039 3555 3349\n[30801] 1435 3470 2437 2370 4224  225  795 3374 3330 1485 4370 1271 5769  235\n[30815] 2307 3445 3843 4361 3662 1429 5714  161  208 2195  201 2162 5038 3331\n[30829] 1651 5306 4127 1147 3604  415 2131 1115 4204 5604 1049  702 1712  771\n[30843]  418 3885 4312 1464  363 3535   65 1039 5956  105 2314 4348 3573 2065\n[30857]  306 1083 4085 1071 3395 2680 4536 4321  443  354  499 2520 5048  985\n[30871]  382 3317 2197 2164  711 4333  915 4033 1205 1066  135 1247  374 4543\n[30885]  427  347  371 4885  475 1615  775 4368 4672  523 4106 5815 4372 1677\n[30899]  471 4509 3833   97 1371 4682 3621 3660 4397 3603 1416  185  523 3384\n[30913] 1103 5904 1543 3842 3525  234 1816 5311  108 1295  486 2002  695 5811\n[30927]  718 5209  226  798 4535 4705  345 3475  881  598 2243 1714  939  371\n[30941]  654 1175 1403 5716  563  698 2055 5661  601   27  303 1198  731  883\n[30955] 6177 1103  345 1919 1772 4471 4393  303  675 2085 1205  797 4348  905\n[30969]  575 1144 2079 1099 2802  211  494   27 2158  453  525  315  421 1263\n[30983] 3829 4111  540   23 1547    3 1162 4122  683  269  420  331  305 2003\n[30997] 1415 2285 2493 1884  495 1345 1066  399  482   15 1456  461  318  831\n[31011] 2279 1289  183 1600 3847  183 2418  163   11 1506 3496 1717 4879 4246\n[31025]  901  657 1216 1273 1733   59  307 3052  279  327 1439  561 2047 2431\n[31039]  449 3370 4866 3353 3611  885 1511 3842  245   33 1111 1959  785 3507\n[31053] 1271 2702  936 3363 4548 3531 1135  183 1429 1879 1167 3868  210 2870\n[31067]  929  677 3478  281  409  219 1357  443 1831 3492 2267 2119  397  403\n[31081] 1157 1843 3419  446 1593 3407 4240 2280  208 5813  281 4326 3841 2071\n[31095] 3317 3521 2445  189  353  313 2173 4380  301   15 1747 1262  502  120\n[31109] 1682    5  795  181  431   63 1581 1121 3565  208  544 5222    1 1499\n[31123]  161  518  497 1634  271  407 1223  116 3538  997 2395 1296  199 3611\n[31137]  874 1752 5370 1519 1885  317 3675 5373 1109 1689 5463  251 1030 2142\n[31151] 1160  586 5711  954 1808 2457  523   51  411 1651 2067 4412   53 4187\n[31165]  925 1529 4255 1131  642 4572 5736   84  207 4495  625  325  604 1638\n[31179]  187 6181   19 1711  179 4632 2430   23 3828 4510  483  971  893 2602\n[31193] 1263    1 1275 3466 2452 1647 3230  405  695 1479 2098 5174 5208 1599\n[31207] 3493 5273 1875 1307  127  905 1211 2177 4679 3461 5211 3308 1892 2380\n[31221]  703 5309 3807 2219 1174  401 1623 3616 1180 2146 3572  404 3386  998\n[31235] 2451 3670 1120  423 5675 1605 2965  323 1191 1830  680    3 1256  329\n[31249]   34 1143 3361 5475  300 4133 4649 1845 2502 1697 1421 5067 3388 5951\n[31263] 1791 1131  505 2181 4567 5378 4434 1622  165 1318 1401  781  687 1705\n[31277] 1798  411  553  760 1685 3340 3813 3305 1947 2086 4509 1641  308 1663\n[31291]  431 1830 1639  348  927   15  456 4417 2043  436 1515 1172  466 1779\n[31305]  500 1073 1802 3567 1373  581 1151  213 2247 1783  118 1623 3588 1170\n[31319] 2480  117  686 1065  178  337 3669 5956 1199 1493 5712 4395 1819  257\n[31333] 1232  703  217 3393 1107 4687  301 1958 1171 4171 3426 3846  799 2297\n[31347] 2815  286 2152 1734  573 3231 1744 3070  325  343 3595  575 3391 3359\n[31361]  394 4144 4120  500 3326  477 2347  802 2285 2181 3202 1618  341 1164\n[31375] 3663 4181 4148  578   95 4662  527 3416  804  841 1600 3812  320 1695\n[31389]   85   83  745  133  685 3049  424  256    4 3459 1156 2280 3540 1982\n[31403] 2088 2793 3075  283  543 4991 1117 5293 2459  843  161  375 1706 5592\n[31417] 1299 5615 1902 3531 1410 3155 2302 1935 3511 1161 1373  629 2231 2443\n[31431]  652 3817 3347  181 1394  141 4087 4249   65  252 3825 4175  423 1178\n[31445] 2488 1801 1365  635  283 2949  617 1854  516 3448 4294  172  847 2471\n[31459] 3556  708  415  706   45 1554 5680  211 2580  199 1585 3216  345 1119\n[31473]  587  413  347  167  918  551 3301 3365 4201 1725  291   27 4537  216\n[31487] 1185 1516   31 1712   86 3128 3523 1109 1635 4382 2351 3310  687  894\n[31501] 1626 1185 1751 3674  247  299 1064  535  359   61  327 1839 5514  623\n[31515] 1611 5461 2019 1053 4245  426  425  511 3542 3486 1639 4121  711 3044\n[31529]   67  153  926 2202    5 2391 2002 3325  288 4131   83 3320  669  145\n[31543]  119  442 3591 1284  359 3330  883  645  245 3134   87   21 2159 5484\n[31557] 1729 2454  435 1526 2307  577 3771 1576 1105  795  235   71 5714 1047\n[31571] 1271  225 4532 3374 1416  201  244 3827 1075   65  881 1482 1022 3535\n[31585] 3885  105  418  705 2065 2314  135 4191 3304 3395 3470 4536 1205  702\n[31599] 1295 4212  347  915  523 1692 3336 5811 1371 3809 3621   97 1103  185\n[31613] 5904 1066 1816  234  108 2002  718  237  745  322 1403 2243  279   27\n[31627] 1175  303 1739 5716  345  731 5747 1103 6177  371 1989 4274  303  423\n[31641]  538  675  905 3550  421 2085 1205 1099 4166  883  525  453  211 2023\n[31655]   27 1144  495  318  331 1263 1439   23  315 4122  683 1879 1107    3\n[31669]  269  420 1177 3845 2493 1415 1345 2285 1265 1547  260  305  424  399\n[31683]   15 4315 1381 1444 1736 4111   11 1289 1299  183 2279  443  497 1808\n[31697]  820 4879 1216 4246 1717  901  450   59  461  245 1273 3052  561 3810\n[31711] 4420 5675 1455  449 1733 1511 3363 3507  885  909  307 1111 3611 5242\n[31725]  936 1491 1109 1271   33 1492 1959 2047 2431 1506 3489 3528  939 2395\n[31739]  387 3353 3272 1154 3317 2457 3538  183 1167  857 1429  929 5195 1357\n[31753] 2702  914  397  677  409 2267 4422  281 2053 4388  219 1668   84 3478\n[31767] 3868  403 1157 4364 3492 1843 2119 1197 4625 3521 2280 1626 4711 1401\n[31781]  447 4230 1437  207 2445 3419 3841 3531 1643  189  301   15    5 2173\n[31795] 1747 4638  673  502  795  636  353  431  313  997  181 1581 5666 5222\n[31809]    1  208  874 1711 1885 1499 1121 4087 5109  407 1634 1120  271  116\n[31823] 3565  199   63 5475 3579 1143  456  746  223  124  317 3814 5959 4148\n[31837]  120 1160 1462 3806  251 5736 3574  994 1030 1480 4140  654 1847 5711\n[31851]   51  586 2067 1735 3675 3644 2319 5208 4412 1745  925   53  604 1131\n[31865] 1529 4495  518 4187   23  255  179  831 2343  325  642  625 4632 5392\n[31879]   19 4255  971  187 1034  483 1110 2602 3828 4099  411 3689 2177 1275\n[31893]  798  163 1647 1479 2452 5174    1  695 1341 2098 3230  453 3493 1599\n[31907]  703 3466 1875 1732 4679 5309 3611  954 3302  327 1307 2219 5373  698\n[31921] 2021  127 2380 4445 1519  401 1174 2179  766 1191 1212 2146  264 1256\n[31935]    3 3572 1211  998 4188  423 2451  598 4866 4567 3461 1496 1978 3330\n[31949] 3508 1685 3404 1623 3670 1143 3386 3807   34 3616  482 4060 3361  329\n[31963]  323 1280 1947  276 3848  587 5067 2502 3281  316 4335 1697  300 1284\n[31977] 1158 1131 1178 3211 3616 1895 1375 1145  505 6054 5378  681 4640 2181\n[31991]  553  165 3937 1734 4092 1318  781  411  482 3805 5299 1401  137 5395\n[32005] 2095 5283 3817 1641 3795 3818  348 5207  308 1639  432 1711 1054  431\n[32019] 3388  178  537  927  507 3340   15 1311 2449 3305  643 1802 4193  117\n[32033]  581 1779 4100 4687 1338 2480 2043 3493  686 1783  431 2150 4395    1\n[32047]  213 2402 2183 5712  331 1163  456 1223 1373 1151 5181 4171 2247  349\n[32061] 3567 1232  246 5156 1170 1073 1663  337  527  301 3669 1945 3527  286\n[32075] 4695  477 5370 4141 1902  460 1605  365 1819  703 3318 1231 1171 1995\n[32089] 3393 3983 1935  841  258 3588  685 3846 3231 1744 4133 2918 1164  340\n[32103] 3070  802 2815  500  575 2347 2185 4978 3391  479  325  161 4949 1205\n[32117]  635  573  745 1155 3202 4596  320 3326   95 2297 1107 3663 4572 2285\n[32131] 4212 1982 5713 1600 4377  341 5199  145 4326 3359 4502 6181 1942 4576\n[32145] 1734  424  257   85 1246 4144  494 4580  133  350 2088 1714 3416 3488\n[32159]  256 3580 1554 3825   83 1638 3199 2280  134 3748  404 1117  269 3357\n[32173]  375 4667 2793 3523  543 2181 3459 1245 2154 2187  287   31 2459 3357\n[32187] 1156 1729 1619  343 2302 3327  843  172  141 3849    4 3347 3622 5293\n[32201] 4181 4684   65  629  485 3771 1410  423 2231 1695 2949 1161 1801 3813\n[32215] 1705 1105 3216  181  415 1365 2443  884 3540 2223 3411  516 4201   27\n[32229] 4705   89 4294  283 2189 3932 3448  706 1182  894 5091   45   95  501\n[32243] 1499 1585  199  541  708 1454  509 1119 4662  408  167 1064  376  413\n[32257]  211 5601 3365 1373 1394  345 3556  246  327 1635 4113 2488  847  687\n[32271] 1712  312 4195 3075  837 2580 2471  193   86  434 1109 1185 2751 1078\n[32285] 1482  291 1516 4175 4202 1171 4382 3843 5298 2351  327 1162 1048  617\n[32299]  209 4380 2158  623 3713 1185 3301 5387 2067  263  535  866 1022 2191\n[32313]  359  299 3526  691  292  353   61  926 1629 1139  918 5287 2139 1075\n[32327] 1321 4245   83 3310 1013 2331   17 2019 1113 1611  288  318 3513 1053\n[32341] 1751 3044  425 5268 3486 3819  153 2057    5  442 3134 3325  389 4131\n[32355] 1576  711 1407 2202  305 2002  418 3320   67 2698 5274  119 3542  669\n[32369] 2039 3591 3445  693   29 2193  359 1854  883 1128 1715 3433  177 3330\n[32383] 2454  169 5383  245  947 1528 1691  435   87  237 3674 2391  490 3555\n[32397]   21   71 1526 1435 1473  645 2370 2159  222 4224 2437  208  795 4361\n[32411] 3264 5714  363 5769  161  235 5306 3843 4370  225 3573 3374 3470 3662\n[32425]  201 1429 2162 1271 2131 3331 1147 2142 3304 1083 2195 2307   65  695\n[32439] 1651 3604 5956 1224 1703 1485 4312 4543 4321 3854 4191  702  418 6073\n[32453]  135 4106  105 1466 1680  771 1071 5038 5209 4127 1464  354 3395 4348\n[32467]  352  915  371 3349 2520 3535  382 1729 1615 5815 1295 5048 2197 2314\n[32481]  523  475  499 2164 4672 4085 4368 4033 1066 3885  775  427 1416 2680\n[32495]  371  347 2065 4333  443 1205 1247  985 5811 4278 3603 3833 4583 4885\n[32509] 1371 3317   97  185 3621 1039 3525 3660 1103  523 5311 3842 3384  415\n[32523] 4397 4682 2042 4186 1816 1677 5904 2002  108  234  718  486  745 3370\n[32537] 4411 4536 3842  382 1371 5815 4509 1816 1843  252 2243 1403 1714  939\n[32551]  301 1909  407 4533 5747 1175  731  371 2134 2167 5068 2180  601   27\n[32565]  303  345  563  464 1198 1919 6177 4471 5503 1772 2609 3525  883 1103\n[32579] 3351 4241 4150 1205  675 2085 3550  797   16  423  905 4334 4137 4393\n[32593] 4918 2802 1099 2023 4424 1668 1686 4535  303   27 4166 4422 4522  211\n[32607]  525 1144  495 3496  453 2114  511 1454  318  343 4122 1263 3599 1177\n[32621] 1439 2169  404  537 3769    3 1547  269 1183 2136 3829  399 1879  420\n[32635]   23  305  683  482 3845 2285  821 2003 2493 1415 4155 1107 1345  331\n[32649] 3547  424 1162 5716  315   15  261  421 1381  183 1265 1289  831  183\n[32663]  461 3821   11 4111 2279  163 3759 1808 1455  598 4246   59 1717  807\n[32677] 1273 3052  450  279  901  544 1216 2171  561  307  245 3827 3370 3353\n[32691]  885 2431 2457 2138 2047 1492 3538 1491 1959 2395 4364 3528 1511 1733\n[32705] 1271  909   33 3317 1167 1111 2702  333  346  857 1109 1154 1429 3489\n[32719]  183  677  929 3611  397  403 4537  914 4388  281   84 1357 3363  443\n[32733] 2267 1157 3478 3531 1289 4691 5195 3868 2119 3492 4866 1843 2280 1401\n[32747] 4249  994 4252 4711 1643 5288  434 3810 5286 5463 3841  226 4638 5813\n[32761] 2445 3407  189 5242  301  207 3521 5220  478 2140 3272  235 2173 3507\n[32775]  795    5 1747 1030 1600  120  431  502   63  219  409 1711 5621    1\n[32789]  208  874  181 5222  313 1121 1499 3419 4065 1885  161 5211 3355  407\n[32803]   15 1634  116  271 5109   73  456 4087  223 3565 2071 4380 4419 4880\n[32817]  746  199 1223  124 1831  317 4714 1160  251 4060  497  406 5736  586\n[32831] 5711 1030 1581 2175 3574  673 2142 2054 4255 1847  258 1735   51 1480\n[32845] 2319  276 3814 3644  411 3675 5208 4187  925  357  642   53 3611 4297\n[32859]  518 1529 4412 1131   23   19  604  179  325  488 1025 6181 5475 2343\n[32873] 2067  625 4495  971  187 2602 1110 3689  483  954 1275 3281 4632    1\n[32887]  798 4628 2177 1341 2144 1479 1647 3230 3475 2452  695 2098 1875 3466\n[32901] 1037 1599 5273  453 1307 4445 5373 2380 1139 1211 2219 1808  127 3302\n[32915]  327 3579 3828  401 1618  398 1174 1623 1519 2069 3572  566  264  447\n[32929] 2146    3 1212 2451  423  766 3330 1947 3404 1256  323 1191 1685 3461\n[32943] 4679 3508 3616  667 1163 1496 4640  998  352 2502 4567  482  329   34\n[32957] 4141 3848 3670 1318 1697  553 1294  178 1143 3616 3493 2148 1895  165\n[32971]  411 1978 3211  781 1375 1158 1280 1145 5378 3852 5816 1444  316  432\n[32985] 1734 1131 5309  348 3937  300 1798 3795 1641 3822 4335  308  431  927\n[32999] 1639  456 3291 2043   15 5299  841  117  581 1338 2095 1073 4100 5181\n[33013] 2449  436 1373  118 1663 1802  213 1151 1779 2247 1481 1783 5207    1\n[33027]  331  431 1170  349 3567 3493 1122  643  686 4395  477  301 1232 4696\n[33041] 1902 1296  673  337 1231  703 1493  365 4596 3669 3846  286  841 1995\n[33055] 5370 1164  587 2285 3359 3231 2815  395 6049 2347  255  325 1819 4140\n[33069] 4572  500  399 5199  370  145 1734 2402 4978 2297   95 4949 5712 1945\n[33083]  460  698 1483 3202  573 3070  685 1982  745 2183 1554 3318  246 3326\n[33097]  322   85  424 2179  133 1729 3391 1638   31  292 2280  404 3393   83\n[33111]    4  575  843 3459 3523  256  446  343 2459 2181  141  543 2088 3416\n[33125] 1105 3983 1155 2181 4687 4193  485   65 2185  847  341 1117  423 3357\n[33139] 5395 1107 1695 1935 1394 5713 5283  181  415  629  491 1410   89 1171\n[33153] 1619 2443 3075   95  512 1463 1801 1054 1246  706 3527 1373 1705   27\n[33167] 1078 1109  193  578  172 4662  199  413   45 2793 3411 1284  681 3540\n[33181]  167  418 3327 3386  257 3813 3347 1942  687 1171 3448  246 2988 2471\n[33195]  161  652 1714 3216  525  837 1593 3199  589  263 1629  211   67  408\n[33209]  509  320  884  472 1053  283 1161  425   17    5 1751 1576  305  442\n[33223]  359 1585 3580 5293 3486 1692 5091 2231 4377  119  318 4181  153  669\n[33237] 2331 1499 1611 3044 4580 2139 3591 3824  245  389  137 1526 4576   87\n[33251]  708 2949  353   83 4133 1193   86  435  134 1022 4502  516 4171 1185\n[33265] 4201 2223 2454  177  926 3556 1048 3748  291  711 1139 4113  795  375\n[33279] 3932 3325 2351 2202   61 1115  691 1429  360 4684 4131 1516 1635 2437\n[33293] 1119  947  161 3320  235 2042 5298 5714 5287 5909 1485 2488 2302 1083\n[33307] 1473 5268 4695  299 1854 2156 1365 2154   65 1165  894  169 1665 2480\n[33321]  535 2158   19 3513 1407 4312 2019  918 1715 2391 2698 4382 2307 1680\n[33335]  209  915 3713  775 1435  527 2142   29  418 2065 2314 3542 4224 4245\n[33349] 3526 3555  443  985 1729  771 1295 1128 2370 2067 1066 2131 3849  363\n[33363]  427 2580  775  203  626  702  225  327  237  415 2002 1064 1185 1321\n[33377] 2159 3843 2193 1224 2197 1147  693 2039  135 1247  371 1528  201 4333\n[33391] 1691 1205 1615   97  645  883 4106 3331 5811 5956 1013   71 3662  374\n[33405]  695 1113 5387 3843 4543 2680 2057 1545 3621 3374 1049 4127  523  185\n[33419] 4370 3885  208 3395 1651 4372  347 3573  490 5209 1416 4321  108  105\n[33433] 3470  354 5038 5274 1103 4361  471 4885 4204 4085 4397  234 3660  718\n[33447] 5383  475 2002 3535  523 1677 1271 4682   21 2164 3304 1464 5311 2520\n[33461] 4536  499  486  745 5904 3134 3301 3305 3340 3349 3388 3317 3357 3361\n[33475] 3365 3384 3532 3622 3588 3663 3674 3603 3604 3676  222  269 2150 2152\n[33489] 2160 2162 2187 2189 2191 2195  802 2751 3771 3825 3833 3807 4144 4175\n[33503] 4326 4368 4294 4411 4348 4352 4667 4672 5048 5306 5601 5675 5769 6054\n[33517] 4191 4195 4202 4705 3310 3488 3433 3445 3525 3854 4033  345  359 1156\n[33531] 3330  505 4672 1843  252 1403  939 1714 2180 2134  601  698 2167 4137\n[33545] 5068 5747  563 5716  301  371  731  303 1027   27  279 2243 1175  345\n[33559] 2609 3525 6177 1772 1103 4471 1919 4150 4241 3351 3550  464  423  303\n[33573] 1205 4533  675   16 4424 1686  905 4535 4393 2802 1099 2023 2085 4334\n[33587]  575 1144 4522  495 1454 1668  883 4422  525   27  211 3496  511  683\n[33601] 3599 1439 1879  404 1263  318  537  315 3676  343  331   23  269  482\n[33615] 3769  420 1183 1547  399 4122 4155    3 2285 2136 2169 3845 1107 1415\n[33629] 1345  797 2493  305  261   15 1149 1265 3547 1381  831  212 2003  183\n[33643] 1289  461   11 2279 3821  183 4111  163 1808  807 3759   59  561 3052\n[33657] 4246 1273 1717 1216 1289 3363  901 2138  909 3611  307 2047  544 2431\n[33671] 1111 1959   33  450 2171 4866  245 2395  885 5242 1511 1492  857 1109\n[33685] 5503 1271 3272 3353 3528 2702  346 1154 1733 3489 2457 1167 3317  914\n[33699]  424 1429  183 1548  821 4691  677 3868 4364  294  409 1357 3579 3478\n[33713] 1831 2267  397 4537  281   84  403 1843  929 1157 5195 2280 3355 2119\n[33727] 3521 4419  219 4638 5475  447 1401 4252 5813 3492 3531  443 1583 2071\n[33741] 3827  994 3538 1643 4388 5288 3841 1626  434 3810 4711 2445  189 4249\n[33755]  301  207 2140 2173   63   15 1747 1030  997 1121  795 5286 1581  431\n[33769]  120 1711  235    5 5211    1  313 3370  208  181 1499  502  161  407\n[33783] 3419 3407 5463 5109 4065 1634 4166  199  271 3829 4087 1223 3565  454\n[33797]  497  746  223 1885  456   73  124 3814 4880  317 5222 4380 4060 4714\n[33811] 3507  116  256  251 2142  673 2175 5711  654 2054  357  586  276 4255\n[33825] 5736 3574  411 1847 2319 1735  515 3675 5208 2067 5220 4412  925  325\n[33839]   53 3611 4297 4187 1529 4632 1808  187  642 6181  604  488  625   23\n[33853] 2343   19  179 1456  971 4495 3644 2602  483  954 3689 1030 1110 4628\n[33867] 2144 1275 3281 3828 3475  798 1341 2452 2098    1  695 1647 1479 2177\n[33881] 5309 1875 1422 1599 1307  453 4679 3466  327 2380 2069 3493  703 1131\n[33895] 5373 3302 1139 4445 2219 1211  127 1519 1618 1174 3807  401 2179 3404\n[33909]  667 2146 3572 3330  423    3  766  323 1685 1947 2451  222 1978  533\n[33923] 1256  518 3461 3616 5273  482 1143 3386 3230  551 4567 3361 1496   34\n[33937] 5675 3670  264  329  352 4335 1401 3817  300 3848 1191 3291 3616  553\n[33951] 1131 3211 1697 1444 1651  178 3388  681 1375  781 2148  165 2181 5207\n[33965] 6054 1280 1895 2502 3812 5378 5797 1158 1145  432 1798 3937  137 1734\n[33979] 5395 1641 2095 5299  411 3822 4640 3340 4395  348  431  331 1318  507\n[33993] 2043 1122  458   15 4687 1779 2449 5181  117 3305 5283 1073  643    1\n[34007]  436  581 1639 1802 3567 2402 3493 4100  431 2150 2183 1373 1783 1054\n[34021] 4091 2480  213  686  118 1663  246 2247 1199 1151 4193 1170  673 1945\n[34035]  337 3669 1232  349 1493 4171  477  527 5370  301 1902 3983 5712 6049\n[34049]  703  587  286 1171 1819 4949 1296 1231 3588 3318  841 4141 3393 4596\n[34063] 1995 3070 2297 1744 3231  395 2815 3326  575 2347 1164  370  685 2152\n[34077] 2185 4662 1935  635  802 4978  500 3359 2285 1107 1115  161  145 1734\n[34091] 2181  365  745  573 3391 4377 1155  325  320  446 4572 3532  460 1483\n[34105] 4181   95 1729 4326 1982  341  404 4576 1638  322  133 3846 1942 4502\n[34119]  292 4696   83 1246   85 1714 3202 1554 2088 5293  257  799 3825 3580\n[34133]    4   31 3199 3416 3488  256  424 4133 3663 1705 1593 2187 3531 1117\n[34147] 3748  134 3075 2280 1151 2154  343  415 2793  847 2459 3523  269 1156\n[34161]  543  141 4144 5199 1105 3357  843 2302 4352 1410 1619 2231 2443 3824\n[34175] 3327  485   65  172 1463 3771 1373 4684 1161  629   27  423  181 1695\n[34189] 3813 1394 3622 1365 2949  884 1801 1284 4580 3448 2042  516 4175  283\n[34203]  415 4201 3932 4294 3411 2223 2988 2156  211  199 2189 4705 1171 1499\n[34217]  708   89 1585 1448  413   45  408   95  706  246 4113 3365 4695  345\n[34231] 1119  327  512 1064 1682  578  167 2488  918 3556  226  894 2580 3216\n[34245]  291 3347 5601 1516   19  687  193 3849 5298 1109 3540 2471 3357   86\n[34259] 2751 3310 5713  418 4195  598 3843 4202  626 1078 4411 4667 2351 1635\n[34273] 4382  327  209   67 3713  299 1407 1629  691 2067 2158   61 2139  359\n[34287]  926 2191  353  263 1321 1139 3526  360 1224  318 1185  837 3513   83\n[34301] 1022 5287 1177 1611 2019   17 1854 4245    5  491 1751 3044 1053  425\n[34315]  305 3134 2002  711 3486  153 5387 3542  442 3301 2202 1576  535 4131\n[34329] 5274 3325  177 3320   87  119  359  669 2698  389  645 3591  169 2160\n[34343]  693 3674 2193 4191 3330  947 5383 3433 3445  258 3854 2391 1193  245\n[34357]  435  617   29 1691 1473   21 1185  883 1729 1113 2454 2331  490 5909\n[34371]   71 3555 1715 2039 1526 1259 4361 3304 3349 4224 2142 2159 3470  235\n[34385]  795 2370  363 2307 1429 2437 1435 1271  225 3374 3662 5306  201 1528\n[34399] 2131 4370 2162 5038 4127 2195 3843  695 3573 1451  415 4204   65  208\n[34413] 1147 3535  702 3604  771 3885  418  652  354 2314  105 3850  135 2065\n[34427] 4312 1039 4321  915 2520  382  306 1464 4033 4348 2680 4536 5268 3395\n[34441] 1049  985 5209 5811 1295 4543 5714 3317 1205 4368 1066 5048 1247 1485\n[34455] 2164 2197  427 4397 3384 1416  523 3603 4885  242  475 4106  347 4373\n[34469] 3823 4085 4682 4509   97 4276 3660 3621 1103 3842  185 5904 4333  375\n[34483] 3331 1816 1371  234 5311  108  718 2002  486  745 1909 5769 3459 3525\n[34497] 1843  252 1714 1403 2243  939 4533 5716 2180   27 2134 2167  563 1029\n[34511]  301  731 5068 5956  698 1175  303 4137 1909  345 1103  371 6177 1919\n[34525] 3525  883  464 4471 4241 2609 5503 1772 4150 3351 1099   16 3550 4393\n[34539] 1205 4535 1686 2085 4334  575  423  303  905  797 2023 4424 1668 1144\n[34553] 4522 4166 4422 3496  211  525 2802  495   27  675  587 1439 1263  318\n[34567]  343 3599  404 3676 4122  331  479   23  315 2136  399 3829 3769 1547\n[34581] 2169 2285 1149 4155    3  683  420 3845  269 1415  305 1107 1345 2493\n[34595]  537  821 1265  255  482 1879 1548  424 1381   15  212  183 3547  831\n[34609]   11 1289 3821 2279  183 2003 1808  461 4111  163 3759 1273  807  307\n[34623] 1216 1717   59 3363  901  561 1289 2171 3370 1733 3611 2138  245  909\n[34637] 1511 2047 3827 5242 1111 5463 3538 1177  307   33 2702 1959 1109 2431\n[34651]  885  235 4866 3528  346 1154  857 1271 1167  327 2457  914 3507 1429\n[34665]  183 2395 4691  929 3353 3272 1357 3052 3579  281 1157  677  397  478\n[34679]  409 4537 1831  403 3478 3492  219  447 2267 1843 2119 4388 3355 4638\n[34693] 5195 3521 4249 4419 3531 1294 3868 5813 4711 1401  401 2071 5288 3419\n[34707] 3489 1626 4246 2445 5220 5286 5747 3407 1643   15 3810  189  997 3841\n[34721] 2173  502 5475   63  301 1581 1048  120  431 1030 1747 1711    5  795\n[34735] 1121    1  313 2140 4364 4252  181  208 1885  161 1713 5109 5211 1499\n[34749] 4091 1223  434 1634  199  407 4087 4880 3565 4380  116 1112  746  271\n[34763] 2280  223  124  443  456  317 3814 4065 4714  251  310 4060 2054 2175\n[34777] 5711  357   51 2142 1030  586 1480  299 3574  411 1847 3317  276 2319\n[34791]  207 4255 3675 5208  673 3644 1808 2067   53  925 1529 4187  518  604\n[34805] 4297 1131  642 5736  325 4632 2343  187 3611  488 4495 6181   19  179\n[34819]   23 1025  625 4412 1110 2602  954  483 3689 4628 1275  798    1 3281\n[34833] 3828 1647 2144 2177 2098 2452  695 1341 3475 1599 1875 1479 5309 5273\n[34847] 3493 3466 1307 1572 4679  327  703 1211 5373 3302 4445 1139   84 2069\n[34861]  127  453 2219 2380 1519  401 1131 1174 1191  766 1212  598 2146  323\n[34875] 1947 3386 3572  667 2179  264 2451 3330  423 5675    3 3807 4567 3404\n[34889] 3461  998 1978 1685 3361 3670 1143   34 1496 1163  329 1256 4640 1401\n[34903]  352 3806 3616 4335  300  482 3616 3291  178 1318 1131 1444 1651 2181\n[34917] 2502 1734 1697 2148 5378  781 6054 1158  165 1798 5207 1280  137  432\n[34931]  681 3812  553  411 3211 1145 3822 5283 5797 3937 1895 5395 2095 3340\n[34945] 3848  331 3388  436 1641   15 1143  348 3795  431 4687 1639 1779 1054\n[34959] 5181  117  581  456 3305 4395 2043 1802  686 4100  431 5299 2480 1481\n[34973] 2150 4193 2402 1373  118 1663 1783 2449 2183 2247    1 1073  841 1170\n[34987] 4091  643 3493  246 3567  673 1151  349  337 1232 4696 1493 3669  477\n[35001]  365 5370  286  578  301 1231 1296  460 1945  703 3318 3983 1902  841\n[35015] 6049 3588  294 4141 3393  395  971 1995 4662 3326 1935 4133 1819 3359\n[35029]  500 3231 2152 2815  213  802 2285 1744 1734 2347 3391  573  685 2297\n[35043]  407 4377 4978  161 3202  745 4144 3532  145 1155 2181 3070   95 3846\n[35057] 1164 1107  325  575  652  341 4181  320 4326 1729 1483 4576  322  242\n[35071] 4171 1942  258 1554  292  257  133 1638 4580   85 4596 5712   83  424\n[35085] 1246  446 1982 4572  256    4 1171  843 3075 5293 3459 4949 3488 1705\n[35099]  491 5713 2280  134 3199 3540 3347   31 2154 1593 5199 1156  847 3523\n[35113]  543  375  415 1619 2302 2793 2187 3580 3748  269  172 1161 3357 4502\n[35127] 3357 2459 3327 1105 2443 2231  485 1410 3416 3622 3825 1463 1714  423\n[35141] 4684  629 3813 4175 1801   65 1695   27 2088  181  415  884 2042 1365\n[35155] 3448  283  516 1171 4294   89  141  708 2988 4705  306 3932 1284 5601\n[35169]  211 4352 4695   45  413 5091 2156 1119   95 2189  408  706 1499 3365\n[35183] 1585 3216 3663  512 4113 2949  167 1373 1064 2488 2580 4202  996 4411\n[35197]  918 1682  256 3556  199  894  343   86  291 3824 1185  687 1692 1078\n[35211] 1109   19  837 1083 1516 4195 1394 1230 1060  327  345 2067 2471 2351\n[35225]  404 3843 4382  434  193  626 3713 1635 4667 3849 2158 2191 1629  359\n[35239]  926 5387 1407  263 1321 2139  209  360  246 1455 1139  244  353  535\n[35253] 1022 2019 2331   83 3301   61  299   17 4245 1113 3513 3771   67 3542\n[35267] 3310 1751 1185 3044  318 4201  726 2057  442  691  425  711  153 3411\n[35281] 5268  305 2002 3325 2391 3134 1611    5 4131 2202  177 5287  119  669\n[35295] 3526  169 2160  359 3320 3330 1576  883   87 2698 1528 2039 4191  490\n[35309] 1193 1715 1854  245 1127 1691 1526 3854 1473   29 3486  389 3433   21\n[35323] 2223 2159 3555 5298 1729   71  947 4224 3591 4361 3304 2307 1618  208\n[35337] 2751  795 1429  235 2142 5383  693 4370 1435  435 2437 1485 3674  161\n[35351] 1053 2193 5274 5769 3445 3470  201 2370 5909 2162  645 1259 2131 1147\n[35365]  225 3374   65 4204 3349  292 1117 4543 3604 5714 3843 3331  418  702\n[35379] 1703 4106  771 4312 4333 4127 4085  237  135 4321  105  415 4348  472\n[35393] 2065  915 3662 1039 5306 3885 1271 2314 4536 3535 3573  288  985 1205\n[35407] 3384 2520 4397  695 4672 2680  523 5815 2164  382 2195 5038  427 1247\n[35421]  347 1416  354  475  363  617 5811 2454 4368 3837 1295 4372 5048 3395\n[35435] 1543 3317 1103 1464  185 5209 2197  499 3842 4247 5904 3833 1066 3603\n[35449] 4509 1816 3660   97  108 4885  486  234 1371 2002  718 5311 3525 5959\n[35463]  745 3230 3621  450  279 1454 2185 4033 1843  252 1403 2243  939 1714\n[35477] 2167 5716 2180 1175 1909  563  303 2134 4533  301 5747  371   27  731\n[35491] 1198 4137  464  345 2609 3525  279 6177  883 4471 1103 1919 1772 4150\n[35505] 4241 3351 1099  407  423 3550  797 4334 1205  675 2085 4424 4393  905\n[35519] 2802 2023   16  303  575 1454 1668 1686 4422 4535 4166  495  211   27\n[35533] 3496  525 1144 5068  453  511 1177  821  318 1263 3769 3599  404  315\n[35547] 3829  343  683 1439 2169  537    3 1547 3676 2136 4122  482 3845 1107\n[35561]   23  269  420  331 1183 1415  399 4155 2285 1345 2493 2003 1879  305\n[35575] 1265 3547  424 5503  212 1381  421 1289  461  831 4522   15  183 1289\n[35589] 2279   11  163 3759  183  261 1548 1808  807 1717 1273  901 4111 4246\n[35603] 1216  450 3052 1455 5242  307  561 2171 1111 2047 3363 3370  245 2138\n[35617]   33 1511 4364  885 1959 1492 3827 2431  909 3611  544 4866 3353 2457\n[35631] 3272  327  346 2395 2702 1109 3538 1271 1167 1429 5463 3507  857 1154\n[35645] 4691   59  929  914 3528 3317  183  281  677 3478 5195  219  403  409\n[35659] 3868 1357 3489 3521  478 1831 3579 1733 2267 1157 2119 3355 5813   84\n[35673] 1843 2280  447 3492 3531 4249 4252 4711 1294 5475 4419 4638 2071 4537\n[35687] 5288  434 4388 3810 3407 1401 2445  994 5286  997  189  207 2173   15\n[35701] 2140  301  443 1643 5220 3841 1030 1581    5  120  502 1747  235 1711\n[35715]  431 3419  208  181  397 1121  795 3821  874 5222  313   63 5109 1499\n[35729] 5211 1885  161  407    1 1634  199 4087 4380 4880 4065 1223  116  456\n[35743]  271  497 1626  746  223   73 3814  317  124  251  586 5711  406  673\n[35757] 4714 2142 1030  276 4255 1847 1735 2175  258 3565 2319 2054  411 1480\n[35771] 5736 3644 3675 3574   53 1808  357 4297  925 1529  604  518   23 4187\n[35785]  625 6181  179 3611  187 4632 1131   19 2343  642 4060 4495 1025  488\n[35799]  325  483  971 2067 1110 2602  954 3689 3828 5208 3475  798    1 3281\n[35813] 1160 2144 4628 1275  867 2177 2098 2452 5309 1647 1341 3493  453 1307\n[35827]  695 3230 3466 1599  703 2380  127  327 5273 1211 2069 1139 5373 3302\n[35841] 1875 1623 1519 4679  566 3572  264  766    3 1191 4412  323 2451  667\n[35855] 1010  998  423 1618 3330 3386 1174 4445 3670 3508 2219 1143 1212 1978\n[35869] 1496   34 3461 1685 2502 1256 1163  352  329 3616  482 1401 2179 5675\n[35883]  505  300 1947 1583 3616 3807 4141  178  553 1697 2181 2148 1375 3848\n[35897] 1131 1444 1895  165 5207 1145  316 1318  432  411  137 1158 3937 4640\n[35911] 3822 3795  781 5283 2095 1280 1798 5299 3404  681 3291 2043 1641  841\n[35925]  308 1054   15 1311 3211 1639  348  331  431  456 1338  643 1122  431\n[35939]  581 3388  118 1802 3493 1151 4335 3567 1373 2150  213 2247 3305 2402\n[35953] 1783  117 1073 2449 4687 3852  401 4395 1170 1734 1232 5712  337 1779\n[35967] 3812 3340    1 6054  349 3527  477 1493  301  587 1296  286 3669  703\n[35981] 1663 1902 3318  841 3983 4567 3393  673 1164 1995 2815 3359  460 1481\n[35995]  686 1945  927 1231 3846 3326 1935 2152 2285  325 3391 2347 1734  500\n[36009]  161  698 2480 5181  575 1155  365  745 2181 3070  246   95 3663 4326\n[36023] 3202 1483 1744  446  685  802 5370 1729 3231 1107 2297  145 1982  222\n[36037] 4193  436 1554  341  133 4100 1246 1638 2185   85  257 1171 6049  598\n[36051] 3532 1942 1714 4377 4949  424  395    4 2088 4576  256  573 5199 1819\n[36065]  843 2280 4596  141 2459 4171  322 3459 1156  847 1622 4572 4978  320\n[36079] 1593 5713   31 1105 3540  375 3347   83 1705 3588 2187 4696 2302 2443\n[36093] 3199 1619 4662 1117 4502 1410  485  629  491  343  423 3357  543 1801\n[36107] 1463  269   27 5293 3488  283  292 2793  181 1394 2949 1695  516 5091\n[36121] 2231  134 2189   89 1373  415 1499  413 4695  211 3357   45 1171  708\n[36135] 3448  172  706 1585  894  408 3075 2042 3580 4580 4181  199 1365  884\n[36149] 3216 3416 1064 3825 3523 3365 5601 3622 3824  345 1119  167 3327 1161\n[36163]   86 1516 3556  512  527 1200 2156 1109  434 1284  418  399  918 3843\n[36177] 1185  291 3748 3713  525  509 1635   95 2471  578 3310 2751 3301 2158\n[36191] 2191 3932 3411  535   67  353  263   65 1629  294 1048  359 1407 2351\n[36205]  246 1611   61 1078 2067   83   17 2019 3771 2331 1022 1013 4382 1321\n[36219] 3044 5298 4245 1665  442 2139 2057  360  425 1576 5268 2988  153 2391\n[36233] 4684  193  209 2002 3320  177 1854  119  669 1715  926  687   87   29\n[36247] 1053 2160  626 2223 2202  435 3591  389 4411 3513  711  691 1473  947\n[36261]   21 1729  245 2488 2454 5287 4705 1751 2039   71 1185 2159  299 3526\n[36275] 4113 2193 2580 3555 1435  235  327 2370 5714  237 1600 1115  359  225\n[36289]  161 2437    5 1113 5383 3304 3330 1528 3849 4224  883 5387 3854 2698\n[36303] 4410 2142 1139 1193 1691 3573  726 5769  201  795  415 3486  693 1429\n[36317] 1083 1485 2307 1526  645 3445 3349  490  169 1147   65 3674   19 3325\n[36331] 4106  775  652 3470  771 1128 3433  135 2195 2131 5038  837  305 5274\n[36345] 1680 2065 1039 1224 4321 4543  371 5306  915  208  985  363 3604 2314\n[36359] 3843 4191 2197  318  354 1205  523  418 3542 2520 5815 5909 4127  347\n[36373] 1651 1295 2162  105 3662 1247  427 4370 4361 3885  695 4033   97  288\n[36387] 1416 4085  203 3374  382 4204 4372  702 1464  471 1049 2164 1271 1103\n[36401]  404 3384 4131  523 4312 1543 4333 5209 1677  775 3535 3603 2680 3395\n[36415] 5956 3317 5048 4397 4348 1066 3331  475  499 1816 4885 5904  234  108\n[36429] 5811 4536  486 3660 4368 4682  185 3621 3833 4509 2002 4672 5311  718\n[36443] 3842 1371 3525  745 3134 3361 2146 2154 2183 3813 4133 4140 4144 4175\n[36457] 4294 4352 4667 5378 5395 4195 4201 4202  354 1816 1843 1545  252 2243\n[36471] 1714 1403  939 2167 1909 1175  279 4533 5716  301 2180   27  464 5068\n[36485]  563  303 1198  601  731 5747  371  407 4137 1103 1919  345 6177 3525\n[36499] 4471 2609  883 3351 3550 1772 4241 4150   16  303 1099 2085  423  675\n[36513] 4424 1205 1454  223 4334  905 4393  575 4535 1686 1668 2023 4166 4422\n[36527]  211 4522  495 5503 3496  511  453   27 1622  525 3599 1879  421  797\n[36541]  683 2169 3829 4122 3769 2802    3  315  343  331  482 1299 1439 1107\n[36555] 1263  821  269 3676 3845   23  420 1547 2285  537  399  404 4155 1265\n[36569]  305 2493 2003 1345 1548 3547  261   15  322  318  424  461 1289 1381\n[36583]  183  831   11 3821  183 3759 2279 4111  163 1717 1808 4246   59  901\n[36597]  807 1273 3052 1216  431 2138 3507  245 1733 3827 3611  307 3363  544\n[36611] 3370 1511 1959 2431 2171  909 4364   33 1111 3353 2047 5242 1491 1177\n[36625] 5463  346 2457 3489 1109 1167 1271 3528 1415 2395 2702  327 1154 4866\n[36639] 3272 1429  857  914  183  929  677 3478 3868  409  397 1831 2267  219\n[36653] 4537   84  561 5195  403 2119 1357 1157 3579 1843  447 3521 1480 3531\n[36667]  443 1483  885 4711 3841 2280 4638 4691 2071 3492  281 1401 3407 3810\n[36681] 5288 2445 3419  994 1643 3355 1626 4388  189  301  434  997    5 2140\n[36695]  207  235 5220  120 4252  502 1030 5475 1747  431   15 1121   63  874\n[36709]  313  181 1581 5813  208    1  161 1711  478  795 1885 1499 5109 5211\n[36723] 4419 5222 4065 4380 1634  456 4087  116  407 1223  497  271  199  223\n[36737]  317 3565 5286 4714  746 1160  406 4060  251 2175  673 2054   51  586\n[36751]  124 1735 2142 1847 4880 1727 3814 5736 3675 3574  698 4249  357 1193\n[36765] 5208  642 1131 1529 1025  925  276 1808 4412 2067 4187  625 6181 2343\n[36779]   23  187 4255 4297  325   19  518 4495  488 5711 1110 2602 4632  483\n[36793]  411 1275  798 2144 3828 4628  954 3475  695 2452   53 1479 1647 3230\n[36807] 1599 2098  971 4679 3611 2177 1307 1139  327 5309  127  398 1048 2069\n[36821] 1875  179 1211  604 3493 3302  453 1623 1519 1618  401 1341 2146 1212\n[36835] 1191  766 2380  323  423 1978 4567  264    3  476 5675  998 1256 3330\n[36849] 1143 2319 2451 5273 3616 3361 3386 1947    1 1174 1496 1685  436 2219\n[36863] 4445 3404 2502 3644 3670 1401  300  667 5373   34  178 1289 1318 3466\n[36877] 1697 1131 1375 1895 2148 2179 3291  411 1145  316 1734 1629  482 1030\n[36891]  505 2095 3388 1641 3795  165 3807 3508 3461 2043  781  308   15  483\n[36905]  456 5816 1054  841 1158 1565 3848 4640  117 1280 1802  681 1338 5299\n[36919] 4141 3616  527 3937  137    1 5378 1073  213 2150 1151  118 1798 5395\n[36933]  348  431 2247 2402 3852 5283 5207 1779  617 3305 1170  686 1783  581\n[36947]  432 3567 1232 2183 2449 1493  477 4687  703 1296  553 3211 1639 3983\n[36961]  643 1481 4335 3669  246  841  301 3231 1995  286  927 3340 2152 2815\n[36975] 6054 3393  325 3326 1164 1945  161 3846 1902 1155 2297 3070 1935 3359\n[36989] 3663  145  635  673 3493 3318  802 1819  500 1554 6049 5181 1734  341\n[37003] 2285 1231 1107  575 1600 3588 2347 3822  133  424 3202   95 1729  371\n[37017] 3527 3391  587  349   85  745 1714  257  311 2185  843  446 5712  395\n[37031]  226  256 1982  573 4100  460    4 1246   83 2280 1942  685  141  591\n[37045]  598 2459 1705 1593 1373 3532  491  554 4580  343 1638 5199 2181   65\n[37059] 3357 2154 2187  485   31 2480 2793 3075  331 1064 5713  423 3540  629\n[37073]  181  847 1695   27 3523 1410 1171  269 1801  287 1619 2088 3347  415\n[37087]  375  516 5091  413 1394 3327 2231  211   89 1365  199  708 2949  706\n[37101] 2156  292   45 4978 1105 1119  167 2189  256 3622 5370 1499 2443 4326\n[37115] 1122  512 3199   95  494 1635 1171  894 2471 1109  884 5298 3448 2351\n[37129]  434  291 1692  687 1516 4662  408 3216 5293 3310  418 1117  283 3411\n[37143]  134 2223 1373  509  345   86  320  337  535 1078 1585  360 2158 4352\n[37157]   67 1185  172 4576 1629 3824 3542  918 1161  837 1407 2042 1185  359\n[37171] 1013   17 2302  711  425 3580 1854 3044 2191 1611 1576 3526 4113 4245\n[37185]  578  775 2019   87 1165 4181 2331  442 1022  215   83 1321 4502   61\n[37199]  726  177 4171  435 1206  926 3849 1139 3771  525 2002 2391 2160 3301\n[37213] 3486 3932 2454  353 2488 3325 2202  245  389  359 3365  691 1053 1729\n[37227]  235  193 2193 4370 3674  263 3591 2988  795  490  543 3134 4684  119\n[37241] 1429 2057 4667  161 1526  626  201 2139  363   29 3320   71  237  153\n[37255]  693 4201 4131 1473 5387 1083 3349 3433  225  947 2195  404 3573 5274\n[37269] 1528 2039 3604  105 4085 1485 1751  209   21 2065 4204 2314 3330 3662\n[37283]  915 1715 2142  883 1464 5769 2437  702  299 2307 1049 3374 3304 2159\n[37297] 2067   19 1113 1224 1691 1071 5815  443 1665 3843 4127   65 2131 3384\n[37311] 4191  382  427 1193  669 1435 2370  695    5 3513  985 4224 3470 3395\n[37325] 2197  318 1147 3459 4195 5306 1651 1039  347 1205  418 1128 4509 2698\n[37339]  775 5714 5956 1271 3885 4372  493  185 3331  371  645  305 1371  135\n[37353]  771  415  415 1247 5268 1615  169  523  471 4368 3603 2580  208 5909\n[37367] 1103 5209 1295 1416 3660 1677 3535 4321 1712 1543   97  523 5311 4885\n[37381] 1066  306  486  108  234 5048  718  475 4397  499 3621 2002  327 2680\n[37395] 2520 4348  745 5383 3317 5811 3281 3416 3556 3572 3689 3748 2134 2136\n[37409] 2181 2751 3825 3833 3842 3843 3813 4106 4133 4140 4144 4175 4312 4333\n[37423] 4361 4377 4382 4294 4395 4411 4536 4572 4596 4672 4682 5038 4543 4949\n[37437] 5287 5601 5904 4193 4202 4695 4696 4705 3317 3357 3488 3445 3525 3538\n[37451] 3555 3854 4033  329 1156  881  598 2243 1714 1403 2055  371 1175  601\n[37465] 5661  345  563  731 5716 1103  654  698 1919 1772  939  303  883 1884\n[37479]   27 4471  303 2085  494 1205  575  797  675  905 4393 2802 1066 1099\n[37493] 1144  211  495 2267   27  525  453 2158  421  265  540 1263  683  331\n[37507]  482    3 2285  420 1547 4111   23 3829  269 1415 2418  399  305 2003\n[37521] 1345   15 2493 2079 1456 1439  183 1289  831 2279  425   11 1198 4122\n[37535] 4246  183 1506 1600  163  307  461  807 1216 1135  279 1273 1733  901\n[37549] 3847 3370 1152 3842 1111  245  449 4548   33 1717  561 3353 1271 2431\n[37563] 2047 1511 3363 2702 3052 1959 3538  210  785 3531  315 1879 6177  929\n[37577]  183 2870  677 1357  409 3478  936  446 3611  219  281  281   84  403\n[37591]  397 1831 1429 3419   59 1843 3868  443 1157  208 4348 3492 3407 2119\n[37605] 2280  478 2071 4326 5813  353  883  544  301 4380 4510  313 2173   63\n[37619]    5 4866 1262  502 1747  181  120  431  273 1121  795 3565 2445 1581\n[37633]    1 1499   15 5222  208 3317  407 3841 1223  161  271 1634  116  497\n[37647]  189  885 3611 5370 2395  199 3675  317 1752 1885 4240 1519 5373  251\n[37661] 5463 1689 2142  586  874 1109  523 5711   51 1160 2457 1296 4255 1030\n[37675]  411 1651 1808  518  954 2067  893 4495 4187 4572   19 4632 1131 1529\n[37689]  925 2430  325 6181  642 1452  625  179 1711   23 4412 1263  971 2602\n[37703]    1 3828  483 1275 3230  695 1479 5174 1647 3466 3285  405 5208 1599\n[37717]  187  604  905 1307 4679 2098 2177  127 2452 3493 2380  703 5461 1892\n[37731] 5309 5211 1211 3461 3807 1875   53  401 1623 1120 1451 2219 3386  404\n[37745]  680 2451  423 1830    3  323 3616 3670 3572 4567 1605 1947  998 1256\n[37759] 5675 1143 2965 1191 4434  329 3361 1685 2502 4133 1174 4649  300 5951\n[37773] 1845 1131 1697  553 3388 1421  178 1663 2181 1622 5378 1401 1791  165\n[37787]  781 1515  760  505 1318 1705 3340  411  687 1641 5736 2086 3305  348\n[37801] 1172 3813 5067 1199  308 4417 2043  483  431 1143 1639 1798 1830 4687\n[37815]  117 1779 4395 6054 1802 1073  500   15 3567 1373  118  456 2480 2247\n[37829]  686  927  394 1151 1783   34 3588 1170 1065  213 4171  337 5712 3669\n[37843] 4148 1493 5956  286 1232  703  217  257 1819 4144 3326 1107 2815 1171\n[37857] 1958 3359 3070 2285 3231 3426  325 1734  573 1164 2347  802 3595 3391\n[37871] 3846  477  343 1744 1839 2181  161  145  511 3663 2297  799 1618 3202\n[37885]  575  500  341 3128 4087  841 3416 1600  804 3049  745 4120   85  527\n[37899] 1942   83  301  685  581 1695 4181 2088 4249  843 3459  256   31 3817\n[37913] 4662 2280  424 2793 1117 1706 3523 1982 1299 2459  635 4991 1593  847\n[37927] 3075   95 3540 1105  543    4 3812 1902 3511 2302  172 5293 5615 1156\n[37941] 1410 5213 3347 2443 1161 2488  141 2231  215 3531 1373 3825 2949  423\n[37955] 4175  181 1394  320  252 3155 1801  617 1365 4201   27 3448 2471  283\n[37969]   65  415 1554  133 1854 3556 1585  894  199 2580  211  345 3216 1119\n[37983]  387 3365  167  413  587  918  551 4294 4537 1725  706 1712 3301 3310\n[37997]  837   86 1185 1109 1635 1626  347 1064 4382 1284  623 1178  327  687\n[38011]   67  291 1751   61 5484  247  425 1185 1703 5514  299 2351 1516  244\n[38025] 3283   45 2019 1053 1611   17 4245    5 1639 2202 2002 3044 3486 1075\n[38039] 5680 3674  711  535  153 4121  359  359  442  288 4131  669  119 3325\n[38053] 3591 1576 3134  375   83 4191  645  245  435 3542 3320   87 2159 2391\n[38067] 2454  881 1729   21   71 2307  708  577 1526 3304  235  795 3771 3827\n[38081] 1271  237 4532 1416 3470 1047   65  225  201 1482  418 1083 1022 5714\n[38095] 3535 3330  702 3395  915  258 4536 2314 3885 2065  105 4212 1205 1295\n[38109]  523  347 1692  135 3374 5811 3336 3809 1371   97 3621  185 5904 1066\n[38123] 1103 1816  234  108  718 2002  745 3507 3521  234  745  322 2243 1403\n[38137]  371  279 1739 5716  731  303  939   27  345 5747 1989 1175  883 1103\n[38151] 4274 1099  303 3550  421  423 2085  905 1205  538  675 1144  525  211\n[38165]  453 2023 6177   27 1177 1439  331  318 1879 4166 1263    3  269  683\n[38179]   23 1547  420  315  534 3845 2285 1299 1107  399  305 1345 1265 1415\n[38193] 2493 4122  424  260  831   15 1444  497 4111 1736  461  495 1381  443\n[38207] 2279 1289  820   11  183 1808 4246  163  807 1273 4315 3810 4420 1216\n[38221] 1717 3052 1506  901  245  449  450   59 1455 1733  909 2047  307 3363\n[38235] 5675  885 1959 2431 3538   33 1111 1491 1492 3611  936 4953 1271 1511\n[38249] 2457 3272 3353 3489 1154 3370 2702 1429  857  183  914 3317  929  677\n[38263] 1357  409 3478  397 4422   84 3868  219 1401 5195 2053 3492 3521 2119\n[38277] 2267  398  281 2280  403 1843 1668 4638 5666 4711  276 3531  447 1643\n[38291] 4230 1197 1626  207 3507  189 2445  353   15 4388 1030  673  431 2173\n[38305] 4364 1747  502  795  120   63    5 1581  313  181 3806    1 1885 1711\n[38319] 1121 5109 1499 4087  997 1634 1120 5222  271  407 3565  199  116 3579\n[38333]  208 3841  301  746 1223 1143  124  223 3814  317 5959 5475 1462   51\n[38347]  251  515 1030 3285  411 3419 2067 4255 5736 1847 5711  994 2319 4625\n[38361]  586 3675 3644 1735  456  925 3611 1745 4495  654   53  642 4412 4187\n[38375] 1131 1529  604   19  325  518   23 4632 2343 1034 4148  187  954 1110\n[38389] 4140  483  179 3689  971  255 3828 3281 2098 5174 1275 2452 1647 1341\n[38403] 5309 1160  798    1  695 2177 1479 3493 1875 1599 3230 3466  703  453\n[38417] 1010  327 1307 5211 5373  127 2380 1211  698 4099 2219 4445 1623 1519\n[38431] 1174  401 1256 3386 3807 2602 2451 1212  598  264  323  998 1191 1685\n[38445] 3404 4188    3 3572 1978 3508 3461 1496 2179 3670 3616 4866 1143  329\n[38459] 3361   34 1947 3330  252  316 1401  587 3293 3848  423 4679 1280  300\n[38473] 2502 5378 3291 1697 3616 3787  178 4335 1145  553 1131 1375 3388 1895\n[38487] 1583 4640 3211  482  137 3818  781 2181 1318 1734  681  432  411 1641\n[38501] 4092 3937 5283 5299 6054 5207 3795  165 2095 5395 3805  505  841 1158\n[38515] 1711  308 1178 1054 3340  331 2043  456 1639   15 1311  431 1779  537\n[38529]  117 3817 1338 4395  581 1802 4687 5181  927 3305  348 4193 3493 3567\n[38543] 2150 1373  118 2480  625 2402 1783  431 4171 1073    1  643  213 2247\n[38557]  686 1663 2449 5712 1170  246 4100 1151  337  349 1232  527  301 3669\n[38571] 3527 1205 1945 2181  365 4141 1605  703  460 1231  477 1819 4949 4567\n[38585] 4596 3983 3588  841 1995 4133 3318 1902 6181 1935 3359  258 4212 1171\n[38599] 3326 3231  500  479 2815 3070 1107 2297 4695  802 4181 1164  685  286\n[38613] 3391  573  745 4978  799 3202  145 1155  635   95 2285 1483 3663  350\n[38627]  575  161 4377  341  325  320  673 1163 1982 4502 1246 1600 4576  133\n[38641]  404 1638 5370 1942 1729  424 4580   85  494 1714  292   83 4572 2185\n[38655]  257 4667 5293 2088    4 2280 1734 3199 3488   31 2154 5091 3748 1705\n[38669] 1156 1117  141  287 3580 4090 3347  543  847  269  766 2793 3825 3416\n[38683] 4326 2459 3523  375  256 3540 1105 1245 3849 4144  343 5601 4684   65\n[38697] 2347 3459  134  172 3622  485   27  181 1410  423  629 1394 3357 2949\n[38711] 2302 1373 1064 3813 1801 1695 1365 3216 1554  283 4294  415 2443 3448\n[38725] 3411  516 2223 3327 2231 2042 4662  884 1619  211 1585  708  413   95\n[38739] 1454 3932 1499 1182 1171  408 1048 4201 4175  617   45  199 2189 4113\n[38753] 3365 3771 1119  376  167  246  327 2580  541  345 2488  918 3556 2067\n[38767]  843  501   89  291  488  193 4202 1516 1162  837 1078  687  434 1635\n[38781] 1482 5298 3819 4195   86 1185  509 1161 4411 2471  623 3878 4380  327\n[38795]   67 3713 5713 3843  299   61 2191 4991 1321 1629 5387 1407  866  894\n[38809]  926 2331  263  312  353 1139 4382  706 3075 1185 2139  535  318 1109\n[38823] 4245 1022 3301 3526   83 1075  209 1113   17 3044 1611  305 2019 1854\n[38837] 1053  691 3513 3542 2351 3134 4705  711  288  418  425  359  153 2002\n[38851] 1751  389    5 4131 2057  442 5287 3320  177   29 1013  119 2698 4278\n[38865]  359 2193 3854 2039  883  169 3433 1691 1715  435 3591 3310 3445  245\n[38879]  693  947 1473 1528 2454 1576 3325 1128 3486 3330  669 1526   87 3674\n[38893] 4191 2159   21 1435 3304  237 3349  222 3331  235 2142  795 4224 4361\n[38907] 2370 5274 1429 1485  225   71  208  363  161 5383  645  201 2437  490\n[38921] 3573 1466 3555 3662 3470 2131 2195  415 1271 1147 5769 1083 4121   65\n[38935] 3604 4370 1651 1729 1224 4127  352  418 1703 2307  695 4543  105 1464\n[38949]  135 5306 2065 4312 4348  915 3374 1071 1615 2314 5956 1680  382 3395\n[38963] 2520 5714  702 5268 3535 4085  354 3885 2202 5038  771 2197  985  475\n[38977] 1295 2680 4536  443  523  371 3384 2164  371  499 1247  427 1416 5811\n[38991] 1205 4106  775 3317 4368 5209  347 6073 1677 5815 3264 4583   97 3833\n[39005] 3621 4672 4885  185 4397 4186 1103 3660  523 5904 1371 3603 3842 5048\n[39019] 4682 3525 1816 1066 5311 4333 4321  486 2002  718  108 2391  482  561\n[39033] 2751 1843  252 2243 1403 1714  301 2167 1909  563  601 5068  407 4137\n[39047]  731 5747   27  371  303 5716 2180  464  345  939 1198  279 1103 1772\n[39061] 2609  883 3525 4533 6177 1175 1919 4241 3351 4150  423 1205 5503  303\n[39075] 3550 4424 2085   16 1668 4471 2114 1686  797 4334 4393 1099  905  675\n[39089] 2802  495 4535  575 2023 4422 4166 1144 4522  211   27 3496  453  525\n[39103]  511 1263  318 1439   23 1454 1177 1547 3599 3676  343 2169 3829 4122\n[39117]  269 1879  482  537 3769  315  331  399  404  420 1107  683 1183 3845\n[39131] 1345    3 4155 1265  305 2493 2003 2285   15 3547  421  821 1289 2279\n[39145] 1162  183  461   11  831  183 3821 4111 3759  163 1808 1717  424 1455\n[39159]  807 4246  901 1415 3052 1733   59 1273 3370 3363 1109 2047 1216 3611\n[39173]  544  261 2171  307 1111  450  561  245 2138 3538 1511  885 1491 1959\n[39187]  909 4364 2457 2431   33 1271 5242 3528  346 3489 3272 4866  857  333\n[39201] 5463 3353 3317 1154 1167 3507  183  677 4691  914 1429  929 4537  403\n[39215]  409  443   84 1357 1831 1381  219  478 4388 3868 2267 2280 2119 1843\n[39229] 3492 3355 5195 2702 1157 3478 4638 5813  226 1289 4249 4252 1401 5475\n[39243] 2395 3531  447 1492 4419 2071 4711  994 3841 3419 2445 3810 5288 3407\n[39257]  189  301   15  434  235  598 1643  207 5286 5220 1600 1030  431  795\n[39271]    5 3579 1747  120   63  181  313 1711    1 1121 3827  874 5211 1499\n[39285]  161 5222  407 1885 1581  116 5109  497 4380 4087   73 1223  456  223\n[39299]  199 3565  271  317 3814 4880  208 4060 1634  124  746  281  251 4714\n[39313]  397 1160 1030  406  673  586 2175   51  258 2142 5736 4255 1480 3675\n[39327] 2054 3573 1847  276 5208  357 2319 1735 3644  411 4187   53 1808 5711\n[39341] 4065 3611  925 1529 4412  518  604  325 1131  642 4632   19  179 4297\n[39355]  488   23 2343 6181  187 1025  625  954  971 1110 2602  483 3521 3281\n[39369] 5309 3828    1  798 3475 2098 1275 3689 3230 2177 1341 1479 2452 3493\n[39383] 5273 1010 3466  695 1599 1647 4679 1307  398 4495 2380 2069 3302 1211\n[39397] 4628  453  127 2219 1139 1618 4445 1519 1623 3807  327  998  566  264\n[39411]    3 1875 3386 3572  766 1212 1174 1191 2451 1685 1947  423 4567  323\n[39425] 3404  667 2179 1978  401 3461 1143   34 1496 3361 1163 1256 5373 2502\n[39439] 3330  329 3616  352 3848 3670  300 4141  553 3616 4335 1444 5675 1697\n[39453] 3291 1131  178 3852 4640  316 3211 1375 1895 1158 1280 3508 1145 3388\n[39467] 2148  781 2181  165 5207  432  482 5378  411  681 6054 1798  137 3937\n[39481]  505 1734 3795 1641 2095 1318 5816 5395 3822  308 5299  841  348 3340\n[39495]  456  331  431   15 1639 2043 1712  927 1122 1054    1 4687 1779  643\n[39509]  117 1294 1338 3493 5181 3305 4395 1802 4100 2150 1151 1783  431 2183\n[39523] 1073  436  686 4193 2402  118 1373 2449  246 2247 2480 1481  213 1170\n[39537]  349  673 1663 5712 1232  587  337  365 4171 3527 4696 5283  301  286\n[39551]  460 1493 1902 3669 6049  703 3567 1296  477 1231  841 1819 3983 4140\n[39565] 1995 2297 4662 3588 4133 1171 3070 3326 3359  370  395  446  222 2815\n[39579] 3231 4144 3393 2285 1935 1164  255 5713  575 3391  802 1734  500 4949\n[39593] 2347  685 1107  325 2181 4572  161 3846  573 1483 3663  698 1945  145\n[39607]  745 5199  581 5370   95  320  399 4181 1155  341 4326 3202 4377 4596\n[39621] 3318 3532  133 1554 2185 4576 1638 4580 4978  322 1982  292 1729  257\n[39635] 1246  424 2088 4502   83  404 1714 5293  843    4 3416 3459 3825 1117\n[39649] 3488 1942 1705 5091 3748  491 3199  375 2154 3357  589  269 3540 1105\n[39663] 1593 3580  847 3523 2280 2459 4352  256   31  543  134  343 2302 3357\n[39677] 3075 3824  141 1156 2187   85 3327 2231 2443 1463 2793 3622  485 1373\n[39691] 1410  629 1394 1695 3771 1801 3813 4175   27 4294 5259 1619 2949  172\n[39705] 4684  578 3216  283  516  884 3347 1161   89   65 2223  423 3932  512\n[39719]  708 4705 3411  413 4695 2189   45 1119  415 1665  211 1171  408 1048\n[39733]  199  894  167  345  706 4411 3556 4113 2580  918  246 1064  527 4202\n[39747]  652 2988 2042 1635 1109 3365  193 5298 4195   86 1185 2471 3849 1516\n[39761]  291 1585 5601  687  418 1078 2488 2751 3843   19 3448 2156 1499 2067\n[39775]  327  525  299 3713  181 2351  509 2158  209 1185   67 2191 3301 1407\n[39789]   61  359  360  535 1692  353  263  926 1321 2139 1165 5287 4245 1022\n[39803]   83 5387 2019 2331   95 1284 3542  472 3310 1629 2002  318 1751 2057\n[39817] 1053  442  775 1611 1013  153 3044 3513    5   17 2698 3526 1139 4131\n[39831] 4201 3486  389 2202  425 3134 5274 1576  305 4382 2039 4667  359  669\n[39845]  169 3591   29 1113 2160  177 1526  435 3674  245  119  203 3854  711\n[39859] 1854   87  693 1691 1128 1528 1715 1473  237  645  947 3320 4191 3445\n[39873]   71 3330 3433   21 1193 4361 4370 1429 4224  883 2370 2391 2142 1435\n[39887]  363 5769 3470  235  201 2193 1115 3331 1729 2437 5268  208 5909  225\n[39901]  161  490 2159 3573 3349 4127 3662 3374  695 5383 1147 5714 4204 3604\n[39915] 1651  415   65 2195 2131 1271 1083 3555 2307 2162 4106 2454  795 4543\n[39929] 5956 3535 3885  702  418  837  771 4312 1485 4085 3843 4321 4333  105\n[39943] 3304 4348 1464 1680 2065 1039 1049 1545 2314  915  135 3395 4536 5038\n[39957] 3325 2680 1224  371  382  354 5306  502  374 4397  443 2164 1416 4672\n[39971] 4033 1205 4368 5815 2520  347  523 3317 2197  427  499 1247 3384 3603\n[39985]  475 4885 5811  985 5048 5209 1677 4682  775  471 4372 3833   97 4509\n[39999] 1295 3621 1066 1371  185 3660 3842 5904 1103 3525  523 5311 1816  626\n[40013]  108  234 2002  486  718  745 2067  691 1843  252 1403 2243  939 1714\n[40027] 2167 2134   27  731 1029  698 1909  301  601  371  563  303 4533 2180\n[40041] 5747 5716 1175  464 4137 1919 3525 5068 1103 2609 6177 1772  345 4471\n[40055] 3351 4150 5503 4241  797 2085  423  303 1099 4334 4424 1205 2802  905\n[40069]  575 4393 1668   16 4535  675 1454 1686 2023  495 4522 4166  211 4422\n[40083] 3496  525   27 1144 3599 1149  343  511  883 1547 1439  404  315 3676\n[40097] 1263  318   23  821  331  482 4122  683 2169 3769    3 1879 3550  399\n[40111] 3845 3829 4155 2285  420 1415 1345 2493  261 1265  305  537   15 1183\n[40125]  424 2003 3547 1289  212  183  831 1381 1548 3821   11 2279  183 3759\n[40139] 1107  163  461 1717 1808  807 1289   59 1216 1733  901  561 3611 3052\n[40153]  450  307  544 4246 3363  245 2171  909 4111 1111 2431 3370 4866 3528\n[40167] 1271 3353 3538   33 2047 1492 1511 4364  885 1109 3489 2702 1959 2457\n[40181] 2395 3272 1154 3317 5463  857 1167  346  929 1429  183 3827  914 2136\n[40195]  454  677 3868 1357 2138  409 3478  294   84  219 2119  397 5195  269\n[40209] 4388 3579 3521  281  403 1157 1843 1831 2267  443 1583 5242 4691 3492\n[40223] 2280 3531  447 4419 4711 2071 4252 5813 4638 1401 4249 5475 3841 3810\n[40237] 5286 1273  279 1626 1643 5220  189 2445  301 3407  997 3355 2173 1747\n[40251]   15  207   63  795  431  994  120  434  235 1711 3419 4537  181 1581\n[40265]  313 1121    5  208 5222    1  161 1499 1030 1885  407 5288 4065 1634\n[40279] 4380 1223   73  497 4880 5211  223 3565  746  456  317  124 3814  116\n[40293]  199 4714  251  256 4087 4060 1030 5109  271  586  673 2054 2142 2175\n[40307] 3573  411 5736 1847  654  515 5711  276 4255  357 2319 3675 5208 3644\n[40321] 1735  642  925 3611  325   53 1529 2067  625  179 2343  518  604 4297\n[40335] 4632   23 4495 6181   19 1456 1808 4412 4187 1131  483  488 2602  187\n[40349] 1110 3689 3828 3475 2098  502    1  954  798 1275 5309 1647 2452 1479\n[40363] 3230  971  695 1599 5273 3466 1875 2177 4679 1307 1341  327  453 3302\n[40377] 5373 2380  703 4445 1211 2069 1139  127 1422 2219 4628 1519 1618 3807\n[40391] 1174  766 3572 2146 3404 3386  222  533  264 1947 3493  423    3 2451\n[40405] 1256 5675  667 3461 2179 4567 1685 3616 3670 1978 1143   34  551 1496\n[40419]  329 3361 4640  323 1401 3330 3848 4335  352 3817 1318  300 1131 1651\n[40433] 3616  178  401 5797  553 1444 3211 2502 1145 2148 1280 2181  411 6054\n[40447]  432 1158 5207 1375  137 1734  165 3812 3937  781 1697 3291  681 1641\n[40461] 3822 2095 3388 5299 1798  507  482 5378 4395 1054 5395   15 2043 3340\n[40475] 1639  458  436 4687 1122  431  348 2449 1779 3305    1  117 5181 1073\n[40489] 1783 3567  118 3493  643 2183 1802 4091 2150 1373 2480  431 2402 1663\n[40503]  213 1151 2247  246 1170  331  349 5283 4100  673  337 3669 1232 4171\n[40517] 1199  587  286  686  477 5713  460 1945 1493 5712 1296 6049 3318 1819\n[40531] 4949 5370 4193 1902  301 4141 3588  365 1231  703 1995 4662 4696 4596\n[40545] 2185 2815 3359 2297 3846 3326  446  575 5199 1171 1935 2152 1895 4144\n[40559] 3070 2285 2347 4978 3391 1115 1734  685  841 1164  161  635  802  573\n[40573]  745 1483 3393  325 2181  145 4377 4572  320  395 3983 4326 3532 1107\n[40587]   95 1155 1982 1744 4181  133 1729 1554 4576 1942 4502 3231  404 4133\n[40601] 3663  292  424  257 4580  322   85   83 1246 3825 5293  799 2088 5091\n[40615]  843  256    4 1638 3416 2280 3357 3488  415 2154 3199 3748 2793 1705\n[40629] 2187  341  847 1714 1117  141 1151 3540 1156  543 1619 3075 4352 2302\n[40643] 3357 3824 3347   31  485  527  172 3327 3622 1410 3771 4684   65 1373\n[40657] 2231  629 5601 3580  500  370   27  423 2949 1801 3813 1365 2443 1394\n[40671] 1284  884 4294 1161  516 3448  415 4695 3411 4201  413 2042 1171  283\n[40685] 1585 2156  343   45   89 1499  269 2189 2988 4705 3523  706 1695 3932\n[40699]  211 2223  894   95 3216  181  408  226  512  578  918  246  581 2459\n[40713] 2488 1064 4113 2580 1119  167 4411 1105 4175 1682 4202  291  598 1593\n[40727] 2471  327  199 3849  837 2067  687 4195 1109 3310  193 1516   86 5298\n[40741]  418 2751  708 4667 1448   19 3843   67 1185  327 2351 1078  209 1635\n[40755] 3202 1185 1321 1629  299 2191 2158 1407 3301 5387   61  535  345  359\n[40769]  263 3556  626 2139  691  926 3526 1463 5287 2331  318   83 2019  360\n[40783] 3513 1177   17 1022 3713 4382 1611 1854 4245 2002 5268  491 1751  153\n[40797] 3486  711  442 1139  425 1113  305 2698  353    5 2391 2202 3044 3320\n[40811]   87 1053  389 4131  177 3674   29  119  669 3854 3591 2039 2160 2193\n[40825]  169 1715  258  883  947 1576 1528  435 1193 1691 1473  693 4191   21\n[40839] 3325  617 1259  645   71 3555 1224 5909 1526 4224 1435 3134 5769 2370\n[40853] 4361 3349 4370 3445 1429  235 1729 2142 2437  225 3470  208 3374 3573\n[40867] 3304 3843 3330 2131  415 3662 5038 1451 2162 1147  359 5714 4127 1271\n[40881] 5274 4543 4321 5383 2195 4106 4333 3433  418 2454 4312 3542  702  135\n[40895] 3885  771  795 1464 4085 3850 2314 4348 2065  915 1049 1039  306  382\n[40909]  354  375 2520 3395 4033  245 4536  363 2680  201 4204  105  695 5048\n[40923] 3331 1247 3384 2197 1416 2164 3535 3604  523 1205 3317 3365 5811 4368\n[40937]  985 1485 2307 1066 1295  347 3603  475  134 4397  427 4682 2159 1371\n[40951] 3823 4276 4672   97 3660 4373 4509  652  185 5306   65 3842 3525 1103\n[40965] 4885 5311  242 5904 5209 1816  234  108 2002  486  718  490  745 3281\n[40979] 3621 2140 2144 3459 3507 1843  252 1403 2243 1714  371 2167 5747 1909\n[40993]  301  939  563 5716 4533  345  731  279 2134 5956 5068 2180   27  303\n[41007] 1029 1175  698  464 4137 3525 1919 2609 1772 1103  883 4241 3351 4471\n[41021] 4150 3550  423 2085   16 4393 6177 1205  303  905 2023 4424 1668  797\n[41035] 1686 4334 4535  675  575 1144 2802 1099 4422  211  495 3496   27 4522\n[41049]  525  587 1149 4166 1263 1439  404 1879  315 3599  318  479  343 2136\n[41063] 3829 3769 1547  537 2169  821 4122  683  399   23  331  482 1107    3\n[41077]  269 2285 3845 1265  420 2493 1415  305  424 4155 1345 1381   15  212\n[41091]  183 1454 1548   11 1289  831 2279 2003  183 3821 4111  163 3676 3759\n[41105] 3547  807 1717  307   59 1808 4246 3052  450 1216  901 1273 3363 3370\n[41119] 1733  909  307 1959 1289  561 2171 3827 2138  885 2047  245 2395 2431\n[41133] 1111 2457 3611 3507   33 1511 3272 4866 4364 5463 1271 1154 2702 1167\n[41147] 1622  346 1109 5242  857  183  929 1429 3489  914 4691  327  677 1357\n[41161] 3579  403  478   84  281  219 1831 4388  397 3353  409 4537 5195 2267\n[41175] 2280 4711 3521 3355  443 4419 2119 3492 1157 1843 4638 4249 3528 1294\n[41189] 5475 4252 5813 5288  401 3419 1401 1626 2071 5286  235  447 2445 3810\n[41203] 1643 5220   15 3478  207 3538 2140 3841 1747  434 2173  301 3531 1030\n[41217]   63  795 1048  502    5  120  431 3407 1581    1 1121  313 1711  997\n[41231] 1885  181  208 1713  461 5211 1499  161  407 5109 4880 3565 4065 1223\n[41245] 1634 4380 4091  199  116  746 1112  271 4087 3814  223  317  189  456\n[41259] 4714  124  251 1030  357  586 5711 2142 2175  310 2054 3573  299 4255\n[41273] 1847  276  673 4060 1480   51 3675 3644 2319 5208  411 1808   53 4187\n[41287] 1529  518  925 3611  642 4297 1131 2067  604 4412 6181  325  488   19\n[41301]  187  179 1025 4495  625   23 3689 1110  483 2602  971  954 2343 3868\n[41315] 3281 2452 3828    1  798 3475 2177 4628 2098 2144 1275 1647 1341 3230\n[41329] 5309  695  453 3493 1875 1599 3466 1479 4679 5273 1307  327  703 2380\n[41343] 1572 3302 1139 1211 2219 2069 5373 4632  127 4445 1174 1519  401 1131\n[41357] 3386 3807  667  423 2146 2451 1212 3404  766  264    3  323 3330 4567\n[41371]  998 1256 5675 3572 1947  598 1685 1978 2179 3461 3670 3361 1163 2502\n[41385]  329  352 4640  482 3848 1401 1496 3806 3291 2693 1143 4335 1651   34\n[41399] 1444 3616  137  178 3211 1131  553  165 1145 2148 6054  781 2181 1158\n[41413] 1798 5797 1318  432 1734  411 3937 5207 3812 3616 5299 5378  300 1697\n[41427] 5736 2095 5395 3795 3388 1639  348 3822 1054  436  507  681 5283  456\n[41441] 1895  331  431   15 4395 4687 2043 1779 1143    1  117  581 5181 2449\n[41455] 1073 3493 1663  431 4091 4193 1783  246 1151 1373  686 3340 3567 1481\n[41469] 2183 2402  213 2150 2247 2480  118 4100 3305 1280  578  643  349  337\n[41483] 1170 1641 1232 1802 4171 3669 1493  477  286 4696 1296 5370 1945 1819\n[41497]  365  703 1231  301 3318 4949  841  460 3588 3983 1995 4141 4662  575\n[41511]  500 1744  395 1935  294 2297 3846 3359  446  652 4133  325  685 1902\n[41525] 2152  258  802 4572 5199 2285 1171 3070 2185 4144 2815 2347 1155 3326\n[41539] 3231  745 4596 4377  145 2181 6049 1164 1483  320   95 3202 1107 4181\n[41553] 4326  161 3393  341 1982  242 5713 1729 3532 4576 3391 4502 1246 4978\n[41567]  133 3663  257  322  292  424 1942 1554   85 1714   83 1638 5293 2088\n[41581]  843 3459 5712   31 4580 1705  491 3580 1734 1117    4 3748 2280 3825\n[41595]  134  343 5091 2154 3347  269  375  256  415 3523 1156  847 3488 1593\n[41609]  543 2793 3199 4352 3357 1105 3357 3824 2187 3075 2302 1619 3416 2443\n[41623] 3540 2459 1410  172  573  485 5601 3622 4684  423 1373 3327 2231  673\n[41637] 1695 2949  181 1394  629 1801  141 3813  884 1365 4175 1161   65  415\n[41651] 1284 2223 1463 2042 4294 3448 3932 3411   27 4695   89 1499 1585  512\n[41665]  516  407 2189  211  283 4705  708 2156 2988  706  996  894 4201  199\n[41679]  306 3216 1060   95  413  246 3365   45 1171  345 1083 2488  167 2067\n[41693] 4202 1682  918 1119 2580  256 4113  404 3556 1064  408  837 2471 4195\n[41707]  687  193 3849 5298 1078   19  209 1185  434 1109 2751 1516 1635  327\n[41721] 2351 1692 4382 4667   67 3713 1230 1185  691 1629  626  299 2158 2191\n[41735]  359 3843  926 1139 4411  291  244  535  263  360 1455  318   61 2019\n[41749] 2331 1321 5287   17 2139   83 1611 1022  726 3513 3310 1854 1407 1751\n[41763] 3542 2002  353 1053  425  305 5268 2057 3134  711 3325    5  442 3486\n[41777] 1113 4131 2698  177 3320 3674 1576 2202  359  669 3445  119  153 1715\n[41791]   29 5387 5274 3854 3330  693 2160 2193 3591 1691  237  389   87 1259\n[41805] 2039  169  947 1473 1526 3526 1127 3433  435 5383 4191  245 2454   21\n[41819] 1729 2391 5909 1528 4245 1193 3555   71 2159  645 3301 3304  883 2307\n[41833] 4224  235 2142 3349 1618 4361   86 5769 3331  795 1435 2370 4370 5714\n[41847]  208  161 1429 2437  490 5306 1271  201 3573 4127 2131 2162  292 5038\n[41861]   65 2195  415 3044  695 4543 3374 1147 3662 3604 4321 4106 3885 4312\n[41875] 4333  771  418 1703  363 5959 3843  702 1464 4085  225 2314 4348  105\n[41889] 2520 2065 3395  135  382 3470 4536 4204 4033  288  915 1680 1485  354\n[41903]  985 2680  523 4368 1205 5048 4397 5209  347 2164 1247 5815  427 3317\n[41917] 5811  475 3603 4885 4672 3384  617 3837 1416 1066  499 1295 3833 4509\n[41931] 4372 1039 3660   97 1543 3535 3621  185 1103 5904 3842 2197 5311 3525\n[41945] 1816 4247  234  108  486  718 2002 1371  745  255 3771 5503 3317 1843\n[41959] 2243 1403 1714  939 5716 4137   27  563 2134 2167 1909 2180  731 5068\n[41973] 5747 1175  303  301  464 1103  371  407 1198 6177  279 4533 2609  345\n[41987] 3525 4471 1919  883 5503 1772 4150 3351 4241  797 1205  675 3550  423\n[42001] 2085  575 1454   16 4424  303 1099  905 1686 4393 4535 2802 2023 1668\n[42015] 4422 1144  211   27 4334 3496  453 4166  525  511 4522 3599 3769  343\n[42029] 3676 1439 2136  404 1107  537  331  482 2169  315  318   23  683 1879\n[42043] 1183    3 3829 2285  252  821  269 1547  399 4155 1263  495 3845 1415\n[42057] 2493 1265  305  420 2003 1345 1177 4122 3547  261   15  424 1381 1289\n[42071] 1289 1548  831  421  461   11  183 3821  183 2279  163 1808 3759 4111\n[42085]  807 1717 4246   59 1273  901 1216  450 1733 3052  544 1111  307 1109\n[42099]  561 3611  245 2431 3538  885 1959 2047 5242 3353 1511 2702 2171  909\n[42113] 1271 1455 2395 3272 3363 2457 5463 1154  857 1492   33  327 1167 3317\n[42127]  929  346 1429  183  914 1357 3507  219 4691  409 4388   84  397 1831\n[42141] 3868  281 3489 3579 2267 3478  403  443 4638 3492 2119 5195 2280 1157\n[42155] 1843 3521 1294 4364 4711 5813 3531  994 4537 3528 3827 4252 5288  447\n[42169] 4419 2071 1626 3419 5286 3355  207  478 1401 3407 1643 3810  434 5220\n[42183]  189 2445   15 2173  997 2140 4866  431  235  120  301   63  502 1581\n[42197]  795 1747    5  181 1711  677 1030  313  874  161 3841    1  208 5109\n[42211] 5211 5475 1121 1499 1885 4065  407 4087 4249  497  746  199 4880 1223\n[42225]  116  223  456 3565 3814 4380  271 2138 1634  124 4060 2902  317 4714\n[42239] 1160 3370  251  586 2054  673 3573 1030 2175  276  406  212  258  411\n[42253]  357 3675 1735 5711 2319 1847 5208 5736 3644 1480 2067 4187  925   53\n[42267]  518 1529 4632 3611 4412 6181 1025 1131  642   19  179  187  488  604\n[42281] 2343  625 1808  325   73   23 1110 2602 4297  971 4495    1 1341 3828\n[42295] 4628  954 1275 1479 3475 2144 2098 3281 2452 1647  798  483 5222  695\n[42309] 2177 3230 5309 1875  453 3493 1599 4679 3466 1010 1307 5273  703  127\n[42323] 1211 3302 2380 1139 5373  327 4445 2069 2219 1618 2693 1519 3689  401\n[42337] 1174 3807 1623  566  264 1256 2179 2451  766 1212    3 1978  323 3330\n[42351]  998 3508  423 1685 4567 1947  667 3572 1496 4255   34  482 3404 3461\n[42365] 1163  352 2502  329  300 3670 3616 3616 1401 2146 1583  553 3361 1143\n[42379]  178 1697 1318 1444 1375 2148 2181 3388 1280  137 1158  165 4335 1145\n[42393]  432 1798 3937 1734 3386 1895  781 5378 5675 4331  411 5283 3211 3795\n[42407] 1641 5207 4640 3848  681 5299  308  316 2095 3340 1054 2043 1122 4141\n[42421] 1311  507  331   15  456 1639 6054  505  927 4687 3305 1783 3567 2480\n[42435]  118 1373 2183 1663 1151 2402 1481 2150 2449 2247  436 1779 3822  348\n[42449]  213 1170  431  581 1073  643    1 3493  673 5181 3669 3812  587 1232\n[42463] 4171 5712  477  431 1802  686  246 3527  286 1493  703 4100 3983 1902\n[42477]  841 1296 1231 5395 3393 1819  294 3318 2815 3588  395 1995 3326 2285\n[42491] 1935  222 3070  365 1734 1164 3231 3359 2152 2297 3846  349 2347 1107\n[42505]  399 3391  161 1155  500 1744 2185  446 4949 5713  685  802  117  325\n[42519] 3202  301 4395   95 4696  573 4140  145 1729 6049  341  745 2181 5370\n[42533] 3532 1483  575 1554 1638 5199 3663   85 1982  257 1171   83 1942 3852\n[42547] 4978  424  598 1714 4144 4181  322 1945  292   31 2088    4 3459  843\n[42561] 1246  337  698 4377 3540 3075 2187 4596  269 3580 1705 4580 2280  375\n[42575] 3347 1105 3523 1117  141 3416 2793  343 1593  320  543 2154 4352 2302\n[42589] 3748 3199 1619 2443 3357 1156  847  256   65 3327  181 3357 2231  629\n[42603] 1373 1394 5293  423   27 1801 3488 4684 2459  134 4576 1410 3622 1365\n[42617] 5091 3216  283  415 3448  516  491 2223  884 3932   89 2042 2156  413\n[42631] 1499 1463  211 1161 3825  172  706 3771   95  199 2189 4193 4133   45\n[42645]  133 1695 3813  408 4175 1119 3365 1171  525 1284  460 5601  918 4294\n[42659] 4326 4695 1665  345 1585 4201  708  509  578  894 2067 2471 1185  652\n[42673]  687  193 2949 1516 2580  291   86 4113  167 1048 2751  837 3310 4411\n[42687] 1635   67 2351  434 3824 1109 2988  418 4502  512  691 1200 3713 1407\n[42701]  535  359 2191 2139 4195 1078  626   19   61  263 4202  299 5298 1185\n[42715]  527 4410 4572 3849 3542 3513 1629   83  926 1022  360 1321 5387 1064\n[42729] 2488 1600 1139 1013 1751 3843  318  246 4667  425  209 4245  442 1854\n[42743]  775  711 3301   17 2057 1053  153 3411 3526 2202  726  327 2698 2002\n[42757]    5 1576 3325 2331 3320 4705 1611  177  119 1131 2039  359  305  669\n[42771]   29 1113 3854 2160 2193   87 3433  435  947  169 3445  883 4191 1691\n[42785] 3556 1473 1729 3591 2019 2159  693   21 1715 3486 3134  245   71 1435\n[42799]  235 3331 2370 3304 2391 1115 1429 3470  795 2437 4361 5287  225 5268\n[42813] 3555 1128 1528 3330  589 1526 1485 5769 2142  363 2307 4662  490  203\n[42827] 3374 1193 3674  201  415 5274 3843 1147 5383  353  161 2162 5714 1271\n[42841] 3662  485 4204  645 4127 2131 4131 3044  237 1083 1651  695  702 2195\n[42855] 3885 3573 2454  418 3535   65 1464 1049  105 5306 4224 2314 2065 1680\n[42869] 4333 4370 2680 5956 4106 1039 4543  288  915 4321 3395 4033 5909  371\n[42883] 1224 2520 3604 3349  354  135 1247 2197  382 4536 2164 1295  523 3384\n[42897] 1066  404 5209  427 1416 3317 4397  475 5815  775  347 1205  771  471\n[42911] 4085  985 5048 1677 4372  499 4672   97 3621 4885 5038 1543 3603  185\n[42925] 3660 4509 4368 4682 4348 1371 1183 5811 1103  208 4312 3833  523 3418\n[42939] 1816 5405  486 2002  718  108 5904  234 3842  745  389 2142 2158 4382\n[42953]  745 1843  252 1714 1403 2243  939 2134 2167 4533  303 1909 4137 2180\n[42967]   27  601  731  371  563 5747 5716 1175 5068  301 1198  464  279 1919\n[42981]  345  883 2609 6177 1772 3525 4241  407 4471 3351 4150 5503 3550 2085\n[42995]   16 1205  675 4334 4393 2802 1454 1099 4424  303 1686  797  423 2023\n[43009]  575  905 4535 1144 4166 4422 4522  211 1668  495 3496  525  511  453\n[43023] 1103   27 1622 3599  343  318 2136 3676  315 2169    3  537  269 4122\n[43037] 1879 3769 1263  420 1547  683  331  821  399   23 1299 1415 2003 1439\n[43051] 1107 1345 1265  305  404 2493 2285   15  261 3547  424  183  322  421\n[43065]   11 3845  831 1289  482  183 2279  461 4111 3759 1808 3829 1381  163\n[43079]  807 1273 1717 1216   59 3821  901  431 3052  307 3538  561 1111 3363\n[43093] 1733  909 3370  245 2138 2171 1511 2431  544 2047 1959   33  885 4155\n[43107] 1177 3827 1271 4364 2702 3272 2457 1154 1167 4246 2395 1109 5242 3528\n[43121] 3489  327  857 3353  183 1429  346  677 3507  219  397  478  409 4691\n[43135]  914 3579 3521 1357  403 1480 1157 4388  281  443 5195 3478 1831 3868\n[43149]   84 2267 3355 4252 2280 2119 4711 3531  447 1843 5475 1401  994 4249\n[43163] 4419 5813 3419 4638 1626 3492 5288 3407 2071 3841 4326 5286 2445  189\n[43177] 3611  434 3810   15  301 5220  997 1747 4537  207 2140    5  502  235\n[43191]   63  795 2173  120 1711  431 1121 1548 1581 1030  313    1  208 5222\n[43205]  161 4065 1643 1499  929 4380 1634  199  407  874 1223 4087  116  456\n[43219]  746 5211 4880  271 1727  223 1885 3814  124 3565  317 5109  181  251\n[43233] 4714 1160 4866  586 2142 2054  276  673 1030 2319 1847  698 2175 5736\n[43247]   51 3573 1193 4255  411 5711  357 3675 1735 3644  406 1808 2067   53\n[43261]  325 3611  518  642 1131 1529 4412  604  488 1025 6181  625 4297 4495\n[43275] 4187 2343  187   19   23 2602  179  925  954 4632 1110 3689  483  971\n[43289] 3281 3828 2144 3475 2177 2098 4060  497 1275 4628  798 1479 1647 5309\n[43303] 1341 3230  695 2452  453 5273 1875  398 1307 3302  327 2380 5373 1048\n[43317] 1139 2069 3466  127 2219 1211 2693  401 1519 1618 1174 3493 1623 1599\n[43331] 3386  264 1212 3572  476 3330 5208 2146  423    1  766 3404  667    3\n[43345] 1256  323  998 2451 3670  482 1191 3461 1685 3305 1143 3361 4679 1947\n[43359] 1496   34 1978 2179 3807  436 1401  329 3508  300 3616  137 2502 3616\n[43373] 4640 1375 1131 3291 1280  178  553 1289 1318  505 1697 1629 3211 2148\n[43387]  165  432 6054 3388 5207 1158 2181  681 1895 5675  411 1145 4335 1734\n[43401] 4445 4567 5299 5378 5816 1641  781  316  348 3937 5395 2095 5283 1639\n[43415] 4141 3795  308  927 3822 3340  331   15 2043  483  456  431    1 1779\n[43429] 4687 1122 1802  581 2449 1783 3493 2480 1054 4100  117  686 5181 1663\n[43443] 3567 2150 2402 1151 2183  507  527 1073  118 1373 2247  643 4395  213\n[43457]  587 5712 1481  246 1798 3852  337 1945 1232 1170  349  477  673 3669\n[43471] 4193  286 4696  301 1902 1296 1231 5713 1819 3527  703 5370 3318 3305\n[43485]  841 3983 1995  460 3588  395 1493 3846 2815 4949 3070 3393 1935 1171\n[43499] 3231 3326 3359  446 2152 2297 2285  685  325  311  371  554  802 1734\n[43513]  500 3848  226  161 3391 4171   95  635 1164 3202 1107 1483 2181  573\n[43527] 3532 4326 1729  745 1155  591  341  320 4596  494 1600 1638 4580 6049\n[43541] 4181  257  598 4140  575 3663 4133  424 1246 4377  133 4144 1982 5293\n[43555]    4 4572 3459 2088 1942  491 4978  256 3199  141 3523 3540 2459  375\n[43569]  689 1714  134 4662 5091 3075 2280  287 1593 4502  343 1705 4576 5199\n[43583] 2793 3488 1156 3347  847 1105   31 3357  843  543  292 2302 1619 1117\n[43597] 4328  145 3748 2443 1064 3622 2185   65 2231  485 2154 3357 5601 1410\n[43611] 3771 1161  423   27 1394 2949  629 1373 1801   85 2187 3216 1695 1365\n[43625]  181  415  283  516 3411  578 3448  413 2156  706  884 2042 1499 3932\n[43639]  211  512 2189  199 1171 2988 1585  172   95 3825  525 2223 3580   45\n[43653]  408 4695  167 1665  345   83  509   89 4201 1119  708  918  894  215\n[43667] 2580 1078 1516  404  193 4175  837 3365  687  434 1109 2471  256   86\n[43681] 1185 1692 3310 2751 4113  246 2351  209 2488 2067 5298 1635 4684 3824\n[43695]   67  299 1185 2158 1629 2191  535   61 3556  926 4705 1407 3813 4202\n[43709]  359  691 2139 4294  418 4195 4411  626 5287 3513  291 4245 1165   83\n[43723] 1611 2331 1284 1022 2019  353   17  726 2002 4352 1013 1139 5624 3301\n[43737] 1751 1113 3044 3542 1053  389  425 1321 1854 3325  327  153 2057    5\n[43751] 5268  263 2391 4667 2698   87 3320 2202 3843 3486 3674 3849  177  360\n[43765] 4382  119  169   29 2160 2039 3134  947 1473 5274 3445  775 1715 3591\n[43779] 3330 3854  669   19  245 3433 1691  237 1576  711 1528  442 3526  693\n[43793]  305 1526  435  645 1193 1729  883 2454 5383  490 1400 4131   71 1435\n[43807]   21 1128 3304  235 5769 1206 3331 2307 3470  318 2370 4191  363 3374\n[43821] 2437 1115 4370 1429 3843 2159 4224 2193 3573 3349 5306 1271 2131 3662\n[43835]  795  415  208  415 1147   65 2142 1083 1651 2162 4543 3604 3535 1485\n[43849] 5909 1049  702  695 5714  418  771 4361  161 2195 3885 4333  201 4204\n[43863]  105 1224  359 1464 2520 4348 2314  225  382 5038 1071 5956 3555 2065\n[43877]  135 3395  371 4033  306 2680  915 2197 1205  985 1295  347 4127 2164\n[43891] 4312  354 3317 1039  499 1712  775  427  443 4106 3603 4536 4321 4885\n[43905] 1247 1677 4085 5209 4368 3660  471 5048  475 1371 1066 4672 2347 4397\n[43919] 1543 3621  185 4509   97 4682 3833 1615 1416 3525 5311 5904  523 5815\n[43933] 3842  523 1103 3384 5811 1816  486 2002  108  234  718 4372 3416  881\n[43947]  598 2243 1403 1714  939 5716  698 1198  563  601 2055  731 5661  654\n[43961]   27 1884 1175 1103  371 1919  883 6177 1772  345  303 4471  303 1099\n[43975]  675  797 1066  575 1205 2079 2085 1144 4393  905 2802  495  211  453\n[43989]   27  421 2158  525  318  331  540  315 4111   23 1547  683  399  420\n[44003]    3  269  482  265 4122 1263 1415 2285 2003 4348 2493 2418  305 1345\n[44017]  494   15 3829 1456 1439   11 1289  183  831 2279  461  425 1273 1600\n[44031] 3847 4246  183  163 1506  807 1717   59  279 1733 1216 1135 3496  901\n[44045] 3052 3842 3363 3370  307 4866  561  449 1959 3353 2431 3611  936 1511\n[44059] 1152 2047   33  245  885 1111 1271 4548 3538 3531  785 1167 1879 3507\n[44073]  210 3317  929 2870 1429  183 3478  409  677 1357  446 3868   84  478\n[44087]  403  281 1831  219  443 3521  397 1157  281 3407 2119 2267 2280 3419\n[44101] 4240 4510  208 5813 2071 4326 3841 2445  189  313 1682   15  301 2173\n[44115]  431  181  643  502 4380    5   63  544  120 3565    1  208  353 1121\n[44129] 1581  997  795  161 5222 1843 1499 1634  497  407 1223  116  199 3611\n[44143] 1061 2395 1296  317 5370 3675 5373 1519  874 1752 1689 1030 2142  251\n[44157] 1160  586 5463 5736  523 1747 5711 1885   51  954 2457  411  271 4255\n[44171] 3492  518 1109   53 4412 4187  893 1711  925 1529 4495 1651  642  604\n[44185]   19 1131 4572  207 1808 6181   23  187  179  325 4632 3828 2430  971\n[44199] 2067 2602  625  483 1263 1275 5174  405    1 2452 3466 1647 3230 1479\n[44213]  905  695 1599  703 1211 3493 3461 3308 5309 1892 2380 2098 5208 5211\n[44227] 1875 3807 2219 1307  401 5273 1623 4679 1174 3572 1180 3616 3670 2451\n[44241] 3386  998  423  680  323  127 1830 2965 5951 1256 1605 5675 1120 1947\n[44255] 1685 4567    3  329 1845 1143   34 4434  300 3361 4133 4649 5067 2146\n[44269] 1131 2502 1697  553 3388 1421  178 1401  760 1705 1791 2181  781 1798\n[44283] 1622 1515 5378  687  165 1830 2086 3305 3340 1641 1639  308 4417  411\n[44297] 2043 1199  431  927  483  456 4395 1143 1779 4687 6054  348   15 1802\n[44311]  117 1073  581 1172  500  394  686 1151 3567 2480 1783 1663 2247 1373\n[44325]  213  118 1170 3588 5712 3813  337 4171 1493 3426  320 3669 1232 1065\n[44339] 5956  286  477 1819  257  505  703 4148 1703 1107  217  301 1171 1958\n[44353] 4144  799 2285 2152 3393 3595 2815  573 1744 1164 3070 4120 3326 3391\n[44367]  343 1734 3231 2297  325 1839 2347  161 2181 4181 3846  802  511  341\n[44381]  145 3202 3663 4662  500   95 3359 1695  133 3128  575  745 1618  841\n[44395] 3416 4087  424 1942 3812 3049   85  685   83 3817 4249  256 2088  843\n[44409] 3155 2280  375 1600 3075 1156 2793 1117  635 1593 1706 1982  543  847\n[44423] 2459    4 3285 1299 5293 1105 3459 3347 2488   31 4991 3523 1902  404\n[44437]  172 2443   65 1935 3531 4327 2231 2302  423 5615  527  181 1410   27\n[44451] 3825 1161  629  252 1178 1394 4175 1801 1373 2949 5680 4201 1854 2471\n[44465]  516  283  587 1365 1554  708   89 3448  415  617 4294  413  706 1585\n[44479]   45  347  894  199  211 3556 3540 2580 1119  918 3365  387  551 4537\n[44493] 3216 1725  837  291  167 1712  687  623   86 1635 1109 1516  345  804\n[44507] 1185 1064 3310 2351 1284  327   67 4382  299 1185 1751  425 3301 5484\n[44521]  247  535 3674  244  926  359   61  215 1626 5461 1611 2019 4245   17\n[44535]   83 2002    5 2202 3486 1639 3044 1053 4121  711  153  442 1576  288\n[44549] 2391 3134 4131  119 3320 3325 3591  645  359  435  669 3330 2454   87\n[44563]   21 2159 4191 3542  141 1075  881 3304 1526 1729 2307 3771 5714  245\n[44577] 4532 1416  235  577 3827 1271  795  225 3374  201 3470   71   65 1482\n[44591] 1047 3535  418  702 3885  135  105 2065 2314  915 1022  258 3395 4536\n[44605]  237 4212 1205  523 3336 1295  347 5811 1692 1371 3809 3621  185   97\n[44619] 1103 1066 5904 1816  234  108  718 2002  745 2177 3511 1096 1403 2243\n[44633] 5716  939  279  371   27 1739  345  731 1175  303 6177 1103  883 1989\n[44647]  423 3550 4274  675  303 1205  905  421  538 2085 2023 1144 4166  495\n[44661]  211  525   27 1099  453 1879 5747  315 1547 1177  331 1263 1299  269\n[44675]  318 4122   23    3 3845  683  420 2285  399 1415 1107 1265  305 2493\n[44689] 1439  260 1345  424  831   15 4315 1736 1381  497   11 1444  443 1289\n[44703] 4111  322  183  461 2279 1808  807  450 1273  901 3052  785 1506 4246\n[44717]  163 4420   59  885  245 1111 3363 3370  307 1959 1492   33  398  561\n[44731] 2047 3353 3611 3507 3272  449 1109 3528  936 2702  909 2395 3538 1511\n[44745] 2431 3489 1216  857 1167 5242  354 2457 1271 4326 1733  183 1357 1429\n[44759]  914 5675  409  929 3868 1157  677  343  397 3478 2267  219 3521   84\n[44773] 2053  281 1843 2119 2280 1626 3492  403 1401 4388 5195 4625 4364  207\n[44787]  994 3531 4422 4638 3810 5666 4711 1668 4230 3841 1643  447 2445 3419\n[44801]  189 2173   15  301    5  997 1747  353  673 1120 1581  120  431  502\n[44815]  795 1717  181  313 3806  874 1121  208 1030 1885 5222    1 1499 5109\n[44829] 4087  199 3579 3565 4140 1143 1634  456  746  407  124  271 5475 1223\n[44843] 5959   63  116 1711 3814  317 4148 1462  223 1160  586 5736 5711  411\n[44857] 2067  251 1847   51 1030 1262 4255 3573 1735  276 1480 2319 3675 3644\n[44871] 4412 5208  325   53 1745 1131 4632  925 4495 3611 1529  604  518  255\n[44885] 1034   19  625 4187  179 2343  971 2602 1110  954  642 3689   23  483\n[44899] 3828  187 3281 1275 4099 2177 2098  798 1341 1647 5309  273  695 5174\n[44913] 3230  453 2452 3493 1875 4060 3466 1599 1010 4679 1307  703 2021 5211\n[44927]  127 2380 4445 1211    1 2219 5392  698 1519 5373 3807 1174 1623 1256\n[44941] 2146 3572    3  766 4188 3386 1212 2179  998  264 3404 1978 4866  598\n[44955] 1947 3508 1191  423  323 3330 2451 4567  327  401 1496 3461 3616 1143\n[44969] 3670  482 3361   34  329  578 4640  252  316 3848 1280 2502 4335  300\n[44983]  505 1131 3616 3211 1401  553 1375 1583 1685 5378 2181 3818 1178 6054\n[44997]  781 1697 1158 1895  137  432 3388  411 3291 1145 1734  482 3937 1318\n[45011]  165  348 4092 3805 3817 5283 5207 1641 5299 5395 2095  681 3340 1711\n[45025]  308 1311  537  507  456  927  431 2043 1054  331 3795   15 1779 1802\n[45039]  581 1639  643 4395  117 2449 1073 1373 2150 4100 3493    1 4193  246\n[45053] 5181 1151 2402 1663  431 1783 3567  686  118 4171 2480 2183 2247 3305\n[45067] 5712  213 1170 1945  673 1163  349  178 1232  337  286 3527  527  365\n[45081] 4141  477 1605 5370 5713 1819  460 1902 4949 1231  301  703 4596 3588\n[45095] 3983 1734 3318 1995  799  841 6181 1107  575 2815 1744  258 4133 2185\n[45109] 3231  479 1935 2297 4181 4695  573 2918 3359  802  500 3393  685 3326\n[45123]  161 2347 4144 4978 4212 4687 3391 1155 4377  745 1483 4326  635  325\n[45137] 3070 3846   95  341  320 2285  350  145 3669 1982 1942 2181  404 1729\n[45151]  133 1164 1600  494 4580 1638 4576   85 1246  292   83 4502  424 2088\n[45165] 3825  256 5293 3416 1714 3488  257 3199 3075   31  375 2154  636 2187\n[45179]  843 4667 3459 3523  134 3357 1156  847 1245    4 4572  343  543 3748\n[45193] 2280 3202 2459 1105 3580 5091 3849 2793 1619 2302 3347  287 1705   65\n[45207]  172 3357  141 1410 4684 5199 4328 3540 2443 3622 5601  485 3771 1171\n[45221] 1373 1161  423 2949   27 2231  181 1394 1801 1695 4175 1064 1365 3813\n[45235] 4294 2042 4201  516  884 2223 3411 3448   89  708 1454 1499 1205  501\n[45249] 4662  211  413  894 1171 2189 4705  199  541  706 1119   95 1048  408\n[45263]  617   45 3365  327  509 4113 2488 4411  167  283  345  246  376 2580\n[45277]  488 3556  415  291 4202 1182 1635  837 1078 1516 3819 4195  312  687\n[45291]  193 1109 2471   86  918 1185  434 5298 3216 1162 1482 3932 2067 3663\n[45305] 3310 2351 3843   67 4382  327  299 1185  623 1629  359  209 2158 1407\n[45319] 2191   61 4380 3301  691 5387 1321  263 1022  353  535  926 1611 2139\n[45333] 5287 1139 1113   83 2331   17 2019 1075 3513 1854  288 3526 2002  305\n[45347]  153 5268 1053 1013 1751  418  318 3542    5  711  389 4131  442 2057\n[45361] 3325  425 2202 3486 2698 1576  177 2391 3320 5274 2039 3674  359  119\n[45375] 3854 2751 1128 3591   29 1715 5383  883 3445  435 1691 3713  693  169\n[45389] 1473  645 3330 1585  947 3264  245 2454  506  466 3433 3134  669   21\n[45403]   71   87 3555 4278 5769 1435  795 3304 2142 1528 2370 2159 4191  235\n[45417] 3349 1729 1485 2437 1429 4361 4370  208  363 3374  225  161 5714  490\n[45431] 3470 3331 5306 2307 3662 2162  201 3573  237 4245 5038 3843  695 2131\n[45445]  352 4321 1147 3604 3044 2195   65 1083 5956  702 1651 4543  418 1117\n[45459] 1703  415 3535 2193 1224 1466 1464 3885 4106 2314 4348 2520 6073 5209\n[45473]  382 1615 4033 4312  105 3395  371  771 1071 4333  354 4085 1680 2197\n[45487]  475 4536  371  523  443 2164 3317 5815 4397 1066 3384  985 2065 2680\n[45501]  499 1247  347 3603 1295 4672 4127  629 1205 4368 1271 1416  866 5048\n[45515]  135  775  427 4583 3833 3621 1677  915 4186   97  185 3660 4682  523\n[45529] 5904 3842 5311 3525 1103 4224 1816 5811 1371  234 2002  486  108  718\n[45543] 4885  745 1843  252 2243 1403  939 1714 5716  407  563  601 1909 2134\n[45557]  371  731   27  303 1175  279 1198 4533 2167 4137  301  345  464 2180\n[45571] 1919 6177 1772 2609 1103 3525 4471 4150 5068 4241 3351 3550 1454 1099\n[45585]  883 4424  423 5503  797  675   16 4334  303  905 2085 4393 2114 1205\n[45599] 1686  575 2802 4535 5747 2023  495 1144 4422  211  525   27 4522 4166\n[45613]  300 3496  453  318 1263 1177  343  404 3676 2136  315  683  537 2169\n[45627] 3829 1879    3 1547 3769  821 1107   23  331  269 2285 1183  420  399\n[45641] 4122  305 1265 1415 1345 2493 2003  511 4155 1439 3845  482  261   15\n[45655] 3547 3599 1162  424  831 1381  183  421  183   11 2279 4111  163  461\n[45669] 1289  212   59 1717 3759 3821 1455 1808  807 3052 4246 1273  901 3370\n[45683]  450 1733 3363 2138 2047  245 3827 3611  307 1511  561 2431 2171  544\n[45697] 1271 1959 1216 1492 1111  885 1154 1109 4364 5463 3353 3528 5242 4866\n[45711] 3507   33  333 3272 2457 2395 1167  857  929 1429  909 3317  914  183\n[45725]  677 1357 1831 4691 3538   84 4537  281 2702  409  403  478 3492 3868\n[45739] 1157  219 3478 3521 2267  397 3579 1843 3355  447 2119 2280 1289 4638\n[45753] 5813 4249 3531 4252 1401 2071 3419  994 4388 4419 5475  443 3489 3841\n[45767] 4711  226 3810 5288  346 3407  189 1643 2445    5  207  301  434 5286\n[45781] 2173   15  235 2140  431  502 5220 1747   63 1600  120 1581 1030  795\n[45795] 1711    1 1121  208  181 5222  874 1634  161 5109  313  497  407   73\n[45809]  746 5211 1223 1885 4065  116  199 4880  456 4380  223 4087  124 1499\n[45823]  317  271 3814 4714 3565 4060 1160 2054 1030  251   51  586  258 2142\n[45837] 4255 2175 5736 1847 3573 3675 1735 2319 3644 1480  406  673 1808   53\n[45851]  276 4187  411 2067  325 3611  518  357  488  604  642 1529 4297 2343\n[45865] 4632  179  625 6181 1025  187 5208   19 4495 4412  971   23  954  925\n[45879] 1110 2602 3689  483 5195 3281    1 2144 3828 1275 1647 2452 1341 1479\n[45893] 2098  798  695 5309 4325 2177 5711 4628 3230  453 1599 5273 1010 4679\n[45907] 1131 3466 1307 4445 1139 2380  127  398 5373  327 1211 2069 3302 1875\n[45921] 1618 1623 2693 2219 1174  401 1519  766  998 3572 1212 2146  264 3386\n[45935]  566 1978    3  323 1947 4567 3404  667  423 3330 3493 1685 3461 3508\n[45949] 5675 3807 1143 3670 3361 1496 2179   34 1163 4640 2451 2502  329  352\n[45963] 3848  482 4335 3616 3291  300 1318  553 1697  137 1131 1444  505 3616\n[45977] 3852  178  316 1895 5207 3211 1375 1256 1280 2148 6054 2181  781 1158\n[45991] 1294  165 3937 5816 1641 1798  681 5283 3822 5299 3795 2095  432 5395\n[46005] 1734  927  348 1639 1145  308 3340 1054  456  431 1122  436    1  841\n[46019] 1779  331 2043 3305 4687  117 1802  643 2449  581 4100 2480 4395  411\n[46033] 1151 1783 3493 4141 2150 2402 2183 1373   15 1663  686  213 1481 2247\n[46047]  118 4193  431 5181  246 5712  673  587  337  349 1170 1232 1945 3567\n[46061] 3527 4171  477 1493 3669 1296  286 5370 1819  460 4696  703  301 1902\n[46075] 6049 4140 5378 1231 3983 3393 1073 1995 4133  222 4662 3359 2815 4949\n[46089] 3588 2185 1734 1935 3070 2285  255 2152 1164 1171  575  325  841 2347\n[46103] 4144 3846 3326  573  802  685  698  500 5199  399 1107 4572  365 3202\n[46117]  145  395 1155 4377  745 2181  446 1483 4596  320   95 3663 3318  370\n[46131] 3391 3532 4181  341 2297 4978 4576  598 1729   85 1554 4580  292 1942\n[46145]  322 1638  257  133   83 4502 1246  256 5293 5713 3825  843 1982 2088\n[46159]    4 3488  491 1714 3416   31 3231  134 1705  141  424 5091 3357 3199\n[46173] 2280 3075  343 3748 2154 2793 1156  375  847  543  589 2459 1105  269\n[46187] 4326 3523 3580 1117  161 1593 3357 3824 1619 3347 2302   65 2187 3540\n[46201] 3327 3622 1373  485  172 1463 3771 2231  423  629 5601 2443  181   27\n[46215] 1410 1394 4175 2949 1801 1695 3813 1161 2042 3216 1365 4294 4352 1284\n[46229]  578 3411   89  283  516 2223  884 4695 2988 4705 2156  413 1499  708\n[46243] 2189  706   45  408 1585 3932  199 1665   95 1048  415 1171  525  894\n[46257] 1119  512 3365  246 3459  345  167  527 3556 4201 4113  509 4411 4202\n[46271] 2067  291  837  918 1635  687 4195 3849 5298 1185 1078 2471 1516   86\n[46285]  193  418 1692 1064 1109  209 4684  404 3843   67 2488 4667  327  211\n[46299]  626 2158  691 3713   19 1185 3301 2191  299 1407 1629   61 2351  359\n[46313] 1321  263 3526 1139 2139 4382 3310   83  318 5287 2019   17 2331  535\n[46327] 3513 1611  775 5387 4245 2580 1022 3486 1854 2002 5268 1053 1751 4131\n[46341] 2057  711 3044  425  153  305 1013  442  389 1576 2202 3325 1165 1113\n[46355]  177  926  360 3134 3448 3674  472 5274 2160  353 3542  359  669 3591\n[46369]  119  169   29   87 3854 2039 1691  693 2698 1473  435 1715  203  947\n[46383]  883  245 4191  237   21 2454 5383 3445 1193 1528 5909 1128 2159 3349\n[46397] 4224  490 4370 2142 5769 1435 2370 5714 4361  208  795 1485  363 2307\n[46411] 3304 3374 3331 1429 1115 3555 2391 3843 3573 5038 3662  645 4127  201\n[46425]  695  235  161 1147 2437 1271   65 4543 5306  415 3604    5 1651 2162\n[46439] 4321 4204 1224 1526 3535 1049 2131 5956 3330  702   71 4106  418  771\n[46453] 1545 2195  225 1464  105 2314 4085  135 3885  382 1680 1039 4348 5209\n[46467] 2065  374 2680 2520 4536 4033  354 4312 2164  443 1083 4368 4397 5048\n[46481]  371 1295  499 4333 3395 3317 2197  985  915 1205  523 5815 1066  427\n[46495] 4885 1416 1247 4672 3384 3603  475  347 5811 3470 3320  775  471 4682\n[46509] 1729 1677 3833 4372 4509 3621   97 1371 3660 1103  523 5311 5904 4329\n[46523] 3525 1816  108  234 2002  718  486 3842  185  745 3388 2193 2751 1843\n[46537]  252 2243 1403  939 1714 5747  303 4533 2167 4137 5716  279 5068 1909\n[46551] 2134   27  563  731 2180 1175  371  601  345 1027  464 2609  883 1103\n[46565] 3525 6177 1772 1919 4471 4241 5503 4150 3351  423 2085  797 1099  303\n[46579] 3550   16  575 4334 2023 4393 1205  905 4424 2802 1686  301  675 4535\n[46593] 1668  211 1144 4422  495 4522  511   27  525 1149 1879  404 3496 3676\n[46607]  683   23 3599 2169  318 1263  482  821  420 2285  331  399  269 1547\n[46621] 4122    3  261 4155 1183 1415 1439 1345 1265 3769  305 3845 2493  315\n[46635]  698 2003 3547 1381  212  424  183  831 4166 2279 1548   15  183  461\n[46649]   11 2136 3829 3759 3821 4111  163 1717  807 3052 1289 1808 1107 1273\n[46663]  901 1289   59 4246 3370 1216 1733 3363  245 2171 3611 1111  450  544\n[46677] 1511  909 1959 3489 2138 3827 3538  885 2047 3353 3507 1492 5242 2457\n[46691]  307 1109 1271 3317 4866  346 4364 3272 1154 1167  454 2395  343  857\n[46705]  929  537  183 1429  914 4691  677 1357  294  409 1831 3579  219  281\n[46719] 3478 2431 3521 2267 1157   84 2702 4537  403  443 4711 1843 3355  447\n[46733] 3868 4419 4638 5475 3531 1583 4249 5463 1401 2071 5813 4252 2280  397\n[46747] 3841 3492 5288 3407 2445 3810  434  189 5286  207   15 1643 2173 2119\n[46761]  235  301 2140   63  795 1747 1030 5220  120  431  502  994  181    5\n[46775] 1626  208    1 1121 1711  561 3419 1499  161 5109  421 5211 5222 1885\n[46789]  407 4065 1581 4087  271 3565 1223 4380 4880  199  746  223  456  124\n[46803] 4388 3814  317 4714  251 1634  586  997  256 4060 5195 1030 2175  116\n[46817]  654 3573  673 2142  357  515 1847 5711  411  276 2054 5736 4255 1735\n[46831] 3675 2319 5208 3644  497 1808 2067 4187 4412  925  488  604   53  518\n[46845] 1529 1131 2343  325 4297 6181  642  187  625   19 4495   23 1456 4632\n[46859] 1110 2602  971  954 3611  483 1275    1 3828 3281  798 2177 4628 3475\n[46873] 2452 1341 3689 2098 1647 1479 2144 5309  695 1599 3493  453 3466 1422\n[46887] 5273 4679 1307 1875  327  127 1211 1139  703 5373   33 2380 4445 3302\n[46901] 2069 2219 1618  401 3807 1519 3386  222 3572  264 2179 1947  323 3404\n[46915] 3330  423 2451 3230  667 2146 5675 1256 1978 4567    3 3461  766 1143\n[46929] 1174  482 3670 3361  551   34 3616  352 1496 1685  329 2502 3848 3291\n[46943]  300 1401 3616 3817 1651 3528  553 1444 3211 1131 5797 1318 1895  178\n[46957] 5207 3388 2181  781 1375  179 1158 2148 1798 1280  137 3937 6054 1145\n[46971]  165  411 3812  432 4335 5378 1734 3822  348 1641 4640 5283 5299 2095\n[46985]  681 1639 1054  458  331 4395  507 3340  533 5395  436 2043  431 1122\n[46999]  581 4687 3305 1802    1   15 5181 2449 3493 2183 3567  686 4100 2480\n[47013] 1073  431 2150 4091  118 1151 1373 1663  246  213 2247 4193 1783 1199\n[47027]  349  587 1170  673 1779 5712 1945  337 1232 3669 4171 1697 5370 4696\n[47041]  286 1493 5713 1296 1902  460 4949  703  527 3393  117 3318  301 3588\n[47055] 4141 3359  841 3846  477  365 1819 3983 1744  370 3231 1935 3070 2297\n[47069] 2152 2815 3326 1171 2185 4133  575 2347 1734 2285  802  635 1995  500\n[47083] 1155 3391  685 1107 1164 4596 4978  573  325 4377  320 1115 2181 4662\n[47097]   95 3663  745 3202 4326 1729 1483  161 4572  341 4502 5199   85 1554\n[47111] 1942 6049 1638  292 2402  257 1246  322 4181 1982 5293  395  404  256\n[47125]  799 2088   83 3416 3459 3488 3580   31 3825  843 2280 1705 1117 1714\n[47139] 3532 3075 1156 2187  424 3748  269 1593 2154  134 2793 3523 3540  847\n[47153] 3357  343 3347 1151  446  543  141 1105 2459 3357 3824 4352    4   65\n[47167] 2302 1463  485 3327 1619 2443 5601  172 4684 3771 4576 4144 1373  415\n[47181] 3622 2231 1410 1394 2949 1161  423 1695 4175 1801 1365 2042 1284  283\n[47195]  415  884  516 3216 3448 4294 3932 2223 5091  199   89 2189 3199  708\n[47209] 4705  413 4695  211 1448  894 2156   95  408 1499  706 3411 3813  512\n[47223] 1585 1171 1064  133 2988  246 1119 3365  181 4113 2580  167  327 2067\n[47237] 2488  918  578 1682  226  345 3556 1109 4201  598 5298 1516  687 4195\n[47251]  193   19  291 3310 2751 3849 4580   86  629 2471 1635  209 1185 1078\n[47265] 3843 4411 2351  327 4667  837 3713 1629  626  691 3301   27 1185  926\n[47279]   67 2139 1321  359 5387 2191  263 2158  318  299 3526 1177  353  535\n[47293] 1139 1231   61 1224 4382 1113 5287  360 1611 2693 2331 2019 1022 4245\n[47307] 3486   17 1053 3044  425 1751 3134 2002 3542  153  442 5268  389  711\n[47321]  305 1576 2391 2698 3320    5 2202 3513 5274  177  119 3674 1854  669\n[47335] 1259  359 2039 1473 4131   29 2193 3445  145 2160 1715 3854  169 1691\n[47349]  645 3330  883 3591  258  947 5383 1528  693  490 4191 3433 1729 2454\n[47363] 1193 5909   83   21   87  245   71 1526 3555  435   45 2307 4361 2142\n[47377] 2159 1435 3349 5769 3304 2370  235  208 4370 5714  225 2437 3374  491\n[47391] 3470 1429 1485  363 1271 3843 3325 1407  418  201 3573 3662 3331  695\n[47405] 2195 2131 4224 5038 2162 4127 1147  652 1451 5306 3604  617  415   65\n[47419]  795 1049 4543 3535 3885  418 4204  702  306 4312  771 1464  105  915\n[47433]  135 4333 1039 3850 2314 4321 4348 4202  382 2520  375 5209 3395  354\n[47447] 4033 2680 2065  523 3317  985 4672 4368 5048 1066 1295 2164 4085 5811\n[47461] 1247 1205 3384 1416  347  475  427 4885  242 3603 4373 4682 4276 4509\n[47475] 3823 4106 1371   97 4536 3660  185 3621 1103 5311 3842 2197 3525 5904\n[47489] 4397 1816  486  718  234  108 2002  745  643 1454  313 1843  252 1714\n[47503] 1403  939 2243 5716  371 5747  731 2134 4137 5956  301   27 2167  563\n[47517] 2180  279  698 5068 1175  303  464 2609 1029 1772 4533  883 1103 1919\n[47531] 1909 4150 5503 6177 3351 2085 4241 3525 3550 1454  423  303  905   16\n[47545]  575  675  797 4334 1205 2023 1668 4393 4424 2802 1099 4422 4535 1144\n[47559]  345  525 4166 3496  211  587  495 4522 1149 3599  479 3829 3676 1686\n[47573]  318  331 2285 4122 3769    3 2136 2169   27  315  269 1879 1107 1263\n[47587] 1439  683 3845 4471  420 1547 4155  305 2493 1345  343  404 1265  821\n[47601] 1415   23  537  482  255 1381 3547 1548  183  424  461   11 2279 1289\n[47615]  183   15  163 3759  307 1808 1216 1289  807 2003 1273 3052   59 1717\n[47629] 3363 3370  901  450 4246 3507 1111 2138  245 1733 3528 1511  235  561\n[47643] 3611 1177   33 2171 2047 2395 1109 3538  307 5242 2457 4866 3489  909\n[47657] 3353 2702 1271  346 3272 1154  914 1167 3317  327  857 2431 4364  212\n[47671] 5463  183  677 1429  409 1357  219  478 1831 2280 4691  281 3492 3868\n[47685] 2267 3579  397 1843 3821 3521 1157 3827   84  403  443 3478  929 1959\n[47699] 2119 3531 1294 4388  447 5475 2071 5813 4252 3419 5288 4249 3841 1643\n[47713] 2445 3407  399 4638 3810 5286  189 4537  885  434 1626   15  997 4111\n[47727]  207 2140  502 1401  301  401 1747  795   63 2173    5 4711 3355 1030\n[47741] 1581  120  431 1711  313  181 5195    1  208 1499 1121  161 5109 1634\n[47755] 1885 1713 5211 4065  407 1223 1112 4880  199 3565  456  116  746 4419\n[47769]  271  223  124 3814 4380  317 4060 4091 4714  310  251 5711 1030  673\n[47783]  299  586 2054 2175   51  276 2142 2319 1847 5736 4087  357 3573 4255\n[47797]  411 3644 1480 3675 5208 1808 4412   53 4187 1131  925 1529 4632 2067\n[47811]  518   19  325 1025  179  604 6181  187 2343  625  488 4495 3611   23\n[47825] 2602 1110  971  954  483 3828 3281    1 2144 4297 2177 3475 2098 1479\n[47839]  695 5309 1341 1275 1647 3230  453 5273 3466 1875 1572 1307 3689 2380\n[47853]  703  327  127 1211 2069 3493 1599 4628 5373 3302  798 2219 1139 1131\n[47867]  401 1519 4679  667 2693 5220  598 1174 3386  264  998 2451  766 1212\n[47881]    3 3572 1978 1947 2146 4445 1256 4567 5675  323 3404 3330  423 3461\n[47895]  482 3616 1143 3361 1496   34 4640  329 2502 1163  352 3807 1401 1685\n[47909] 2179 4335 3291 3670 3806  300 3848  178 1697 3616 1131 5207 2452 1318\n[47923]  553 1444 1651  681 3211  137 1895 1280 3812 1798 2181  411  781 1145\n[47937] 1158  432 1641  165 3937 2148 1734 5797 3795  348 3822  436 1054 2095\n[47951]  431  331  841 1639  456 4395   15 5378 2043 1143 1779    1 4687 2449\n[47965] 3340 5283 1073  581 5181  117 3305 3388  831 3493 4100 1783 3567  431\n[47979] 1481 1663 2183  246 2402 2480  118 1373 4193 1802  686 1151  213 2247\n[47993] 4091  349  673 1170 1945  643 1232  337 5712  578 2150 6054 1493 4696\n[48007] 5370  301 1296  365 1902 1819  460  477 1231 1171 4596 6049 3983 3318\n[48021] 3588 3669  703  841 3391 3359  395 1995 3326 1935 2815  575 1734 3231\n[48035] 1744 2297  652 2185 4133 4949 3070  294  446  500 3846 1107 2347  258\n[48049] 5199  802 4144  286  573  407 2181  161 4377 2285 3202 1164 4978 4171\n[48063] 4662 4181  745 1483 5713 5395 3663   95 1155  341  325 4141 4326  320\n[48077] 3532 1554 1729  322  242  685 4502 4576  257 1982 1942  145 1246  292\n[48091]  133 3393  424 4572 1638 5299 1714 3580  256 4580    4 5091 3488   31\n[48105] 3075 2280 3199  415  491 1705 3523 3459 2793  134 2459  269 2154 1156\n[48119] 3416  375  847 3540 1117 1593 1105  543  141 3825   85 3748 4352 3357\n[48133] 3824 5601  485 2187 1619   65  343  843 2443 3327  172 2231 1463 3771\n[48147] 1695  629 4684 1161 1410 1394 3347   83 2949 3357 3622 1801 2302 1365\n[48161] 1373   27 2042 1284 3216  283 5293 3448  181 2223  884  415  516   89\n[48175] 4201 3411  706 3813 3932 1499  306  512  708  211 1585  996 1171 1060\n[48189]   95  413  199  894 2988 4113 3365 1083 1119 2189 2156 4202  408  246\n[48203] 4294 2488  167 4705  345 2580 1682 3556 4411 1109  291 2067  404 2471\n[48217]  423 1078   19 3849 1635 4195 1516 1185  193   86  256 3310  687  918\n[48231] 1692  209  327 3843 4695  434  418 4667   67 4382 1064 2351 3713  837\n[48245] 1185  299 4175  626 1629 5298  691 2158 2191 1321 5387 2139 3301  926\n[48259]  360  359  353  244  535   61  263 1407 2751 3513 1139  318 2331   83\n[48273] 2019 4245 1113 1455 1611 3044 1022 5268 1751 2057  425 1854 3134  726\n[48287] 1053 2002  711  153  442 2391 2698 1576 4131 3325 3526    5  389   17\n[48301] 5274 3674  119 3486 3320  177 2202  359   87 3854 1259 2039  169 2193\n[48315]  237 2160 3445  693 1127  645 3433 3330  883 3591 1528 1715 1526 4191\n[48329]  947 1691  435   29  305 2454 5909 4361  490  245 1729 5383 5769 1193\n[48343] 3555   21 2142   71 2307 2370 4224 4370  363 3349 2159 1485  235 3304\n[48357] 3374 5714  208 1429  669 1618 3573  795  161  201 3843 3331 5306 5038\n[48371]  225 3662 5287 2162 1271  292 1473 1147 4204 4127  415 2437   65 3470\n[48385]   45 4106 5959 4321  702 4333 1703  418 4312  105  695 3604 4085 3885\n[48399] 4348  354  915 1464 2065 1039  382 2314 1680 5209 2520 2195  135 4536\n[48413] 1435 4033  771 2680 3395  985 1295  288 4368 4397 5815  523 1205 5048\n[48427] 4672  499 3384  475  347  427 4885 2164 3542 4543 1416 1247 5811 1066\n[48441] 4372 3837 3833 4509 2131   97 1543 3317 2197  185 3621 3660 1103  617\n[48455] 5904 5311 1371 3842 3525 4247 3603 3535 1816  234  108  486 2002  718\n[48469]  745 1503  642 1048 2088 2152 1843  252 1714 1403 2243  939  371   27\n[48483] 2180 2134  563  301 1909  407 1198 2167  464 5716 1175  731  303 4137\n[48497] 5068 4533 2609 6177 1919 1103 1772  279 3525  883 4471 4150 4241 5503\n[48511]  423 3351 3550   16 4535 1205  797 1454  905 4393  575  303 1686 4334\n[48525] 4424 2085 1099 2023  675 2802  211  495 1144  453 4166   27 4422 4522\n[48539] 3496  525 1668  511 3599 1439  343 3676 3769 2169 1263    3 3829  345\n[48553] 2136 4122  318  537 3845  821  331  482  399  404   23 1415 1547  315\n[48567] 1265 1879  269 1183 2285 1107 4155  420 2493  305 2003 1177  261   15\n[48581] 3547  421  424  212 1289  683 1381 1548  461  183 1289 2279   11  831\n[48595] 3821  183 1808 3759 4111 1455 1717   59  901 4246  807 1273  450  909\n[48609] 1216 1733 2138 2171 3363 3370  561 1111 2047 3611  245 1492  885 3538\n[48623]  307  544 2431 3827 1154 1271 3272 2395 4364 2457 4866 3528  163 1109\n[48637] 3353 1511 5242 3317 1167  857  929 5463  914 1429  183 4691  219 4537\n[48651] 3489 1357  677  478  409 2119 3868  403   84  397 3507 1157 1831  281\n[48665] 5195 3492 3579  346 3521 2267  443 2280 3531 3355  327 4252 5813 1294\n[48679] 4419  447 4638 5475  994 1345 3841 3052 3478 1626 3810   33 5286 2071\n[48693] 3419 1643  434  189 2445 4711 1843 4249  997  207 2173   15 5288 1401\n[48707] 1747 2140    5   63 1030 1581  301  235 1711 2702  795 5220  208  120\n[48721]  502  181  313 4388  874 5222    1 1121  431 1959 5109 1499  161 5211\n[48735]  407 1885   73 4065 1634  746 4087  199 4380 3565  497  124  116 4880\n[48749] 1223  456 3814  271  317 1160 4060 5711  406 2175  251 3573 1030  276\n[48763]  223 2142 2319  258 2054 4255 3407  411 3644 1480 1847 5208 1735 4714\n[48777]  673 3675 2067  925 1808   53 3611 4187 5736  586 4412 4297  325 2343\n[48791]  604 1529  179 1131  625   23 4632 6181   19  488 1025  187  357  518\n[48805]  971 2602  483  954 3689 1110 1275 2177 4628 2098 3281 1341 3475 1479\n[48819]  798 2452 5309 1647 3230  695  453 5273 1599 1010 3466 1307  127 4679\n[48833] 3828 1211 2380 5373  327 4445 2144 3302  703    1 2069 2915 2219 1875\n[48847] 1618  401 1623 1174 3807 1212  667 2146  264 3493 1978    3 1256 1519\n[48861] 3386 3572  766 2451 3404  566  323  423 2179 3330 1685 5675 3508 1947\n[48875] 3461 1139 3670 3616 1143   34 3361  482 1496 4640 1163  352 2502 3848\n[48889]  329 4335 1401 4141 3616  300 4326  553  137  998  178 1131 1583 1444\n[48903] 1318 3211 3388 3852 2181 1375 6054 5378  316  432  681 1895 2148 5207\n[48917] 3937  505 1734 1158 1280 1798 1145  165  411  781 3812  348 1641 2095\n[48931] 1697 5299 3795 4567  308 5283 1311 3340  331  841   15 2693 2043  927\n[48945] 1122  456 1639  643    1  431  581 4687 1802 1779 4395 1054  117 1073\n[48959] 2449 5181 3493 1663  686 1373 1151 3567  431 2150 4100 2183 2480 2402\n[48973] 1481 2247  436  246  118 1945 1170  673 5712  337  587  213 3669 1232\n[48987] 1493 5370  477 4171  349 3527 3305  365  286 1783 4949 1819 1296 1231\n[49001]  460  703 6049 3983 3393 3318  841 3588 1902 1995 1171 4696 2297  301\n[49015] 2815  395  294  575 3822 4140 3070 3359  446 4133 2285 1744  573 1935\n[49029] 4662 3231  399 1164 3326 2185 1155 2152 1734 2347 4193 1107 5395  161\n[49043]  500 3391 5199 3846 2181 3202  745 4144 4377  698 4572 3663  802 4596\n[49057]  320  685  325 3532 4978 1729  598 1982 1483 4576 1554 4502 1638  292\n[49071]  145 1942  257  322 1246 4181   85  133   83 4326 3488  843  256 3580\n[49085] 4580    4 1714 3416 3075  134 1705 2280 5091  141 2154   31   95 1156\n[49099]  847 2793 3540 3748  543 2459  636 3357 3347 2088  491 1593  424 1105\n[49113] 2187 1619  343 3357  269  341 2302  172 3523  485 2443 4352   65 3327\n[49127] 1410 5713 5293  423  629 1373 2949  181 1695 5601 3771 3199  375 4684\n[49141] 1161 1394 2231 3825 3622 1463 3411 1284  283 1801 3448 4175 2042 2223\n[49155]  516 4294 3216 2156 1585  512 1499 4705 3813   45  199 1665  708 2189\n[49169] 4695   89  884 3932  408 1365  211 1048 1119 3824  246 3365 1064  525\n[49183] 2488  413 3556   95 2580  652  527 4201  345  291 1078 1635 2751 4195\n[49197]  837 1109  687 1185 1171  918   19  209  418 3310 1200   86 2471 4667\n[49211] 2351 3849  327  626 1117   67  167 3713 1185 1516  263 1629 3301 2158\n[49225] 1407  535 2191 2067  415 5387   61  353 3526 4411  360 4202 2988  509\n[49239]  359 1600 3513 1139 2019 2331   17 4245 1611 1022 4113  691 1013 2139\n[49253] 3843 2002  706 5287  153  711 1751 3486  425 3044 1113  222  318 1321\n[49267] 3325 2391 1053 4410 5298  726 2202 1854 2057    5  926  442 3134  775\n[49281]  389 5274  177  305 2698 4382 3674  119 1128 2039 3445  169  883  359\n[49295] 1576 2160  693 1473 1715 4131   87  237 3854 5268 3591 1526  947  245\n[49309]  645 3330 5383  226  669  434   21 1193 1528 2193  193 2454   83 1729\n[49323]   27 3555 5909   71 1435  235 5769 2307 3433 1691 3349  795  490 4224\n[49337]  225 4191 2370 3470 3542 3374  208 3331  161 5714 3320 5306 2437 1485\n[49351] 4370 1429 3843  363 3573 3304 3662 2159  201 1115 5038  695 2162 2131\n[49365]  578 4127 1224 1147  435 2142 4321 1651 4543 2195 3885 3535  418 5956\n[49379]  702 1271 4106 3604 1049 1464 4333  415  105   65  354 4361 4348 2314\n[49393]  382  771 1083 1680 1039 2065  135  915 2520 5209 2680 4312  371   29\n[49407] 3384 2197  523 2164  985 4085 3317  499 3395 1295  299 1247  347 1416\n[49421] 1066  775 4397  404 5048 4885  427 1205 5815 4204 4672  475 4372  471\n[49435] 4509 4682   97 1543 4536 3621 1677 3660 3603 1371 3833  523 5311 3842\n[49449] 4368 5811 4033 5904  288 1816  108  234  185 2002  718  486 3525  745\n[49463]  642  894 5747 3459  745 1843  252 1403 1714 2243  939 2180 1198  407\n[49477]  563 5068  731 4137  301  601 4533   27 1909 5747  371  303  345 2167\n[49491] 1919 2609 1103  279  883 3525 6177 1772 2134 4471 1175 3351 5503 4150\n[49505] 4241 3550  797 2085  303 4393 1454 1686  423  905  464 4424  575  675\n[49519] 1205 1099 4334 4535  211 4422 4522   27  495 2023 4166  525  453  511\n[49533] 1144  343 3599  421 1622 2169  318 3829    3  404 4122  537 1547 3769\n[49547] 3676 3845 2802 1439 2136  482  420 1879 1263   23 1299  331  683  269\n[49561]  399 1415  315  305 1107 1668 1345 2285 2493 2003 4155  261   15 3547\n[49575]  821 1381 1265  322 1289  183   11  831  461 1548 2279  183 3821 4111\n[49589]  424  807 1717 1808 1273 1216  901 3052 2171  431 3363 3370 2457 3827\n[49603] 1111 1511 3611  544  307 2431 3353   33 2138  885 2047 3507  561 1959\n[49617] 5242 4866 3528 1177   59 4364 3489 2702  327  909 1109 3272 1154  245\n[49631]  857  163 5463 2395 1167 4326  346 3538 1429 1733  183 1271 5195  914\n[49645]  929 4537 1357  677  409  219  281 4246 4388  403  478 3579   84 3868\n[49659] 3478 1480  397 1831 1157 1843 3355 2267 2119 3496  443 2280 3492 5475\n[49673] 3521 4419 4249 4252 4711  994  447 3531 4691 5288 3419 3407 3841 2071\n[49687] 5813 3810 1401 1643  434 5220  189   63 2140 2173 2445 5286 1727   15\n[49701]  502  235 1030 1747    5 1581  120  301  795  207 3759  313    1 1711\n[49715] 5109 5211  208 1885 1121 5222  161  407  431 4638 1499  997 1634  116\n[49729]  497 3565 1626  181 4065  746  456 4880  271  199  124 1223  223  317\n[49743] 3814  251 4060  406 1160 5736 2142 2175  698  586  357  874 4087 3573\n[49757]  673 2054 1030   51  276 4714 1735 1847 4255 3675 1723 3644  411 2319\n[49771] 5208 4380 2067  925   53 1808 4187 1131  187  325  488   19 1529 4412\n[49785]  625 2343   23 5711 6181  518  971 1110  604 2602 3611  954 3828  483\n[49799] 3689 1275    1 4628  798 2452 2098 5716 3281 1479 2177 1341 1647 2144\n[49813]  695 3475 3230 5273 5309 1875 1599 4632 3466 4679 4495 1048 1307  398\n[49827]  127  327 2069 4445 1211 1139 2380 1623 1618 2693 5373 1519  401  453\n[49841] 3386  998 2146  264 1212    3 3572 3404 2179 2451  323 1978  423 3302\n[49855] 4567  667 3330 1685 5675  766 1174 3461 1191  476 1947 3508 3670 3616\n[49869]   34 1256 3361  482 1143 1025  179 1496  436 3493 1401 3848  329 2502\n[49883] 4640 1697  300 4335 3616 1131  178 3807 1629  553 1318 4297 1375 1145\n[49897]  681 3211  316 1734  432 5378 2148 2181  411 1895 3388 1158  165  137\n[49911] 3291 1798 6054 3937 1641  505 1280 3852 3795 2095  781 1639 4141  308\n[49925] 5283  348  483 5299  456  841  431 3340 1054   15  331 5816 1122 1802\n[49939] 2449 5207 1073  117  581 4395 1779 4687 2402 3822 3305  927 1783  527\n[49953]  643 2183  118 1373 5181 3493 2150  686    1 1151 1481 1663 2247 2480\n[49967] 5712 2043 1170  349  246 1945  337 1232  213 5370 1296 1493  477  591\n[49981]  703 3567 1902  673 1231 3983  587 1819 5713 3527 1171 4171 4662 3393\n[49995] 3326  841 3588 4949  301  395 1995 3231  460 3318 3359 2297 2185 3669\n[50009] 2285 2152 1164 3070  802  500  685 4978 6049 1734  635  226  161 5199\n[50023]  371  575 4133 1155  745  286  145 4193   95 1483 4696  325 1107  341\n[50037] 1729 4596 3532  446  573 2181 5395 3663 1600 4576  598  424 3202  133\n[50051] 1638 1982 4326  320  494 2347   83 4140   85  257 2088  617 3416 4100\n[50065] 4580 4181 4377  292 2280 1942 2815  375 1935 2154 4572  287  843 3580\n[50079]  269 1156 3357 1117  491  141 3540  543 3523 3748 1593 1714   31    4\n[50093] 3347 3357 5091 2793  172 3459 3488  485  847 5293 1064  134 1705 3825\n[50107] 4502  256 1619 1410  423 3622 1695 1161 2231 1394 2949   65  311 3199\n[50121] 1365 4328 2459 3216 2302 4144 1284  884  283  516 1105 2223 2187  708\n[50135] 1499 2042 2156 1171  415 2443   45  343 1801  211  894  199 1119  706\n[50149]  512  629 3846  181  345  167  509  525 3932 2189 3556 3365  413  578\n[50163]   27   95 1373 3411 1109 4684  837 2488 3849 3075  408  404  193 3824\n[50177]  246   86 5601 1185 3448 1635 2471 1078 1665  418  209  918   19  434\n[50191] 3771   89 1554 3310 1692 2067 5298   67 4175 4695  291  626  691 1585\n[50205] 2751 3301 4352 2219 1185 2580   61  263 2158  360 4294 4202  359 2139\n[50219]  215 1629 1139  353 3513  299 2191 2988 2331 2019 4201 1611  535 4245\n[50233] 1013 1854 1022  389 3542  726  442 2002 3044 3486   83   17  711  425\n[50247]  318 1053 1165 2057 1516 4411    5  687 1113  153 1751 2391 4705  327\n[50261] 5268 4195 3674  177 3320 1576 2698   29 4382 4667 2160  119 3854  883\n[50275] 3526   87 1715 3325 2193  359  169 3843 2039  947 1128 5383  415 1473\n[50289]  237 3330  305 5274 1193 1528 2454  669 1526   21  775  245 5769 2351\n[50303] 1407 1321  645 1435 3134 2202   71 1729  235 1429  490 2370 3470 3433\n[50317]  795 3349 3304  208 3331  225 3374 2159 1206 2307 3573  693  161 5714\n[50331]  363 5038 2162 1691 1147 2131 4127 5306  201 1115 5287 3445 4113 3555\n[50345]   65 3843 3662 1651 3604  415 4361 1485  702 2142 5956  105  771 1712\n[50359]  926 1049 1464  354 1083  418  915 4348 4191 3885 4224 4033 1039 1071\n[50373] 2680 3591 1224  371  695 4370  135  382  523  435 2164 1205 4085 4672\n[50387] 3384 4312  499 4204 1416 4543  306  347 1295 3317  427 1271 2520 4885\n[50401] 1247 5209 2195 2314 2065 4397 5909 3603  475 2197  471  775 5048 4321\n[50415] 4333   97  985 1066 3660 4682  185 3535 3813 1371 1677 5811 5904  523\n[50429] 1103 4106 3525 4131 1615 3621 4372 4368 4509 2437 3833 3395 1816 5387\n[50443] 3842  486  718 5815 2002  108 4536 5311  234 3391  642   16  443  881\n[50457]  598 1403 2243 1714  939 1198  601 5661 1103  303  654 1884  371 1175\n[50471]  345  883   27 1772 4471 6177 1066 1205 1144 2079  575 4348 1099  675\n[50485]  494  303 4393  905 2802  495  211  421  525 2158  453  265  331    3\n[50499] 2055  399  683   23  269  315  420 1415 3829  482 1919 4111 2418  797\n[50513] 2085  305 1345 2493   15 1547 4122 1456 2003   11 1439 1263  831  563\n[50527] 2285 4246 2279 3847  183 1600  425  698  163  731  807 1717   59  901\n[50541] 1733  449  183 1135 1289 3363 3370 1273 4548 4866  307  936 1506 3496\n[50555] 3507 1111 1511  561 1152 2047 3353 3611   33  885  245 2431 1959 3842\n[50569]  785 1271 3538 1429 3531 2702 1216 1879 1167  461  183  210 3317  929\n[50583] 3478  677  409  219 3052 2870  281  403 2119 3521 3868  281  446   27\n[50597] 1843  540 3492 1157 4240 2267 3407 3419  208 5813 2280 1357 1831 3841\n[50611] 4326 2071  189  478  353   15  120 4380  544  313   63  301  795 2173\n[50625] 1262  181  431 1747    5 1121  208 1581   84    1 1499  161 5222 1634\n[50639]  997 1223  407 2395  271  199  116 5475 1752  874 3611 1519  497 3675\n[50653]  317 1885 3565 1109 4510 5373  251 1689 5463 5736  586 1808 2142  954\n[50667]  523 2457 1160 1030  353 1682 4255  411  279 5711   51  518  502 4412\n[50681] 4187 4495 2067 1529 1131  604  625 4632 2430  925  207 3828 4572  325\n[50695]   19  179   53  893   23 6181  642  187 2602 1606  971 3466 1275 1263\n[50709] 1479 2098    1  483 5174 1647 2177 2452  405  695 1599 1875 3493 5273\n[50723]  905 1307 5208 2380 4679  127 1892 5211 3308 1211 5370 3461 1623 2219\n[50737]  443 3616 1451 3572 1174 1358 5309  680 2146    3  998 1120  423 1947\n[50751] 1256 2965 5675 5951 3386  323 1605 1685 1845 4434 2451  329   34 2502\n[50765] 3361  300 1830 3807 4649  404 4133 1697 1318 3670 1663  178  505 3388\n[50779] 1143 1421 1131 1401 5067 5378 1791 1622  781 1515 3230  165 2181  760\n[50793] 1705 4567 3340 1641 3813 2086 1830 1798  348  411 4417  553 3305 1639\n[50807]  308  483 2043  431 1199  456 1172 1143  927 4395   15 6054  500 4687\n[50821] 1779  581  117 1073 1802  686  118  394 3567 1373 1151  703 2480 1783\n[50835] 2247 1703  213 1170 1065 4171 5956  286 3426  320 3588  257 1819 1493\n[50849] 3669  217  703  337  477 4148 1107 3393 1958 1171 3846  687 3359 2152\n[50863] 1164 3595 3231 2297 2285  325 2347 3070 4120 1734 3391  799  802 1744\n[50877] 2181 1839  161  500  343  145 4181  341 3202 4662  575 4144  301 1729\n[50891]  133 3128 1695  573  745 3049  417 4087   95   85 2815   83 1600 5712\n[50905]  685 3459    4  843  527 2088 3812 3817  256 1618   31 1117 3155  636\n[50919] 1942 1982  375 2459  543 2280  847 4991 3540 3416  635 1706 1156 1105\n[50933]  511 3347 3523 2488 2793 4249 3531 1902 4327 1299 1935 2443  172 1410\n[50947]   65 5615  423 3825 1161  215  629 2231  181  252  141 1394 1178 3663\n[50961] 3285   27 1801 1365 2471 2949 3216 5293 5680 4175 3448  415  516  283\n[50975] 3075 2302 1554   89 1854 4201 3556  708  587  199  706 1585   45  211\n[50989]  894  345  413  167 1205  387  918 1373  551 4537 1725 3310  389 1064\n[51003]  687 4294  837 1516 3365 1712 1109  623   86 1626 1635 1119 3301 1185\n[51017]  841 1284 2351   67  327 1751 5484  244  359 3674   61  926 1185  425\n[51031]  299 5461 2019 5514 1611  426   83 2202 4245 2580 3044 3134 2002  711\n[51045] 4121 1639  288    5  305 1075 1576 4131  753  359  669 1053 3326 3591\n[51059]  119 2391  442  645 3325  245 3486  883   87 4191 2454 1729   21  881\n[51073] 1526  247 2159 2307  795  225  577 3771  237 4532 4382 3827   71 3542\n[51087]  153   65 3330 1047  435 1482 3320  235  702  535 5714 1416  135 3304\n[51101] 2065 2314 1271 3374  258  418 1022 4536 4212  523 3395  347 5811 3535\n[51115] 3336 1677 1371 1692  291 1205 3809   97 3621 3885  185 3470 1295 5904\n[51129] 1066 1103 1816  234 2002  718  108  745 1503  397 2445 5716  839  322\n[51143] 2243  371  279 5747  583 1175 5716 1739  731 1403  345 6177  601 1989\n[51157] 1103 2180 5951  421  400 1099  538 1205  905 1946  303 2085  423  929\n[51171] 3550 1144  525 4166  675 1743 1177  315  318  331 1439 1299 1879 1263\n[51185]  399 1547 2702   23 3845 2285  430 4122    3  420  120  305 1107 1345\n[51199] 1415 1265  260  495 2493 4315  677  424  831   15  497 4111 1444 1736\n[51213]   11 1381  885  461 1289 2279  183 1717 1808  163  820  807 4246 3052\n[51227] 1455 3810  450 5675 1216 3370 4420 3363 1506  909  245 1733   33 2047\n[51241] 3611   59  307 1511 3272 1959 1307  561 2431 1492 2395 1109 2457 3528\n[51255] 3538  936 1111 1273  449 3353 3489 1167  398  857 1271  914 1154 1783\n[51269] 4326  281 1429 1357 4422   84 1197 2053 1157 5195  397 3492  219 2267\n[51283]  409 4388 3521 2280 3478 1401 2119 4364 1626  479 4711 3531  443 4252\n[51297]  276 3507  447 4638 1025 4625 4230  795 3419 1668  207 1643   15 2445\n[51311]  301  208  997 2173 1121  673 1747  189   27  502 1701  586  269  353\n[51325] 1030 1581 1120  181  313 1634 3806    1  653 1885  874 1499 1711 5222\n[51339] 5109  199  407  271 4087  223 3579 1143 3565 1761 5475 4140  124  746\n[51353] 3868  403 5959 3841 1223  116 3814 4148  317 1462  483 1160  994  251\n[51367] 5242    5 1030 2017 5736   51 1847 5711  654 4255 2319 3573 1735 3644\n[51381]  411 3675 1480  604 5208 4412 3611 1745 1131    1 1529   19  325 1034\n[51395] 4495 4187 2343  255 4632  179  679 2602  642  187   23  954  971 1110\n[51409] 3689 3281 1275 1647 2098  925 1341 5174 3795  798 2452 3230  695 5309\n[51423]  453 1875  703 4099 3466 2177 3493 4060 5392 4679 2021  327 4445 3828\n[51437] 5211  698 1519 1358 3807 1623 1174  323 3386 3572 2146 4866  456  998\n[51451] 1212 2451 2380  598  316 1129 3404  264 3330 1256 2179 2219  423 1496\n[51465] 1973 1685 1947    3 4188 4567 3508 3461 3670  482 1143 3361 3616 1479\n[51479] 5373  252 3848  127 1010 4640  587  329 1599 1280 5067 4335 1318  383\n[51493]  178 3616 3982 1697 6054 1131 1178 1583 3211  137 1158 1386 3388 1145\n[51507] 2181  432 1375 1734 3937  681  165 3818 1641  781 3817  482  411   15\n[51521] 5283 1752  348  456 1639  802 3340  308  431  331 5207 1054  505 1401\n[51535] 2043 1843  537 1802  643 1779 4687 2402    1  117 5181 5299 4395 2449\n[51549]  431 4193 3493 3567 3305 4100 1663  686 2247  118  927 4092 1151  213\n[51563] 5712 1073 2183  300 1163 3805 1170  349  673  561 3669  527 1232 5713\n[51577] 4141 5370 1605 1902 1711  301 3527 1205 1819 1171  477  581  575 1231\n[51591]  841 3318 3588  325  258 1935 3983  246  286 1995 4171 4949 4181 2815\n[51605] 3231  799 1164  479 4133 6181 3326 2297 2347 3846  161 3070  685  721\n[51619] 4695 1155 2285 3391  745 4978 2185 4596 2150  500 1107 5199 1945 4144\n[51633]  145  337  703 3202 2181 3663  365  460 4572  341 1600 1483  404  766\n[51647]  320   83  417  573 4580 1246 4212  494 4377  350  292 4502  133 1638\n[51661] 5293  635 3416 1767  689 3488 1942 3199   31 4667 1730 1117 4576 3825\n[51675]  375 2154 1705 3357  847 3075 1245  843 1373 2187  305 2793 3459  256\n[51689] 1156 1105  141  269  287 3523  984 2459 2280   95  343 3357 1619 4684\n[51703] 2443 4328  283 5378 3622 1982   65  134 1410   85 1161  257 3393 1373\n[51717] 3359 3771  516 1729   27 2231 1394 1554 4326 1695 3540  629 3977  423\n[51731] 3580 3849  485 1365  172 3216 2949  884 2223   89  918 1585 4662  199\n[51745]  706  708 2189 1499 3932 1734  753 3448 1171   45  211  167  509  246\n[51759] 2042  617 3365 1048  345 1119  413 4175 2488  376 3748  501 4201 4705\n[51773] 3556 3813  291 4294 2580  415 4195 2302 1635  687 5601 1078 1109  477\n[51787] 2067 2471 1482  359 1064 3310  894 2351  169 4113  434 4382  135  623\n[51801] 3411 3713  181 1182 1407 1185  193 1454  837 5091 3819 1629 3301 2191\n[51815] 2158 5387 4411  209 4202  691  535  353   61 3526 1139 1013 2019  426\n[51829] 2331 4380  866 3513 4245  327   67 1022 2139   83  926 3542 3044 3843\n[51843] 1075 1321 1751  318  425 1854 2002  201  183 3134 1053 2202    5 1611\n[51857] 1113 2698  442 3320 2391 5298 3325 5274 3674 1576 4131  669  359  263\n[51871]  119 3591 2193  418  693   87 4278 3433 1128 3854 3330  711  389 3445\n[51885] 1715 1185 3486  947 1528 2039  245 2454 1473  237 4191 1691 5383 2159\n[51899]  645   21  512  488   71 1435 3304 1729  543 2307  222 3331 4361 3555\n[51913]  235 2370 4370  161 1485  299   29  363 5714 1526 1466 2437 3843 3573\n[51927] 3349  795 2142 4224 3662 5038 5306 2162 2131 1271 2195  695 3264 5769\n[51941]  490  177   65 1147 1429  415 1201  327  225 3535 4312  208  288 3885\n[51955] 3604 5956  883 1464 4106  153 2314 1703 2065 1680  435 5209 1071 3395\n[51969] 1224 4321 1615  371  523 4543 3470 3374  985 4333  771 1651 1295 5048\n[51983]  499 2520 4536 4127 2197 4033 3384 3671 4085  382 2680  347  312 1066\n[51997]  354  915 5287 1677 3317 3603 4885  418  427 1416 5815  352 6073 5811\n[52011]  803 1205  475  775 3833 4672 4583 1371  527   97 3660 2057 3621  371\n[52025]  185  702 4348 1183 4368 3525 4682 4397  523 4186 3842  234 5904  108\n[52039] 5311  486 1816 2002 5268 1247  718 1503  745  303 2164 5395 1895  252\n[52053] 2243 2167  605  407  345  583  371 1909 4137 1403 2134 5747  563 4533\n[52067]  301  279  303  731 5716 1175 5068 6177  464 4471 1919 1103 2609  601\n[52081] 3525 1772 3351 1989 5503 4241 1099 4150 4424  423 4334 2085 3550  797\n[52095]   16 2052 2180 4393  905  495 2114 1205 1686  575  303  929 1714  525\n[52109] 1144 1668 4535 4422  675 1743 4166 3496 4522  318  315 3676  404 3599\n[52123] 2136 3829 3769 1263 1177 1198  511 1879 2702    3  482 2169 1439  120\n[52137]  430  821  399   23 1183 1547 2285  331  305 3845 1265 1107 1454 4122\n[52151] 1415 2003  343  537 1345 2493 4155   15 1162  261  677  421  183  598\n[52165]  461 2279  424 1381   11  885 1289  183 4111 1808 3759  831  163  807\n[52179] 1899 1455 4246 1216 1307 3370   59 3363 3827 3507  909 2138 2171 3611\n[52193] 3538  245  544  307 1511 2047 4364 1111 1959 2431 3353   33 1492 3272\n[52207] 1271 5242 2395 4866  333 1167 3528 1154  561  450 5463 1273 1109 2457\n[52221] 3489  857 3317  281 1783 1717 3821 3547 1429 1357  914  409   84 1592\n[52235] 3052  443 3478  397 1831 3868 2267 4388 3492  219 3521 5195 4691 1289\n[52249] 1157  509 2119 4249 4252 4537 3579 2280 1025  446 5813 3841  365 2071\n[52263] 4711  994  447 3531 4638  795 3419  301 2445 5286   15 1643 2140  235\n[52277] 2173 4419   27  207  422 1121  208 1581 5220  189  434  269  502 1030\n[52291]  653 1711 5288  874  313 1634 3810    1 1747 5211  181 5475 1499  586\n[52305]  161 5222 1885   73  407  199 4065  403  497 1701 3565 4880 4380  223\n[52319]  271  456  746 4087 1223  251 4714  317  116  483 3814 1160  406 4060\n[52333] 2175 3573 3407 2142  124  673  346  411 5711 1030 1847 4255 1735   51\n[52347] 1480 3644 1711 2319  258    1 3675 4187  893 3611 1529  642   19 1131\n[52361] 6181 4412  518  187 4632  925  488 4495  179 1025 2343  357 2602  276\n[52375]  679 4297  954 1600  971 3689  604   23 3828 5109 5736 1110 3281 2144\n[52389] 4628  798 1275 4326 1647 2452  695 2098 3230 1341 1875 5309 5208  453\n[52403] 1745 2177 1599 5273 1010 4679 3466    5 3493  398 4445 1139  327 2219\n[52417]  707 1174 1358 1519 1623 1618  323 2885 3572 2146 2179 1711  264  667\n[52431] 2451 1256  316 1129 1479  998 4567    3 2380 3386  423 1947  566 5675\n[52445] 3404 3461 3508  482 3330 3670 1595 3616 1143  766 3807 1163 2069  329\n[52459]  352 3302 1386 4640  127 5373  300 1685  383 4141 3291 1318 1294 3616\n[52473] 3852 1131 4335  137 3361 1212 1444 1375 2148  432 3211 2181 1798 3388\n[52487] 5378 1145 1401  681  781 1734 1280 1791  165  411 3822 3937 5207 5816\n[52501]   15 3795  456  348 6054 1639 5395  308  436  431 3340  331 1697 2043\n[52515] 5299 1122 3848  505 1054 1641 1779 4687 1802  117 3305 4395 2449    1\n[52529] 5181 3493  643 2150  927 2183 1663 4100  118  686  431 4193 1481  246\n[52543]  802 1151 3567 1373  673 1170 1945  561 3669 1232 2247 4171  213  286\n[52557] 3527 5713 1073  477 1296  460  301 1493 5712  581 1819  587 1902 1231\n[52571] 6049  337  575 4949  349 3318 3393 3983  325 5283 1935 4662 1995 3231\n[52585] 3359  841 3588 2152 4133 4140 2402 2815  703  685 2297 4696 3326 3391\n[52599]  395  479 1164 2347  226 2185  500 3070 3846 2285 1483  721 1155  698\n[52613]  161  478 1107 4572  205  745 2181 5199 4377 5370  255  399 4181  145\n[52627] 4144 4326  320 1171  341  404 1554 3532 1982 4580 4596 1942 4502   83\n[52641] 1729  417  573   95 1638  322 3202 4576  178   85  257 1767 3459  843\n[52655] 1246   31  256 3488 1705 3199 5091 3416 3357 1156  375 3580 2280  269\n[52669] 2187  141 2459  305 1105 1593 2154  847 5293 3347 1117 1775 4978  689\n[52683] 4352 2793 3357 3825 1619 3824  589 3540  753  343  172 3327  283 2443\n[52697] 1410 3622 3523 2231   65 1695  629  133 4684 1394 2302  485 1161 3771\n[52711] 1373 3075  181 2949 1463 4175  423  884 3216 4294 3448 2042 1284  918\n[52725]   27 2223 4695  706 3663  578  708 2156  477   45 3365 3748 1499 3932\n[52739]  211  292 3813  413 2988 4705 1171 2580 1665  769 1048 1585  525 1734\n[52753] 2189 3411  509  167  894 1119 1064  246  134  199  527 4202 3556  516\n[52767]  345  291 4113 4411 1365 5601  415  652  193  687 1692  169 4195 1078\n[52781] 1635 2471  491 2351  359  418  135 2067  626 3843 4382 4667   19 1185\n[52795] 3713 1986 5387 3301 2158 1629 1321   67  299  691  535   61  360 2191\n[52809]  353  837  209 1139  926 2139 3849 1611 1165 2331 3513 5287 1013  203\n[52823]  472 2019 1022   83  426  318 3486 3542 1053  389 3325 1109 2057  442\n[52837]  201  183   89 3310  669 2698    5 3134 2202 1113 1576 4245 2039  327\n[52851] 4131 3526 3674  119  263 4329 2160  693 2193 1128  359  711  775  245\n[52865] 3445   29 3854 1528  435 1715   87  947 2391 3330  543 2454 2002 1526\n[52879]  237 1193 1473 4201 3433 1691 1407 5909  490 2159   21 1729 5274   71\n[52893] 5268 1854 2307 1271 5769  235 2437  803 1435 2142 4224 4370 3349 3470\n[52907] 2370  363 4191 1185 1429 3374 1485  645 3331 5306  225 3573 5714 3662\n[52921] 1115 3843 5038  695 2162 1651 5383   65 1545 2195 1147 1201 3591  208\n[52935] 2131 4204 4127 3555  883 1224 4106 4543  418  795  177 3604 4312 3885\n[52949] 1049 3535  153 4333  771 4085 3304  382 2065 4348 2314 1039  915 3395\n[52963]  374  415 1680 1464 4321 4536 5298  371 2520 1205  523 1295  985 4033\n[52977]  499 2164 4368 2197 4397 5815 3384 1416 1247 3317  427  775  475 2680\n[52991]  347 5956 4672 5209 3603 4885 1677  527 5811 1371 5048  354 4372 4509\n[53005] 3660 3833 3621 4682   97  185 1066 1183  523 3525 5904 3842 5311  702\n[53019]  471  108 4361  234  486 1816 2002  718  745 1503  839 3044 3355  325\n[53033] 2488 1895  252 1714 2243  605 1909  563  371  303 2134 4137 1175 5747\n[53047]  301  583 5068 5716  698  731 2167  279 4533  464 1403 1103 1029 1919\n[53061]  345 3525 1989 1899 2609 6177  601 4150 3351 5503  423 4471 4241 2180\n[53075]   16 1454 2052  575 3550 4393 1205  303  797  905 2085 4424 4535 1099\n[53089]  929 1686 1743 4522 1144 4166 4334 4422  495  675  511 3496  343 1668\n[53103]  315 1263 3599 1149  404 3769  318 1439 3676 1879 2136 2169 1547 2702\n[53117]   23  821 2285  120  331  537  399 4122    3  482 1415 1107  430 3845\n[53131] 1587 1345  305 2493 4155 3829  261  183 1548   15  677  212  424 3547\n[53145]   11 2003  831 1381  461  885 2279  183 1289  421 3821 4111  807 3759\n[53159] 1808  163 1289 4246  450 3052 1717 3370 1733 4866 3363  544  909 2431\n[53173] 3353   59 2138 2171 1959 1273 1307  561   33 1111 2047 4364 5463 3611\n[53187] 1216 5242 3528 3538 1511  245  307 1271 2457 3507  454 1154 1492 2395\n[53201] 1167 1109 3489  281 1783  857  346 3272 1429  914 4326 1357 3827  294\n[53215]   84  219 3478 4691 3579 4537  397 4388 5195  479  509 3355 2119 1157\n[53229] 3868  443 2267 1944 3492 1583 1831 4638 5813 3531 2280  447 1401 1025\n[53243] 5288 4419 2071 5475 3419 1643  795 2445  207 2173 1626 3407  997 4711\n[53257]  235  208  269  301 2140 5220 1701  422 1121   27  586 1030 1747  189\n[53271] 1711  502  181 1581  313 4252  434  161    1  653  994 4249 1634 1885\n[53285]   15 5109 5211 5286  407   73  223 1265 4065  271  199 1499  456 3565\n[53299]  497 1223 4880 4380  116 3814  124  317  409 4087 5222  251 4714  403\n[53313]  483 4060 5711  276 2142 1847    5 3810 5736 3573  654 2175 1735 2319\n[53327]  357  411 1030 1711 4255 3841 3644 5208  673 3675  604  893 4297 1480\n[53341] 4412    1 1131 1745  325  518  256  642  679 4632 4495 6181   19 1529\n[53355] 3611  187 2343  925  488 1456   23  954  179 2602 1110 3689 3828 2144\n[53369]  971 1479 3281 4628 3475  798 5309  695 2177 2452 2098 1341 1647 3230\n[53383] 1875  453 5273 3493 1422 4679 1275 3466 4445  327 5373 4187 3302 1139\n[53397]  703  707 2219 1618 1599 1358 1519 2885 1174 3807  323 3386  264 1947\n[53411] 2146 2179 1685  423 1711  667 2451    3  533 2069 3330 4567 2380 3404\n[53425]  766 1256 3461 1129 1143  482 3670 3616 3361 1496 4640 5675 3848 1386\n[53439]  127  329 3817 4335  300  137  383  178 1318 3616 1131 1651 3211 5797\n[53453] 1697 1444 3388 3291 5207  352 1280 1375 2148 1734  432  781 1145 1158\n[53467] 2181 1843  165  411 3937 1641 5283   15  401 3822 3812  802 5299  348\n[53481] 5395  468 1798 1639  431 5378  681  316 6054  308  505 1054 3340 2043\n[53495] 4395 2402    1  436 1779 4687 1401 1802 2449 1122  117 3305  222 5181\n[53509]  431  643 1073 3567 4100  686  927 3493 1199 2150 1663 4091 1151 4193\n[53523] 2247  118  246  213  349 5712  673 1945  587  337 1373 1232  561 4171\n[53537]  477  301 4696  460 1296 5370 1819 1231  527 1902  581  286 1170  575\n[53551] 6049 1744 3318 3983  365 1171 1493 3588 4596  325  395 4141  370 4133\n[53565] 3070  331 1935 2815 3231 3359  446 1995 1164  500  635  685 1107 2152\n[53579] 2297 3326  721 2347 5199 3846  703 1115 2185 4572  745 3393 2181 3391\n[53593]  161 3202 3669 4377 3532 3663  320 1615 4978 1155 4181 1982 4326  341\n[53607]  404 4576 2285 1942 1554 4662 4502   85 4949   83 4580  133 1638  417\n[53621]  292  573 1246 1775  322 5293  843  145  799  689 3459 3580  256   31\n[53635] 3825 3416  841 5091 1705 3199 3075 3357 2793 2154 2187  305 1105  134\n[53649]  141  415 2280 1156 1117 1151 3540  269 2459  343 1767 3347  847 4352\n[53663] 3357 4144 1463   65  753 1619 1410 2443  283 4328  485 3622 5601   95\n[53677] 3824  629 2231 4684 1373  516 1161 1695 1394 2949 3813  181 3216  172\n[53691]  423 4175 3488 1729 3748 1284 1365  884 2042 2302 2223  918 3411   27\n[53705] 1171 3932 4695  578   89  708 1593 2156 2189 1585  706 4705   45  211\n[53719]  413 1499 4294  199 1448  477 2580  246 1119 1064  894 4201 3448  345\n[53733] 2488  512 2067 4202 1682 1734  226 2471  291 3556 4113  598  415  327\n[53747] 1109  169 3849 1635 5298 1078  837 1185  687   19  359 4667 3310  418\n[53761]  327   67 4382  209 3843 4411  626 3365 3771  135 1407 1629  257 3301\n[53775] 1185 3713   61 2158  318 5387  691 2191 1321  299  535 2139  353 1139\n[53789] 4195 1224 3526  360 1611 2331 3513 2019  426 4245  491 1177   83 3486\n[53803] 1022 1751 1854 3134 3044  442 3542  183 5268 2002    5  669 1053  425\n[53817]  201 1113 2391 2202 1576 2351 4131 2698 3320 5274  177  119 3674  359\n[53831]   29  693 2039 2160  263  543 2454  245 3445 3433 2193 1259 1715   87\n[53845] 3854 3591 1691  711  258  435 3330 1528 5287  947 3325  617 5383  645\n[53859] 1473 1193 2159 5909 1729 3555 1435   21 1526  926 2142 3304 4224 2370\n[53873] 2307 1271 3349  795 3470 3331  208 4370 1429 1485  803 4361  225  235\n[53887]  363 5713 2988 4191 2437 3843 5306  389 3374   71 3573 3662  883 2162\n[53901] 2131 1201 1451 2195 1147 4127   65 3604  307  415  695 4321 4204  652\n[53915] 4543  418 3535 3885  153  771 1049  354 2065 4085 1464 2314 4348 1039\n[53929] 1680  375 5209 3850  382 5714 2520 3395 4333 5038 4033 4312 1295  523\n[53943] 4536 4106  985 2680 2197 1416 3317  499 2164 1247  347  475 4397 4368\n[53957] 4672  427 1677 5811  242 3603 1066 4276 4373 3823  527 4509 1371 3660\n[53971] 4682 5048 3621  193  185 4885 5904 5311 3525 3384  108 1205  234  486\n[53985] 1816  490 2002  718 3842  745 1503  839 3572 2183  746 5769 3521 3523\n[53999] 1895 1714 2243  563 2134 5716 2167  464 4137 5956 1029  407 1909  731\n[54013] 5068 5747  371 1403  583 4533  279  605  345  301 1103 1175  303  601\n[54027] 1919 6177 1899 2609 3525  252 1989 4241 4471 3351 4150 2052 2180   16\n[54041]  929 1099  905  495  575 4535 1205 3550 2085  303  423 4334 4424 4393\n[54055] 1668 1686 1144  587 4422 4522 1743 4166  675  318  315 3496 2136  331\n[54069] 3769 3599  430 1149 4122 3676 1439  399 1454    3   23 2169  120 3829\n[54083] 1263  482  537  821 1879  343 2285 1183 3845 1265 1107 2702  404 1415\n[54097]  305 2493 1345  255   15  212  424 3547  677 1548  183  831 2003 1381\n[54111]   11  461 4155 2279 1289  183 3821 1717 4111  885 3759 1808  807  163\n[54125]  307   59 3052 1216 1307 1289 4246 1622 1111 1273 3370  450 1733 3827\n[54139] 2138  245  909 3538  235 5242 3363  307 1511 2431 3353   33 1109 3489\n[54153] 2047 1959  561 2171 4364 3272 1271 3507 3611 3528 1154 1167 2457  857\n[54167] 1783 5463  327 2395 1429 4866  409 4691 3579  281 3317  914 1831 4537\n[54181] 3492 1157 5195 3521   84  797  219  447  479 4388  509 2267 3868 2280\n[54195]  397  443 2119 1294 4638  478 4711 3478 4252 5475  795 5288 3841 1025\n[54209] 3531 2071 3419  401 4249 3355 1401 5813 1626 3810 5286 3407 1643 2445\n[54223] 5220 2173  301  586 1357  207   15  434 1121  269 4419   27  502 2140\n[54237] 1701 1030 1048  181  422  189  997 1581  208  653 1711  313    1 1634\n[54251] 1713 5109  161 1747 1499  223 1885   73  407 4087 4065 4091  199 4880\n[54265] 1223 3565  116  456 1112 3814  403  271  746  124 5211  317  251 4714\n[54279]  483  310    5   51 1030  673 2175 5711  357 3573  276 2142 5736 2319\n[54293] 1847 4255 1711 5208 1480  411 3644 3675 1735  604 1547 4412 4187  518\n[54307] 3611 6181    1 1025 1131 1529  187  925  642  488  679 1745  179   19\n[54321] 2343 4632  299 2602 4495  954  971 1110 4060 4297 3828 3689 1341 1275\n[54335] 3281 2452 1479 2177 4628 4326  798 2144   23 2098 1647 5309 3230  695\n[54349]  453 1599 1875 1572 3466 4679  703  327 1139 4445 5373 3302  707 2219\n[54363] 4380  325 1358 3493 1131 1519 1174 3807  667 2885 1711  253 3386 1947\n[54377]  323 2146  264 1212 2069  423  316 1129 2380 4567 2179    3 1256 1685\n[54391]  766  998 3330 1143 3670 3461 5675  482 3361 3616 1496 3404 1386 4640\n[54405]  329  300 5273 3848  127 4335 3572 3806  137 3291 1163 1131  893  383\n[54419] 1651 3616 1318 3211  352 2181  178 1145 1280 1843 5207  681 1158  781\n[54433] 6054 3388 3937 1444 5378 5797  411 1697  165 2148 1798 3812 1641 1734\n[54447]  456 5395  802 3822  432 5283 3795   15 5299  308 1054 3340 4395  331\n[54461]  505 2402  436 1401 2043  431 1639 1779  643 4687 1073 1143  117 3305\n[54475] 1802 2449    1 4100 5181 3493  246  431  686 4091 2150  927 2183 1151\n[54489] 3567 1481  213 1663 2247 5712 4193  118  673  337 1170 1373 1232 1945\n[54503] 2451 3669  365 1493  477 4696 1296  348 1231 4171  286  561  460  301\n[54517]  581  575 5713 6049 4949 4141 3983 3318  325 4596 1819 1902 3393  294\n[54531]  841 1995 2815 3588  652 1171  395 1744 4662 1164 3359  446 1935 3846\n[54545] 3391 1107 2297 3231 2152 2185 2347 4144 4978 3070 3326  703  161  745\n[54559]  685 2285  258 4572 3202 1061  145 3663  500 2181 4377 3532  721  320\n[54573] 4326 5199 1483 4181 1554  404 4133   95 1155 1982  573 1942 4576 1638\n[54587]  292 1729  257  417  349   83 4580 4502  341 3580 3459  256 3416  689\n[54601]   31  843  491  134 3199  322  141 3825 3357 3523 2187 1156  415 2280\n[54615] 1105 1705 3347  305  269 2154 1767 3488 1593 5091 3540   85  375 2459\n[54629] 1619 3075 3357  847 4352  283  753 3748 1246  485 2443 1463 4684 5601\n[54643]   65 1373 2231 3622  578 2302  516  181 1117  629 1695 3824 2949 1410\n[54657] 1161 3327 1394   27 4175 3771 3216 2223 1365 1284 3448  884   89 4294\n[54671] 3411 3932 2042 4201  477  918 1734 2189  708  133  534 2156 2988 1585\n[54685] 1171  423  211  199  698  996 1499 3813 5293 2580  413  894 3365 1060\n[54699]   45 1064 4411 1083 2488 1119  246 3556  706 1682  256 4705  291  343\n[54713] 1635  193 4113 3849 1109  434  837  415 2471 1078 2067 5298  687   19\n[54727]  359  345 1185 3310  598  172  418  327 1692 2351   67  135 4667 1407\n[54741]  209 3713  626  169 5387 2139 1185 3301 4195   61 4695  360 2191 1321\n[54755]  244  535  353 1139 1629 4202 2331 3526 5287 1455  318 4245 1611 2158\n[54769] 2019 4382  426 1854 3843 3542   83  299 1022 1751 2057 3044 5268 2002\n[54783]  926 3486  726 1053  183 2698  669 3134  425 4131  691 2202  201  442\n[54797] 3320  389    5  263 3674 3513 5274   87  543 3854  177  359 1526 2193\n[54811] 2039  119 3591 1473  490 1715 5383  237 2160  245  947 4191 3325   29\n[54825] 3445 1127  711 1576 4329   21 2454 5909 3330  645 2391 1193 1113 1729\n[54839] 1259   71  435 4361 1528 3304 2307 1691 3555  693 1435 3331  803 3349\n[54853]  235  225 2370 3470 1485 3374  208 2142  363 1429  795 3843 5769 5306\n[54867] 2437 3573 1618 5370 1271 2131 4127 5038   65  695 2162 2195  415  292\n[54881] 1201 1147 4321 4204 1224 3535 3604 4106 5959 3885  418 4312 1703  153\n[54895]  771 4333 4348 2314 4085 2065 4370 1464 5209 1039 1680  288 3395 4536\n[54909]  523 1205  382 1295 3662  354 3317 4543 4033 3384 2164 5815 2197  347\n[54923]  499 1416 5048 2159 1247  427 4885  775  475 2680 5714 3603 2520 1677\n[54937] 1066 4247 4672 4368 4397 4372 5811 4509 3621  185  617  985 3525 5311\n[54951] 1371  527 5904 3837 4224 3660  234  486  108 2002 1816  718 3833 3842\n[54965]  745 1503  839 1775 5503  346 2793 1895  598 2243 1714  605 2167 2134\n[54979] 1403 4533  371  731 5747 5716  301 1198  303  311 1909 5068  464  563\n[54993] 1175  345 1919 3525 1103 2609 1989 4471 1899 5503 4241 3351  423 6177\n[55007] 4150 2180  279 1099  575 4137  929 4424 2052   16  303  905  525 1686\n[55021] 4535 1668  495 2085  601 3550  797 1205 1144 4522 3496 4166  675 1743\n[55035]  587  318  343 4334 3599 3676 1439  399 4422 2702 2136   23  331  482\n[55049] 2169 1879 3769  404 1547    3 1183  430  464  120 1622  821 3845 1107\n[55063] 1415 2285  305 1263  315 1265 2003 2493 1345  425 3829  421  183 1548\n[55077]  329  461 1454  424 1381  885 3547 1289   15 1289  831   11 2279 4155\n[55091]  183 4122 1808 3821 3759 1717 1455  807  163 3052 1216 3370 3363 1733\n[55105]  450   59 4246  245 2171 4866 1111  677 3507 2138  143 3353  307 1307\n[55119]  544 1959 2047 4364   33 1273 2431 3611 1177 1271 5242 3538 1511 2395\n[55133] 1109 2457 5463 3272  327 1154  857  281 1783 1167 3827  561  914 3489\n[55147] 1429 3528  409 1357 2913  294 1157 4111 3868 3478  346 2267 2119   84\n[55161] 5195  443 3579 3355 4691 4388  211 4638 4537  509 1583 5813  397 4625\n[55175] 3531 4711 1401 2280 2071 4419  401 4252 5475 1831 3419 4393  795 5288\n[55189] 3810 3407 1626 1025 2445   15  434 1643  301  189  208  207 2140 2173\n[55203]  269  502 1581  235 5286 1121  586 1747   27  422 3492 1701 1030 1711\n[55217]  653  874  181 3841  313 1634 5220 1885 1499  161 5211    1   73  997\n[55231]  199 5109 4065  497  223 3565 1223  271  219 4380 4880  456 4087  116\n[55245]  746 3521 3814  407  317  124  251 1160  403 4060  781  673 5711    5\n[55259] 5736 2175  589 2142 3573  357 1030  523 1847  483 1224 5222  411 1711\n[55273] 5208 3644 3675  893  604 4297 3611 2319 1529 3317 1131    1 1120 1745\n[55287]  325  187 4412 6049  179 2343 4632 4495  679  518 4255   19   23 2602\n[55301]  925 1259 3689  954 3281 2177 1647 5174 4672  798 2098 1275 2144 2452\n[55315] 1479 1341 3230  695 3828  817 3466 1875 3493 5273 4679  327 1010  703\n[55329] 1139 4445 5373 2219 3302  707 1358 1519  453  264 3807 3572 1174 1212\n[55343] 1115 2179  998  316 1711  488  423  323 3404 2069 2146 4567 2380 2451\n[55357] 1623  667 1256    3  766 1947 3461 3508 1685 1110 3330 5675 1599 1129\n[55371] 3670 5301 3616 1143 3361 1496 3386  127  482  329 1386 4335 3848 1131\n[55385] 3616  300 1318 3388 1375 1651 3211  137  178 5207 3291  383 1843 2181\n[55399] 5378 1145 1697 1444 2148  432 4640  165  781 1798 1641 1734  681 5283\n[55413] 3937 5395 3795 4187 2885  348  456   15  802  436 6054 3340 1280  352\n[55427] 3267 3822 2402 1639  505  331 2043  308 1158  431 4687  117 1779 4395\n[55441] 1122  643 1802 5181 3493 5178 3305  411 2183  213  927  246 2247 2150\n[55455] 1233 1151    1 2449 1663 1073 1373  686 1170  349 1054  534 1945  673\n[55469] 1401 4171 1232 3511 3669  263 5370 1493  286  477  460 6101  561 3567\n[55483]  118  581 1296 3318  575 1231 3983  301 1819 1995 3588  325 6181 4090\n[55497] 1171 5712 1164 3231 3359 4596 2297 4315 2815 3070 2285 4144 2152 2185\n[55511] 4978  395  685 1107  500  491 2347 3326  161 3391 1618  652  721 3393\n[55525] 3846  703  745   95  145 5677  705  320 3532 3202 4181  341 4572  775\n[55539] 1155 4662  257 4576  573   85 1744 1554  417 1942 1638 1775  404  337\n[55553]   83  256 4377  322 1767   31  689  843  370  292  134  305  141 3540\n[55567] 3347 3416 1705 3075 1117 3199 3459 5091 2280  415 1246  847 2459 1593\n[55581]  375 2793 1156 3825 4326 3523 3504 1729 3357  753 2443 1410 2231 1105\n[55595] 1619 3837 2154 1695 1463 1394 4175 5237 2949 1373 2302  172  181 4702\n[55609]  884 3327   27 1161   89  283 2187 3663 1284 2223  423  211  918 3216\n[55623] 4294 1171 1734  706  343 2988 1499 1585   45  525 1048 3411 2189   65\n[55637]  167 3771  512 3748  225 3365  708  413  345 1064  894  431 4580 3448\n[55651] 2042 1119 4201  415 2471 4352 3556  837 1109  291  687 1185 1078 2156\n[55665] 4502  169 5298 2351  193  359 5259 1407 3580  199  133  418  209  135\n[55679] 3713 1185 3301 2158  299  535 2191   61 4411 4202 2139 1635   67  237\n[55693] 1611 3526 1013  604 2580 2331 1139 4245  318 3843   19  208   83 2488\n[55707]  353 3542  327 2067 3325  426 4382 3513  340  669 3044 1053  442 1854\n[55721]  626  389 1022 1751 2002  425  183 2391 2202 3310  330    5  201 3134\n[55735]  926 4410  258 5287  119  263   29 3320  501 2160   87 1715 1576  245\n[55749] 1691 1113 4113 3591  471 2193 2698  947 1526  435 2039 2454  177  359\n[55763] 1473 3433  711 5268 5678 1193   71 2307 5909 3674 1435 4430 5769 3304\n[55777]  543 2159 3445  235  161 3486 2370  225 3349 4152  645 2437 1416 1271\n[55791] 4370  545 5714 5306  803 1485 3470 3662 3854  795 1729 3843 4127 2195\n[55805]   65 1201 4543  475  415  418 3885  883 3374  363 3573 1049  915 1464\n[55819]  153 2314 4361 4191  354 1429 1039 5038 1680  523 1295 2065  985 5209\n[55833] 2197 4224  499 3384  287 4312 5274  371 3535 3317  347  427  775 4204\n[55847] 3395 4033 4131 3330  382 2164 1677 4333 1205 4885 1218 3621 3833  185\n[55861]  702 5048  527 1371   97 2680 1183 3660 5811 1066 3842 3525 5311 4682\n[55875] 3603 5901  486   21  108  234 2002 2520 1816  718 5815 1503  839  745\n[55889] 3622 3604 2162 4695  971  745 1816 1895 1714 2243  303 2167 2134  563\n[55903]  731  605  583 1403  407  279 1909 1175  464  301 5716 1198  371 1919\n[55917]  345 4533 1103 3525 1899 2609  601 4471 1989 3351 5503 2180 4241 4150\n[55931]  423 4393 4424 5068  534  797 1205 3550  575  303 1099 4334 2085 1454\n[55945]  905  929  525  495 1463 4522 1144  675 1743 1668 4535 4166 2052 3496\n[55959] 1622 3599  318  511 4422 5747 1439 3829 3676  430  343 2136 2169 2702\n[55973] 1879  331   23 4122 3769    3  315  537  821 2285  404  482 1547  399\n[55987] 1265 1415  305 1263 1107 4155 1299 2003 1345 2493 3547   15  831  183\n[56001]  261  120  421  677 1381 1548  322  183   11  424  461 1289 2279 3821\n[56015] 4111  885 4137 3759  807 1808 1717 1216 3052 4246 3370  431 3611  163\n[56029]   59  307 1273 3507  909 1733 2138 1959  561 3353 1111 4364 2047 4866\n[56043]   33 1511  544 2431 2171 2457 6177  245 3528 3538 1109 1271 3272 1177\n[56057] 1167 1154 3489  346 3317  281 1783  857 1429  914 3363 4691  409 1831\n[56071]  509   84 1357  219 3478  397 5195  478 2267 1157 3845 3868 1480  479\n[56085] 1944 2119  327  443 3579 3521 3355 3492 4388 1025  795 2395 4711  994\n[56099] 2071 5813 3531 1401 1626  447   15 2445 3810 1307 1643 2280 4252 5220\n[56113]  207 3827 3407  301  434  997  208   27 1747 4537 1121  586  502  235\n[56127] 2140  269  161  422 4419 2173 1581  189 1030 1701  653  181 4249 5286\n[56141] 3841  874 5242  313 1634 5463 1727 5211  407 1499  223 1885 5109  497\n[56155] 4065  199 4087    1 1223 4638  271 3565  746  403 4380 1711 5475  317\n[56169] 4714  483 1160  251 4880 2175    5   51 2142  456 1030  673  411 4255\n[56183]  698 2319 1847  276 1583 1735 5711  406 5736 4060 3675 3611  893  124\n[56197]  518    1 1529 3644  187  357 6181 1711 1131 4412  642  488   19 3573\n[56211]  179 2343 4495 1025 4632   23 1745  679  925 1110  954  116  325  983\n[56225] 3828 1275 5174 1647 2098 1341 3230  798 1479  695 2452 2144 4679 1732\n[56239] 1875 4628  398  707 3302 2177 4445 2219 3689 1618  971 5309 1519 1623\n[56253] 1358 1174 5208 1139 3466  323 3386 2069 1947 4567  766 1212  423 1711\n[56267] 4187  667 2451 1685  566 1599    3  327 3281  482 2380 1129 2885  998\n[56281] 5675  453 3461 1256 3670 3493 3330 3572 3616  436  127  329  264 3361\n[56295] 4335 3404  383  300 1496 1697 1143  178 1318 1289 1629  316 3508 3211\n[56309]  781 2148 1375  432 1798 3388 1158 1131  411 3937 2602 1145 1280 1641\n[56323] 3822 3795  424 5288  681  802  456 6054 1843 4687  505 1054 2043 3340\n[56337] 2181  331   15 1122 1779 1802  137 4640 1073 5816 1421 3305  643 3852\n[56351] 1151 2449 2402 4100 3567  927 2183 1386 4395 3493  213  527 2247 1663\n[56365] 5207 1481 5299  483  348 1734 1270 1170 4193  246 1401 1945  337  308\n[56379]  673    1 5712 1373 1232 1819 1493  286 1902 5395 1639  301 6049 3983\n[56393]  575  477 1231  325  581  841 3318 3393  431 1995 1296  446 3359  554\n[56407] 1164  395 1935 2347 3669  226 4662 2815 3231 2152 1107 3846 2285 2297\n[56421]  703  500  635 4133  311  161 1155  349 3663 2181 1483 4326 3070  745\n[56435]  460 3326 3532  561 3588  341 4171  320 3391 2185 1600  257  686  591\n[56449] 1638   85   83 1942  292  371 1246 4576  494 4377 1982 4949  118 1775\n[56463]  256  843 3459  598   31 3580 3527  145  689 1156 1705 2187 5091 2459\n[56477] 3199 3347  141  343  847  269  287 1593   95 4580 3202  491 3540 3357\n[56491] 1767  305 1619 3075 1171 3824  753 2280  375 2443 3488 4352 1064 3523\n[56505]   65  172 3416  485 1394 2231 4502  587 3622 3327 1373 2793 3357   27\n[56519] 1695 3771 3216  629 1284 2042 4572 5199 4978 2302   89  884 3448 2223\n[56533]  708 4596  479  167  706 1105 2156 1665 4705  477  134  211 5293 4113\n[56547] 1729 1119 2949  199  215  509   45  573  721 3365  246 4140  685 2189\n[56561]  345  894 1206  133  415 5601  181 1109 1365 3310 1635 2471  434 4175\n[56575] 3849 4195  418 1692 2488 3932  578  525 1171 1117 2351 3813 1734  359\n[56589] 1585 1629  516 1161 2158 2191 4294  423  135 2139 1185  691 5298   19\n[56603]  535  404 1013 1410  626 1611  360  918 2331  687 3843 1139 2019 3556\n[56617] 1407  426 2580 1499 1022   83 4245  291  209   67 3044   61 1053  256\n[56631] 3513  299 1113 3325  201 2002  425  183 1576 4382 4684  669 1854 3542\n[56645] 2391 1078  604  926 4667 2202  119  177  359 3674 2057 2067  693   87\n[56659] 3330 1715  435 2039 1473 3320 4131 1128 1528  245 2454 3486 4191 2193\n[56673] 3854  353  415 2159 2988 2160   29 1729 1165 1751  235  947 1321  837\n[56687] 1185 5287 3349 1435  795 2370  193 3591 2307  803 1115 4370  161 3445\n[56701] 5909  327   71 1526  775 2437 1485 5769 3331 5387  543  225 4361 3433\n[56715] 3526 1429  363  490 3301 3304 5306 3470 3662 3843  695 2131 1271   21\n[56729] 4224   65 2195 1147  208 1691  237 4127 1651 3604 2162  263  645  418\n[56743] 4312 4333 1201 5956 4106 5383 3535 2698    5 3885 1464  883 4204  915\n[56757] 2314 1071  771  711 2065  318 1049 1712 5274  442 4321 3134 1224 1039\n[56771] 3395 4536 1205 4348 4543 5038  354  985  624 2520 2164 1193 2680  523\n[56785] 1416  775  347  427 1066 3555 3384 4885 4033 4368 3603 4397 5714  371\n[56799] 2197 1247  389 4085  475 4509 1677   97 5815  471  527  702 4672 3833\n[56813] 3621  153 1295 5048 5209 3842 3660 3525 1371 3317 1183  499 3374 5311\n[56827] 2142 4682 5811 5904  108  234  486  185 1615 2002 5268  718  523  382\n[56841]  839 1503 3825 3848 4141 4144 4181 4201 4202 4372 4297 4411 4695 4696\n[56855] 5181 5273 5283 5370 5373 5378 5713 3807 3411 3419 3573  252 2146 2150\n[56869] 2154 2179  604  117 3291  169  413  415 3814   16 3616 1895  598 2243\n[56883] 1714  731 5716  795 1198  303  605 5661  583 1919  698 1175  563 4044\n[56897] 6177 1103  883 1403 1899 4471 1205 2180 1099   16 4393  495  797  601\n[56911]  654 1946  303  575 2085  905  929  479  371  525 1144  494 4348 1843\n[56925] 2158  421  675  345  430 1263  318 3829  265 1547  315  540   23    3\n[56939]  482 4111 2702 4122  331 1415  120 2285 2418 2493 2003  305   15 1345\n[56953] 1456  677  831 1439  885 1289  461 2279  183 1600  163 3847 3496  657\n[56967]  807 1717  279  561 3370 3842 1135 3363   59  449  936 1273 4548 3507\n[56981]  307 1511 1733   33 2047 1216 1111 1307  785 1506  245 1152 2431 3538\n[56995] 1271 3611 3317 3531  210 1783 1879 2870 1167 1429  281  446   84  409\n[57009] 2119  752 3478 3868 4866  397  478 3492  281  443 2280 1157 3521 3353\n[57023] 2267  219 3407 5813 3419  208 4240 1959 2071 1357 4326 1025  795 3841\n[57037] 4510 2445  183 1682  208 1121   11  544  422  586  301  353 2173 1701\n[57051]  269   27  313 1747 1262  502  181  653 1581    1 1634  997 5222 1499\n[57065]  199 3565 4380 5475 5370 2395 1223 1752 1519 3611  497  116  407  874\n[57079] 5373  317 1885 3675  483 4246  251 5463 1109 2457 1689   51    5 1030\n[57093]  271  954 5711 2142  523 1160 4255 5736 1651 1808  411 2067 1984 4412\n[57107] 4495  604 4187  925  518   19  179 1131    1  570 1529  403 4572  642\n[57121] 1030 4632  187  679   23 1711 3828 1275 6181 1263  971 3466 2177 1647\n[57135] 2452 2098 5174  405  695 5208 3230 1875 1599  905 4679  703 3296 1892\n[57149] 5211 3461 5306 3807 2219 5309  325 5273  680 1180 1623 1174 2146 3616\n[57163] 2451 1972 1256 3572  323 5951 3386  404  423 2380  998    3 1129 5675\n[57177]  316 1947 4567 1711 2965 2602 1685 3361 1605 1845  329 4434 1143  300\n[57191] 1386 4133 4649 5067 3670  383 1318 3493 1131 1120 1697  178 1358 3388\n[57205] 1421 1863 2181 5378  687 1798 1663  760  781 1705 1830 3813 1622  348\n[57219] 1641  501 3305 3340  424   15  802  505 1172 2006 1269 2043  308  431\n[57233] 4417 6054 1515  500 4687 1401 4395 1802 1779 1073  117 3567  394 1199\n[57247] 1703 1151  686  118 2247 1639  213  927 1373 5712 1170  561 4171  337\n[57261] 1232 4148 1493  301 3426  257 3588 3669  286  477  217 1819 5956  127\n[57275]  575 1171 1958  325 3393  320  395 4144 1107 2152 2815 1744  703 1164\n[57289] 4120 3359 3391 3231 2297 2347 1839  343 3846 2285  500 4181 1834  161\n[57303] 3326  483  511 2181  145 3202   95  341 4662 3663 3595 1600  573  567\n[57317] 1618 1695 3416 3128  527 2889   83 1942  841  745   85 3049 3812  133\n[57331] 1729  685 2088 4249 3817  256  843   31  689 3155 3459 3075  305 1117\n[57345] 2280 1593 3347 2793  635 1105  847 1706 1156 3523 1982 5615 2488 1299\n[57359] 5207 3070   65 1902 2459 5293 1410  283  753 4087  516 1373 2443  172\n[57373] 1935  215  181 3509 2231 2302 1394  629 2949 3298   27 2471 3825 1178\n[57387] 4175 3216  252 1161 3540   89  423 5680  617 4201  918 3448 2580 1854\n[57401] 3516  708 4294 3556 1585  141  894   45  199 1734  211  345 1554 1119\n[57415]  512  706  375  587 3365  387 3301  551  291 4537  415 1185  543 1712\n[57429]  687  359  623 1365 3310 1725 1064 2351 1626  135 1284   67 1635 4382\n[57443]  299 1109 1185   61  535 3674 5514 5461  247  244 3297  926 2019 1611\n[57457] 4245  837 1639 1053 3542 3486 3044  669 1751  183 3134  201  442  425\n[57471] 1576 1075    5 3325 2002 2202 2391 3320  288 4131  327  263 2097  119\n[57485]  359  435 3591  245  711 3330 2159 4191   21 2454 1729   83  645 3304\n[57499] 2307   71 3771  577  235  795 3827 1271 3374  237 1416  803 4532 5714\n[57513] 1526 1047   65  225 1201 3470 1022  418 1482  153 3535  883 3885  258\n[57527] 2065 2314  915 1205   87 3395 4536  523 1295 4212 3505  499 5811 1692\n[57541] 1218 1371 3809  702   97 3621  185  527 1183 1066 5904  413  108  486\n[57555] 1816  234 2002  718  745  839 1503  509 3052 1479  161  165  399  411\n[57569]  322 2243  303 1403  279  371  583 5747 5716 1739 1377 1175 1955  601\n[57583] 2042 1103 6177  400 1989  479 2085 1205 2180 4274  303 1099  495  525\n[57597] 3550  929  538 1946 1144  905  421  675 4166 1177  318   23  331 1299\n[57611] 1439 1263    3  315  472 2702 2285 1415 1879 1547  399 1107 1345  305\n[57625] 2493  260  424 4122 1975 4315  497  915 4111  831 1444 1381 1736   11\n[57639] 2279  443 1289  461   20  163  885 2916  183  677 1216   59 1717  807\n[57653]  866 3810 1455  450 1273 3052 3363  561 1733 2939  307 1307  398 5675\n[57667]  449 1111 1511 3370  936 1072 2047 4246 1492 1959 2190  316  398 2919\n[57681] 3272 2457 2946 3489  783 1154 1783  857  820  914  281 1429 1109 4422\n[57695]   84 2053 2119 3478  397 4364 4388 2926 1271 2395 2901 2912 2959 2267\n[57709]  328 1626  219 2280 1668 1743 4230 1357  994 1182 4625 4638 5666 4711\n[57723]  509 4420 1025  343  795 5317 3419 1643 1457   15  208 3531  301  447\n[57737]  673 1121  189   27  586 1701  394  422 2173 5133 1747  275 1581  181\n[57751]  970 1120  997 1634  313 1711    1  653 3806 1499 1885  874  271 4087\n[57765] 4935  223 3085 3579  456 3565 5959 1761  199 4140 1030  403  116 1223\n[57779] 1143  876 5242  317 4148  251  407 1462  218  160    5 5711 1030 5736\n[57793]  483   51 1847 1160  276 4255 5443  411 2017 2319  469  654 1735 3675\n[57807] 3644 1480 4412 3611  604    1  518 1745  255 1131  325 4187 4632  642\n[57821]  925  679 2343 1529  179 3374   19 1090 4495 1110  187 3828 5309 3281\n[57835] 5346 3689 2177   23  971 2506 5417  695  798 1479 1275 1869 5392 1647\n[57849] 1250  409 1599 3230 2098 3673 3466 4679  703 1010   33 5373 2021  327\n[57863] 2219 4445 1875  698 5333 1442 3807 1692  323  172 1623  998 1256 2146\n[57877]    3 1711 3386 3572 2380  598  316 1947   63  766 1129 1973 1289  423\n[57891] 3404 4188 4567 1785 1496 3508  483 4866 3461 1685 3670 1143 3361 3616\n[57905] 4640  127  252 1386  329 3848  578 3566 2639 1280  300 4335 1318 4099\n[57919] 2902 3996  178  144 3629 3305 1178 1131  383 1375 1401 1697 3818 3388\n[57933] 1583  781 1145 2043 2181  432 6054 3805 1641  482 1639 3817  411 4092\n[57947] 3795 2868 1752   15  165  802 5207 1734  505 1843  308 5437 5378 2402\n[57961]  331 1401 5299  537  431 1054 4687 5023 1779 4395 3305 1802  643  117\n[57975] 1073 1775 3567  431 1835 4193 3493  686 1151 2150 2247 1509    3 2183\n[57989]  927 1663 4171  213 1170  337 5712 1232  673  561 1373 3669  681 1070\n[58003] 4100 1605 4483 1819 1902 4141 5391  301  460  286 5713  118  581  477\n[58017] 4695  456  575  841 1231 2918  325 4596 2907 3070  527 1171 4133 1744\n[58031] 3588 1107  703 3359  799 1995 2940 4572  685  721 2297 2913 4212 5580\n[58045]  479 2185 2285 1935  365 1164 3391  635 1773 2815  258  745 1155  419\n[58059] 4144 2181  145 2903  320    1 1483 3231   95 4326 3202 1982 4377  341\n[58073]  350  133   85 4576   83 4181  573 1942 4580  257  404 1729  417 5455\n[58087]  494 2900 4502 1246 3663 1705 1098 1638 3778 3199 1767 2154 4667 5091\n[58101] 1205 2922 1156 2187  421 3357 1105  256  269  636 3488 1117  467  375\n[58115] 2927  847 3825 2917  305 6181 2459  409 2793 3416 2280 1245  343  753\n[58129] 2231 3849  287  843 1600 1410 3075 3357 1619  172 5601 3622 4684   65\n[58143] 2904 2943 1554  516  283  181 2302 2949  485  423 1394   27 5293 1161\n[58157] 3813 4175   89 1695  884  477 3771 4201 2910 1373  356 4294  918 2223\n[58171] 2936 1289 3932 3411  246 1171  501  199 1104  769  211 1585  413  706\n[58185] 2960  221   45  167 1119 4705 3365  708  894  345  617 1048 2189 2488\n[58199]  327  415 3216  327 3556 4202  488  291 1022 1185 4195  312 1635  509\n[58213]  359 1519  193 3819 3069  376  687 2934 1109 1518 2351 2347 1407  629\n[58227]  169  135   67 3713  837 1078 2580 3843 2158 1185 1158 2147 3301 4113\n[58241]  691 2370 2191 5451  587  353  299  195 3526 1629 1611  926 1139 1013\n[58255] 1075 2019 4349 5298  426 2915  442 2331  183 1221 4382    5 3486 1064\n[58269]  201 2954   87 4411  415 1053  669 1531  413  400 2923  434  288  425\n[58283] 2202 5274 4131 2908 1734  263 5268 2391 3591 1751  119 1854 4662  947\n[58297]  543  418 2039  359 1715  177 3992  693 3134 2928 2193 1473  245 3674\n[58311]  711 1528 2139 1576 5383  237 1128 3445  389   29 1691 2159 3513 1526\n[58325] 2937   21 4380   71 4278 2142 3349 1271 1768  466 2931  235 5769  161\n[58339] 3264 1091  347  435 5287 2909 1435  225 1321 4361 2911 1485  535 5714\n[58353] 3573 2437 3374 1429  363 2951  302 1466 4370 3044 1346 2162 5038 2925\n[58367]  803 2131 2950  208  883  152 2195 4321 2065  695   65  415 1224 4312\n[58381] 2454 1651  418 5956 1729 3662 1049 4106  915  427 3535 1147 4191  153\n[58395]  771 4333 2314  352 1464 3604 1680 1201 4033  207 1071 2914  371 3494\n[58409] 1159 6073  168 5237 4085  523 4543 1205 1295 3384  985 2164  499 2197\n[58423] 4397 1066 4536  775 3317 4368 1416 1247 4224 5815 1677 5048 3603 4885\n[58437]  475 5811 2680 4672  371 4348 1371 4583 3833   97  527 3621  702 4682\n[58451] 5311 4186 1183 3842 3660 3525  185  523  108  486 2002  234 1816  718\n[58465] 5904  745  839 1503 3340 2179 1816 1895  252 2243 1714 2134  371 2167\n[58479]  583 1198 1909 1403  407  731 5747  303 1175 4533  605  301 1377 1517\n[58493] 1716 4137 5716  279 4471 3525 1919 6177  485 1103 1772 4241 3351 4150\n[58507] 2085 3572 1205 1099   16 4393  332  905 1360 3550  701 4424  929 4334\n[58521]  495 2052  303 1668  525 4535 2180 4422 1454 1144 4522 1121 1463 3496\n[58535] 3769  575  511  675  318 1622  797 2136 4166  343  315 4122 2169  537\n[58549] 1879 1263 1439 2702   23  430 2285 1415 3829 1183    3 1547  331  472\n[58563]  347 1107 4155  482  399 2493 3676 1345 2003 3599 1989  601 2606  305\n[58577] 1352   15  261  421  424 1162  183  831 1975  677  212   11 1381  885\n[58591]   20 2279 4111  461 2916 3547 3759 1717 3817 3052 1289  163  183  807\n[58605] 4866 1273   59 4246 2939 3363 3370  561 1899 2138  450 2047 3827   33\n[58619]  307 2171 1111 1177  544 2924 2190 5242  245 1511  346 1216 1959 3272\n[58633] 2395  857 5463 1154 1783 1271  398  398 3489 2906 2457 1109 1455 1357\n[58647] 4364  914 1429  409 2932 2912 3579   84 1692  397 1831 2926  219 3478\n[58661] 4537 4388 4691 1743 2119 3355 2901 2267 4638 1289 4249 3385  447  294\n[58675]  509  443 3419  994 1025 4419 2071 4711 5813  795 4935 2280 1626 3810\n[58689] 4252 1643   15 3407  997 2173 2140 5099  434 1121  189  301  394 1747\n[58703] 1307  586   27 1030  422  235 5133 1581 1711  181  653  874  161 5443\n[58717]  970 5220  313 1499  281 1701 1885  407 2921    1  275 4065 3565 4087\n[58731]  456  497  403  271  199 2166  876  223  317 1223 4714  218 1160    5\n[58745]  251 4060  406 2175 2142   73 4380 5736  203  673 5711  589  483 1711\n[58759]  469 1480 2319 4255 5149   51 1735  160 3675 3644 3512  411  604 4297\n[58773]  893 4187 4880 1745 1030 6181 1131 1634 4412 1712  642  925 1529 4495\n[58787]  179 2343  325  679   19 1847  187 3611    1  116  208   23 1110 3689\n[58801] 3281 3828 2144  971 5346 5309 2506 1647 1479  798 1869 4628 3230 1275\n[58815] 2177 5273 5417 1025  695 3466 1732 1250  491 4445  707 2219 4632 5373\n[58829] 3373 1875 2098 1519 1618  327 1623 2885  323 3807 2146  172 3572  316\n[58843] 1711 5333 3386    3   63 1442 4567 2380 3566  766 1075 2069 1599  423\n[58857] 1685 5675 3305  566 1785 3508 4679  483  667 2902 2179 1143 3404 1212\n[58871]  998 1947 3461 3361 4640 1386 1163 1129 1496  127 1256  300  329  518\n[58885] 4141  332 3616 3342 1131 1444  591 1697 1428 1375  178  383 2148 1880\n[58899]  165 3388 1280  432  781 2181  355 2043 1145 5816 1641 6054 1791  144\n[58913] 3821 3795 3852  411 3848 3670 1734 1158 1294 5378  681  802  456  505\n[58927] 2868   15 5437 2402 1639 3340  331 1122 4687 5207  174 5299 4335  308\n[58941]  431 4395 1779 1073  117 1802  643 2602 3305 3567 1151  927 1775  686\n[58955]    3 2150  516 1199  431 2183 2247 4193 1663  118 3493  213 1054 1170\n[58969]  673 1318  587 5712  337 1373 1232  561 3669 4171 1819 1902 1296 4696\n[58983]  477  460  286  581 1493 5391 5713  575  301 4100 1231 6049 1070 2940\n[58997]  325 4140 2907 2918 3588 1995 2936 4596 3359 2815  370  841 1744 2903\n[59011] 3231 2152 3070 3391  395  222  721 1164 4662    1 2297  446 1935 4572\n[59025]  685  698 2913 2181 4133 1107  399  703 5199 2185   95  145  745 4377\n[59039] 3663 1171 1773 4181 1155  419 1483 2285 3532 1982  320 2347 3202 4326\n[59053] 1600 4576  205   83 1638  133 4580  573 4502   85 1942 1775  417  341\n[59067] 4144 5455  257  322 2900 1246 3488 1705  256 2280 3778 1730 2927  421\n[59081] 2806 1117 5091 2154 3416 3357  847 3199 3825 2793 1543  258 2917 2459\n[59095]  305 1767 2922  375 3357 1593  343  753 2187  409 3824 4352 1729  843\n[59109] 1156  172 1105 1410  365 1064 2231 5601 3075  467 2904 1619 2933  516\n[59123] 3771 1695 1394   27 5293  181 2302 2949  423 4175 1161  629 1289 3216\n[59137] 1284  283 3813  477 1104  485  918 2042  884 3411   89 4294 4695   65\n[59151] 2910 2223  608 1373 1585  624 2189  167 2580  706 3932   45 1171  221\n[59165] 1518  226  708 4684  894 4705 1515 1665  413 4113 4201  211 3622 2960\n[59179]  345  509 1119 4411  246 2488  598  291 3849  415 3556  527 4202 1519\n[59193] 1109 1635  169 1078  359 3069  687 1255 1185  327  193  400 2934 1734\n[59207] 5298  837 1407 4667  135  356   67 1321 3713  525 2351 2370 3301  299\n[59221] 2156 1185  535 2147 5451  775 1629 3843  691 2191 1022 4195 3526 2019\n[59235] 1139  926  418 1117 1013 1611 1710  426  604 3691  353 1053 2915 5268\n[59249] 2158 2954 1139    5  669   87  413 3134  415  201 1531 3486  183  442\n[59263]  195 4382 2039 2331 2908 2202 5274 4131 2391  177 2923 2139  119  263\n[59277] 3674  199 1854 2160   29  389  359 3992 2928 1715 1986 3445 2193  543\n[59291]  711 3591 1576  237  947 5383  223 1193 1473 1691 1528   21  434 5909\n[59305]  996 4191 1526 2159 2937 1128  245 2925 2931   71 4224 5769  152 5287\n[59319] 3349  225 2142 1485 1091 4370  235  803 1768 4361  208 1271  352 2437\n[59333] 2909 1729 2911 1435 3573 3662  363 2452  347 1346 3513 1115 2131 5038\n[59347] 1416  695 2454 1147 2162   65 2065 4204 1651  415 3604  883 1201 1224\n[59361] 1703 3535  418 4321 4333  915  153  427 5956 1464  771 2195 2950 3494\n[59375] 2314 1615 1680 4085 1159 2914 4312  374 4033  371 1205  693  523 4106\n[59389] 1295 5048 2197  985  775 3384 1247  168 4536 1066 5815 1049  499 4885\n[59403] 1677 5801 1039 5714 4397 4682 4368 2164 3822  471 3317 4672 1371 3603\n[59417] 5893 4700 2680 2951 4372   97  702 3621 4509 4543  185  523  527 3660\n[59431] 1183 3842 5311 3525 5904  108  486  718 2002  234  745  839 1503 3044\n[59445] 3374 3365 3531  207 1503 1895 1487 2243 1215  371 2134 2167 4523 1909\n[59459]  301  605 5747  219 1403  359  731 1175 1377 1517  583  303 1212 4137\n[59473] 1919  485 1716 5716 5904  601 1899 4393  482 1103 1989 3525 3572 4533\n[59487] 3351 1099 1205  303  929 2180 1360 4122 4424 4522  495  479  385 1214\n[59501] 4241 3550 2052  525  905  575  596 2085  339 4412 1506   16  377  398\n[59515]  538 5791 4099 3496 1121 1439  245  343 3769  675 3599 2136 1088  318\n[59529] 4166 3676 1263 1415 2169   23  399 1107  315 2285 2702    3 1190  430\n[59543] 1547 1262 1345 1352 1879 2493 3842  305   15 2606 3547 1077 1592 1042\n[59557]  677  573 1479  497  525  183 1975 1381 1289  472  831  885   20 1686\n[59571]   11  461 4125 3759 2279 4534 4471  183  807 1216  351 3052 3815 1717\n[59585]  163  327 1307  279 1733 3363 2939 1111 1511 1273  450 2138 2171 2921\n[59599]  331  307 1959 2047 4364  561 5242  398 3370 2924  397  346 2190 1109\n[59613] 3272 1583 3370   33 1271 4407 2906 2457  226 1783  914   59 1357  857\n[59627] 1429 4111  409 4691 2926 1043 3579 1626 2901 5813  219 3478  401   84\n[59641] 2912 3385 2119 4537  509 3355 1831 2267 1743 2932  281 4638 3809  443\n[59655] 1025 3531 4419 4388 4380 1025 4149 3419 2071 1581 4935  795 5220 3407\n[59669]  354 1496 2140  301   73  586   15 2173 1121  493  504 5099  275 1643\n[59683] 1448  189   27  422  208  394 1030 4087  681 1701 1634 5443 5133  997\n[59697]  313    1 1747  970  653  181 1885  407 1499  161 4065  294  215  199\n[59711] 3565 1223   15 2166  223  271 2280  251  876  317 4880  483  403    5\n[59725]  218  673 1735 2142 4060 1030 1847  469 5711  160 2175 4255 1110  411\n[59739]  330 1711 2319 1183 3644 4140 3512 3675 1668 4510 2395  893 5736 1622\n[59753] 5149 3611  874  604 1745 3274 1131    1  642 2343  179  325  187 1529\n[59767]  679 4565   23 1711 6074  116 2602 5463 3689 4679 4548  518  971 3281\n[59781] 3852 5309 5346  775 2144 3433 2506 1869 1647  695 1599  624 3230 2098\n[59795] 4445 3466  405  698 1250  703 1143  327 5797 5273 5796 1139  707 1875\n[59809] 2885 3373 2219 1180 3827 1442 2380  172 2177 4567 3386   63 3572 1685\n[59823] 4162  255 2902 3566 5333 1742  316    3  766 1711  423  323 2179 2069\n[59837] 2146 1947 3404 1256  483 4396 3461 3670 1667 3361 1785 1143  332   19\n[59851] 4240 3616 3806  475 1227 3305 3848 1386  329  424 1129  300 4633 3371\n[59865] 1131 1120 1318 4682  178 1428  144  394 1697  383 1198 3342 2148 3388\n[59879] 4622  432 1880  429 2181 5207  355 2043  781 1145  165  587  156 1734\n[59893] 1843 1692  426 2868 4434 5378  127  505  654  802 3340 2402 5299 5437\n[59907] 5675  308 4552 1054  431 1639  331 1401  411 4395 1073 1779 3305 4687\n[59921] 3493  516 1178 1775  523 1663  686 4100 3567 4171 2150 2183  118 1151\n[59935] 1571  117    3 2247  643 1802 1373  380  213  673  927 1232 1170  337\n[59949]  391  561 3669 1070 3509 1819  477  301 4372  217 1902 5713  374 1493\n[59963]  575 1231 5712  581 4181 1454 1111  325 4175  288 2907 2918 3588 1171\n[59977] 2940  286 3359 3070 1995 5801  535 1186 1773 2815 1600 1164  745    1\n[59991] 2347 4141 3231  455  721  998 2903 2297  703 5199 2913 2285 1935  419\n[60005] 3391 1155 1048 2181 3202 4502 3663 1275  145   95  320  341 3532  761\n[60019] 4596 4572 5391 4326  551 1270 4532  399 1246  378 1942 4580 5455  381\n[60033] 1695  417   85  573  257   83 1729 1775  312 3488 4667 1705 4576 3416\n[60047]  256 3778 2806 1205 3199 2900  421 1299  305 2280  467 5091 2793 3075\n[60061] 3357 2187 2459  847 2154 1572 1105 1117 5811 1156 4352 1767 2231 3264\n[60075] 1051 2927 2185  343 2917 3825   65  409  814 1554  375 5601  753  172\n[60089] 4381 3622 2933 1619 2904 1410  843 4294 5293 2302 1373 4702 1591  181\n[60103]  283 1394 1289 2949 1284  629 2922 1161   27 4705 4201 1593  423 3216\n[60117] 4695 3771 2042  884 3357  477 1721  133 2910  918 1104 2223   89  356\n[60131]  708 1734 1982 1518 1714 2189  512 2156  706  413 3411 3932  199  211\n[60145] 2960 1171 6181   45 1585  894 2580  221 2488 4202 1519 3556 1064  345\n[60159] 5815  415  169 1119  193  291 3849  418 1185 1712  359 3069  511 2351\n[60173] 5411 5298 1407  516  400  431  135 1022 3365  327   67 1109 1185 3301\n[60187] 2934 3713 2370 2936 4150 4328 4382 1038 4113  841  353  299 1629  360\n[60201]  926 2158 2191  654  691 2147 1710 3526  387 1637  237  195 4131  687\n[60215] 2019 1455 1481 1013  426 1611 3691 4191 5451 2331 3044 2954 1751  183\n[60229] 5268  415  235  425  669 2202 2915 4411  389    5 3486  442 1053 1480\n[60243] 2923   87  413 2139 5274 2908 3513  201 2391  177  263  119 3992 1854\n[60257] 2928  247  711  543  693 1128  359 1715 5383 2039  947 3445 3591 1691\n[60271]  434 1576   29 1193 1473 1416 2159  250   21  245 3674 3134   71 5769\n[60285] 1485 5714 2142 4444 1466 1729 4361 2925  235  225 1091  152 4543 2909\n[60299]  866 1271 4370 5287 1526 1435 4195 2937  803 3374  363 1225 2911 2931\n[60313] 2193 2437 1768 4312 1346 5038 3573 3662   65 2131 1631 1147 4368 2195\n[60327] 2454 4224 3604 4321 1498 1703 1201  415  883 2065 1224 4333 3535 2452\n[60341] 4348  460  308  427 4106 1159  395 2314  153  347  314 2914 4689 3494\n[60355] 1205  168 4085  523  418 4204 1295 4512 1115  985 5048  499 1247 3384\n[60369] 2197 4885 3317  689 2164 4536 4645 1049 1677 2680 3603  994 1682 2951\n[60383] 4119 4700  283 3845 4033 1371 1066 3660 3621  185  527 2950 4672 5311\n[60397] 3846 3525 4498 4186  486  234  108  718 2002 4233 1816  745  839 5373\n[60411] 3349 2152 2160 2162 2916 1895 1441  559 2243 5747  821 2134  731 5716\n[60425] 1909 2167 1403  359 1175  583 1377  371  605 3819 4137 4471 6177  303\n[60439]  301 1716  485 1919 1103 1517  601 4393  482 3525 1899 1989 3572   16\n[60453] 3351  219  929 2180 4522  303 1360 4533 3550 1205  905 2085  596  495\n[60467]  479 4122 1144 1099 4241 1215  398 4424 1506  575 5904 1072 4412  215\n[60481] 2052 1121 5791 1439  675 3769  343 4099  318 3599 3496 1263 2702 2136\n[60495] 3676 1177  331 1415 2285  315 1879   23 2169  472 1299 3842 1107 1547\n[60509]    3 4166 2493  399 1352 1345  305  281  573 2606 1975  430 3547 1456\n[60523]  183 1289  831  424  677 1381   20  461 1077  885   11  376 1717 4125\n[60537] 3759 2916  163 1216  807 4407  183 1592  279 2047 3815 2171 4364 3052\n[60551] 2939  584 1733 1111 1307 1273 1511  295  307 2395 5242 3363  561 2138\n[60565]  398 5795 1959  711   33  450 2190  397 2924 3272   59 1205  335  346\n[60579]  914 2921 1783 5463 2906 3370  857 1271 2457 4111 1109 3370 1429  281\n[60593] 2279 1043  409 1357 1831 5813 3478 1626 2912 3579   84 5327  509 2926\n[60607] 2932 2267 4419 4537 4638  323  443 2280 3355 2119 1743 2901  219 3531\n[60621] 4388 4691 2071 1025 4935  795 4149 1581 3419 1025 1496  301   15 5220\n[60635] 3407 1643 2173   27  378 1701 5099 1121  208  504  685  997  247 2140\n[60649]  394 4087  189  288 1747  422  161  653 5133 1296  181 5858  313 1634\n[60663] 5443    1  970 1499  407  223 1030 4065 2166  199 1223 3565  116  271\n[60677] 4380  275   15  317 1401 1437  876 4880  403 4060  160 4510  785 4255\n[60691] 2142 4140   51  251    5 1030 2175  673  483 1183 1110 1289 2319 1711\n[60705]  218  597 3512 5736  893 5149 3675 3644  874  411  604 6054 1257    1\n[60719]  179  187 1745 1529  325 1131   19 4495 2343 4187  925  679  518  234\n[60733]  642 2602 6074 4679 4548 3852 3689 1847 4162 5309 5346 3281   23  971\n[60747] 2177 5417 1647 1275 1869  695 2144 2506 3230 1250  469  249 1599  586\n[60761] 2098 3466 4445 5273 1143 3611  274  405  327 5797 5711 5796 1139 5373\n[60775]  563 2219  707 1875 3827 1885 1663 1442  775  172 2885 4567 3373 3566\n[60789]  323   63  485 2146 3386 3572 2902  766 2380 1685  423 2179 1256 1180\n[60803] 5333 2069 1129 1711 3404    3  255 3305 3461 4240 1785 1947  483 1143\n[60817]  316 4304  254 1214 3616 3361 3670 3806 1227  377 1386  127  329  300\n[60831] 1131 3371 1318  332 1428 4633 4682  383  178 1697  165  144 5378  394\n[60845] 2148 2181 1843 3388  525  432 5207 4622  578 1145 2043  156  355  781\n[60859]  411 1880 1263  294 3848 1641 3795  802 1639  456 2402  308 5299 2868\n[60873]  505 4434 4161 1054 4552 4395  431 1401 1779  516 3305 4687 1611 5437\n[60887] 1073 1775 4100 3493 3567 1164 1440  331 4171  686 2150 2183  643 1151\n[60901]  213  203 1583 2247  927  118  235 1170 1232 1373    3 4559  673  789\n[60915]  117 1493 3340 5391 1070 1819 1902  301 5712 3669  477  561 1120 1231\n[60929]  581 4181  575  337  325 4175 2918 1171 1111  286 3588 2907 1744  998\n[60943] 2940 1164 1935 1554 2297 3359 1270 1773  703 2185 2903 5713 2815 2152\n[60957] 2936 2181 3070  841    1 1995 2285 3231  745  721 2913 2347 5801  419\n[60971] 3391  145  460 1186 4141 3202 3663  320 4297 4596 4502  217   95 4532\n[60985] 1982  381 4572 1246  341  573 1942 1515  133 4326 5455 1492 1775   85\n[60999] 4372 4580   83  624  417 1695 1155 2900  312 1802 3778  256 3488 1729\n[61013] 3416 1705 2806 2280 1767  287 1117 5091 1023 1600 2793  467  421 5811\n[61027] 3199 1105 2187 2922 3357  305 3825 2917 2459 2154  409 2927  847 3075\n[61041] 1156 2231 4576  375  343 4352 1064  843 5601 3532 3357 4667 3622  240\n[61055] 2904 1619 2933  753 1161 3342   65  172 1410  761 1373 4294  181  283\n[61069]  629 1394 2949 4702 5293   27 2302  423 1289 1593  477 3216 2042 4201\n[61083] 4695 1178 3771  884 4705 1526   89  356 2910 2223  257 3932  211  413\n[61097]  708 1171 2189  706 1734  221 6181 2156 1284  199 1518 1048 3365 1119\n[61111] 4411 1585 1104  431 4202 3264 2960  380  345  894 1732 5815 2488 5199\n[61125] 3556  837   45 1519 1185 3849 1109  359 4113  687 1022 5298 2934  193\n[61139]  418  434  169 1128 3069 2351 2580  327 1321 1407  291 4191  135 3301\n[61153] 3713 1692   67 1185  415 5451  391 1629 2158 2191 2147 4328 1710  400\n[61167]  535  399  691 2370  926 3526 1152  299 1013  353 2019  226 1637 1165\n[61181] 2915 4131 1053  426  195 1611 2331    5 3486 3691 3134 2954 1531 1751\n[61195]  183  413  415 1211 5268 3044  669  425  442 2923   87 2908  201 2139\n[61209] 1212 3513  263  177 2391 3674 1259  119 4382 2039 5948   29  543  947\n[61223] 4195 3591 1691 5383 3992 1715  435  711  541  693 2160 2193  359 2202\n[61237] 1473  654 2928 1576 2937  245 1193 2159   21 2931 1416 5274  918 4444\n[61251]  310 1854  152   71  225 4361  235 1091 1485 3349  347 2142 4543 2911\n[61265] 1729 5769 1768 1078 2437 4370 1271 3374  363 5287 1435 1346  237  510\n[61279] 1225 3573 4312  523 2951 2950 5714 2131 2195   65 2454 3604 1147 2162\n[61293] 3662 4224 4368 5038 1498 2065  415 4321  418 1201 4348 2925  803 3535\n[61307]  427 4333  360  153  475  389 1224 2909 1159 2314 1703 4106 4689 5956\n[61321] 2914 3494 1127  314 4033  168 1205  523 4204 1295 4085 1481 1115  985\n[61335] 4512 2164 4645 2197  775  499 3384 4119 1464 1677  994 4536 4885 1409\n[61349] 3603 1071 1049 1682 3845 4700 1371  464 1247  185 3660  527 4186 3846\n[61363] 4672 5311 3525 3317 1066 5048  486  234 2680  108 1816  718 2002  455\n[61377] 4498 4233  839 1503  745 3411 3621 1051  308 1734  516 3445 1895 1441\n[61391] 1500 2243 2134 6177  219 1909  371 1517 4471 4714 5716 2167  301 1175\n[61405]  605 1403  731 4137 3819 5747 1668 1377 1716  681 5904 1103 1919  485\n[61419] 3525 4393  288  601   16 1989 3351 2180 3572 1899  303 4522 2085 1360\n[61433]  905 4122 3550  596 4412  525 4533 2052  339  575 1627 4241  495  929\n[61447] 1099 1205 1204 4424  398  478 1439 3496 5791 3769  343  675 1506  318\n[61461] 3599 3842 4099 2136  315  430  245  331 1263 2702  472 2285 1177 2169\n[61475] 1547 1299 1415  399 3676   23 4166 1879    3 1107 1352  305 2003 2493\n[61489] 1077 1345  821  831  303 1592 1975 2606 1456  573  183  677  461  424\n[61503] 1381 2279  785 3547   11   20 4125  885 1289 3759 2916 1717  283 2939\n[61517] 3815  807  163  183  279 3052  307  584 1273 1307 5242 2138 2171 1111\n[61531] 1511 2190 1959 2047  711  561  398   33 2921 1216 3370  281 2924 4364\n[61545] 2395  450  397 1109 1429 2457 5463 2906  914 3489  857 5795 1783  281\n[61559] 4691 1148 4111  409  346 3272   59 4537 1043 2926 5813 3385 2267 1743\n[61573]  219 1626 2932 1357 1831 1271  509  215 2912   84 2119  443 3355 2901\n[61587] 2280 4407 2071 1025 1496 4109 4388 1025  795 4380 3419   15 1162 4638\n[61601] 5220 2140  301  394   27  338 5858 1701  189  997 1643  235 1121  161\n[61615] 2173 1634  586  653  422 1170 4087 1747  181 1030  313 5133    1 1289\n[61629]  874  970 5443  407 3407 4065 1519 1499 4419 3363  199  223  308  208\n[61643]   15 1223 3565 2166  275 4935  317  271  537 1098 4880  483 1735  504\n[61657]  218  251 4510    5  384 4255 2142 5711  876 1030 1110  469 1160  673\n[61671] 5736 1183  411 1847 1711  403 2319 1257 3675 2175 3644  893  160 1622\n[61685] 3611 6054  604  497    1 5149  518  325 1745  925 1529 3512 4495 1131\n[61699]   19 1711  187 2602 2343   23  179  642  679  116 4140 4548 1174  775\n[61713]  695 1647 4679 3689 1869 2506 2144 1275  971 4162  563 4445 1599 1250\n[61727] 1885 2177 5273 5346  703  249 2098 3466 1129 5797  327 1041  707 3373\n[61741] 1875 1139 1143  418 5417 5796 5309 1623 1180 1442  323 2885 4567 5373\n[61755] 2380  316  423  586 1711 3404 2069 2902    3 1256  766 1227  172 3305\n[61769] 2915 1785 3461 4060 5333 1143  701 3572 1667 3616  483  127 2179 1947\n[61783] 1386 2219 3670  252  329 1131  383 3566 1318 1697 4682  178 1375 4633\n[61797] 4622 1685 3508   63  144 1843 1145 2148  394 5207 2181 1734  300  432\n[61811]  165  781  255 2043 3848 3386 1641 1280  355 1428  802 3795  578 4434\n[61825]  456 3388 2868 5299 3361  308 1054 3342 1401 1164 1880 4161  294 5378\n[61839] 2402 1048 5437 1779  505  431 4687 1802 1639  331 4395 1775 4171 3567\n[61853] 4552 1151 2150  927  213 2247  686  332  118 1663  117  431 1122    3\n[61867] 3340  312 1565 1170  411 1232 1373  643 1493 2183  391 1902  673 1819\n[61881]  477  516 4372  581  575  325 1171 3588 2940  286 4175 1554 2936 1231\n[61895] 1296 3070 3493 3231  301  703 5801 1995 1164  998 1111 3359 2347 2913\n[61909] 1935  841 2152 2297    1  721 2285 2181 1186 1270 1600 2903 2815  287\n[61923]  145 1155 4181 4381 3663 5712 3532 2918  320 1982 3669   95  337 1073\n[61937]  561  745 2907 3391 1246 1744 1729  257  133 1070 1695 2185   83 4572\n[61951]  417  419 4326 5713 4141   85 1705  624  203  341 5391 1118 2900 3778\n[61965] 5811 3416  305 1617 1942  847 4596 2922 1156 2806 4352  409  256 1105\n[61979] 3825  399  541 1775 4502 4538 3202 2280 2459 1572 2231 1773 5455 3199\n[61993] 3357  573 1064  843 2917 5601   65  332 3075  485 4576 1051 2927 1767\n[62007] 2933 4294 1394  381  375 2302  753 4580  181  467  421 1593 2793  343\n[62021]  244  516  629 1712 3357 1373   27 2904 3622 1410 3216 4201  884 1117\n[62035]  283 1619  477 2223   89 1526 2910  423 5091 1585 2156  167 6181  199\n[62049] 4328   45  211 1171 1734  221  706  172 4202  413  491  512 4411 1104\n[62063]  345 1119 2189  708 3556 5199  761 1109  837  983 1499 3411 1454  475\n[62077]  356 2949  434  894 3771  359  415  135 1212 4667  687 2488 1161 3713\n[62091] 3488 1692 3932 1519 4702  299 2370 5815 3301 2960 1211  689 2158 1629\n[62105]  193  509 1637  362  535  353 1022 2351 1013 3365 2915 2019 1165 3526\n[62119] 1611 1481 2147 1185 4113 2191 1053 2934 4705 5298 2331 1289  587 3486\n[62133] 3044 3849   87  387  389 1518  183  360  415  169  414  201 3069  425\n[62147] 2954  669 2042  195  237 2139  442 4410  177  413  426  691  400 1854\n[62161]  359  119 1715 4409 1205  435 2160  711 2580 5948 1473  654 5451   29\n[62175] 3591 3674  947 1416 1193 2159   21  263 1576 2193 2391  327    5 1321\n[62189]  543  918 1751 1185 3691 1407 4131 2437  291 3992  235 1729 1768  225\n[62203] 4382 3349   67 1435  693 1346 1271 4195 1269 1480  363 5293   71  152\n[62217] 1485  234 3662 1531 2454 2131 1147 2195 2950 2202  161 4368  415  510\n[62231] 1703 1710  803  883 1128 5383 2162 2908 2928   65 4444  926 2039 2937\n[62245] 4348 3573 5769 3134 1078  324 4333 3445 4361 3535 1224  915 2923 1651\n[62259] 4312 1201 2909 1464  314 4543 5956  523  479 4370 4321 1205  371 5714\n[62273] 2925  245  427 1295 5287 1618  455 1247 3384  168 3317 2197 4498 2164\n[62287] 3513 3374 4106 5038 3494 1691 4689 1631 4119 1091 2951 1498 2142 2314\n[62301] 4645 1159 1682 4224 1482  418 4085   97 2911  499 4204 3621  775  527\n[62315] 2914  185 4512  985 5274 2065 3603  153 1183 3845 1066 4672 4536 4033\n[62329] 1677 1218 4700 3660 3525 3846 5675 4186  486  234  352  994 1371 2002\n[62343]  702 1816  718 2931 4885 2680 5311  347  108 5048  745 1503  839 3827\n[62357] 4100 3852 4187 4240 4304 4532 4695 5099 5268 6074 3806 3281 3230 3305\n[62371] 3478 3531 3604 1733 2146 2154 2187 3579 1121 1895 1407 1500 2243 1909\n[62385] 2134 3819 1377 6177 1403 5747  371  583 4137  219  303  301  605  731\n[62399] 1668 1175  635 1517 2167 1716 4471  485 5904 3525 1103 1919  601 1989\n[62413] 4393  288   16 3351 2180 3572 3550 4533  303 4122 1099  929 1360 4522\n[62427]  245 1217  575 1899 2085 4241 1205  905 2052  525  479 1214  596  495\n[62441] 4412 5791 1452 1506  398 1439 1121  240 3769 4099 3599  339  343  318\n[62455]  315 3676 2136 4424  472 2169  331 1299 2702 2285 2493 1547   23 1415\n[62469] 3842 1107 1177    3  399   15 1352 1879  305 1345 2606 1077  430 1592\n[62483] 2003  573 1975  677 1456  675  183 1381 4166 2279 2916  885  461   20\n[62497] 1289   11 3759  163  283 1717  183 1216 3052  807   59 4407 3547  279\n[62511] 2939 2047  584 3815  785 1307 1511 1273 2138 1733 2171 1959 3370 2921\n[62525]  307 2395  450 5795 2924 1263  397  561  711  398 1429 1111 2190 5242\n[62539]  346  914 1109 1271 3272 5463 3489  831   33  281 4364  857 4111 1783\n[62553] 2906 3363  409  281 2457 1148 5813 4691   84  219 2912 1626 3579 2267\n[62567] 1743 2901 2932 2280  509  443 4537 3385 1357 2119 3355 3531 1686 4380\n[62581] 1440 1496 1831 3419 1025 2071 4935 1025 1581 3478 1643   15  338  795\n[62595]  997  394 5220 4638 5099   27  301 2173  422 2140  681  586  504 4087\n[62609] 1170  189 1747 1121  181  161 1030 1701 5858  208 3407  970  653  313\n[62623]    1  874 1499 5133 4065  407  223 4109 1634  271  199  446  275 3565\n[62637] 2926  578 1885   15  116  876 2166  317 4880 4388 1735 1160  403  251\n[62651] 5443  483   51 2175 1223 4060 1030  673  469  471 4140 4510    5 1711\n[62665]  411 1110 3644 2319 5711  218 1183 5736  160 1622 3512 5149  604 6054\n[62679] 3675 1847 1257  642  893 4419 1745    1  518 1131 1529 4495   19 4187\n[62693]  679  179  187 1174 1711  925 3611 2602 4255  325   23 6074 4548 3281\n[62707] 3689 4162 3852  971  695 2144 1647  223 1275 5309 1869 5417 3230 2177\n[62721] 1599 5273 3466  698  264 2098  703 1250 2343 2219  707  327 5373 1875\n[62735]  497 5797 1143 3373 1139  563  172 1623 1180  418 2885 1442 5346  323\n[62749]   63 2179  586 2146  424 2380 3572 3566 1685  255  766  423 3386    3\n[62763] 1947 1711 2069 1256 5333  316 1785 4679 3404 1129 3508 3461  483  475\n[62777] 3806 1143 1667 3670 3827 4567 2506  332 1386 5796  252  329 3616  127\n[62791]  998 4445  300 1131 4682  178 1375 1697 1428 4622 5378 3388 3361  394\n[62805] 4633 1145 2181  432 1843 2148  165 1880 5207 1543  781 1280 1318  411\n[62819]  355 3795 3342  456  383 2868  802 1639 1641 4434 2043 3305 3340 2402\n[62833] 1054  331  144 4161 5299  308  431 4395 4552 4240 4396 1164 3848  431\n[62847] 1073  505 1779 1775 4687 3305 4695  516  117 3493 1122  927 2183  643\n[62861] 4171    3  118  213 2247  686 1565 1583 3567 1151 1734 4100 1232  215\n[62875] 1802  249 1170 1373  673 1493 3669  980  337  561 1819 1070  477 1902\n[62889]  287 4372  301 1289 5713 1231 4181  575 5437 2918 1111  286 1171  325\n[62903] 1744 1186  581 1995 5801 5391 2940 1454 2903 2936 3588 3359  841 2297\n[62917]    1 2347 2185  745  373 1164 1600 1935 2815 3231  703 2152 3391 2913\n[62931] 2285  721 2907  145 5199 2181  320  685 4381 1155 3202 3663 1270 4596\n[62945] 3532  419 3070  341  391 1982  761 1773  417 4326 4572 1205 4502 4532\n[62959]  573  133  381 4580  357 1942 1695   85   83 5455 1729  399  332 4141\n[62973]  257 4175 2900 3488 4576 1767 2280  421  256 4667 5091 3416 1775 3199\n[62987] 1117   95 2187  467 2459 1442 1105  409 2793  847 2154 5811 1564 3357\n[63001] 1156 2231 2917  343 1051 4538 1705  308 2806 5712  843 3357 2922 2927\n[63015] 5601 1373 3622 1410  375 4352 4294 1619 3075  629 2933 5293 2302   27\n[63029]  516 2904  181 1178 1593  423  753 2042 2949  283  477 3825 1284  884\n[63043] 3771 4201 3216 4409 1104 1455 3411   65  708 1289 3932  918  305 2910\n[63057]   89 2223 4328 1394 1585  211 1734  706  356   45  167  689 2156  221\n[63071] 2960 2189  512 3778  996 1554  172 1171 1119 4705 1064  199 4411  894\n[63085] 4202 1714 2488 5298  837  291 1519 3365  415  509 3069  345  169  587\n[63099]  687  359 1499 1185  193  434 2580 5815 1246 2934  327  212 1109 2351\n[63113] 1407 1321 1518  135  400 6181 3301  535 1211 1185  926   67 2158  360\n[63127] 1629 1152 2147 2370  299 5451  691 2191 3556 1710 4382 1692 1611 2019\n[63141]  262  775 1013  413 4131 1022 3526 2915  426 1053 4191 2331    5 3486\n[63155] 2954 1751  442 4113  183 3044  425 1161  413  195  669 1531  237  362\n[63169]  201 3134  415 2139 1120   87  389 2202 5948 5268 3674 3513  177  263\n[63183] 1854  119 3691 3591 1128  359  543 2039 2928 1715 5274  711 2193 3445\n[63197] 3992  245  947  435   29 1691  693  654 1416 3849   21 4498 2937 2160\n[63211] 2923 4195 2925  152 1576  235 4702 5769 4543  247 4361 2437 5714 5383\n[63225] 1729 1149 1485 5287 3349 1091 2142 1435 2908   71 1078 1526 1271  803\n[63239]  478 4312 1346  347 1473 3573 2951 1768 3662  324 2162 2131 2454 1193\n[63253]   65 5038 1466 2931  415 4333 2909 2911 2950 4224 1498  418 4368 3535\n[63267] 1147  439  427  225  883  153 2195 4689  426  314 1224  353 4348 2314\n[63281] 4106  161 3604 3374 2914  915 1159 1201 4085 4370 4033 1205 1464 2065\n[63295] 2391  371 4512 1115 1651 4321 2164 2197 5048  499 4536 3384  363 1481\n[63309] 5956 1247 4645  775 1071  523 2680  985 4885 1295  371 4204 1066 1631\n[63323] 1049 1218 3494 3317   97 1606  185 1677  702 4186 3846 4672 3621 3525\n[63337] 5311 3603 4119  527 3845 4700 1371 5675 1183  234  486 2159  168 3660\n[63351] 1816 2002  108  718 4444  234  745  839 1503 4125 5716 2902 3496 2142\n[63365] 2150 1503 1895 1500 1014 2243 6177  665 1377  795  303 5747  371  258\n[63379] 1175  605 1403  731  858 1103  601 4120  883 5716 1899 2180  950 1099\n[63393]  997 3307 1946  482  929  479 2085  575 2951  883  303 4533 1205 4122\n[63407] 4241 1299  495  905  398 3848  675 4140  525 1263  318  399 2702 2285\n[63421] 1547  315 1879  385  430  156  472 1415   23   15    3  305 2003 2493\n[63435] 1345 1162  806  265 4277  831  677 2020 1455 1044  183  461 3846 1289\n[63449]  885   11 4125 2916 2279 1717 2339  295  377 1216  163   59  807 4297\n[63463] 1273 3052 1307 1733 3370 1553 1148 2047  397 2921  307 1511 1848  936\n[63477]   33  561  346 1959 1111  391 2190 1271  281  584 3363 3531 4111 4625\n[63491] 5795 2939  281 1429  409 2924 1357  752 2926   84  219 3478  183 2119\n[63505] 2932 1783 4638 3419 4409 3407 2912 2267 2901 1743  443 3385 2280 4240\n[63519] 3815  509 1626 1109 1170  795 1025 4380 2071 4179  238 1682  301 2173\n[63533]  544 1121 4114  208  970  181  364  497  313 1701  394 1747  348  586\n[63547]   27  161  505  422 5133 5858    1 1634  653 3565  342  407 1223 4388\n[63561]  271 1519 2941  199 4935 1223 1924  343 3531 5443 3611 1499 4714 5540\n[63575]   15  583  116  317  251 1174  874 2457 1885 3675    5 1030 1030  351\n[63589] 1160 4255 2142 1110 1808 3533  761 5711  411 1094   51  469  421 5736\n[63603] 1183  403 1257 3806 5951  604 1984 4495 1131    1  642  518  483  179\n[63617]  187  325  925   19  679  488   23 2067 2602 1529 4187 2506 2046 4662\n[63631] 4118 4162  971 3466 1869  785 4679 1275  695  835 3230 1599 4445  405\n[63645] 1647 2177  287  703 1143 5392 2098 5309 2219 1875  471 3461 1892 3807\n[63659]  251 3616 5346 1442  323 1623 3572 1224 1972 2146 3386  406 3415 1256\n[63673] 1711 4567 2902    3 2380 3670  316 1785 4214 5333 1685 1129 1947 2375\n[63687] 4304 3361  329  300 3588 3848  127 1386  566 3264 1318 1697 3388  178\n[63701]  394 1143 1131 6049 1863  355 2181  165  781 1622 2043 3340  624  501\n[63715]  802  411 1639 1641 4434  505 3305  308 4552  636  681 4395 1401 1199\n[63729] 4064  431  383 1779 1676 1631 4629 1073 5813 1611  323 1461 4171  117\n[63743]  927 4087 1151 3567  686 2247 1583  118 1677 1170 1373 1640 3588  337\n[63757] 1493 1802  561  998 1420 1705  320 3669  477 1819 5712 4148 4633 5713\n[63771]  575  325  286  213 4181 1171  207  587 1958  395 2907 2815 3231 1205\n[63785] 2152 2940 2297 3391 3359 1778 1177 2918    1  841 2944 1164  419 2903\n[63799] 2936 6054 1834 1270 1600 1773 1171 2181 1298  145 2347 3202 2285 4381\n[63813] 3663 1200 4368 4175   95 4572 4532 4502  133  210  573  703 1942 5803\n[63827]  708  424 2008  257   85 3416   83 1424  485 2889 1695  527 2088 2900\n[63841] 1729  559  256 1289 2280 2927 1156 1587 4580 3075 1105 1117  409 4537\n[63855] 2793 4284  305 2922 2459 1982  467 2488 1403 4352 2917 4393 4412 2231\n[63869] 1242   65  341 5484 1619 2933  843  753 1410 1554 1935 2904  172 2302\n[63883] 1394 3827 1178  516  629  181 1593   27 4702 1373  283  375  423 3070\n[63897] 1284 3216 4204 5837 4705  413 1854 2910 2949 1585  918 1161 5513 3556\n[63911]  301  199 2580 1734  706 4328  512   45 4202 3365  894  211  551   89\n[63925]  635  345  291 1902 4121 3301  847  511  415 1518 6181  687 2934 1185\n[63939]  866 1109 1119  359  418  327  983 4701 2351 4113   67  135 4191 1712\n[63953]   23 4161 3674  299  535 3726 2147  926 1022  360 1185 4201  523 1481\n[63967] 2019 1637 2923 2915 1611 3486 1751 3134 4131 3044  183 3811  669  201\n[63981]  442  390 1576   87  413  426 2202  415 1075  931 2954  425 2908  119\n[63995] 2391 1615 1047 2928  359    5  263 4128 2097  711 3591 1296 1416  543\n[64009]  469  434  245 2159 1111   21 2942   71 4361  235  347 1729  225 1091\n[64023] 1768 4370 5769 1043 2909 4543  803 2911 1271 1526 2065 5714 2925   65\n[64037] 2454 1201 2950  418 3535 1482  427 1466  883 2919  915 2314  153 2914\n[64051] 1205  523 1295 1409  499 1071  985 4377 4348 1677 4700  527   97 1371\n[64065]  702 3621  185 1183 1066 4194  486  234  108 2002 1816 3374  718  839\n[64079]  745 5008  839  817 2243 1175  371 5824 1739 5716  328 1403 1377 1212\n[64093] 1955 6177  583 1103  601  371 1989 2180  400 1099 3550 1205 1946  303\n[64107]  495  929  245 1115  905  525 1627 2085  479 1509 1677 1506  675 5791\n[64121] 1439 1263  318  315 1144 4166 1299 1879  399   23 2702 2285  472  305\n[64135]    3 1415 1547 4304 2493 1107 1345 1975 1455 1456  677  831   11 1736\n[64149] 1381 4101 4420 1077 2279   20  461  478 1289 2916  885  807 1717   59\n[64163] 1216  183 1708 2939 4297 1307  398 1733 1511 3052  279 3370 1148 3363\n[64177] 1111 1959 2924  307  163 2190 2047 2921  346  561   33 2395  281  450\n[64191] 3489 3272  936 4364  857  397 1783 2906 1429 2457  914  391  281 1109\n[64205] 1271 1357 2053 2267 1626   84 4537 2901 2912  219  509 4869 3478 1273\n[64219] 4638  443 1743 2119  343 2926 2280 3531 1025 4250 4388 4711 4935  795\n[64233] 1162  409   15 3419 2173 4380  394  301  376  586  264  711 4087  338\n[64247] 1121 1701 1747  208   27  422 1448  181  275 1643 1120  970  313 1634\n[64261]  874  189    1 1499 1885 3810  653  407 1401 5242  223 1030 3579  271\n[64275]  199 3085 1519 1223 3565 4179   15 1170  317  116  876  251  403  218\n[64289] 5443    5 1160  673 4510 1847 5711 2017 1030  411 4141 1761   51 1183\n[64303] 4255  469  497 2319 5736 3512 3675 3611 3644  483 1110  604 3806 4412\n[64317] 1745 1131 1711  518  325   19  642  179 2343    1  925 1174  679   23\n[64331] 1529 4374 4187 2602  187 4679 4162 5309 3689 2506 5417  971  695 1869\n[64345] 3281 1275 1647 3433 1250 3230 1599 5346  405 4393 2177 3466  226  461\n[64359] 2098  703 1143  504  327 6074 2021  654 5905 3812 1180 5797 3827 1875\n[64373] 1623 1442 5333 5355  323 3566  172 4567 3572 2146   63 1947 3386 1723\n[64387]  785 1256  316 2219 1973    3  423 3461 2179 2902 1711 1129 3404  352\n[64401]  766 2380 3305 3508 3670 1785 3673 4512  483 1143 3616 1667 3361 1227\n[64415] 3850 4092  329 1386 3848 1685  127 2639  300 1697 3342 1131  178 4682\n[64429] 1663 3996 1318 4233  383 1375 1461 2181 5378 1145  144 1843  608 2043\n[64443]  432  165 4622  781 5207  681 1639 1734  411  577  802 1752 4434 2868\n[64457] 3795  456 3340  505  308 4430 3388 1641 1164 2402 5437 4395 4552  331\n[64471] 1401  431  624 5023 3305 1779 4687 1073 1802  117  424 1835 1611 4662\n[64485] 3567 3493 2150  927    3 1122 1151  213 4100 2183 2247 1583  643 1054\n[64499] 4171 1170 1373 5713 1200  460 1232  118 5299  337 1070  477  561 1819\n[64513] 3669 1902  301  980 5391 4372  575 1205  286 4181  340  673 4175 5951\n[64527]  581 5712 1171 4483  394 2815 2936 2297  325 1554 1995 2903 2940 5580\n[64541] 2913 1935 3231 3391 3359  721  419  370 2907    1 2347 1773  387  841\n[64555]  685 3588 2285 1171 2918  145 2181 3202 1600 1231  998   95 4381 3663\n[64569]  320 4502 3070 4596  341 1155 4326 4532 4572 1744 5455 2185  399  160\n[64583]  133 1775 4580  257 1246  377  417 5801 1248   85   83 1942 1695  573\n[64597] 1982 1164 2900  256 3488 4576 4667 2927 2280 3199 3075  527 1023 1729\n[64611]  421  467 3357  847 2793 1051 3825 1105  409  305  708 1156 3778 5091\n[64625] 2922 2459 5811 1117 2917  343 2231 4352 1098  843 4122 5392 2154   65\n[64639] 2904  172 1373 4294 3622 3357 3416  753 2302 1705 1394 2949  181 4702\n[64653] 2933  283  516  703 1619 1178  423 1284 2187  629 1410 1262 3216   27\n[64667] 4201 3264 2042  477 1289  918 1242 1518 2910 3411 3932 2223 4328 4411\n[64681] 1139  199  243  706   45 1734  356  375 3365  167  413  211 4202 1104\n[64695] 5815 2580  884 1119 1585 3556   89 2488 1767  345 2960 4113 1519  431\n[64709]  415  221  509 1109 1185 3849  169  837 2934  291 1171 1499  193  687\n[64723]  359  195  894 1064 1407 2351 1605 5293 3069   67 5451 1692  512 1629\n[64737] 4382 1185  135 3771 3713  299  360 2147  926  353 3301 1022 1177 1013\n[64751] 2189 4131 2019  220 1481 2158 1211  884  535  327  426 4349 2915 2370\n[64765] 2331 1221    5  321 2954  413  442 3044  215 1531 1751   87  415 1611\n[64779]  669  425 3134 1053 4550 3526  201 2923  237 1052  400 4278 4191  177\n[64793] 3513 2908 2202 4195  119  263 2139  434  359 2391 1416  543  245 1576\n[64807]  693 1715 3674  195 1691   29 3591 2159  711 2191 3486   71 2931  183\n[64821] 1128 1473 1854  389 1539  347 1729 5268  161 4543 1078  235 1768  435\n[64835] 4361 2909 2142 5714  363 2039 2911 4498  947 1528  225 1149 2928  312\n[64849] 1269 2193 2925 2437 1485 4370  689   65 2454 4368 5274 4321 3604 2937\n[64863] 5769 1161  415  803 1091 4224 4152  883  418 1201 3992 4348  153 4333\n[64877]  915 1435  308 1147 3349  256 2131 4445 1271 1224 2314  427 5287  152\n[64891] 5298 3494 6073 1464 2195 2951 1205 4106 1703 1346  695  371 1618 2162\n[64905] 3445 1295 5038 1651  523 4641 4645 2680  314 1071 4119 2914 2065 3384\n[64919] 4212 1682 1482 3662 4085 3535 1409   21  775 4700 1159 2950 5383 1247\n[64933]  527 4536 3621 3845  985 5956  499 3603 2164 2197 1677 4194 3846  475\n[64947] 4672 5675 4033   97 1066 5237 3317  486  168  234 1183  185  702 4885\n[64961]  108 5048 5311  718 3660 1816 1371 2002 1049 3525  745 1503 3374 3573\n[64975]  686 1895 1452 2243  605 3819 1517 4471 1500  359 5747 1909 1377 1668\n[64989]  301 1175  371 1403 4137 6177 2134  219  731 1716 5716  288 2167  583\n[65003]  485 1919 4393  601 1103  303 5904 1772 3525 1989 3572 4522 2180 3351\n[65017]   16 3550  905 4122 4412 4424  929 1360  596 2052 4241 4533  575  303\n[65031]  525 2085 5791  245  398  478 1627  339 1121 3769 1055  675 1506 4099\n[65045]  343 1263  318  495 3599  315  472 1439 2136   23 2169 1879 2702 2285\n[65059] 1299 1547 1099  331 1177  430  399 1107  305    3 1352 2493 1077   15\n[65073]  418 1205 1345 1415 2003 3842 3496 4166 2606 3547 1975  573 3676  677\n[65087]  461  424  831  785 1381   20  183 2279   11  885 1592 4866 4125 3759\n[65101] 1717  183  807  163 1289 3815   59 2939 1216  279 2916 1273 4407 1307\n[65115] 1959 1111 1511 1899  450  561 2138 2924 3052  327  711 2047   33 2190\n[65129] 2395 3363 2921  398  307 2171  397 5242  346 3272 1271 4111 1783  914\n[65143] 3370 1109 2457  409  281 1429 1148 1357 4364 2926 3478 2912  857 4537\n[65157] 2267  443 1626 5813 3355  215 3385 3579 2280 4419 1831 1456 3489  219\n[65171]   84 1743 4638 3531 2901  509 2119 4691 3419  795 2071 4711 4380 1496\n[65185] 1025 1043 4388 3407 1162 1744 2932 5220 5463  301 1643 2173  700  586\n[65199]  997  189 2140  281 1121  208 1701  422  161  235 1030 5133 1448    1\n[65213] 1170  313  394 5858 1289 1634  181  275  653 4087   15 5443 1499  407\n[65227] 1747  970  308 4065  223  874  199   27 2166 3565 1885 1223  271  578\n[65241]  317  116 4880  876   15  403 1735 1160  251    5  673  411  218 1030\n[65255] 5099  483 2142 2175 4060 4140  497 1257 1110 1711   51  469  160 3675\n[65269] 1847 3644 3512 4510 1183 1622 4935 5736 3611  604  893 1174 6054    1\n[65283] 1745 5149  518 4255  642  325   19 1529 4187  679  187 2343 1711 1131\n[65297]  504 2602 6074  925 4679 3852 3689 2906  695 5346 2144 3281  563 1869\n[65311] 1647 2506 4162  179 5417 3230 4548 1599  775 1275  264 1250 5309 2319\n[65325] 4445  249 2098  971 3466  703 2177  327  707 3373 1139 1143 2219 5797\n[65339]  471  559 5796 1180 2885 3827 1442 1623 1875  172   63 4567  323 2380\n[65353] 3566 5373 3386    3 1256  586 2146 1947 5333 3572  766 1711 2069 4495\n[65367] 3404 2179  423  316 1785 1129 1685 3508 4396 3461 3305  701 3670 2902\n[65381] 1143 3806  255 1227 1667 4240 1386  127  483  329  332  252 3361  300\n[65395] 4682  394 1375 4633 3342  178 1697 1318  383 1880  355 4622 1280 5207\n[65409] 2181 1145 2043  432  781 1734 1791  165  411 3388  866 3848 5273 5378\n[65423] 3616  294  144 3795 2148  456 1639  802 1428 4434 1641 2868  505 4552\n[65437] 4161 1054 3340 1131 4395 5437 1515 2402  431 1164  308  431 1779 4687\n[65451]  117 3305 1073 1802  214 1098 3493 1775  686 4171  331 1151 4100 2150\n[65465] 2183 5299  927 2247 3567  643  213  118    3 4695 1122  516  662 1663\n[65479] 3669 1493 1170 1232  673  485  477 1902  561  337  301  541 1070  575\n[65493] 2918 1231  286 4372 5391 1373 1819  325 4181 1171 4175 5713  501 3359\n[65507] 2940 3588 1995    1 3231 2907  287 1270  703 1935 2152 2347 1164 2815\n[65521] 3070 1583  721  841 2903 2297 1773 1600 2913 2936 1155  419 3391 1111\n[65535] 1186 4141  745 2185 5199  145 4502 3663 2181 3202   95 2285 3532  761\n[65549]  320 1695 1982 1454 4596 4326 4532  998  133  581  377   85  573 4580\n[65563]  257 2900   83 1942  203 1775 5801 1205  417  341 1729 4667  332 4381\n[65577]  256 3488 4576 1705 2927 1198 2280 3825  305 2154  467 5811 2793 3075\n[65591] 2459 2187 1023  409  847  399 1767 1117 2917 1156 4538 3778  343 3199\n[65605] 1572  421 2231 3357 4352   65  753 1554 3357  624 1410 5091  172 2922\n[65619] 2933 2806 3622  375 2904  843 1619  181 4294 1161 2302 1373 1593 1394\n[65633]  516 3416 2949 1178  423   23 3216 1284 4201 2910 4705 1051 2042  477\n[65647] 1104 2223  918 3411  283   89 4328 1734 1518 1585 2156  706  629  512\n[65661] 2189   45  413  356  708 3932  884 6181  491 1171  167 3771  211 3365\n[65675] 1714 1289  226 1119  221 2488 5293 5815 4572 1526  894 3556 2960  415\n[65689]  359 4113 4202  837 3849 5712  291 1185 1499 1519 5601 4702  509  488\n[65703] 1022 1212 2934  193 4411  327 1105  400 1109 1407 2580 1321  135 4191\n[65717]  169 3713 3301 1692 1185 3069  299  715 1629 2191 2158 1986 5298 5451\n[65731] 1064   67 2147 2370  687 3526 1637 1013  926 4409 1053 1481 1710 1611\n[65745] 2019 2915 2351 4382  426 3691  362 1165  199  535  195  654  689 2331\n[65759]    5 3044 3486  360  183   87 2954  201  389  669 1531  413  415 2923\n[65773] 5948  442 2202 1480 2139  237 3674  691 2391 3513  177   27   29 1854\n[65787] 3591  543 3992  353 5268 1715 4195 1416 2160  324 2193  263  711  693\n[65801] 1576  947 1473 5383 1128 4498 1193  245 2928  434 3445 2039 1691 2159\n[65815] 2925 4543 5769 3134 3349 1729  235   71 2142 1091 1485  587  359 4370\n[65829] 2931 2937 1078 2909 1768  152 3374  225 1271 4361 2911 4444  223 2951\n[65843]  347 1346  234 3662 2437 3573  510 2162 2950 2454 4321 2195 1435 1703\n[65857]   65  883 1269 1201 2908 4333  418 2065 1147   21  479  119  415 5287\n[65871]  153  427 4312 3535 1224 2314  345 4368 5956 4348  455 4689  363  314\n[65885] 2914 4204 1464 4033 1205 2131 4085  523  803 3494 5038 1115 1295  915\n[65899]  985 2197 5048 4131 1247  775  499 4512 3384 4224 2680 3317 4536 3603\n[65913] 1651 4119 4645 1677 4885  994 2164 1631 3604 1682 1049  475   97 3660\n[65927] 1371  527  702  371 3621 4106  185 1183 4700 4186 4672 3845 1159 3525\n[65941] 1066 3846 5311  234 5714  168 5675 2002  486 1816  718  108  745  839\n[65955] 1503 5274 5455 5711 1895 1487 1441 2243  359  605 2134  371  301 6177\n[65969]  583 1377 1517  731 2167 1403 3819 4471 5716 1909 1175  303 4137 1480\n[65983] 3525  219 1103  601 1716  485 5904 1899 1919  482 1989 4393 3351   16\n[65997] 1099 1178 4533 2180 2085 1360 1214 3550  929  575 2052 1205 1627  525\n[66011] 4241  479  339 4412 4522 4122  398 3572  245  303 1506  596  905  377\n[66025] 5791  495 4099 1439  675 3769 1121  343  479  318 4424 1263  315 2136\n[66039] 1879 3599   23 3496 2702 1415 2169 1547 2285 3676 1262  430 4166  472\n[66053]   15 3842 1107    3 1077  305 2493 1345  399 1352 1190 1592  281  573\n[66067]  831 1975 3547  677  424  376  461 1381 1289 1717  885 4125 3759   11\n[66081] 5795  351 2916  183   20 2279  163 1456  183 2606  807   59 3815 3052\n[66095] 4407 2047 2939 3370  327 1307 1511 2190  398 3363 2395  397 1733 1111\n[66109] 1273 1959 2138 2924   33 1271  307  346  331 2921  450 1216  857 4111\n[66123] 2457 5463 3272 3370  279 1783  914 4364 1109 2906  409 1626 1831 1357\n[66137]  443 1583 3579 1148 2267 1743  219 2119 2171   84 2901 5813 2926 4638\n[66151]  561  281 2071 5242  401 1025 4537 1643 3531 1581 4691   15 4380 4388\n[66165] 1496 2173   27  586 1448 2140 1668 1701  394  509 1747  795 4087 5099\n[66179]  493 1121  422  504 1634 4149 5858 1043 1429 3478 3419  354  313  161\n[66193] 1030    1  970  653  997  208 1499 2280 1025  189 5443 3407  407 4065\n[66207]  199 3355  301 2166 1223  271 5220  215 4935  181  681  317   15  874\n[66221] 4419 4880  403  483  876 3565  471 1735    5   51 1885  294  469 1110\n[66235]  411 1711  218 3644 4255 2175  160 1183 1622 2912 1030 3512 5711  893\n[66249]  604 1847 3675 3611 4060    1 5736  518 2319 2343  673 2932 1529 4187\n[66263] 1745 1131  642 1711  679 3385  179 4140 2602 1257   19 1174 5133   23\n[66277]  187 4510  325 4162 4495 4679 4548 3689  695  223  775 5309 3433 5149\n[66291] 1275 5346  624 1647  971  698  703 1143 1250 1599 5373 2219 1869  327\n[66305]  116 3466 2506 3373 2177 4445 1120 2144 2098 5796  707 3827 1442 1875\n[66319] 1180 5797 6074  323 1256 1711  785 2885 1685  172 1129 5333 3386 3572\n[66333] 2380    3  255  423  766  316 5273 3566 1785  483 2146  405 1143 6054\n[66347] 2902 4396  701 1227 2179 1386  127 1947  332 3361  551 4567 3461 3806\n[66361] 1139  329 3616  275  300 3371 1318 3670 1131  394 1428  383   63  251\n[66375] 1697 2181 1734  355  432 4682 3388 4633 2148 3342  178 1843  587 1280\n[66389]  156  781  426 1692 1198  165  802 5378 4622  505 2868 4240 4434 5299\n[66403] 1880 5437 2043  287 1054 2402  308 4395  431  331 2069 4552 1639  144\n[66417] 1779  117  654 4161 1802 1775 4687 5207  927 1151  516 4100 2150 2247\n[66431] 2183 3567 1073 1667  213 3493  643 3848 1663  380  686 3852  256 1232\n[66445] 1373 4559 1122 1170 1145  337    3 1902 5712 1493 4372 3527 1819  477\n[66459]  391  301 1070 1231  217  673 4181 5713  286 1205  561 2918  325 1466\n[66473] 4175 3305 1454 2907 2936  118 3588 2940 2815  535 1995 3359 1773 5391\n[66487]  288 2297 1164 1111 3070  703 3231 2913 2347 1600 2185  721 1935 2285\n[66501]  214  998  581 1048 1186 3509 1270 2181 3663 1155 3202 3391  745 5199\n[66515] 3532 1171 4502 1401  761 2152  341 4532 2903 1246   95  399  419 4171\n[66529] 4141  133  594 1729   85   83 3669  257 1695 1775 4326  573  312 2900\n[66543]  145 1982  417 1705 4667  256 5455 1767  320 2280 2927 1299  421 5801\n[66557] 4572 1105  381 1156 2154 2187 2459 1572 2922  847 3825 4576 1051  409\n[66571]  305 3199  343  375 4352 1117 4596 1554 2231 5091 1942 3357  485   65\n[66585] 1410  843  467 5601 2933 1619 2806 3075  753  516 3778 1593 1394 4702\n[66599] 1098 2302 3264 5293 4580 3771 4294 3216  283 3488  477  172 1161 1373\n[66613] 4705  575 2917 4201 3622  423  629  689 2910 2223   89 1585 1721 2156\n[66627] 2904 3416 3932  211  221 4411 3357 1171 1734  706 2793 4202 2189   27\n[66641]  226  708 4695 1064 5811 3365  894  199  884  181 1119 1519 2960 2580\n[66655]  918 1104  413 5298 1284 1518 3556 1714    1 1712 2042 2488  431 1109\n[66669] 2949  345  359  418 1185  291 1022 1289 1407  327 2351  135  356  415\n[66683] 5815 2934 6181 3411 4113  169 1038  193  687 1185 3849 4328 5451 2158\n[66697]   67 1629 2147 2370  360  654  841  353  299 2191 3713 2019 5411 1455\n[66711] 4131  691 1053 1013 4191 3069  426  511  237 1481 1637 2915 1611  926\n[66725] 2331 4382 5268  656 4381   45  413 3044  389  669 3301  442 2954 1710\n[66739]  235 2923 1495  387  425  415 2202  195 2908 3513 2139 2391  177  201\n[66753]  119 3134 2039 2160 2928 3992 1715 3591 1854 5948    5  693  434 1416\n[66767]  947 1576 5383  247  250 1691  183  245 1193 4498 1473  263 2937  543\n[66781] 1499 4444 3526   29 4543   71 2925 2931 3691 3674 1078 1091 1485 4370\n[66795] 1526 1729 2911  235 5769 4361 1128 2437 1225 1346 3374 2909 1271 1435\n[66809]  803 3486  359 5287 5714 3445  400  711   87 3349 2951  234 3662 3573\n[66823] 5038 2131 2454 5274  866 2162   65  152 2065  883 2195 1703 1147 4348\n[66837] 2142 4333  418 3535 2950  225  308 1651  153 3604 1768 1498 2314  395\n[66851]  363 1159 4195  347 3494 2914 1205 1224  460 1115 4204  523 4085 1295\n[66865] 2680 1201  985 4368 4312  314  415 4106 2164 5048  499 2197 1677 4885\n[66879]  994 4536 4700 1682 1039 4033  168 4645   21 2159 1049 3845 3384 1066\n[66893] 3317 3621 3660 4689 4224  283  185 4321 1371 3525 5311 4233 4672 4119\n[66907]  427  234  486 4512 1247 3846 3603 4186 1816  527  718  108 2002  839\n[66921]  745 1503 5747 3281 3230 3340 3404 2142 2193 1751  411 1503 1895  559\n[66935] 1441  605 1909  731  301 1377 4137 2167 3819 2243  371 1517 5747 1175\n[66949]  601 5716  219 1403  583 1716  359  485 4471 1919 3525 5904 1103 1989\n[66963] 1899 4393  303  821  482 3351   16 2180 6177 3572 2052 1360 4533 1215\n[66977] 1099 3550 2085  929  596  495 1205  479 4424  303 4122 4241 4412  215\n[66991] 2134 5791  398  575  905 1506 3496 3769 4522 1072  675 1439 1121 4099\n[67005]  343  318 1263 1547  315 2169 2702   23  430 3599  331 2136 1879 1415\n[67019]  472 1299  399 1077 1177 2285 3676 1107    3 1352 4166 2493  305 1345\n[67033] 3842  281 2606  677 3547 1381 1592 1975  831  183  376  461 1289   20\n[67047] 2279  424 1717 4125  885 3759 2916  163 5795 4407   59  183  295 1216\n[67061] 3815 2939  807 3052 3363  279  561  584  450 1733 2047 2395 2138 1273\n[67075]  398  307 1959 5242 2190 2921 1111 1307  711 2171   33  397  346 1205\n[67089] 3272 1456  857 1109 1271 4364 5463 3370 3370 1783 2457 1148 1429 2924\n[67103] 2906  914  281 1357  409 1626 2932 4111 3579   84 1511 1043 2912 2267\n[67117]  219  323 1743 4638 4537  509 5327 1831 3355 5813 4419 2119 1496 2280\n[67131] 2926  795 1025 1025 4149  443 4380 1581  573 1643 4935 5220 2071 2901\n[67145]   15  586 4388  301  208  685 2140 2173 5099 5858 3407 1121  970  422\n[67159] 1296  504   27 1701 5133  288  394  161  247  653    1  313 1634  275\n[67173] 5443  874 1499 1885 1030 3419  189  407 1747 4087 3478  223  199 2166\n[67187] 1223  271 4065 1401 1437  116  997  876 4880  317  403 3565    5  251\n[67201]  483   11  160  785 4060 2142 1030 3531  673 5711 2175 4140 1257  469\n[67215]  218 1711 3512 2319  181 4691 1110 1289  411   51 1183 5149 3644 1847\n[67229]  893 4255 3611 1174  604 3675  518    1  642 1745  325 1529  234  378\n[67243]   19  179 1131  925 2343 4187  679 2602  187 4510 4495 4679 4162 5346\n[67257] 3852 5309 2506 3689  971 3281 1869   15 2144 1275 1647 2177   23 1250\n[67271]  695 6054  775 1599 5417 4548  563  405 2098 4445 5273 3466  249 2219\n[67285] 1143 1622 5797 1139  707  327 3373 6074 1875 5736 1663 3827 1180 1442\n[67299] 2902  172 2885  323  274 3566 4567 2380  423   63 3572 5796 3386  485\n[67313] 3404  255    3 1711  316 1685 2146 1947 5333 1785 3230 1129  766 2179\n[67327]  483 4240 1227  254 3670 1214 1143 3806 3361  332 1386 2069 3461 3616\n[67341]  377  127  329 1256 3371 1131 1318 4633 3342  383 1697  178  300 1428\n[67355] 4304 4622 2181 2148 1263 1280  355  781 5207 5378 1145 2043  578  432\n[67369]  156  165 1880  411 1843 1639  144 1641  294 3795  505  456  802 4434\n[67383] 2402 4552 5299 3340 4161 1054  308 2868 1734  431 5437 1401  331 1779\n[67397] 4395  117 4682 3305 3848 1611  203 1775 3493 3567 4100  686 1802 3388\n[67411] 1164  927 1073  643 1583 2247 2183 4171 4687    3  516  213 1151 1440\n[67425]  394 1170 1232 1493  235  337  673  561  789 1373  118 2150 4559 3527\n[67439]  217 4372 5391 1070 1819  477 1902 1120  575 5713 1171  301  581 1231\n[67453] 2918  325 4181 1744 2936 4175 1186  286 3588  998 3669 2940  703 3359\n[67467]  841 2907 1773    1 5801 2815 1995 4141 3231 1164 3070 1935 2152 1554\n[67481] 2285  419 5199 1111  721 2185 2913  145 2297 1270 1515 3391 2181 2347\n[67495]  460 1155 3663   95 4297  745  761 4502  320 4572 3532 1982 1492 1600\n[67509]  381 1246   83 5455  133 1729 1942  573 4580 4326 1775  312 1695 4532\n[67523] 4576 1767  256 1705 3488  417 3778 4667 5091 1023 2900 3416 1117 2280\n[67537]  287  421 3357 3075 2793 3199  305  257 2187 1156 2459 4596  341 2154\n[67551] 2231 1105 3264  343 2806  409  624 2917  467 2927   85 1064  240  843\n[67565] 1051 3825 3357  172 2922   65  847 1619 1410 2904 2302 3622 4294 4702\n[67579] 1593  629 5293  516 5601 2949   27  753 1178  181 1394 4352 2933 1289\n[67593]  477 3202 1284  423 1373  884 4201 4705  283 4695 2042 1526 2223 2910\n[67607]   89 3216 4328 3411   45 1171 1161 1732  708 2189 1585 2156 1128  706\n[67621] 4411 3932 2960  226  211 1518 3365 5811 2903 1119 3771  375 2488 4202\n[67635]  431  918 1104  413  345 1048 2580 1734  221 5712  308 1519 5298  380\n[67649]  291  415  894  169 4113 3849  359 1185  434  418 1499 3069 2351  327\n[67663]  193 1407 2934  837  687 5815  299 1211 3713  356 4191 5451 3301 2191\n[67677]  691 1629  360 2370  391   67  926 3526 1692 1185 1321 1637  353 6181\n[67691] 1152 1013  535 1165 2019 4131 1481 3556 2158 1022 2147 1053 3691 2915\n[67705] 2331  199 1109  442  400 1751  183 1531  195  399 1611  426 2954 5268\n[67719]  413  669 3044 1212  389   87  201 1710 2923  415  135 5948 2202    5\n[67733] 2139  425 3134 3513  119 1854 4382  177 3674  263 3486  359 1416 3591\n[67747]  711  947 1576  435 4195  693 2908  543  541 2160 1473  245 1715  310\n[67761] 4498 2937 2159 5383   21   29 2928 1259 4444 2193 2931 3992  237 3445\n[67775] 1691   71  347 3349 5769 2909 2911  235 2142 1091  225 1729 4361 4543\n[67789] 1271 5287 1225  363  510  152 2039 2437  654 3573  478  803 5714 4370\n[67803] 1193 1078 4312 3374 5274 1435 2162 2195 2951   65 2454 4224 4368 1346\n[67817] 2065 1703 2950 2925 1498 1201 4348  418  415  475 1224 4321 5038  455\n[67831] 2314 4106 3604 1464  427  314  153 2914 2131 1205 4085 5956 4204 1127\n[67845] 1295 1115 4033 1147  499 1485 2680 2197 3384 2164  775  168 4645 1768\n[67859] 4333 3317 1682 4885 1677 4512 4700 3603  994 1409 4119 3494 5048 1218\n[67873] 1371  985 3845 1159 1049  523 4689 3621 1071 2391 4186  527 1183 3846\n[67887]  185 4672 3660 1066 1247 3525 4233 4536 3662 3535  486  234 5311  108\n[67901] 1816 2002  718  464  745  839 5373 1895 1452 1500 2243  219  731 1403\n[67915] 2134 5747  303 4471 5716 2167  301 1517 6177 4137  371  605  485 1716\n[67929]  681 1377 1909 4393 1103 1919 1668 3819  601 1989 3525 1899 3572  288\n[67943] 2180   16 3351 4522 4533  495 2052 2085 1175 1204 1099 4412 4424  303\n[67957]  575 1627  929 4241 1360  339 1506  245 3769  905  398  478  675 1121\n[67971] 4099 3550 3496  343 5904 1439  318  331 3599 1263   23 3676  596 2136\n[67985] 2702  315 2169 1879 4122  472  399 1107 2285 1415 1177 1547 3842    3\n[67999] 1299  430 1352 4166 1345 1077  305 2003  821 2493 2606  525 3547 1592\n[68013] 1456  677  573  831 1975  785  183 1381 1289   11  424 5791  461 2916\n[68027] 2279   20 1717   59 3759  163  283  885  807 1205 3815  183 1216 1307\n[68041] 3363  279 3052  584  711 2939 2047 1733 2138 2924 1273  398 1959 3370\n[68055] 2171  307  397  450 1111 2190 5795  561 2921  281 2395   33 4111 5463\n[68069] 3489  857 5242 1109 1271 1783  346 3272 2906 2457  914 1429  409 4407\n[68083] 1043 1626 1357 4691   84 1148 3478 1831 3579 4364 4638 5813 2926 2280\n[68097] 2932  219 4125 2912 1511 2119 4537 2901 3385 2267  215 4388 3355 3531\n[68111] 1025 2071 1496  281 1743 4109  509 1025  795 1162 4380   15 1643  338\n[68125] 2140  301 5220 2173 1701  504  586  422   27 1030 5858  997 1747 4419\n[68139]  189  275  235  443  161 5099 5443 1170 3407 1289  313 3419  537 5133\n[68153]    1  653  394 1885  970 1634  874 1499  199 4065  407  223  181 2166\n[68167] 3565  208 4935 1519 1223 1121  876  317   15  403 4087  483  251  160\n[68181]  218 1160    5  271 5711 1735 2142  469 4060 1030  411 1847 1183 2175\n[68195]  673 1110 4140  384 3644 1711 3512 1257 2319 4880 5736 3675 3611 4255\n[68209] 5149 6054  604 1174  116 1745  187 4495    1  642  325  518 1529 4187\n[68223]   19  925 2343 1622 1131  679 1711   23 4548  497 2602 3281 3852  893\n[68237] 6074 3689  971  695 2144 1869 4679 1275 4162 1647 5309 2506  775 1599\n[68251] 3230 2177 4510 5273  563  264 2098  249 1143  703  327 1139 5373  418\n[68265]  179 5346 5796  707 5797 3373 1875 3466 2219 1442 2885 1250 1180 1623\n[68279]  172   63 2380 1711 2179 1685 3827  255 3386 3572  586 2146 4567  766\n[68293] 1227 1129 5333 1256 3305 3404 2902    3 1785  423  483 3508 3461  316\n[68307] 3670  701 3616 1386  332 3361 4304 1667 3566  329 1947 1143  127  252\n[68321] 4240 2069  323 1131 3806  300 4633 4445  178 1375 1428 2181 3342 1697\n[68335] 1318  144 1880 4682 2148  394 1145  165  411 1734  781 5207 1048  578\n[68349] 2043  432 3848 5378  355 3795 1280  383  308 2868 1641 1639 3388 1843\n[68363]  802  505  456 4552 4161 2402 3340  331 1164 1054 4395  431  431  308\n[68377] 1401 5437 5299 4434 1779 4687 1802 5417  516 1565  117 4695 4622 3305\n[68391] 1073  294 3567  686 1775 3493 1151 4171 2150 2183  118  643  927 1663\n[68405]  213  203  312 2247    3 4100 1170 1232  337  673 1373 3669  391 1493\n[68419] 5712 1070  541  477  561 1819  301 5391 1296 5713 1902 1231 1122  581\n[68433] 1111 4181  286  325 2907 3588 2918 1171 1554 4175 1186 3231 3359 1744\n[68447] 2903 5801 2815 2936 1164 2285    1  841 1270 1995  575 1773 3070 3391\n[68461]  721 2940 2297  745 2152 1935 2913 4141 1600 2347  145  703 1155 4502\n[68475]  320 5199 3202 2181   95 1617 4372 4381 4596  419 1982 2185  341 4532\n[68489] 1246 3532  761 4572 5455  133  624  381   83 1695  417   85 1942  257\n[68503] 4326 1775 2900  573 4667 4576  998 1767 3778 4580  256 1729  695 1705\n[68517] 2927 3488 3199 3075 2280 1118  421 2806 3825 2154 1105 1117 3357 1051\n[68531] 2922  409 2187 2793 2917  305 1156  375  343  847   65 2231 4538 4352\n[68545] 3357  843 5811 1572 2459  485 1064 5601 3622 2904  172 2933  287  629\n[68559]  516 1410  283   27 1619 1289 2949 1593 1712 2302 1373 1394 5293 4409\n[68573] 1161  477  884 1104 3771 3216 3416 4201 1284 2223  918 1526 2042 4702\n[68587] 2910 3411 1454 3932 6181 1734  894  413  167   45  199 4328  689 2156\n[68601] 2960  356 2189  211 1171  467  423  181  706 1518   89  753  708 3365\n[68615]  387 1585 4294 2488  332  345 4411  509 3849 1519  169  687 2580  434\n[68629] 4113  291 1185  327  415 1212 1119  359 1499  507 2934  193  475 3556\n[68643] 1407 4202 2351   67 3069  135 1321 5091  399  400  299 5451 3713  587\n[68657] 2147 2370 1211 1185  535 1109 2158  221 1629  926  353  691 5298 1637\n[68671] 1013 1022 2019 1481 2191 4705 1692  426 1710 1053 4410 3526  512 1165\n[68685] 2331    5 1611  195 3134 3486 1751  669   87 5268 2954 1531  360 5815\n[68699] 3044  415  389  414  201  183  442  362 1205 2915 2923 3691  237 2202\n[68713]  177 4382  425 3513 2391 5274 5948  413  119 2139 2039   29  263  324\n[68727]  359 3445 2193  543 2928  693 1416 1715  435 1473  245 1128 2160 4195\n[68741]  654 4131 1691 3674 2159 2937 1193 1854 5383 4498   21 3992 2931  711\n[68755] 5769  947 4361 3349   71  235  347  152 4370  161 2142 4543  225 1768\n[68769] 1091 1435 1078 4444 2908 2437 1346 2911 1576 1269  510 1271 5287 3374\n[68783] 1729  234  363 1485 3573  803 3662 5714 2131 5038 2925 2950 4368 4321\n[68797] 2454 2162 2909   65 1147 1480 4224  418 1201 1703 2195  415 4348 4333\n[68811]  491 3535 3604  153  427 1651  915 2065 4689  455 2314  883 3591 1464\n[68825] 4033 4106 1224 5956  314 1205  523 4085 2914 4204 3494  371 1618 4312\n[68839]  168 1295  499  985 3384 2197 2680  775 1159 4885 5048 3317 1677 4536\n[68853] 1682 4645 1631 4119 3603 1218 4700  994 1482  352 1247  479 3621  702\n[68867] 1371   97 3845  185 4186 2164 1183 3525 1066 3846 1498 2951 5311 3660\n[68881] 4672 5675 4512  486  108 2002 1816  718  234  527  745  839 1503 3301\n[68895] 3663  745 1895 1452 2243 1500  359 2167 3819 1909  219  301 4471 1175\n[68909]  583 2134  303  731 4137 5747 5716 1403 1517 1377 1103  605  371  485\n[68923] 1668 1716 1919 5904 4393 1899 3525  601 1989   16 3351  288 4522 2180\n[68937] 4533 3550  596 1099 1360 4412 3572  905  929  479 4241 2052  525 4122\n[68951] 1217 1205 2085  575  339  303 1214  495  240  398 3769 1506 5791 1121\n[68965] 4099  343 3496  675 4424  318 3599 2136 1263  315 1879 3676  635 4166\n[68979]  472 1547 2285 1299   15   23 3842 6177  331 1415  399  418 1107 2702\n[68993] 2169    3 2493 1352  245 1077 1345 2003 1592  305 2606 1456  573  183\n[69007] 1975 1381  430  677  831 3547  424  785   11 2916 2279   20 1289  461\n[69021]  885 5795 4125  163 1717  183 3759 3815 1216  279   59 4407 1511 3363\n[69035] 1733 3052 3370 2939 1307 2171  398 2138 2921 2924 1111 2190  397  561\n[69049] 5242  281   33  307 1273  346  711 3272  584 1162 4111 1109  914 2395\n[69063]  857 5463 1148 1783  281 1271 4364  807  283 1429  409 1357 2457 1626\n[69077] 1831 2906 4537 4691 2901  509 2912 2932 3579   84 4380 5813 3478 2926\n[69091] 2267 4638  443 3385 3355 2119 2280 1743 1440 1496 2071 1025 4109 4388\n[69105]  795  219 4419  994 3419 4935 1025 1959 1581   15  997 2173  681  586\n[69119] 1643 2140   27 2047 5220 1121  301  504  338 1747 1030  422 1634  189\n[69133] 5858  394 4087 1701 3407 5133  161 1170  313    1  653  208 5099  874\n[69147]  970 1499 1885  199  223  446  407  275   15 1223 3565 2166  578  181\n[69161]  116  317  271 5443 4880  876 4065 1735  403  483    5 2175 1030  218\n[69175]  673   51 1160 4510 4140 2142 4060 4255 1257  411 1110  469  471 1183\n[69189] 1711 3675 3644 3512  160 5736 1622 2319  893 5149 3531 1847  604 6054\n[69203] 1174 3489  642  325 1745 4495  518  187 1131   19 1711 4187   23 2602\n[69217] 1529  179  925  251 4679  679 6074    1 4548 4162 3852 2343 3689  695\n[69231] 3611 2506 5309 5417 2144  971  563 1869 5346  223 1275 1647 2177 3230\n[69245] 1250  698 1599 3466  327  264 5273  703 1143 5797 2219  707 1139 3373\n[69259] 2098 5796  497 1875 1623 3281 1180 2885 3827  172 4567 1442 1256   63\n[69273]  323  586 2380 2146 2179 2902 3404 3386  766    3 1685 3566 3572  255\n[69287] 1947 2069  316  423 3305 4445 3508 1785 3461 4396  483 3670  475 1667\n[69301] 1143  332 4240 3361 3616 1711 1129 3806  998  127  329 5373 1131 4633\n[69315]  178 1318 1375 3342 1697 1880 4682 3388 1428 2181 4622 5378 2148  355\n[69329] 5207 1843 2043 1145  432 1280 1543  781  165 1734  252  411  144 3848\n[69343] 1641 3795 1639 2868 4434 5333  802 4552  456 1054 4161  331  431 5299\n[69357]  308 1164  383 4395 3340  505 2402  431 1073 1779 4695 3305 1401 3493\n[69371]  215  117 4687 1565 1122 4100 1583 2183 1151  516    3 4171 3567 2150\n[69385]  394  686 1386  213  249 2247  927 1373 1170 1775 1232  561  337  673\n[69399] 3669 1493  980 1802 1070  300  477  287 1902 1819 5713  581 4372  575\n[69413] 1231 5712  325  286 2918 4181  643 1454 1995 3588  118 1744 1289 2940\n[69427] 5801 1186 2907 2936 3359 3231  841 5391 3070 1171 1164 2297 1773  391\n[69441] 2185 2913 2347 2815  373 2152 2903    1 1270 1600 1935 4141 5199 2181\n[69455] 4175 5437  721 1155 2285 4381 3391  685  745 3202  320   95  419 3663\n[69469]  703  145 4596 3532  761 4326 4532  341 4572  399  573  417  381 1090\n[69483] 1205  133   85   83 1942 1982  257 2900 1775 4580 1111  332 1767  256\n[69497] 3778 4502 2927 4576 1023 1729  421 2280 5091 2187 5811 2154 1117 3825\n[69511]  305 1564 2922 1156 1105  467 2806 3357 1705 4538 3416 1051 2459  847\n[69525] 2793 3075  343 4352 2231 3357  409 3199   65  753  843 5601  172 1619\n[69539] 1695  308 3622  375 2904 2933 4702 1410 1593 1394  516 4294 2302   27\n[69553] 2949  629  181 1289  301 1373 1178 1161 5293 1284  884 4409 3216 2042\n[69567] 4201  423 1455  918 2910 2223 5455 3411   89 4705  283 1104  477  413\n[69581] 3932 1171 2960  708 2156   45  211  689  221 4411 1734  167 3771  356\n[69595] 2189  512  894 1518  996 1119 1714 3488 4202 2488 6181 5815 3556  345\n[69609] 1585 4328  509  415 3849 2580  706  169 1109  359  434 3069  587  327\n[69623] 1499 4113 2917 1519  193 1185 1407  212   67  135  400  687 1554 1321\n[69637]  291 1692 3301 2158  199 1185 3365  691 4382 1211 5298  299  507  535\n[69651] 2147 1152  353  775 2351 2370  926 2019  262 1710 1064  357 1629 1022\n[69665] 3526 1481 4131 1013 2915 4191  426 1611 3691  362 2331 3486    5   87\n[69679] 2954 3360  201  669 5451  183  413 5948 3044 1751  425  415 1120 2923\n[69693]  237  195 2191 2139 3134  389 2908 3513  177 2391  442 5274 1854  119\n[69707]   29 3674 1128 2039  359  360 2202 3591 3445 2193 1691  947  543 1576\n[69721]  654  693  435 1715 4195 2928 1473 2160  245 1193 1416 3992 4498 2159\n[69735] 1053   21  324   71 2925  711  152 5769 2937 4370  235  347 4361 4444\n[69749] 1485 5714 3349 2437 2142 1526 1729 2911 1768 2931  161 4543  803 1435\n[69763]  363 1091 1078  247 1149 5383 2909 1271 3374 2951 5268  478 3662 3573\n[69777] 1246  225 2131 2162 2934   65 3604 2454 5038 4368 1466 1147 2950  263\n[69791] 2195 2065  415 1346 1201  883 4224 4312 1498 4333 3535  439 4348  418\n[69805]  915  427 1224 2314 4321  314 4689 4106 5956 4204 2914 3494 4033  153\n[69819] 1205  168  523 4512 1464 5287 1159 1115  371 1295  426  985 2164 2197\n[69833] 2680 4645 3317 5048 3384 1071  499 1247  371 4536 3603 1631 4119 4885\n[69847] 1651 1677 4085 4700 3845  775 1371 1049   97 1606 3621 3660  185 3846\n[69861] 5311 1183 4672  527 5675 3525 1066 4186  702  234  108  486 2002 1816\n[69875]  718  234 1503  839 5711 1439 1895 1014 2243  303  795  731  371 6177\n[69889] 1187  258 5747 5716  583  605 1403  665 1377  858  652 4120 1103  883\n[69903]  601  905  482 1899  950 3307  575 3848 2180  929 4533 2085  303 2951\n[69917] 1205  525 4241  479 1299  495 4122  398  883  407 2267  318  675  385\n[69931] 1263  315   23 1415 2285 1175 1547  430  472  156  399   15 1879 2702\n[69945] 3846    3 2493  305 2003 1345  806  831  183  265 1099  677 2020 4277\n[69959] 1289  461 1044 4114 2279 4125 1506 2916 4140 2339 4297  807 1717 5795\n[69973]  377  885  183 3052 3370 1216  295 1733 2939 1273 1511 3363 1148 2924\n[69987] 1307  584  307 2190 1553 1959 1848  346  397 2047  391 2921  936 1271\n[70001]  561 1111  281   59 1783  163 1429 3531 1357 3478  409   84  219 4625\n[70015] 1626  281  752  509 2901 2926 1743 3407 3419 3385 2119 4240 2932  443\n[70029] 4638   33 2912 3815 2280 1170 4111 4388 1109 1025 2071  795 1682   11\n[70043]  238  348 1121 4179  544  301 2173  181  505  313  422  970   27  586\n[70057] 1747 1701 1223  161  208  394 5858 4409 3565 1030  653 5133    1 1634\n[70071]  407  343 1499  997 1519  199  271 1924 2941 3531 1223  483 4714 4935\n[70085]   15 5540 3611 1174  116  317  874  251 3675 1885 2457    5 5711 1030\n[70099] 4380 4255  469 1094 1808 5951 1110 1257  351  761 1160  411  403 1183\n[70113]  421 5736  604  497  518  642 1984 2067 1131 4187    1  925  187 1711\n[70127]  679   19   51 1529 2046  179  325 4495   23 3533 2602 4662 3806 4118\n[70141] 4162 5443  364  971  695 3466 1869  835 1275 1647 2177 3230 4445  785\n[70155] 1599  405 2098  287 5346 4679 5309 1143 1892 1875 5333 3461  703 1785\n[70169] 5392 2219 1224 3807  471 1442 3616  323 3572 1623 3670  406 2146 1685\n[70183]  316 3386    3 3415 1947 2380 2902 1256  251  329 4304 3588 4567 2375\n[70197] 4214 3361 1143 3848 1129  300  127  566 1131 5008 3264 1697  383 1386\n[70211] 3388 1711  781 1318 1177 1863  165  411 1622 2043 6049  394 1641 3340\n[70225] 1639 4434  501  802  178  505 3305 1972  636  308 4552 2506 1631 1199\n[70239] 2181 1401 4064 4395  323 4629 1779 1802 1073 5813  117 1611  537 1461\n[70253]  431  927  686 1151 3567  213 2247 4171 4087 1583  118 1373 1232 1676\n[70267] 3588 1493 1170  337  998 1420  320  477 1705 5712 3669 4633  561  301\n[70281] 4148 1819  575  286 4181 2918 1298  325  207  355 1205 1171 4175 1958\n[70295] 2940 2152 3070 2903 3391 3359 2907    1  395 1164 6054 3231 1773  587\n[70309] 2347  685 1834 2936  703 1778 5713  841 2297  419 2285 2181  145 4381\n[70323] 3202 4368 3663 1600  341 1171 2944 4502 1270  573 4572  210 1200   95\n[70337] 1289 5803  424  133 1424  708 2008 3416   85 1942 2088 2900   83  559\n[70351]  527  256 4412  305 2889  485 4532 4537 1156 1117  467 1587  847 1695\n[70365] 2459 4352 3075 2927 1982 1554  409 2793 1619 2488 4393 5484 1403 2922\n[70379] 4580 2917 1410 2815  753 2231 1242 1935 2933 1729  516  172 4702  629\n[70393] 2904   27 3827  181  257  375 4284  283 1394 1178  624  423 2949 2302\n[70407] 2280 1593 1373 1284 5513 4204   65  918 4705 5837 1585 1854 3216 2910\n[70421] 4328 6181  512 2580  706  413   45 1734 3556  199  894  211  167  635\n[70435]   89 1119 3365  551 4202 4121 1902  291  345  415 3301 1109 1712  687\n[70449] 4421 1185  359  507 2934  135 4113  866 2351   67 4191 4201  418 1185\n[70463] 1105   23 3726 3674  535 2147 1481 1022  523  299 2019 1611 1637  926\n[70477]    5 1518 4161 4131 4128 3486 3044 2954  413 3811  390 1751  669  183\n[70491]  201  415  425 2202 1075 2915   87  843 1615 1576  442  359 3134  263\n[70505] 2391 2097 3591 1047 2928  119  426  543 2908  469  245  434  711 2923\n[70519]  327   21 1296 2159 2942 5769   71 4370 4543 1111 2919  235 1091 2925\n[70533]  803 1768 1161 2911 3374 1416 2909 1526 1692  225 5714 2950 1729 2454\n[70547] 1201 2065 1482 1631  883  347   65  418  915 3535  153  931  427 2314\n[70561] 2914  523 1205 1295 1409 4377  499 1071 4700 4348 1371   97 1677  702\n[70575]  527 1271 4361 1066 3621 4194  234  486  185  985 2002  108  718 1816\n[70589] 1503  745  839  360 1946 2142 1816  745 2680 5287  108 3846 1540 2243\n[70603]  371 1739 5824 1175 1403 5716 1955  328  583 1377 6177 1212  601 1103\n[70617] 1989  371  400 2180 1099 1946  929 3550 1115  303 1205  495 2085  525\n[70631]  245 1627  479 1677 1506  905 1509  675 5791  318  315 1263   23  399\n[70645] 2285 1879 1415  691    3 1107 2702 1547  472 2493  305 1077 4304 1439\n[70659] 4166  461 1975 1456 1299  677  831 4101 2279 1381 1289 1736   11   20\n[70673] 1345  885  478 2916 1717 1216 4297  163  807 3052  461  183 1111 1733\n[70687]  307 2190 3363  398 1273 1959  398 2047  450 1148 1511 3370  281 2924\n[70701] 3272  561 4364 2395  936 3489 1109  397  346 1271   59 1783  279   33\n[70715] 1307  914 1429 2457  857  281  409 1357 4537 1626  668   84 2912 4638\n[70729] 3478 2926 2267  509 2280 2053  343 2119 2901  219  391 3810 2939 1743\n[70743] 4250 4935 4388 1025  795 4711 3419  443 4380   15  338 1643   27 4087\n[70757] 1162  301 1448 1257  422 1747  586  394 1121  711 2173  376  181 2921\n[70771]  208  189  970  313  504  653    1 1634 1701 1885  874  275  407 3531\n[70785] 1030 1499 5242  199  223 3085 1761 3565 1519   15 1223 4179  271 1120\n[70799]  876 1170  116  317 1401  251 3579    5 5443  403  218   51  160 4141\n[70813] 1030 1160  469 1183 4510 2906 5711  497 1110 2017 4255 5736 1847 2319\n[70827] 3675 3644 3512 1174 3611  604 4187 1131  411 1529 1745  518 1711    1\n[70841]  483 2343   23   19 2602  679 4869  187 4679 4412  925 4374 3689 4162\n[70855] 5346  695 5417 3281 3433 6074 1275  654  179 3230  971 1250 1869  226\n[70869] 1599 4393 3466  642  325  703 3673 2506 1143 2021 2098 3812 5905 1875\n[70883]  405 3806 3827 2219 5309 5797   63 5333 4567 1180  172 1723 1442 3404\n[70897] 3572  316 3566  323 1973 2146 1623  766 3386 1256 1647 1711 2177 1947\n[70911]    3 2380  423  785 2179 3508 1143 3461  352 1785 4512 3670 1227 1685\n[70925] 1129 3361 1667 3850 1386 4092 3848  127 2639 5355 2902  300 1131 4233\n[70939] 1697 3342  383 3616 4682 1318 3996  178 1375 1663  608 2181  144  432\n[70953]  781 5207 1461 1145 2043  165 4622  411 1843  577 1641  456 1752  802\n[70967] 1639 4434 2868 3340  505 3795 5299  308 1401 4430 1164 5023 4552  431\n[70981] 4395  624 1073 1779 4687 1054 1775 4662 3305  117 1835 1802 3388  424\n[70995] 1611 4100 2150 2183 1122 3493 3567  927 2247  686 4171 1151  213 1170\n[71009] 1200  460 1232  118  980 4483 1902  477 1070 1583 1819 1373  301  575\n[71023]  581  325 4372  561 4175 3359  286 4181 2918 1995 1554 2903 2402 1205\n[71037] 1231  340  703 1773 2815 3588  394 2907 5437 2940  998 1164  841 3231\n[71051] 1935 5801 4410 5713    1 2913 5580 2285 1171 3391  721 5951 2297 5712\n[71065]  145  673 2181 2347 3202 1600   95  419 3070  387  320 4532 4572 1982\n[71079] 1744 1246  327 1155 4596 5391  377  573  133 3663 1248 2936 2933   85\n[71093]  417 5455 1942  257 2900 1767 4580  527 1734 4667 2185 1023 3488 1695\n[71107] 4326 3669 4576  643  305 5091   83 3357 4352 1705 4122  708 2154 1117\n[71121]  409 1729 3199  256  847  753 5392 5811 1242  467 3357   65 2793 3778\n[71135]  343  375 1410 3416  172 4702  399 1262 1156 3075  283  516 3622 2904\n[71149]  181 2302 1373  341 2187 2280 5293 2459 3825 1178 1619 3264 4705 1139\n[71163]  356  477 1394 3932  681 2042 1284 1734  221  211 4294  706   27  629\n[71177] 1098 4202  843 4328   45 4201 2580  220 2910 5815  884 5298  167  413\n[71191] 1585 1119 1171  512 4113  421 1519 3849  509 3069 1499  894  345  687\n[71205] 1109  327 2223  483 4502    3  169 1064  195 1321 2960  415  193  135\n[71219] 3301 1185 2189 1022  535  299 1629 1692 2147  370 1177   89 3216 1518\n[71233]  360 2191  321  359 4191  926 2927  400 4349 1611  426 1013 3713  442\n[71247] 1053 3365 3526 2019 2934    5  413 2158  183 1531 1751  425 4381 3486\n[71261]  215  201 2370  389  434 2922   67 1211 4382  507  423  195 1279  237\n[71275]  199 3771  353 2391 3513 2923 1854 1105 1289 3674 1221  119  291 1263\n[71289]  263  711 1715 2139 2231 1416  177   29 1473 2331 1052 1576   21 2915\n[71303] 4411 2159  543 1691 2351 1539  245 1605   71  947 1729  235  347 1485\n[71317] 3349  435 2202  243 1435 4152 1078 3992 1528  312 2437 1271  884 1051\n[71331] 3445  669 1768 2039 2142 3662 5769 2911 4641 5451   65  161 5268  415\n[71345] 2954  803 1269 2131 1128 1185  427 2193 4368  363 1224 1201  918  915\n[71359] 5274 1651  314 4370  415  359  153 3044  256 2195 1618 3591 3573 6073\n[71373] 2937 5383 1407 1147 1071 4701 3317 2162 4195 4550  475 5038 1205 1346\n[71387] 4131 1482 4085 4498 2925 1464 2314   87 4700 2454 1703 4212 1295  431\n[71401] 1409 1682 3603  527 4536 5675 1104 2914 4645 1247 3494 1161 1091 1159\n[71415]  168 4885 4543 1149 1039 5237  775  523 2950  418 2928 4033  883  308\n[71429] 4194 1066  499 2197 5311 5714  985 4333 3535  225 4321  371 2164 2065\n[71443]  702  152 2951 4672 3660 4361 4106 4224 2908  185 5048 2488 3384 1183\n[71457]   97 2002 4348 1481 4119  718  486 1371  234 1503 1677 3525 2931  839\n[71471] 3845 4420 4445 5378 5956 3134 2949 3374 3411 3556 3604 3621  693  695\n[71485] 2909 2917  329  331  337 3305 1503 1895 1452 2243 1500  371 1517 5716\n[71499] 1668 2134  605 6177 1403  583 1909  731  303 2167 1377  485  359  301\n[71513] 3819 4137  219 1716 1175 5747  601 5904  288 1919 1772 3525 1103   16\n[71527] 4393 4471 3572 3351  495  905 2180 1989 3550 4533  929 1627 1205 1099\n[71541] 2052 4241 2085  575 4122  596  339 4412  525 1055 1506  478 1360  398\n[71555]  675 3769 1121 4099  343 4522  318  331 2136   23 1439 2285  315 1879\n[71569]  430 2702    3 2169 1547 1077  472 2493 2003 4424  303   15  399 1615\n[71583] 1352 3842 1263 1415 1345  418 1107  573 2606  305 3547  677 1975  831\n[71597] 1299 1381  461  183  424 1177 2279 1717 1289 2916   11   20 3759 1592\n[71611]  885 4866  559  163  807  183 3815 4125 1216   59 1307 3363 2939 1511\n[71625] 1273  327 2138  450  245  398  561 2171   33 3370 2190  785 2047  711\n[71639]  281 2924 1959 2921  307  346 1111 2395 1429 3272 5463 2457 1271 4364\n[71653] 1783  857 1109 4691  914  281 2906 1148 1357  409 4111 2267 2932 3385\n[71667]   84 1743  509 2901 1899 2926  219 2119 5813  443  215  397 2280 4166\n[71681] 4638 4537 1496 4388 4711 1025 4935  795 1626 1456 1831 3052 2071 2912\n[71695] 4407 3407 1643 1043 5220 1162 1448 5791  997  700 2173 1121  394 2140\n[71709] 1701  586 1030   27 5858  504  422 3478 3489 3355  970 1170  189  161\n[71723] 1289  181 4087  208 1634   15    1  653  313 1747 3531  407 3419 1499\n[71737]  874 4419  275  223 1025 4065  235 1223 2166 5133 3565   15  308  199\n[71751]  301  271 4380  317  876 4880  116 1735  251 1160  483 5711 2175    5\n[71765]  578  218 4140 2142  469 4510  673   51  497 1183  411 1110 1847  403\n[71779] 1711  160 1030 2319 3675 5736 3644 3611 1174  604 1622 1745 5149  642\n[71793] 4187 1131  518 4255  179 1529 2343   19  187 1711  679 1885 1257  325\n[71807] 2602    1 4679  893  925 3281 2177  971  695 4495 1275   23 1869 1647\n[71821] 3689 3230 1599 2506 2144 5309  249 1250 2098 5273  775 3466 4445  703\n[71835] 1143  707  327 1139 5797 5796 5373  471 6054 2219 2885 1180 1442 1623\n[71849]  323   63  766 3386 2179 3572 2902  316 2380 1685 1711 2069  586 1256\n[71863] 3305 1947  255 2146 3566  423 1785 1875 3461 1143 5417 1667  701  172\n[71877] 3670 3852 4162 4567 4240 3361 1386 4396 3404  127    3  332 1227  483\n[71891]  329  252 1131  300 3616 4682 1697  383 1129 1428 1375 3342 1318 1880\n[71905]  563 4633  394 2181 1791 4622 2148  432 1145 5207  866 3388  411 2043\n[71919] 3827  355 1280  294  781 3373  165 3795 1639 1641  802 5333 1515 2868\n[71933] 5299 4434 1164  431 1054  331 4161  456 4552  144  431 2402  308 4395\n[71947] 3848 1779 3305  178  117 1098 4687 1775 4695 1073  686  927 2150 3493\n[71961] 3567  516 1151 4171  118 2183  213 1663 4100    3  643  662  895 1170\n[71975] 1493 2247  673 5712 1122  391  337  561 4548 1902 3669 1819  541  477\n[71989]  581  301 3340 1111 1231 4372 2936 2940  286 1454 1171  325 1373 1995\n[72003] 3359 1186  841 5801 3588 2815    1 1164 2903 1802 3231 1600  575 4175\n[72017] 3070  998 2297 1270 3391 2152 2913 1773 4141  703 1155 2285 2181 2185\n[72031] 1935  745  721   95  287 3202 4502  419  145 4381 5391 2907  320 1982\n[72045]  761  399 3532  203 3806  501  341  377  573 5455 1695 1205 1198  133\n[72059]   85 4181  264 1070  257  417 4596  624 2347 2918 1775  332 4326 4572\n[72073] 1767 4576 4580 2900  256 2280 1705 5713 3416 2927 3199 1232 1729 1117\n[72087]  421 2154  409 3825 1156  305  467  847 2187 1572 3778 2806 5811 3488\n[72101] 3357 1105 5091 2459 4538   83 3357 2793 1554  843 4352 1023  753 4667\n[72115] 3075 1051 2922 2917   65 1410 1619 4294 2231  172 3622 2933  485 2904\n[72129] 1373 2949 4702 1593  516  629 2302 1394  181 1583 1161 5199  283 1178\n[72143] 1284   27  884 4705 1289 4409   89 1104 2042  477  375  918 2910 2223\n[72157]  356 1585 1526  423 6181 3932 1171  413 1734  505  221 2189  167 2156\n[72171]  199  708   45 2960 2580 3411  491 4202  512 1119  689  894  706 4201\n[72185] 3216  343 1518 2488  226 4328  345  211  291 3556  415  509 1519  507\n[72199]  169  193 3069 1109 1185  359 1499 2934  327 1212  687 5815 4532  135\n[72213] 4113 1321 1022 1407  400 4191 1714   67 3713 2370 1185  299 3301 3365\n[72227] 1629  691 2147 2158 1986  360  353  535 5293 3526  654 1064  195  926\n[72241] 1481 2191 2351 5601 1637 2019 1013 1053 1165 1710 4131 1611 3691 4382\n[72255]  426 2915  362 2331    5   87 1531 3044  413 2954  669 5268 5298 2202\n[72269] 1480 3674  201 2039 2923 2391 3134 3513  263  415  177  442 1715  119\n[72283] 1854 2908  359 1416 2928   29  434  715  223 2139 5451 1692 3445 2160\n[72297] 1691  711 3992 4411  693  245  183 2193 3591 2159  324 4498 1193 3486\n[72311] 1576 1473 2937   21  947  587 5274 2931  152   71  347 1768 1091 1128\n[72325]  803 3349 1269 1485 5948 1729 2142 4361 1078  237 2437  235  510 2911\n[72339] 1435 3374 5769 5714 2925  234 1346 3662  543 2951 4312 3573  389 1271\n[72353] 3849 4543 2454 2065 2195   65  883 3604 2950 4444 5383 2162  415 1147\n[72367] 4370 2131 4224 1703  488  418 4333 5956  153 1942 4348  427 4368  225\n[72381] 1224  915 2909 1651 2314  455 1464 3494 1159  168 1205 4204 4512  523\n[72395]  371 5287 1115 1201 1295 2914 2680 3384  499 2164 2197  775 1247 4536\n[72409] 4700 1682 4033  994 3603  985 4106 1631  314 3845 4645   97 1371 4119\n[72423] 1677 1049  475  527 4321  702 3660  185 3621 3846  363 3317 1066 4186\n[72437] 3525 1183 4885  479 5675 4195  486 4085 4689 2002  108 5311 4672 1816\n[72451]  234  718  745  839 5038 5048 5099 5242 5378 5437 5443 5346 6074 3535\n[72465] 3676 3663 3599 1734  279 3579 3508 3512 3496 4060 3771  745 1895 1487\n[72479] 1441 2243  371 5747 2134  303 1517 5716  301  605 1716 1909  219  731\n[72493] 4471 2167  583  359 1377 3819 4137 1175 1403 1480 3525  485 5904 1919\n[72507] 1103 1989 1899  601 3351 3572 1099 4533   16 2180 1178  596  303 2052\n[72521] 1214 1205 4122 3550  929 4522  905  245  479 4412 1506  495 2085 1360\n[72535]  575 1627  525  339 4241 4424 5791  482 1439  398  377  675 3496 3769\n[72549] 1121 4099  343  479  315 2285 1879 4166 3599  430   23 1547 1415   15\n[72563] 2702 1190 2136 1263    3  399  472 3676 2169 1107  318  305 3842 2493\n[72577] 1352 1262 1345  281 1456 2606 1077 1592  183 1975  461  573  677 3547\n[72591]   11  831 1381 1717  424   20 2279  885  376 2916 4125  163 6177  807\n[72605] 3759  351 1289 4407 5795  183 2047 2924 3052 3815 1307  279 1273 4393\n[72619] 3370 1511  327 2921 1111 3363  561 2190  307 2939 2171  398  346 1959\n[72633] 1583  331 2395 3370   33 1733 1271 3272  397 5463  450  857 2457 1109\n[72647] 1783 4111 1148 2906  281 1429  914 1216 1357  409 4364 4691 1043 2912\n[72661] 3579 1626 3385   84 2119 1743 3478 1831  509 2932 2267  219 2280 4537\n[72675] 5813 2901 2926   59  401  443 4638 4388 3355 5242 3531 1025 1496 1025\n[72689]   15 4935  301  795 1581 4149 3419 1643  354   27  681 1448  586  189\n[72703] 3407 2173 2140 1668 2071  504 5220 5133  997  493 4087 1701  394  422\n[72717] 1747 1121  161  181  275 1634 5858  313  653 5443  208    1 1885  970\n[72731] 1499 4065  407  223 2166 1223  294 3565   15  215  199  271  876 4880\n[72745]  874  317  160  251 4060  403 5711  116    5  218 4419 1735 1110 2175\n[72759]  471 2142 4380 1257  469 4510  673 4140 1183 2319 1711 1847 4255 1030\n[72773] 3512 3675  483 5149 3611 1564  604 5736 6054  893 1174  325  518 1131\n[72787] 1745 1529    1 4495 4187 2343  679 1030  411 1711 2602 4548   19 5099\n[72801] 6074 4679 3689 5309  971 1869 3281 3433 5346  695 2144 2177 1275 2506\n[72815] 1647  775 1599 3230  624 4162 2098 1143  405  703 1250 5273  327  698\n[72829] 2219  642 1139  707 4445 5373  179 3466 1875 3373 5796 5797  187  323\n[72843]  255   63 2885  172 4567 1129 3386    3 5333  316 2146 1256 2380 1685\n[72857] 1785 3572  423 3852 2179 3404 1947 1711  483   23 4396  701 3461 1143\n[72871] 1386 1667 1180 3361 1120 3566  332 1442 1227  329 4240  127 2902  551\n[72885]  300 3616 3371 4633  178  766 1318 4682  383 1428 3670  785 1880 3388\n[72899]  144  432 5378 2181  165 2043 1280 1145  411  781 1198 1843  587 4622\n[72913] 5207 1734  355 3848 3806 3342  156 1697 1692  426  802  654 2868  505\n[72927] 4434 2402 2069  394 4395  287 4161 4552 3340 1054  331 1401  308 5437\n[72941] 1779  431 1639 4687 3305 1802 1073  117  516 1775 3493  213  686 3567\n[72955] 1151 2183  256 2150  643  118 1122 2247  927  380 1466 1232 1170 1373\n[72969]    3 4171  673 1493  337 4559 3527  301 1663 3669 1070  477 1819 3509\n[72983] 1902 4372  581 5712 4100 1205  325 1231  575 1171    1 4181  561  485\n[72997] 5299 2918  286 1454  288 4175 2903 3588 2940 5801  998 2907 3231 2936\n[73011] 1995 3359 1111  535 1935 1186 1270 2815 1773 4141  721  214 2347 5199\n[73025] 3070 2297 5391 1600 1155 2152 2913  745 3391 2181 2285  419 2185 4502\n[73039] 3202  145   95 4381 3532  761 1982 4326 4572 5713  341 4532 1695  399\n[73053] 5455   85  573  417   83  257  594 1164 4580  703  381 1942 2900 1729\n[73067] 1767 4667 1048 1775 3778 3488 4576 1299  256 2280  421 4596 2927  305\n[73081] 1117 2187 3075 1156 2459 2793 2917 1105 2806  409 3825 1572  133 2154\n[73095] 3357 3199 2922  343  320  847 1246 1705 1051 3416  217  375 4352 3357\n[73109] 2231   65  814  843  753  172 1410 2904 1619 2933 4294 5601 3622  312\n[73123] 1394 1593 1373 2302 1161 5091  516  181  423 1289  467 4702 2949 1098\n[73137] 5293 1554 1284 3216 3771  884 4201 1721  477  629 2042  918 2910 4411\n[73151] 1714  167 2189 1104  283 3411 1171  706  211 2156 2960 1585 4695   89\n[73165]  413  356 3264   45 1734  689  221 4328 4705 3932  199  894  431  226\n[73179] 3365  708 1519 5811 1119 1064 1518 2488 4202  291 2580 4113 1712  169\n[73193] 5298 1109 5411  359 1499 1022 2934 1185  687 3069 3663  327 2351 1407\n[73207] 4191   67  135 3556  507   27 5815 6181 1038  418  656 3713  299 3301\n[73221] 1185  691 3849 5451  360 2158  387  654 2147 2191 2370  237 1710 4382\n[73235] 1481 2223  195 2019 1629 1611 1013  926 4131 1455  400 1053 3691  426\n[73249] 1637 2915 2331    5 1751  669  415 3134 3044 3486  201  183  415   87\n[73263]  413  425  235 2202  389  442 1495 5948 2391  177 2139  193 5274 2908\n[73277] 3513 3674 1854  263  119 3591  543 3992 5268 2923 2928 1691  693  711\n[73291] 2039 4195 1715 2160  434  841 5383  345  245 1473 4498  359 1128 2159\n[73305] 1416 1193 2931 4444 3445   21   71 2954 1078  235 5769 2937 2925 5287\n[73319] 2193 1768  250 1091 1225 1729 4370 4543 3349  225  247 1485  947 4361\n[73333] 1526  803 5714 1346  363 2437  353  152 2911 2951 1271  234 4312 2950\n[73347] 3662 5038 3573 2131 2454 3526   29 2065 2195  415 2142 4224 2909   65\n[73361] 4321 1147 1703 3604 1201 3374  153  866 4333  418 1498  308 1224  427\n[73375] 3535 4106 2314  314  347 2914 3494  395  168 4689 4033 1295 1205 4085\n[73389] 4348 1115 1576 1159  460 1435 4204 3317  499  105 2197  523 4645 4536\n[73403] 5048 3384 2164 4119 1247 4700 1049 1677  994 1039 2162 2680 4885 3845\n[73417] 4512  283  527 3603   97 3621  985 4186 3660 1682  185 3846 4368 5311\n[73431] 3525 4233 4672 1371  234  486  108 2002 1816 1066  718 1503  839 1131\n[73445] 3827 3644 2138 2148 1895 1487  559 2243  371 5716  301 2134 2167 1517\n[73459] 4471  731  583 3819 4137 5747 6177 1377  303  359  821  605 1403 1716\n[73473] 5904 1175 1919  219 1909  601  485 3525 1103 1899 4393  482   16 3351\n[73487] 3572 1099 1989 2180  929 1215 4522  303 2052 2085  479 4241  596 4533\n[73501] 1360 3550  398 1205  575 4122 4412  215 1072 1439 1506 1121 5791 3496\n[73515]  675 4099 3769  318  315  331  399 1547 2702 3599 1299 2136 2285 1879\n[73529]   23 3676  453 2169 4166 1263  905  495  472  343 1177 1415 3842    3\n[73543]  305 1107  430 1352  281 1077 2493 1345 1592 2606  573  183 1456  831\n[73557] 3547 1381  677 1975  424  376  461   11   20 1289 4125  885 2279 1717\n[73571]  163  183 3815  807 1216 2916  295 1273  279   59 4407 1511 3370 3052\n[73585] 3363 2921 1111  398 2939 2171 1733  711 2138 2047 2190   33  307  561\n[73599]  584  346 1271  450 2395 1205 2906  857 4111 5242 3272 3370 1109 2924\n[73613] 1959  397 1307 5463 1148 3759 1783 2457  281  914 4691 1357  409 1626\n[73627] 1831 5813 1043   84 3478 2280 2119 4638 5795 3579 2267  323  443 2932\n[73641] 1743 2901 2926 3355 3531  219 1429  509 4419 2071 1025 3809 4149 4537\n[73655] 4388 4935 1496 1025 1581 5220  795 3419 3407 4380  504 1643 1121   15\n[73669]  161  378  301 5327   27  586  997  247  208 2140 5099 2173  181  394\n[73683]  189  685 1701 1747  422 4087 5133 4364 1296 1030 5443 1634  653 1885\n[73697]    1  313  874  275  407  223  271 4065   15 3565 1401 1499 1223 2166\n[73711]  199 1437  288  317  116  160  876 4880  251 1030    5  483  785  970\n[73725] 5711  403 4510 4255 2142 1110 4140  673 2175 4060 5736 1257 1289  411\n[73739] 2319 1847 3512 3675  218 5149 1183 1711   51 1571 3611 1174 3644  893\n[73753]  604 6054    1  642 1131  325 4187 4495  518 1529   19  679 2343  469\n[73767] 2602 4548 1745  971 3689 5309 3852  775 3281 5417 5346  695 4162 6074\n[73781]  234 2177 2506 1275 1869 1647 3230  563 2144 1250  925 3466 1599 2098\n[73795] 5273  405 4445  274 5796 1143 2219 5797  327 5373  707 1139 1875 3373\n[73809] 2885  172 4679 1442 3827 1180 3566  179 3572  255 2902 2380 2146    3\n[73823] 5333  485  316 1685 3386 3404 1256 1129 1711 4567 1947  423 1785 3461\n[73837] 2179  483 4240 1214 4304  254 3806   63 1386 3361 1227 1663 3848  127\n[73851]   23  332  377 3616  249  323 1131  300  766 3371 4682 3670 3342  178\n[73865] 1318 1428  394  383 1880  187 1143  144 5378 2043 2148 4633 3388 1843\n[73879]  781 5207 1280  578 1263  411 4622 1145 2181  355  156  294 3795 1641\n[73893] 1639  456 1734 2868 4434  165 4424  802 1054  308 4161 4552  431 2402\n[73907] 3340 4395 5437 1164 5299 1779  331 4559 4687 1611 3305  117  927  505\n[73921] 1775  203 4100 3493 3567 1440  329  686  118 4171  643 2150 2183  213\n[73935] 1583 2247 1232 1151  235  516    3 1073 1401 2069 1170 1373  673 1493\n[73949]  561 3669  337 1819  789  477 1902  301  217 1120 1802  575 1070 3527\n[73963] 5712 1231 2918  286 4181 4372 1554 4175 1171 2903 2907  325 1995 3231\n[73977]  998 3588 2936 2940 3359 1164 1744    1 3070 1270 1935 4141 2152 1773\n[73991]  419 2815 2285 5713  745  581 2181 5801 1111 1600 5199  460  703 3391\n[74005] 3663  721   95 1697 1155 2297 2347 4297 3202 2913  145 4502 5391 3532\n[74019]  761  841 4572  341 1982 1492 4596 4326 1515  573 1695 1942 1246  133\n[74033] 4580 5455  381  624   83  417   85 2900  312 1729  320 4576 4667 1705\n[74047] 2927 3488  256 3778 2185 3199  421 2280  287 1023  257 1117 2806 2154\n[74061] 2459 1156  409 5811  305 2917 3357 1767  847 4532 2793  343 2922 3825\n[74075] 3264 2231 3075  375   65  467 3416 4352  240 5091 3357 1064  843  753\n[74089] 1775 1619 2933 1410  172 2187 1186 2302 5601 4294 3622 1051 1178 1394\n[74103] 1373 2949  516  283  629 1593  423 4702 4695  477 3216 2223  181 4201\n[74117] 1161 1526  918   89  884 1734 6181  356 4328 4705  708 2904 1128 3932\n[74131]  199  167 1289 2960  221 1171 1601 2156 1284  413 4202  431 2910 2580\n[74145]   45  211 2488  432 5293 5815 4411  380 3365  345 1518 3556 1119 1732\n[74159]  894  291 1104 1519 1185 4113 3849 1499  308  359 3069  507 1109  687\n[74173]  706 2934 5298 1022 1407 1048   67  135  169  418 2351 1321  327 3771\n[74187] 4191 2370 1185 3301 2189 1211 1629 1152 1692 4382  299 2147  400  360\n[74201] 5451  391  353  691  399 2019  926 3526 1165 1013 1481 1637 3411 3691\n[74215] 1053 1710 2915  426 1611 2158 2331 1585  442 1751  415  201 1531  669\n[74229] 2042  413    5  183 3044   87  434  310 2923 2202 2191 2139  389 2954\n[74243]   27 1212 5274 5948  535  425 2391  543 4131  119 3513  177  263 1854\n[74257] 2928  359 1691 1715 1576 4195 3591 1416  711 3486  693  245  654 3992\n[74271] 1473  541  947 5268 2039   21 2159  237 1259 1193 2931 2160 3134 2908\n[74285] 4444  415 2193 2925 4370   71 2142 1091 1485 1729 5383 1768 4543 4498\n[74299] 2909 2937  435 1225 5714 1078 2911  803  195 3374 2437  152 1435 2951\n[74313] 4361  478  193 5769  225 1271 4312 5287 3674 3445 2131   65 4368 3573\n[74327] 2065 2454 4321  415 4224  510 2950 2195 1703 3604 1201 4333 1346  418\n[74341] 1147 4348 3535  235  363 1498  427 3349  475 2162 4106 1224  153 3662\n[74355]  455 1464 1127 2314 4689  314  347 3494 4204  523 1205 4512 2914 1295\n[74369] 5038  226 1159 4085  985 4645 3317 3384 4033 2680  775 1247 4536 2164\n[74383]  105 1071 1115  994 3603 1682 1677 5956 1409 4885 4700 4119  499 2197\n[74397] 1049 5048  168  464   29  185 3621 4672 1371 3845 1210 4186 3525  527\n[74411] 4233  486  234 3846   97 5311  108 2002 1816  718 3660  745 1503  839\n[74425] 2912 1503  839  718 1895 1452 1500 2243  939  219 5716 2134 5747 1377\n[74439] 1517  303 1103  371 3819 6177  301 1909 2167 4137  353  583  731  681\n[74453] 1403  605 1716  485 3769 1668 4393 1989 1175 1899 1919  288 5904   16\n[74467] 3550 3572 1205 4522 2180 1360 4471 1099 1204  929 2085 3599 4424 1093\n[74481] 4241 1627  495 4533  245  575  303 2052 4122  478 4412 1506  398  525\n[74495] 5791  339 3496 1439  601 1121 3769 2810  675 4099  343  318 2493  331\n[74509] 1263 1415 1547  472  315  905 2136  399 2169   23 2285  305 2279 2702\n[74523] 4166 1879 3842 1177 1299  430 1352 2003  821 1077    3 2606 3547  573\n[74537]  677 1975  183 1381   11  785 1592 1289   20   33  461 4125 2916  885\n[74551] 5795  163 3066  424 1717 3815 4407  183  283  807  279 1111  398 1733\n[74565] 2047 1216 1307 2138  711  936 1273 2171 2921 1456  397 1511 5242 3489\n[74579] 2190 2809 3531  561 1959 2924   84  346  281 1109   29 1357 1783  857\n[74593] 1271 2267 2457 2906 2395 4111  584 4364  281 1429   59  914 4691  409\n[74607] 3370 2939 3579 4537 3272 1043 2280 1626  219 2119  509 1148 5813  215\n[74621] 1831 1743 3407 3433 2901 2932 3363 2926 3385 3419 4109 4419 2071 1496\n[74635] 3809  795 4935  443 1025 1162  313 3478   15  301 5099 5220 2912    1\n[74649]   27 2140 1121  161  235 2335  189  422 1030  338  229 1701  394  471\n[74663]  504  208 1747  275 1170  997 2173 5133 1634 1085 4087 4388  970  653\n[74677]  407 5463  874 3565 1345  586 1519 2166 1885 4065  199  384  271 4380\n[74691] 1025  116  223  537 5443  308  317 4880  181   15 1223  876 1160  403\n[74705]    5  251  160 3644  218 5711   51 1735 4638  411 2175 5736 3675 4060\n[74719] 1847 4255 4510 1183 1257  673 1711 2142 1110  497 4140 2319 3572  831\n[74733] 3512  483 3466 6054  604  325  893 1131    1 1745 1174 1622  642  187\n[74747] 4495 3611 1529 2343 5149  179  518 4187   19  925  679   23 6074 1599\n[74761] 1711 2602 3852  971 4162 3689 5309  775 5346 2144 1275  695 1647 2177\n[74775] 1869  563 3230  643 2098 1139 2506 1143  249  469  703 1250 2876  264\n[74789] 4679 4445  707 5797 1875 2219 5417 5796  418 5373 3373 1623  388 2885\n[74803] 1180 1442 3827 1643  327  172  323   63  766  255 2380 5333  586 2146\n[74817] 2179 3616    3  316 1685 3566  423 3386 3281 3404 2902 3508 1227 3305\n[74831] 1785 1947 1143 5273 1129  701 3461 3670 3361 1667  332  483 3848 2069\n[74845]  127  252 4567 1697 3806 4304 1318 4682 4240 4633 3342 1880 1375  178\n[74859]  432  144  383 1145 2181  411 1734 1256   34  355 2148 5207 1048  578\n[74873] 1843 3388 2043 5378 1428 4622  394 1280  781  165 1641  294 3795 4434\n[74887] 2868 2789  802  456  505 4548 5299 1054 5437 4552 2402 4161  308  431\n[74901] 1131 1164 1639  300 4687 4395 4695  431 1151  117 1565  203 1775 3340\n[74915] 1073 4100 1802  516 1122  553  643 2150  118  927    3 1232 1779 2247\n[74929] 1663 3305 1401  686 1373 1640  673 1493  391 5712  213 3588  575  477\n[74943] 4171 1070 4372 5713  541 1902 1111 3493 1296  331 5391 4181 1819 1883\n[74957] 1231 2940  581  561 1554 1171 2936 3391 2907  320  998 3199  301    1\n[74971] 2815 3416 2913 2285 1164 3072 3359  325  841 1186  287 3202 3425 1155\n[74985] 4141 1744 2152 2347  419 1600  721 1935 2185 1617 5801 4175 2181 2297\n[74999] 4381 5199  145  761  703 2793 4326 3553 4532 1773  341 3669 4596 4572\n[75013] 1327 1246  286 1982   85  417 4502 2840  381  624  573 1942 1695 1729\n[75027] 4580 2918 3231   65  257 1995 2900 1705 4576 5455 1270  332 2903   83\n[75041] 3778 1775 1156 2963 3488 2280 1410  421 1117 1767  745  305 1118 2187\n[75055] 1801 2154 3734  409  467 2459 2922  847 5811 3357  399 4538 2917 4667\n[75069]  753 1064  375  211 2231 4352 3301 1051 2806  485  133 2927 2933 4294\n[75083] 3748  843 1619 1373 3825 4702  283   95 2302  516 1394 1712 3357 1593\n[75097]  423 5293 1161  629 5601 3216 4409 4705   27 1289 1572 2042 3771  884\n[75111] 1284  477  708 1526 4328 1171 1601   89 2904 1734 3932 3365  167 6181\n[75125]  413 4201 2156  706  689  343 1585 3044 2580 2379 2189 2960   45  172\n[75139] 3530 5091 1454  512 1518 4202  387 4411 5815 2949  894 1119  291  199\n[75153] 1104 1519 2488 5298  221 1185  509 4113 3849  918 1212 3526   67 1185\n[75167] 1109  169  193  687  359  434  507 2934  415  345  256 2351  181  400\n[75181]  475 1321 1407  327  135 4410 1499 3486  177 1629 5451 1022 1692 2191\n[75195] 2158 3069  926 4382  691  360 2147  535  299 3501 1481 1165 1637 2019\n[75209]  587 1611 1013 1053 2370 4131  362 2839 2910  119  426  415 5268 1531\n[75223]  413    5 2954  201 5948  237  389 2923  359  425   87 1205  442 3691\n[75237]  195  183 2139 3591 2391 1211 5274 3674  543  669  414 1751 1854 2039\n[75251]  235 3445 2160 1576 1715  245  435 4195 5383 1128 2928   21 2193 3992\n[75265]  654 2937   29 1029  711 4498 1416  356 1473 1193  263 2931  947 3349\n[75279] 3573  324   71 5769  693 2437 1710 3535 1729 2142 4370  347 1078 1485\n[75293] 1269 1768 2202 1480 2925 2909  234 1091 1271 5714 4444 3603 2951 1346\n[75307]  152 4543 3374  510 3513 2911 2131 5038  161 2454 2195 5287  225 4368\n[75321] 4312 2159 2314 2162 4224 1498  415 2908 2950  883 1435 1703 1224  427\n[75335]   65 1201 4348  455  479 3604  363 5956 4321  371 4106  314 4689 3494\n[75349] 2065  153 1147 1464 4033 1651 4204  915 3257  523 1618 1205  803 4085\n[75363] 1159 3473  985 4361 2197 1295  418 2914 2915 2680 3660  105  775 4700\n[75377] 2164  168 4536 1631 4119 4885 4333 3384 1682  994 1677 1247 4645 4512\n[75391]  352 3845 1482 3621  185  611  702 1371 3846 2331 4672  499 5311 3525\n[75405] 1183  329 4186 1691 5048 1066  705 5675   97  234  486  527  425 2002\n[75419] 1816  491  108  745  450   53 2183  309 1895 1452 2243 1500  583 2134\n[75433] 3819 5716 5747  301 1103  939 1465 2167  731  219 1403 4471 1517 1909\n[75447]  635 1668  353  605 1377 6177 3637 4137 5904  371 1284 1919 4393 1205\n[75461] 1989  601  288 1899 3550  303 1175 3572 1794 2180 4522 1099 3599 1217\n[75475]  929 1214  495  575 4533  245 2085  479  525 4122 1439 4412 1506 4424\n[75489] 5791  240  398  303  675 4099  343 3769  318 3496 2493  339 3792 1107\n[75503]  331  315  305   23  430 2285 1263 2136  472 2169   15 2702 4418 1415\n[75517] 1547 1879  399    3 1177 1077 1299 2279 2003 4166  418  453 2052 3547\n[75531] 3842 1592  573  365  831 1456 1345  183 2996 1381  461   33  677   29\n[75545] 1289 4976  424 1162 2916  307   11  785  885 4125  163  807 1717 3066\n[75559] 1216  183  905  283 5795  936 4241 2939  279  584  711 1511 2138  397\n[75573] 2921   84 1273 2171  281 2809 2924 5242 1418 2395 2267  346 1271  450\n[75587] 1109 1357 3815 5463 1959 3531  561 3489  914 2457 4111  281  857  759\n[75601] 2190 1148 1307 1429 2906 1111 3272 1733 3370   59 3363 2932  409 1831\n[75615] 1626 2926 5813 1743 3407 3433 3385 4407 4638 2901  509 4419  219  443\n[75629] 1025 2280 4109 2119  795 4935   15 1025  313 2071 3419 1643 4691 5099\n[75643] 5220  338 2912 4380   27  997    1 1783 2173 1440 3478 1030  189 3809\n[75657] 2140  422 4087  681 1121  504 2335 1170  161  229 5133 5443  394 3565\n[75671] 1747 1701 1085 1634 1885  874  970  208  407  301  586 1971 2344  653\n[75685]   15  446 4065 1496 4388  271 3579  181  199  116 1223  223 1160  317\n[75699]  403    5  251 4537 3086  483 5711   51  578  160 3644  673 1735 2175\n[75713] 3675 2142  411 1257 4060  471 1711  469 3572 1110 5149 5736 1183  752\n[75727]  325 1622 4880 1174 1847 4255 6054 3466 1581 1745  604 3512 1131  642\n[75741]  518 3611 2343    1   19  179   23  187 4495  925 1529 6074  679 2602\n[75755]  893 1711 2047 4364 4140 3852 4162 4548  971 5309  695 2177 1647 2506\n[75769] 3689  223 2144 5417 5346 1869 1275 1143 1599  264  643 4445  698  703\n[75783] 1139 1623 2876 5796 5797 3373  707 5273 3199 2319 1875 2098  497 4510\n[75797]  388 2219 2885 4187 2915 1180 4679  327 3827 5333  323 4567 2179 1442\n[75811] 3616  255  586 2146    3 2380 3386  423 5373 3404 1685 2902 3305 2069\n[75825]  632  316 3281 1143  766 1947 1667 3461 1280 3670 2236 3421 3361 3508\n[75839] 4396  475  252 3806 1129  127 3848 1697 2945 4633 1318 4682 3342 4240\n[75853]  383 1375  178  394 3388 1734 3407 1145 2181  998 2148  165 2043  355\n[75867]  432  300   34 1843  411 3993 5207 4622 1543 5378  781 1131 1641 3795\n[75881]  802   53  553 4434 2789 4161  456 4552 1164 1639 1785 1256  331  308\n[75895]  505 4395 5437 2402 5299  431 1280 1054 1779 4687  117 3340 1122 1775\n[75909]  118 2150 2183 3063  927 1746  213 4100 2247 4171 4695 3305  249 1151\n[75923] 1583  431 1232 1373  593 1493 1802 3588  686  563  575 1073  673 1289\n[75937] 4372 1819  477 1902  561  980  287  301 5391 1565  286 4181 1231 4175\n[75951] 1693 1883 1454 2918 5712 3199 2903 2907 2940  320 5801 2936 1186  703\n[75965]  841 2815 3359 1171  581 1270    1 3425  721 4141 1164 3669  373 1155\n[75979] 3416 1327 1935 3072 1600 3202  685  745 2347  145 2152 3493 2913 2181\n[75993] 3391  391  419 3231  761 2185 2297 5199 4532  325 4326  341  417 2840\n[76007] 1111 1695 1982  399  257 1205   83   85 2793 2900 1729  332 1775  133\n[76021]  573 1995 4596 1410 2927 4502 5713 2963  357 1705 2280 1023 5091  305\n[76035]  215 4572  467  847 1773 5455 2922 1942 1801  409 3734 1564 2917 1117\n[76049] 2231 1064 4381 1767 5811  308 1156  843 3357  630 2933 1394  381 3488\n[76063] 3675 1373 1619  516 2459 1178   95 4667 4580 3748  343  423   27 2154\n[76077] 4576 1284 2351 2187  629  477 4201 4702  884  181  918   89   65 3044\n[76091] 1593 2302 3301 3216  708  283  413 5293  221 4538 1051 3932  211 1455\n[76105] 1161 2379 3365  996  167 1734  706 1585 6181 3357  512 1601 1744  753\n[76119] 4705 3218   67 1119 3771 4409 2285 3834 4294 2042  199 2156  291 1171\n[76133]  193 5815 4352 3825  359  434  256 1499 1185 1519 1109 1185 4113 2949\n[76147] 1309 2934   45 2351 2189 1518 1407 1714 2580  135  375  177 4191  172\n[76161]  345 3596 4382 2488 2370 5601  212 2147 4411 3501  535 1211  415 3849\n[76175] 2019 4131 5298  169  327  687 1101 2915  926 3530  299  426 1152  119\n[76189] 2331  262 1246 2910 2158 1022 2904 1611  894 3070 1053 4202 2954 3021\n[76203]  415   87    5  413 2202  425 1751 1321 1531  362  389  442 5948 3526\n[76217]  359 2139 5451  201 3486 2391 1554  263 3674   29  691 2839 1854  235\n[76231]  654  245 1576 1715 1416 1029 1013  947   21  195 2923 4498  435 5268\n[76245]  543 2191 1193  669 4195 2159 3513 2931 2039 1120 2937 3591 2925 4328\n[76259] 2437 4361 1692 2911 1091 5274 3535  775 1128 3445  183  711 2160 1768\n[76273] 1526 2928  161  225 1481 4312 5714 2951 1485 1691 2193 3374  347 2142\n[76287] 1473 5769 1149 4444  689  360 3015  363  237 2131 2454 2950 1147  415\n[76301] 2065 2908 1466 4321  247 3349 3992 1078  883  478 2195 5383  371 2162\n[76315]  427 4333 1435  915 4348 4689 1271  153  426 1464  803 1224 4370   65\n[76329]  418  439 3494 3429 3603 2314 1020 3573  314 5038 5287 1205 1629 4085\n[76343]  523 1115 4106 1201 1295 4645 1247  775 2680  985  105 1071 4536 1677\n[76357] 1729  693  507 1631 4512 1651  371 4204  499 5956 1182 4033 4700 4224\n[76371] 3257 3621 2909   97  329  702 2197  185  527 1168   71 4186 1606  587\n[76385] 4543 3846 4368 4885 1901  611 5675 3660  425 1049 3473 4672 1066 1183\n[76399]  486  234 1371 3384 3845  108 3423 1816 2002  705 5311  718 2914 4119\n[76413]  509 3525  324  745  839 1503 5048 2810 3230 3604  643  994 1895 2243\n[76427] 1014  939  301  795 1377 6177  605 5747  731 1500  583 1403 5716  353\n[76441]  858  371 1187  601  303 1175  883 1899 1103 1205 2180 3307 1099 4533\n[76455] 2085  303  950 2951 3848  575 4241  929 1946  495  398  525  479 4122\n[76469] 4120 1107 4140 1263  318 2493  675  315 1879 2702  305  905 2285  665\n[76483]    3 1415 1547  430   15 3846  258  997  399  407  385 2279  806 2003\n[76497] 1345  482  883  677 1299  183  831 4114  461 4277 1044   29   11  885\n[76511] 1289 2916 2020  453 1717 4297 5795  807 2339  183 1111  163 3066 1307\n[76525] 1148 2939 1511 2190 1273 1418 2924   59  346 2047 3531  307 1959  936\n[76539] 1271 4111 2267  397  281 1848 1783 1733 1429  281  265 3272 3370  377\n[76553] 2921  295 4638 2119 1924 1455   84 4409 3407 3363 2932 3385 1743  443\n[76567]  561 2901  219 2926  313 2912 1109  509  156 3847 1025 4240 2280 3419\n[76581] 1626 4380 2071 4179  795  584 3815 1216 3478  391  301  181 1170 4125\n[76595] 2173  505 1506  497 1701  472  348  544 1121 2335  208  422 1747  394\n[76609]    1  238  970  229  161  653 1634 4388  342  407 1553 2941   27 5443\n[76623]  586 4714  271 1924  343 1085  199 4935 5133 1174 1223 5540 1682  251\n[76637]  364 4625    5 1885 2457 3565 1160  403 5736 3531 2142   51 1030  874\n[76651] 5711 4255 1094 3533 3572 3675  469  761 5951   15 1808  421 1257 2067\n[76665] 3466  604 3806  351  483 4495 1519  518 1110 1183  179  187   19  116\n[76679]  925    1 4187 1984  679 1529 1599  642  971 2506  488   23 4662 4118\n[76693] 4162 1687  835  695 1275 2177 4445  643  405 2046  703 1357 2098  287\n[76707] 4679  785  411 1143 2876 1131 5309 5346 5392 2219 1892 1869  327  471\n[76721]  388 3230 1442 1224 2602 1875 2146 3807  251 1785 1947 3616  406 3415\n[76735]    3  323 2902 2380 1972 3386 1685 3404 1129 1143 4214 3588 4304 3461\n[76749] 2375 4567  316 5333 1697 3848 3361  127 1647  566 3264 1318 1131  394\n[76763] 3388 5008 2181  178  781 1256  383 1863 6049 1622  355 2043  300  411\n[76777] 1177  165 1641  553  802   34  505  501 1639 4434  624 4552 2789  431\n[76791]  308 3670 4395 1199  323 4064 1631 1779  117 1151 1802 4629 1401 1676\n[76805] 1611 5813 3340  118 1073 4171 1461 1583 2247  537  686  636 1373  561\n[76819] 1493 1232   53  477 1819 4087 1705  575 5712  213 3588 4148 5713 1420\n[76833]  581  286 4181 1205 2918  320 1171 3391 1958 1298 2940  395  587  207\n[76847] 2903 2907 2152 4175 2936 1883 1164 3202 2285 2815  841  325 6054 3416\n[76861] 3425 1270    1 3072 3359  685 1155 1778 2297 1773 3669 1834 2347 2181\n[76875] 1600  419 1327  998 2944  927 3231 4381  145 1171 4633 2793 4532 4368\n[76889]  210 5803 1289 2840  301 4502 1942   85  257  573 2889  417  708 1200\n[76903] 1729 2900 4412 1695   65 2008 2088  527  133 2280  485 1587 1801 1117\n[76917] 1410 1245  305   83 1403  467 4393 1982 2963  409  847 4580 2459 4284\n[76931] 2917  559 1554 3199 5484  753 2231 1242 1424  211 2927 1619  843 2904\n[76945] 3827 4537 2933 4572 1935  375 2302  629 4702   95 1373  343  516 3044\n[76959] 1394   27 3216 1593 5837 1623  283  423 2910  181 1178 2922 4705 1585\n[76973] 1171   89 1854 3501 1161 4204 1284 2379  413  918 5513 1734 1518 4328\n[76987] 6181  221  512  894 3365  172 1601  167  706 3530   45   67  635 2580\n[77001] 4202 1119 2949 2488 1902 4421  199 4121  551  193  291 1109  415  256\n[77015]  359 2934 2351 1712  866 1185  507  418 1407  135  703  687   23 3486\n[77029] 4161 4113 4191  299 4201  327 3726 3292  926 2147 1022 1481  535 2019\n[77043]  523 1637 1611 2915    5 2923  426   87 3591 4128  201 3811 1576 2954\n[77057]  669  425 1751  390  183  360  413  442 2908 2391  119  235  263 1615\n[77071]  543   29 2097  931  469 3473 2202  415 1029  711  245 2928  434 1296\n[77085]   21 2159 1047 4352 4131 2919 2437 4361  347 4370 3535 5769  225  161\n[77099] 1729 4543 1271 1692 2925  803 1091 1416 2951 1075 1526 3374 1768 2454\n[77113]  415 2065   65 1111 2950  883 1201 2314 1482  427  153 1466 2911 2914\n[77127]   71  523  329 1205 1409 1295 5714 1071  775 4377 4348  105  985 4700\n[77141]  499 1371  611  185   97 3621  702  425 1901  527  915 1677 1183  705\n[77155] 1066 4194  234  486  108 1816 2002  718  745 1503  839 1223   23  409\n[77169] 4194   29 1487 2243  939 1739  371 5824  328  605  353 1377 5716  583\n[77183] 1403 6177 1212 1955  601 1205 1175 1989  400  929 2085 1099 1946  245\n[77197]  371  479 1509  525  495 1627 1506 1107 5791  675 1439 2493  318 4166\n[77211]  691 1879 1263  305 2702   23   15 4304  905 1547 1299  399    3 2279\n[77225] 1345 1456  831 1975  461   29   11 1415 4101 1455 1736 1077  183   33\n[77239]  677 4420   20  307  885 3066 1717  163 1289  807 1111 2916  279 4297\n[77253] 1307  936 1273 2924  398  453  561 1733  461 2939 1959 3531 1216  478\n[77267]   84  397 2047 4364 1677 1511 1418  281   59 1109  398 1271 2921  183\n[77281] 1783 1429  391  346  450 1148 3272 3370  409  914 5423 2119 4638  443\n[77295] 3810 2053  219  509 2267 2280 4250 2926 1357 4380 3419 1025 2942 3363\n[77309] 2901 4388  857  795  313   15 3478 2173 3565  338   27  394  472 1257\n[77323]  189 1747 4087  504 1626 1121  229  970  181 1701  208 4935  275  161\n[77337]    1 1634  301 1162 1885  653 4711 2457 1448  281 1120  223  874 1030\n[77351]  407  199  271 1085 1761 3085  343 4179 1183  876 1401 1643  251 1170\n[77365] 1160 4537 2335    5  317  403  218 1519   51 3675  483 5711  160   15\n[77379] 4510 3644  673 1847 3508 4141 3512  315 2319  116 1110  469  411 2190\n[77393]  497 2017 3572  604  325  642 1174 1745 3466    1 1711 2343 4255 4412\n[77407]  586  518   19  679  187 1529 1599 4187 1743 3806 4374  925   23  971\n[77421] 6074 4679 5309 1275  695 5346 5417 3689 5736 1647 4162  654 2506 2177\n[77435] 1250 1869 5443  405 3230 2098 1143  643  703 2021 2876  226 1623 2219\n[77449]  179 1723 1875 3281 1180  388  376 5333 1442  323  785 1129  475 2179\n[77463]   63 2146 3566 3386 2902  766 2380  172  316 1785 3827 1947  423    3\n[77477] 3616 3404 1973 3670 1667 1143  483 3850 5905 1227 3461   53 3305 1685\n[77491] 4092 3361 2602  127 2639 4567 3812 3848 4512 4682 5797  178 3996 1318\n[77505]  681 1843  608 5008   34 1734 2043 5207 3550  781 1461  300 2181  144\n[77519]  432 3388  383  411 5179 5373  165 1641 1752  446  802 3795  553 1663\n[77533] 2868 2789 2402 4622 1639 4430 1164  431 5023  624 1256  308  505  456\n[77547] 4233 4395 1779 1611  117 4662 1835 5299 3305 1802 1775  424 1401  686\n[77561] 1073  927 2183 4171 3340  213 4100  643  118 2247 4687 1625 4393 2150\n[77575]    3  460 1131  575 3588 1070 1200  301 5391 1583 3509 1232 1205 1373\n[77589]  673 1902 4181  255  477  286 1231 4372 5951 1883 2918 2903  325 1819\n[77603] 4552 1111 1995 3391 3199 1122 4175 2815  340 3673 2285 1935 1164    1\n[77617] 1155 1773 5801  561 5713 3425  841 2913 2347 3072 3202 2940 1600 3669\n[77631] 2297  419  998  721 3359 2181  145 2185 4381  370 1327 3416 1171 2958\n[77645] 4502  703 3231 4532 2793 1554 3493  761  387 4434 3681  341 4326 1246\n[77659]   83 4580 5712  377 1171  257 1248 1695 1942 4667  417  399  980 2900\n[77673] 2840 1729 1263   65 2963  133  527 3553 1054 1767 1023  421 2280 5091\n[77687] 5455  708 3488  467 1801 2154  847 3825  305 1051 1410 2187 4122  409\n[77701] 2917 2231  331  573 3778 1242 5811  211 4352  753 2933  375  843 3734\n[77715] 1619  581 2302 3748  629 2922 1117  283   27 4705 1178 1098 4572 3216\n[77729]   95  516 1139  181 1104 1161  423 2459 4596  689  751  918 4294 1284\n[77743]  413 1373   45 3365 3044 3932  172  167 4411  512 3367 1734 1601 2960\n[77757] 1394 1585  501   89 1705 4201  221 2949 1518 3301 3357 2927 1289 3771\n[77771] 4576 3530   67  477  343  706 2941 1605 1185 2910  169 2042  509 4328\n[77785] 1499  256  356  359  687 1109 2934  291  415  195 2480  894 2351  193\n[77799] 3264  431 1262 2904 5293  135 5815  345 3849  220 2379 2189 1692 5451\n[77813] 2158 1022 1407 2488  360  535 1481  400 4702  177 1064 2019  884 1211\n[77827] 4349 2370 1629 4131 1611  426 1177 4382 2147 3526  321  373  199 1013\n[77841] 2331  299  442  327 5601 3501  119    5 1751 2191  201  215 1221  413\n[77855]  425  195 1052   87  669 2839 3486 3674  183 5274 2202  926  415 3591\n[77869]   21  235 1576 4113 4550 2391  435  693 2928  263 1715  245 4191 1416\n[77883] 2937  237 2915 4195 2580  711 3349  389 3992 2193 1128 2139 3445 2437\n[77897] 3573  359  947 5714  161 2039 4498 1854 5298 1485 1149  363  543 4278\n[77911] 1473 5268 1346  347 3535 5769 4368 4321 1078 1528 1119 1091 2908 1201\n[77925] 1729 2314  803   65 1271  152 1147 4361  415 2065 2195 1435 1703 2951\n[77939] 1224  153 5287 3603 4641 2923 2162  371 2911 1651 3669 3494 4202 4348\n[77953] 2931 5038 1539  695 1029 3604  312 1464 1768  314 4152  915  308 2950\n[77967]  883  427   71 1205 5956  329  523 3374  225 1053 4224 1295 2925 2919\n[77981] 1269 2454 4543  105 1159 1071 4106 6073 4033  775  168  418 4119 1682\n[77995] 1409 4085  507 1247 3660 4645 1482  985 2159 4445 4333   85 3845 5237\n[78009]  499 2197 5675  527  352 4536  185 1677 3384 2680 3473  425 4700 1049\n[78023]  577  611 1901 1183 1066 3846 4212   97 2914 1115 4370 3621 3257  702\n[78037] 5048  486 3069 3525 4672  705 1816 2002  108  718  234 1697 4885 5311\n[78051] 1503  745  839 1371  320  327 1171 1185 1131 1145 1151 1156 1223 1691\n[78065]  745 1895 1487 2243 1500  371 2167  939 5747  583  301  353 1909 1377\n[78079] 3849  654 2134  303  605 1403  471 4137 4471 6177 1198  485 1716  731\n[78093] 5904 1919 3550 1175  601 1989 1517  482 4393 1772 2180   16 1099 4522\n[78107] 2052 4122  210 1205 3405  303 2085 1360 4533 1627  575 4412 2810 4241\n[78121]  929  525  495 3599  478 1506 1072 1121 3496 5791  675  318 4424 1299\n[78135] 2493  343 1263 1879  315   15 1547  905 2136  305 3842  453   23 2169\n[78149]  472 2702  399 1415  331 2003 2279 1077 1352 2285 1262    3 3547  821\n[78163] 2606 1162  183 1439 1345 1975  831  430  677 1289   11   29  215   33\n[78177]  461   20  785  885 2916  307 1717 1111  807 1055  183 5675 3066  475\n[78191]  163 4511 4297 1592 1216  398 1307  450 1899 1273 1511  936  711 2047\n[78205] 2171  398 2267 1271 1959 2138 1418  281  346 2809   84  561 1357  279\n[78219] 4111  281 5242 1783  857 2457 1429 1148  914 1109 4364 5463 3370 3579\n[78233]  409 4691 4869 3272 1043 1831 4125 3433 2941 3407 3363 2921 3385   59\n[78247]  219 1743  443 4419 2119 5813  424 2280 1626 3419 4162 1025 3531 1496\n[78261] 2071 5220 1025  313  795 3478  378 2926   15 1643 4380 3809 1581 2173\n[78275]  301 2140  255  504 1448    1 4638 1030 2335   27 4548 1701  729 4935\n[78289] 3565 1121  189 1747  181  161  208 5443 1289 1885 4537 1634  997  653\n[78303]  586 4065  229  223  970 2395  407  271  199 2166 4087   15 1170  325\n[78317]  446  876  116  317 4880 1160 1085  160  509  251 3644 1223   51  587\n[78331] 2142 2175 3675 1110 4060  223  403 4510  483 5765 1183    5  275 3572\n[78345] 1711 2319  469 1257 4255 1622  411 1847  604  325  218 3466  893  518\n[78359] 1131  187 4495 3611 1529  642   19 2343  925 6114 2602 3489    1  679\n[78373]   23 1745 5149 1599  971 4282 4679  775 1591 3689 5309 2506 2144 4625\n[78387] 2177 1275 1647 1869  563 3433 3230  323  643 1143 2098  274  179 3281\n[78401] 2876 5797 1250 1623  405  707 1875 1180 1668 1139 2219 5355  172 3827\n[78415]  327 5373  388 2885 2380 1129 1442 4567 3616 2146  720  323  693  423\n[78429] 3386    3  316 2179 2902 1685 4240 2069 1947 1785 4335  766 5333 3805\n[78443] 3404 3508   63   53 1143 3670  483 4396 5346 3461  566 3566 3848 1227\n[78457]  332  377 4504  127 5101 3342 1318  383 1697 4682 1131 3361 1145  178\n[78471] 4633 2181 2043  781 3388  394 2148 1428 5207  165   34 1280 1256  144\n[78485] 3799 4622  608  300  411 1492  355 1641  294 3795  553 1639 1880 2789\n[78499]  456 2868 4434 4552 5437 2402  246  308 1054  431 1164  505  681 1779\n[78513] 1151 1802  117 3305 4374 1734 4687 1775 1695 1073 3340  624  213 2150\n[78527] 4100 2183  686 2247  195  927 1583 1791  118    3  516  380  802 1373\n[78541]  331 1493  561 1070 4171 1819  477 1902 3588  243 1205 4372 5712  321\n[78555]  575  312 5391  581 3493 5713  286  301 2918 1231 4181 1554 1883 2936\n[78569]  320 4175 3199 1232 1186 2907 3391  866 2942 1995 3274 2285 1164 2185\n[78583] 1935    1 3669 1259 2152 2347 3359 3425 1635 1773  673 3202 3416 2181\n[78597] 4140 3072 1270 2297 1051  703 4502 2793 1155 1600  145  745 4381  419\n[78611] 1327 3231 3553 3264  287 4532 2840 1246  325 2815 2958   83  417 4580\n[78625]  714 1942  249  257 1775   85 1729  573   65 2903  540 2963  133 1156\n[78639] 1410 1705  635  341 1171 5091 2927 1767 1117 3825  847 2187 2154  305\n[78653] 4576 5811 4572 1023 2459 1801 3778 3734 2922  409 4132 2231 2806  636\n[78667] 1619  467  211 2917  843 3301 5601 2900  375 2904 5293  629 1373 2280\n[78681] 2943 4702 3748  753 1394 4352 3357 1284   95 1178  283 1593 2302  423\n[78695] 3044 3216  343   27 5173  884  181 4695 1161  918 4705 3771  477 4187\n[78709]  708 2910 1171   89  421 4294 4328 2480 3932 2189 2042 2156  706  237\n[78723]   45 2913 2379  221  689  167 1518 4712 6181  413 4202  512 2960 3365\n[78737]  516 1289 1119 3526 1601 1064  291 1104 5815  169  488 1734  256  721\n[78751] 1109  687 4113  400 1022 1212  359 1454  193 1407  327 1499 1585 3530\n[78765] 2351 1139 1692 3069  135 2949  894  345  177  299 2370 1211  507 4444\n[78779] 5451 3486 2158  172  199 2191  360 1727 2147 3501 1053  535  926 1481\n[78793] 4659 2019 1637 2488 1013 3691   67 1986 4131 2331  195  387  691 2915\n[78807]  413  415 2580  426 1152  119  183  201  442 2839 1120  669 2923  356\n[78821]   87 5948 2202 3349 1611 2391 2139 3513 2039  415 4191  359 3591 2908\n[78835]  263  235 1185  543 5274  455 1854 3445 2160 1185 2193   29  947  434\n[78849]  643  711 1715 1416 1029 1128 2928 5268 1710 2159 4498 2937    5 1576\n[78863] 1480 1473  208 1485  245  347 4370 5769 3720 1193  152 1691 3535 3521\n[78877] 1346 4543 1091  803 5287 1526  214 1269 4714 2931 2437 1729 2911 4361\n[78891] 1271 1768 3603 2951  161 2925 5714  264 3374 2162 2950 2454 1147 2314\n[78905]  883 2195  234 4321 1435 4224 4348 1201  363 4333 1631  418   65  225\n[78919]  288 1651 2065  915  371 5956 1464 3604 4141 3257 4106 1224 3494 2914\n[78933] 4033   71  427  415  153 1618 4397 4204  329 2909  314 2197 3473 3573\n[78947] 1205 5048 1295  523 4085  775  985 4536  499 2164 1159  105  994 4700\n[78961] 4885 4377 1682 1066  809 1049 1677 1247 3674  168 3845 4119 3621   97\n[78975] 1371  611  425 4672 1183 3384  702 3846  185 5311 1901  203 3525 5796\n[78989]  486  527 2680  108 2002  718 1816 3660  705   21  234  839 1503  394\n[79003] 5392 1103 1107 1381 1895 1096 2243  260  939 1517 1403 5747  371  583\n[79017]  605 2134  301 6177  303 4471  219 1103  353 1377  731 4137 1668 1909\n[79031] 2167 3819 3637 1919  601 1284 1205 1465 1175 1794 1989 4393 1899 5178\n[79045] 3550 1099  482 2810 2180  575 4522  303 1214 3599  929 4122 1506 1627\n[79059] 4241 4424  495 2052  525  596 2085 5791  339  377 1452  245  398 3496\n[79073] 3769  675  797 1107  318 4099 2493  315  479  343   23 3792  453 1299\n[79087]  430  305 2136 1879 1547 3842 1263 1415 1262 2702 2285  905 2169 4166\n[79101]  331 4418  399   15  426 2003 2279    3  821  365 3547 1592 1345  472\n[79115] 1456  677  183  831 1381  461 1289  424   29 4125   33   11 4976  885\n[79129] 2996  307  265 1717  183 4407 4665  163  385  807 3066 1111  279 2939\n[79143]  936 2138  759 2921 1511 2047 1273 2924 2171   84 2190 2267 1959 2809\n[79157] 3531  561 1418 1216   59  346 3815  397  711 1733 2395 5242 1307 3489\n[79171] 1357  281 1783  857  914 1109 4111  327 5904 2457 1429 3370  281 1148\n[79185] 1043  901  409 4869 3272 1271 1626  450  509 3579 3385 4537 3363 5463\n[79199] 2901 2926 1831 2119  323 2932  219 4638  443 3407 3433 2280 3419 4380\n[79213] 2906 1496 4106 3809 1025 2071  795  301 1643 4935 4388 1289 1581  313\n[79227] 1025 2140 3565   27 3478  997 1448 1747 1030    1 1121 2335 2173  504\n[79241]  189 1701  394  422  695  958  181  161  208  653  970 4087   15 1634\n[79255] 1085 1885 4636 5220 1711  586  223  407  271 2344  199  294 5443 5229\n[79269]  384 4065 1743   15 1971 4880 1170  317 3086  116 4691   51    5 1223\n[79283]  483  251  403 3644  229 5711 4060 2142 3572 3675 4140 4510  418 1183\n[79297]  411 1711  469 4255  160 1257 1110 3512 5149    1 1847 1622 6181  325\n[79311]  604 5736  893  752 1174 3466 2319 2343 3611 1131  679 1529 4495   19\n[79325] 1098  187 4419  518 1599 2602 6074  971 4548 3852 4679 5309 1647 3689\n[79339] 2144  695 5346  775 1745 1275  673 1869   23 2506  179 5417 3230  785\n[79353] 5813  405  698 2098 4625 1139  643 1143 4187  703 2876 2177 5373 1623\n[79367] 3281 2219 5455 5796 3199 1875 5797  707 4445  471  388  327 1180 2885\n[79381] 3386 1625 3616 2146 2179 1129 2380  766  316 3421  255 3305 2902 1947\n[79395] 1442 3508 1785 1685 3404 1667   53  423 3850 3807 3670 1143 2915  632\n[79409] 4304 3361 1227  404 3848 3461 2236 1280 1697  252  127 4567 2069    3\n[79423]  383  323 1375 4682 1318 5322  178 1145 4364  411  300 3993 3388 1023\n[79437] 4633 1734 2148 2181 2945 5378  165  781  432   34  578 5179 1280 1256\n[79451]  355 1641  287 1843 4622  331 1131 3795  394  456 2043 3342 4193 2789\n[79465] 4434  505  802 5437 1054 1639 1164 1746 3407  431 5299  431 1779  308\n[79479] 4687  553 1802  117 4587 1401 1611  195 1073 1151 1775 3305  204 3340\n[79493] 4395  927 2150  593  686 4100 4171  223  643 2247 1373 3063 1232 1493\n[79507]  673  118 2402  311 4552 1583 3588  477 3373  561 1205 1819 1902 1883\n[79521]  213 1111  286  301 3493  581 5712 1995 2940 1171  325 1186 2903  320\n[79535]  501 2918 4181 5391 2907    1 3199 1231 1693 1554 2285 1270  721 1164\n[79549] 3202 3359 2347  841 1935 4695 3072 1155 1773 3391 1600 1635 3669  745\n[79563] 4175 2152 1198 3425  419 2913  145 2185 4141 2793 4596 2297  217 2181\n[79577] 3553 4372 5909 2936  341 4532 2840 4572 1571  703 5199 1246 1327 1695\n[79591]  257 4580 1775 1942  417 4502   83   85 2815  700 4667  312   65  375\n[79605]  573 4576  133 1118 3488  575 5091  761 1410 3825 2927 2154 3675 1801\n[79619]  305 2187 1117 1051 1982 1492 2917  630  409 5713 5811  258 2922 3357\n[79633] 2459 2280 1156 1767  467 1151 1114  753 4684 3734 3301 1705 2904 2351\n[79647] 3748  629 3357 2900  516 1729 1373 4702 5293 2933 1394 1284 3044  211\n[79661]  283  847  485   95  343  423 1178 4662 4201 4352  708  181   27 4705\n[79675]  884 1171   89 1593  918  477 3932 4328 2042  689 2963 1161 3365 1064\n[79689]  167  706 5217 2379 4294   45  512 1518  387 2302  894  413   67 1454\n[79703] 3231 1734 4411 2949 2910 2488 4230  291 1601 4202 5601 2156 3218 3771\n[79717] 1119  256  172 1585 5298 3526 1109 1480 3834  488 2189  434  415  687\n[79731] 1309 1022 1185  199  507  169 5815  135  221  177  327 4113 2934  360\n[79745]  345  359 1185  299 2370 3486 2580  193 3216 1692 1321 1177 1018 1013\n[79759] 2158 1053  926 1637 3021 2147 4131 2191  426 1165 2331 2915  119 1611\n[79773] 1629 1101  183 4191  691 1751 2839  535    5  996 2923   87 2954  425\n[79787]  413  415 1481  843 3070 3015 2019  201 3501 2139 3530 1407 2202  442\n[79801] 4382 3513 2908 2391 3349  669  235  195 3596 2160 1715 2039 1576 4195\n[79815]  711 3445  245  435  263   21 1193   29 1473  654  693 1416 1619 2193\n[79829] 5383 1128 1854 4498 5274  208  237 1029 5901 2159 2931 2937 2437 1485\n[79843] 5714  389 3674 1127  368 4361 1729 5769 2909  225 1211  803 1078  161\n[79857]  883 5287 2911  947 1768 3374 1271 2142 5073 1091 3591  587 1435  264\n[79871] 3849 1269  347 2951 5451 4104 2454 4321 2195 4370  363 3992 2314   65\n[79885] 3535 3573  415 4312 1201 4543 4368 2925 2950 3429 2131 4333  915  314\n[79899] 4689 1147 2162  288 2928 1224 4033  418  371 2914  359   71 1464  523\n[79913] 1683  215  329  985 1295  543 3813 4204 4397  105 1205  427 5801 1182\n[79927]  153 2164  499  994 1039 1691 2231 1682 1020 1218  775 2680 4536 4085\n[79941] 3603  726 5268  475 4119 3473 1677 3621 2197 3660 3604 4700 1049  611\n[79955] 4885 3384 3494  789   97  705 1247 3846 1371  425 1651  455  185 3845\n[79969] 2072 1183 3423  283  702 4672 1066 5675  234  486 3525 2351 2002 1816\n[79983]  718 3257 1901  108 4224  527 5311 1503  745  839 5048 2175 2183 5769\n[79997] 1895 1096 2243 1014  605  353 5747 5716  583 1103  731 1517 1668 1909\n[80011] 4471 3637 1377 6177  301  219 3819 4137 4393 1465 1205 1284  303 1989\n[80025] 1919  338  939  601  371 1175  681 5178 1403 1794 2180 4522 1099  929\n[80039] 3599  596  525 2085 4122  303  575 1217 1627 2052  495  479 2810 1506\n[80053] 4412  245 4241  398  478 3496 1439 3550  675 1107 5791  318 1899 4334\n[80067] 2493 3792  343  905  315 1547 2169 1879   23 1415 2136  472 3769  305\n[80081] 1263  430  399 2285 1177 2702  331    3 2003 3842  281  453 4166 1077\n[80095] 3547 4418   15  365 1299  573  183 1381 4533  461 2916  831 1456  424\n[80109]   33 1289 2996 2279   11 4424 1345 2010 4976 1592  215 1717 4125  307\n[80123]  214 3066  163  807  183 5795  448  936 1111  677 1216 1307 1511 4407\n[80137] 1543 2939 2924 1959 1273  759  584  711 1418  346 2267 2809 4111 2171\n[80151] 1109 1271 3489  253 2395   59 4364 2457 1783  857  397 1148 1246 1357\n[80165] 1429   84 3531 1043  409  914 4691 3370 3363  312 2119 5813 1831 3272\n[80179] 3579 2047 3407 4638 2912 3385 3433 4537  509 3419 1025 2280  885 4935\n[80193]  219  281 4388 2926 4419 1496  450  795 5951 1025  301 1643   15 2901\n[80207]  394 2140 1440  504 1581  700 2173 1701 5242  997   29  189 3565  561\n[80221]  422  229 1211  161  181 4380 1289  874 5443 2335 1030 2071 3478 1085\n[80235] 1885  208  586  199  223  407 4087  271   27  308 2344 1048  653  116\n[80249]  970 1971  578   15 1634 4880 1170  317 1223  251  483    5   51 2175\n[80263] 3086 1847  469 1183 3675 1121 1747 5711 1257 4255 1743 1110  673  411\n[80277] 1711 2319 4140  471 5149  604  752 1622  325  403 1174    1 1181  518\n[80291] 3644 1529 1131  179 3611 1745  187 4510 1711  925  160   19   23  971\n[80305] 2343 4495 4187 4679 6074 1599  679 4548 3689 1275 2506 3818 4625 5417\n[80319] 1869  775  643  893 5346 2177 1143  323  695 5273  698 4445 2098 1139\n[80333] 2602 6054  703 1018  707  563 5796 1875  497 1623 3199 2219    1 5797\n[80347]  264 1180  323   53  586  327 3281 2380 4567  632 2876 2902  423 1647\n[80361] 3373 1947    3 1685 3305 1785  766 1143 3404 1667 2902 2190 3670 3806\n[80375] 2069 4304 3848 3386 1129 3461 2915 1227  127 3508  377 3827 5333 1280\n[80389] 2236 1697 3616 3230  701 4682 1131  394  383 1375  255  316 2181  178\n[80403] 2885 3388 3993 1023  411 4622 2043  591  432 2148  781  165 1734 1843\n[80417] 1318  553  505 5207 3361 1641 1256 3795 1145 1442  300 2945  456 1023\n[80431] 4434 1280  802 4193 5008 1675 3407 4552  331  431  388 2789   34  355\n[80445]  308 1746 4395 1401 1639  431 4687  551  117 1802  443 2402  686 5299\n[80459]  927 4100 1122 1695  118 3305 1779 1054  213 2247 1151 4171  662 1073\n[80473] 5378  593 1164 3340  643 1373 1493 2183  301  477 1902  561 1775  541\n[80487]  575 3588 4065 1583 5437 1819 1186 1663 1883 4118 5391  286  294 1232\n[80501]  391 1231 4372 1111  325 2940 1995 3391 1744 2918  998 3199 3063 2152\n[80515]    1 2285 3669 2815 1454 1935 3202 3072 2347 3493  287 2907 2185 2181\n[80529] 2906 1164  745  145 1693 1270  581 4381  841 2913 3231  341 1982 4532\n[80543]  419 1773 4175 3359 1327  399 1155 4587 1205  673  573 1617 2793  257\n[80557]   83 5455 3416  320  417  624   85  721 2840  703 4580   65 1705 1600\n[80571]  133 3553 4576 2927 4181 3488 1942 2280 1801 5091 5713 4326 1118 2187\n[80585]  409 2459  305  467  847 1410 3357 2922 1156  843 1554 2963 1564 1767\n[80599]  375 5199 1171 4502 6181  485 2297 5133 3734 2900   95  761 2936  629\n[80613]  681 1593 2351 1178 4352 3044 2302 1373 1394 3425 3748 1117 5811 5801\n[80627] 5601  211  343 1284 1729 1619 4702 4667  630  283  477 4141  708 2917\n[80641] 2910  381   89 2156 2379  753  423  706 1585  181 1734 1161 2189  493\n[80655] 4328 1051 3301 2904 1309 4201 1171 3365  884 3530 3675  221 2949  291\n[80669] 2231 2933 3357   45 1601  167  918  894 1499  348  256 5815 3216 3526\n[80683] 1518 3849 1185   27   67 1185  687  512  327 1109 3218  785 4113  345\n[80697]  387  135  177  413 4240  434 1692  415 3834 2351 5293 3771  535  199\n[80711] 2370 1212 2191  359 4705 3486 1119  193 1321 5451 1481 1629 2147 1064\n[80725]  507  509 2488  535  172 1022 2019 1519  212 1053 1013 5627 4409 5298\n[80739]  426 2331 3932 4191  415  201 3596 2954  442 1120 1712 1611  183   87\n[80753] 1714  669  169 1531 2908  604 2923 3021 5268 3513  689 1407  425  413\n[80767] 4202  279 3070 1775 1242  389  235  543  321  711 3501 2160 2193  360\n[80781]  263  947 1715 1637  435 3349 1576 2839   21 1473 1101 1193  654 3015\n[80795] 2139 2159  119 1029  299 2937 2202 5274 2039 1854 1455 4131 1618  245\n[80809] 4498  587 3573 2042 4444 5383  926 1091 1078  691 1435 3445 1218 1729\n[80823] 2909  161  195 1485 1526  803 4152 3429  237 2142 1751 5712  371 2915\n[80837] 3992    5  359 2934  363 3591 3674 4321 2925   65 1147 2065 4368 5714\n[80851]  203 1691   29 1727 2928 2195 1225  347 2131 4370 4543 2931 2580 4333\n[80865] 2314  915 3603 1224 2391 1651  249  427 5038 1464  693 3257 4224  883\n[80879]  371   71 3604 4085  329 1128 5901 1295  523 4106 1020  352 2164 4361\n[80893] 3473 5287 1071 2951 1115 4689 1205 2197 2911  153 1768 2454 4033 3494\n[80907]  415  225 1682 2950 3374 1201 4312  314  418 4204 2914 2437 3535 1409\n[80921] 2680 1247 1680  985 1271 5956 3423 3621 4645 4700 3384  475 4536  705\n[80935] 3660 3846 4194  499  527 1901  185  994 5311  611  775 1677 1049 1182\n[80949] 5048   97 1066 4672 4885 4119 3845  425  486 1498  105 1183 4195  702\n[80963] 1371 2002  718 3525  234 1450  234 1816  108  839 1503  745 3815 3825\n[80977] 4099 4294 4297 4348 4411 4504 4512 4382 4596 4572 4633 5099 5220 5373\n[80991] 5309 5463 5675 5736 3809 3466 3572  642 2903 2921 2932 3512 4060  901\n[81005]  313 1733 2144 2179 3421 1032 1895 2243 1500  939 1103  605  583 5747\n[81019] 6177  731  635 1909  353 1377 4150 4137 5716  301  371 1403 4471  303\n[81033] 1668 1721 1919 4393  601 1175 1492   51 3550  374 1899 3365 2180 4122\n[81047] 4241 1099 4522 4533 2810 3599  303 2052  940  525  929  495 5178 4424\n[81061] 1115 2085  478 1072 1439 1627 2073  675  398 1452 1107  318  315  575\n[81075]  343 2493  305 1030  905 2702 1879 1547  540  399 2285 2169  430 1415\n[81089]  453  331   23 4099   15 4166 2003 2279 5904 1592 1162 3547 1989 1345\n[81103] 1303 3842 1289  831 1456  677 4061  461 1263   11   29  342  785   33\n[81117]  183 2028 2916 1717 5795 3066  307 1381  163  183  885 1320  936  327\n[81131] 1205  279 4125 1273 1307 2029 1111  561 1511   46   59 3531 1959  544\n[81145] 2809 1216 3808 2921 2267 2047 2190 4111 1357 2171 2395  281 2457 4869\n[81159] 1148  281 1109 1783 3295  914 4321 2906 3272  447  451 3370 1626 3407\n[81173] 4407 3363  443  219 5423 5813 2077 3385 1743 3260 2932 1429 2901 2926\n[81187] 2280 2119 4304  509  994 3419 1496 1025 4388 1581 2939  795 4691  657\n[81201] 1643   15  313  301 3849 1440 4106 3565  997    1  422 1701  711  472\n[81215]   27 3478 2173 1121  181 3815  189  394 4537 1747 5133  275  589  229\n[81229]  161 4372 2071 4380  653 1634 3513 1085  586 4087  199 4297  394 1519\n[81243]  961  336  407  807   15 1885  271 5220 5229  116  874  223 5391 1160\n[81257]  446  317    5 1223  483  403 2175 5242 1025 1464 5711 1735  479  411\n[81271] 3644 3675  207 4140 4255 2319 1110 1711 1847 1289 3579 5736  160  775\n[81285] 1174 1692  325  208  604 3466  482  187 4171 1131 1529 4187 3611   19\n[81299] 4495  518  925  642 3427  893 2343 1591 2602  179 4548  971 1271   23\n[81313] 6181 6074 3623    3 3689 4985 5309 2177 1745 1869  695 1275 1622 1647\n[81327]  251 3818  679  110    1 4679  643 2506  464 2876 4693 2219 3373 5796\n[81341] 1623 4214  388 2098  559 1180 1442  327 1875 3375 3827 3281 1129 3616\n[81355]  571 1027 3508  279 1947  316 1685 3230  888 3404   63  423  460 5797\n[81369] 1785 4328 1023 1139 4625 3670 4106  127 3847 3461 3848 4233   53  424\n[81383] 1131 5333 4682  178 1318 1145  217 1734   34  411 1048  300 1843  355\n[81397]  781 4567 1256  165  323 1638 6054 3361 2043 3386 1280 1641  505  124\n[81411] 1639 3342  802  331  431  553 2789 4434 1001 4552 4091 2402  308 1401\n[81425] 5614 1768 1751  431 1779 3305 3388 1054  927  203  229 1232 1164 2247\n[81439] 1663  213  591 1611 1481  673  561  575  301  118    3 1070  383  477\n[81453]  368 1122 1231 4633 1171 1883 1111 5713 3493 2936  325 1242  286  308\n[81467] 2347 2815  258 1164 2285    1 1773 3416 1327  703  419  594 1600 3072\n[81481] 5322 2793  145 4502 3359  341 4596 3231 4381  573 5712  257  485 2900\n[81495]   83 4667  363  424   65 4181 1618 1705 4175  303 4576 1587 1117  217\n[81509]  847 1410 3199  841 2280 2459  375 5811 6049 3734 1178  954 4580  211\n[81523]  843  283  343 1394 3044 5207  409 1801   95 1712 2922 3216 3748 3806\n[81537] 2910  181 2571 3365  706  413  167 2941 1064 1637   67 3530 1554 2949\n[81551] 3202   45  199  507 2963  291  237  256  400 1284 4113 1480  135 2934\n[81565]  415 5815  177 2351  299 1109  360 1053 1177  215 1022    5 2915 1611\n[81579] 2839 1049  426  119  669  415  551 2923 2919  359  413   87 3591  263\n[81593] 1768 2391  235  543 2954 2928 2942  208  245  435 1029 1416 4318 2159\n[81607] 2959 2925 4361 2931  347 1631 3535 1576 1729 2905  363 1091 2909  803\n[81621] 1528 1185 3374   65 2454 2314  153 2914 1205   71  105 3845 3621 2937\n[81635]   97  185  486  234 2002  718 1816 1503  745 1012 2243  939  371 1403\n[81649] 1377 2817  883 1989 1175 1205 2085  575  303 1965 1214  525  675 2493\n[81663]  315  453 1263   23 1547  331 1415 2702  905 1262   15  938    3 2279\n[81677]  479 1345 1456  281  677 1303  461   29  340 3965  424  997 1289   11\n[81691] 2916  307 1717  478  163 3066 1111 1216 1511 2047  397 2921 3531 2267\n[81705] 1289   59  156 1273 1357  885  281 1148  559 1783 3363  409 3272  219\n[81719] 2280 1743  443 2119 3419 2926 4711 2901 1496 1025  313  795 1440 4380\n[81733] 1437  301  936  509 2173 3478   27 3565  394 1030    1 1121 1099  181\n[81747] 4087  229  208   15 5443  275  469  874  189 1048  472  653 1634 1885\n[81761] 1085  586  223  446  961  271 1170  116   15 3433  199  407  317 1160\n[81775]  251  403    5 1223  483 1735  207  411 5711 1847   51 1183 2319 1701\n[81789]  551 5736  892  160 1480 3833  325 1174  604 4255  518    1 1131 6181\n[81803] 1745  642   19  187  914 4565 1529  679  925  475 2602 4679 4662  971\n[81817] 4625   23 6074 3569 3689  643 2506  695 1275 3230 1214 2177 1479  703\n[81831]  643 4445 1139 2876 4214 2219  732 3281 1623 1875 4511 5797  327  388\n[81845] 1180  707 4935 2885 1442 2380 3874 3616  405 4567 3566  523  766 1947\n[81859] 3807 2069 1685 3404  423  544 1120 4031 3386   63 1143   53  212 4304\n[81873] 3461 1075 3850 3670 1481 3361 1697  127  316 5388 3848 5101 4633 3586\n[81887] 1785 4682  383 1318 1131  178 4622 3388  670  954 1791 3550 1461 1145\n[81901]  300  165 1400 2043   34  578 1734  411 4185  331  456 1641  802  505\n[81915] 1001 2402  432 3361 4552 4434 3373  308 1054 3673  815  553  431 1263\n[81929] 4212 4687  619  117 1802 1178 3340  118  252 1122 4100 3305  927 2247\n[81943]  213 1073 1639 1373 1070  365  673  561 1219  571 5712  686  477 3588\n[81957] 1819  301 1663  581 3493 1779 4372  286 1231 4175 1883 1171  308 4181\n[81971]  325 2918  320  998 1995 2936 5801  703  721 2815 2907 1270 2347 3359\n[81985] 1155    1 1744  841 1935 4140 3416 3425  745 3072 1773 2181 1164 3202\n[81999] 1454 1134  399 2285 3669 1327  419 2297 4502  145 3231 1982  341 2793\n[82013]  350 4714 5713 4188 1256 1583 4249 1775 2840 3199   85  573 4532  257\n[82027] 1116  417 4580  527   65 5031 2900 2942 1156 4667  461 2280  133 2963\n[82041] 1658  549 1299 1117 2459 1705 2922 1767  847  467  305 4684 5811 1729\n[82055] 5484   83  409 1619 1801 4352  753 1242  211 1111 3301  843  394  788\n[82069] 2231  654 3044 1064 1373   27 1554  485   95 1394 2302 3748  283 5293\n[82083] 3216  423 1712 5846  691 3813 2910  181  477 2042 4328  376  624  918\n[82097]  708  413 1518  706 1601 3365 3812 1734   89   45  237  612 1025 4202\n[82111] 2580  512  167  291 1119  172 2949  199  894 5813   67  321 3487 2488\n[82125] 5678 1161  507  256 1499  652  415  345 1185  687  193 5429 1185  418\n[82139]  359  400 2351  465 4240 1407  327  135 4191 6049 4430  177 2370 3486\n[82153]  299 3501  535  247  926 1152 2147 1986 3032 4131 1053 1526  210 2915\n[82167]  426 2923 1442 2839 1611  119  201 2954  669  442   87  183 2917    5\n[82181] 2202 2919 2391  221 4029 3674 2908  543  263 3349  413   29 3519   21\n[82195]  235 1022  947  711 4498 5383 1576  435 1029 1193  245 1078 2159 4318\n[82209] 1768 3357 2928 2937 3573 2925 1485 2437  347 4370 1346  161 2905 1729\n[82223] 1406 4361 1271 5287 3535 1269  225 1435  803 4543 5095 2909 3603 1211\n[82237] 1091  343 4312 3374 2065 2131 2454  883 1703 1201 2314  153 4333  371\n[82251]  373 3604 3257   65 2914 2420 1159  418 1205 1419 4085   71 1416  329\n[82265] 4705 3660  775  105 1677 2680  994 4885 1682 3384 1071 1371 1295 3621\n[82279]   97  415  185  499  702  425 3845  705  611 1183 1901  527 5311 5680\n[82293] 3264 4194  486  234 1049 1816  718  108 2950 1503  839  745  745 1895\n[82307] 1540 2243  939 1178 1377  303  731  353 1845  751  371 4199  343  665\n[82321]  605 1403 5716  583 1198 5951 1103 2656 4393  482  601 1359 1175 1205\n[82335] 1289 1899 1758 2180 1115  303 4533  785 1099 1946  575 4122  929  479\n[82349] 2085  525 4280  478  821  495 1107 2493  245  602  318  453  675 1547\n[82363] 1415 1263  905 2169  331   23  883  430 1879 2285 2702 4106  315  305\n[82377] 2279  399  472   15 4166    3 1565 1345 5747  561  831  446  677 1456\n[82391]  183  461 2916   29 3817   11 1076  997 1289  885 1415 1717 3809 4315\n[82405]  307 1111  807  163  183 3066 4511 1216 4407 2939  936 2047  398  475\n[82419] 1307  479 2267 1418 4297 2921 1733  312  397  711  346 1959 2190 1511\n[82433] 2395   59 1234 4181   84 1271 3531 1783 1109  281 1273 3489  358 2906\n[82447] 1357 4348  409 3272  391  509  752 4111 2119  838 5813 2926 4537 4419\n[82461] 3363  219 3407  269 1743 2901 3370 2932 4155 3419  443  313 2071 4935\n[82475] 4380  795 1025 1506  856 3833 3815  301 3565 1682 1747 3478 1034 2280\n[82489] 1711  281 1121   27 2173 4388 4113 4662 1701 4177 2335 5118 1030  161\n[82503]  181 1634  229  394  653    1  874  970 3513 1085 1162  199  505 1885\n[82517]  586  271 1971 1519  407 2214 3729 4714  208  288 2573   15 1223  160\n[82531]  403  251  483    5 3675   51 1847 1289  469 4255 1160  324 5666 5736\n[82545] 1808 2319 5149 1257  604 1611 4495 3466 2067 1230 1174    1 6181 1131\n[82559]  518  887   19  187  642 2343 4187  679   23 1529  179  925 5711 5893\n[82573] 1599 4374 3738 4679 6074  971 4625 4250 1687  917 2177 1869 2506  695\n[82587] 2602 1275  761 1647 5309 3230  405 2098 3865  643 1143 1623 2876 2219\n[82601]  541 4409 4335 1875 1120  388 1892  327 1224 4292 1507 3827    3 2380\n[82615] 4567  323 1947  116 1280 3508 3305 3404 3386 2902 1129 1685  296 1496\n[82629] 1785  687 1143  578 1141 3848  456  703 3361 3461  316 1697 5797 2069\n[82643] 1442  127 3852  258 1227 3616  497 2470 4214 4233 5008  411  178  383\n[82657] 1375 3670  300 1131 2181 4033 1863 1280  781 5378  212  355  165 2043\n[82671] 5207 1262 1256  411 3388 1299   34 2973 1023 5373 1318 5333 1639 4622\n[82685] 1641  802 3795 2789 4434 1508 5299  456 4687 1164  505 1199 4552  308\n[82699] 4168  431 4395  787 1779  117   53 1151 2548 1775 5437  686 3340  399\n[82713] 2247  213 1583 4100  118  927 1565 4171 1373 4372 4249  673 5712 1073\n[82727]  561  586  477 4633  575 1693 3588  365 1902 1819  581  286 2918 1420\n[82741]  301 1231 1883 4417 2815 2936 1958 2907 1401 4695 2940 1186  320 1155\n[82755]  325 3391 2297  703  841 3202 2285 1834 1164    1 2347 4148 3359 1454\n[82769]  553 1935 3669 1600 5199 3293 1270 2913 2185  745 1171 3072  419  685\n[82783] 2181 4381 3231 4175  145 1327  998 3425 2958 4326 4502 1982 2793 4572\n[82797]   83 2840 5205 1729  573  417 4641  247 4532 3806 1942  381 1775 1695\n[82811]   85  257 1554 1705 2088   65  133  203 2963 2280 5391 4667  498 2927\n[82825] 4087 4596 1183 2900 1139 1118 1246  847 3810  305 2459 3357 3825 2187\n[82839] 2217  467  708  409 2922 5811  753 2231 1801 2917 1410  843 1242 1619\n[82853]  587 2933  211 5601 4294 1117  629 1394 1712  343   95 1161   27 4352\n[82867] 3044  283  423 4702 5293 1593  884 2042 3216 4201 4323   89 3501 2904\n[82881] 1171 2302  181 1373 4967 5462 3143 2602 1585 3932 2189 3365  167  221\n[82895] 5091  512  706  918  413   67 1734 1493 3530 2580  894  255  172   45\n[82909] 1119 3199 2664 2949  424 4202 1601 4328  199 5815 1284 1101  507  291\n[82923]  256 2379 2488  237 1714  509 1499 1185  687  434  169 2351  359 1519\n[82937] 1109  415 3849  193 1407 3486  135  327 1540 1845 2934 4318  299 1321\n[82951] 4191  535 1629 2370 4430  273  418 1263  624 1053 2147  635  516  210\n[82965] 2395 2019 4444  426 1611 2331 2915  119 4131 1075 1013 3591 5268 1735\n[82979] 1751  926   87 1442 1576 2954  669  415 1531 2517  413 5451  183  442\n[82993] 2202  201  425 5274 2908 2391    5 1744  263  543  947 1481 2193 2097\n[83007]   29 4522 1047 3473  711 2910  435 3992  327 1854 1029 1715 4382  235\n[83021] 2925   21 5383  245 1473 5909  471 1022 1416 1111 2159 5769 2937 1298\n[83035] 4543 1091 1485  161 2142 5801 1020 3535 2911 1271 1526 2437 5714 1727\n[83049] 2931 1729 4361 3374 1435 1768 4570 1211 2014 2314 2131 2951 2454   65\n[83063] 4321 1482 5287 1147 1615 2928  225 1692  252 1201 4368 5038  347  390\n[83077] 2909  883 4510 2065 4412  415 4194  915 2420  427 4689 4204 3478   71\n[83091] 2914 1205 4085  256 1466  803 2796 2950  771  329  523 2197  499 1295\n[83105] 4397 1409 2923 1039 1049  985 1081 5048 4645  775 1247 1677  105 4141\n[83119]  215 4119 1182 4700 1532  538 1051  153 3621 1371 4885 1043  611  185\n[83133]  460 1451  425 1071  705 3845 4333 3846 1901 4628   97 5311 1183 3525\n[83147]  702  234  527  250  108 2002  486  726 1816  718  839 1503 4705 3416\n[83161] 3572  745  839 1895 1487 2243  939 3819 1441 2167  605  353 4714 5747\n[83175] 1739 1377  583 1517  731 4141  371 5716 4262 1038 6177 1403  691 1198\n[83189] 3990 4393  338  601 1919 1689 1175 1205 1472 4313  400 1989 4535 4240\n[83203] 2145 1144  575  495 2085 1946 1099 1115 4522 1439 1627  479 1434  525\n[83217] 4122  997 4587  593  929 3769  675 3496 1107 4711 4581 2129  789 4153\n[83231]  305 2493  303 1299 1263   23 1415  315 1547  430  331  399 1091  453\n[83245]  905 2285 4155   15  318 1879 2003    3 4166 5791 2279  472 2702 2157\n[83259] 1345   29  677 4285  831  183 1736  461   11  363   33 2457 1456 2916\n[83273]  885 3842  307 3066 1111  183 1592 4407 1216 1717  807  475 1307 2939\n[83287]  279 1273 4676 2122 1511 1949 1418 2047 2190 2921  936 2395  561 2267\n[83301]  397  685 1959 3531 1148 1271  346 4555 5242 2924 4111 1783  901 1109\n[83315] 3489 5463 1357  857  914 4364   59 1289  281 4197  447 1429 3272 3370\n[83329]  409 2053 5813  443 4179  509 2932 2119 3579  219  994 2901 2912 2926\n[83343] 1743  653 2280   84 3829 4638 1025 4388  265 1204 4935 3363 3419 1496\n[83357] 1967  398   15 4380 4419 3815 1162 1626 1711  208 5220  189 1120 5680\n[83371] 1643   27  394  313 1121  301 5099    1  181  422 1747 3565 1246  711\n[83385] 2335 3478 2173 1030 5133 1634  229  970  161 5443 1701 1885  653  874\n[83399]  586 1183  271 1971  223 1519  407  199 4065 1085  116  544   51 4537\n[83413]  446  578 1761   15 3363 1160  403  317 1223  163 4129 3791  795  251\n[83427] 3675    5 3572 4060 2142 5711 3644 1289 2017 4255 4510 1847  160  673\n[83441]  411  469 1257  604 4880 4087 5736 1622 4187  325 1174 1711  460 3357\n[83455] 2581 4495 2319 6181 3355 1745  642  179  925 1529 3466  679 1131 2343\n[83469]  187 5149 1090 2602   23   19    1  483  971  518 4679 6074 3818 1599\n[83483] 4625 3689 1647 5346 3433  695 1583 2506  775 1479 3230 1869  228  405\n[83497] 4374 2098 5273 1275  643 2876 2177 1161 1892 1623 1875 5373 3281 3736\n[83511]  327 5333 1618 1180  388 2906 3373  586 1442  323 4567 2179 2146 2380\n[83525] 3616 1947 3386  681 3446  766 2063 5814 3404 3508 1605 3615 1785 4445\n[83539]  423 1143 3670 5797 1686 1141 3461  316  725 1227 3361   53 1280 1697\n[83553]  127 4233 4662 1131 1318 4292 3264 3342  488  178  245    3 2707 5378\n[83567] 1375 1145 2181 1610  411 2219 3388   34 5207  165 1843  300 1571 2043\n[83581] 1023 3114  781  432 1502  355 6054 4622  553 3350 3305 1641 1849  802\n[83595]  331 2789  394  703  456 1001 5796 1256 2402  308 1685 1164 1129 1186\n[83609]  505  431 5437 1779 1401  258 1802  117  383 4395 4412 4552 1073  686\n[83623] 4100 4171 4640 1151 3305 2517  213 2183 2150 2247 5299 1663 1373  927\n[83637] 1734 3810 2322  118 3340 1149 4434 1565  477  785  575  561 1902 2460\n[83651] 1819 4633 3588  301  673 1296  581 1232 5713 3493 3795 5712 1231 5931\n[83665]  325 3199 1883 2815 4175 2918 3359  680 1995 2940  320 2907 4687 3416\n[83679]  247  998  703 1054 1270    1 1935  721 3425 2913 3202 1773 3072 1158\n[83693]  841 1600  419 2181 3669 2285 5199 5391 2903 2297 4381 5801 1327 5309\n[83707] 1075  145 2185 1155 4502 1554  341 2347 1171  286 4326 2793 4572 3553\n[83721] 1982 1693 4372  257 1638   83 2840   85  312  573 1942  234 1248  380\n[83735]  417 1729 1744 4181  399   65 1767 2900 1705 3231  133 2963 2927 1410\n[83749]  305 5091 2922 1639 2154 1801 2187 5846  847 3734 1373  409 4559 1156\n[83763] 3825 4596 1051 1117 4190 2917 3767 3854 3488 1619 2280 4352  843 4532\n[83777] 2876  467 4580 3301 2936  211 2231 1139 5601 3748  753 4576  283 4702\n[83791]   95 2459 3044 1178  516 1394  549 3391 3357 1262 4294 4705   27 1177\n[83805] 2933 1171 2302  343  918 2042 1454  424 3216  884 1023 2379 1601  167\n[83819]  423 2910 2189 3932 1734 1585  221  689   45 2904  706 1284   67 3771\n[83833] 5293  512 4411 1119 5451 6049 3365   89 1259 2949  291  894  413  199\n[83847] 2488 1518 3347 4667  509  172  708 5298  687 1161 1185 1185  629 1519\n[83861] 4149  477  608  343 2351 3526 1127  345  507 3530 1407 1499 1109 5678\n[83875]  434 1221 4191  415 3200  573 2580  135  359  177 2934 4201 3486 2191\n[83889]  299  169 2158 2370  193  535  327 1629  181 3466 3501 1269 2019 2921\n[83903] 1101 2839 1321 3817 1053 1611 2915 3368 1013  597 4328 4564  119 2006\n[83917] 2331 3513  413  426 4131  980 4113 5268  389 1751   87 1531 2954  415\n[83931]  256  359    5  669 2147 4300 3349  493  425  926 2908 1022 2139 4382\n[83945]  183 2923  543  327 1128 2039  263 4278 1029 5274 3591 3992 4195  237\n[83959]  201   29  387 2928   21 1576  245 1715 2193  693 1416 1473 3674 1481\n[83973]  711 2391  435 1854 1480 2159 2925 2931 2202  761 1691 2437 5383  442\n[83987] 3573  347 1729 4370 4543  161 1692 3349 5769 3445  883 1435  252 2909\n[84001] 5714  375 5455 1020  947  363 1064 1526 2951 4498 4361 1211  225 2911\n[84015] 4635  695 3535 3374 1078 4152 4321   65 2065 2195 1528 1485 2950 1201\n[84029]  803 2937 1768 2142 2314  235 5948 2454 1464 1703  371 1224 1147 1651\n[84043] 1164 4224  415 1271 4368 2131 4689 3604  884 2914  915 5956  427 1482\n[84057]  418 4333 3257 2162 4033  523 4106  314 3404 1295 3473  329 5287 3660\n[84071] 2164 4348 2680  499 4312 2197 5048 1405  105  775 4536 1677  153 4885\n[84085]   71  726 4629 1683 1419 2072  985 1182 1466 1247 3621 1066 3603 1450\n[84099]   97  789  702 4085 1205  425  527 1682 1901 1631 3384 3845 3846 4119\n[84113]  652 1071  705  185  214 4672 5311 1081  611 1049 4462 4700 1183 5928\n[84127] 3525  486 1409 6073  108 1371 2002 5963  718 4212  668 1816 1525 5038\n[84141] 1446 1503 2902 3385  234 4194 5178  643 1816 1895 1452 2243  939 1909\n[84155] 2167 5716 1500  353  371 1377  303  605 6177 4137 1175 1403 5747 1103\n[84169]  731 2134 3819 1465  301  219  601  681 3637 1284 3550 1205 1919 4393\n[84183] 1668 1989  288 1899  583 1794 2810  929 5904 2180 2052 5178 1627 2085\n[84197] 4522 3599 4122 1055  495  525 1099 4241  575  303 1506 4424  478  339\n[84211] 4412  596 1439  398  245 2493  675 3769 4099 3496 1107 5791 1263  318\n[84225]  343 2136  453 2285 3792  472 1879 1299 2702 1547 2169    3   23  331\n[84239]  430  305   15  399 4166 4418 5342 1177  315 1415 1077 2279  821 3547\n[84253] 2003  573 1345  677 1592  365  831 1381   29 2996  424 1289  785 1456\n[84267] 3489   11  183   33  885  307  461 4976 2916 4125 1717 4533  163 4407\n[84281] 3066 1111  183 1216  936 3815 2939 1273  279  327 2924 1733 2138 1307\n[84295]  759 2047   84 4866   59 1418 1511 2809  397 1959 2921 2190  561  711\n[84309] 2171 3531  346  450 2395  418 5242  914 1783  857 1109 1148 2457 3842\n[84323] 4364  559 4691 1357  281 1429 5463  409 3272 3370 3579 2267 4111 1831\n[84337] 1626  443  219 2119 2901 2912 1271  509 3433  215 2906 1743 4537 3407\n[84351] 2926 2280 4419 4638 3419 4388 3385 3809 2071 3363 1496 1025 4471 4711\n[84365] 1025  313  795 1162 1643   15  700 5220 2140  905 3565  997    1 2335\n[84379]   27  301 1448 1701  235 4380 1121  189  394  208  422 1747 1170 1517\n[84393] 5099 3478 2173 1634  181 1885  970  161 1085  653  199  586  874  223\n[84407] 4935 4065   51  308 1971 1289  407  384  271 1223   15 1160  317  251\n[84421] 2344 1030    5  116  483 5711 4060 3644 4140 2142 3675 2175 4510  673\n[84435] 1110 1735 1847  160  518  471  469 5149 1711 1183  411 2319 2932 4087\n[84449] 3086 3512 3572 3466 1257  604 1174  893  325  229  752 1745    1 5813\n[84463] 1131  679   19  925 1711 2343 4187 1529 3611 1622  642  179 1599  187\n[84477] 2602 4548 5443 4679 6074   23  111  403 4625 4880 5309 6054 2144  695\n[84491] 3230 3689 1647 1869 2177 3433 1275 1018 2506 4255  563 5346  775 2098\n[84505]  643 5273  703  264 1139  249 1143 2876  707 3373 1875 5797  497 3199\n[84519] 2219 3281 1180  807  388 1442 2915 1623 2885 2146  323 3386 3616 2069\n[84533] 2179 2380 2902  971 1043    3 5333 3421  255   53 1785  766 4445 4567\n[84547] 3305  316  423  327 1947 3404  632 1685 3508 4396  586 3461 1667 3806\n[84561] 5796 3670  701 3361 2902 1227 1129  127 1280 1697 3848 4504 5373 1143\n[84575] 1131 1318  394  178 3342  383 4495 1375 4622 5207 3388 2148 2043 1145\n[84589] 1023 5378  252  411  781  578   34  432 1734 2181 1843  300  165 1515\n[84603]  294  355 1280 1256  802 3795 3407  553 2789 2236  331 3993  456  505\n[84617] 3827 4552 5437  493 1164  308 5299 2402 4395 1639  117 1054 2945 1802\n[84631] 1151 4374  431 1746 4633 3305 1073  927 2517 2183 2150  686 4687  213\n[84645] 2247  593 3063 1122 1779  662 4682  643 5675 1693 1663 1232 1493 1819\n[84659]  485  301 1373 1902  575  214 3588  673 1231  581  286  325 1883 4175\n[84673] 1583 2918 2936 1995 2940  561 1186  320 3199  998 1111 2903  525  841\n[84687] 1171 3359 1155 4141  118 2152 3425 3669 2907 1935 1454 2913 2297    1\n[84701] 4372 5801 2285 3416  287  477 3072 3340  419 1773 5713 3391  745 2185\n[84715] 3202  145 2347 2815 1198 4381 2181 1600 1270 1327  541 3231 3493 3553\n[84729]  703  761 4596  399  341 2840 2793 1205   85 4100  203  573 1729   83\n[84743]  417 1695  257 1942 5455 1744  332 1775   65 4434 4576 1982  133 4580\n[84757] 3488 1705 1767 4181 1023 3825 2154 5091 3675 3357 1801  467 2922  847\n[84771] 2459 2927 4667 3734 1572 2280 4171 2187  375 1410 4538 3301 2231 5199\n[84785]  753 2963 1554 4352  211  843 1051 2351  624 1156 3748  630 4294 5601\n[84799] 2302 4532 3357  409 4702  629  305 2917 1394  516   95 1164 1619  423\n[84813] 3216 1593 1178 2933   27 1284  477 5293 4409 1373  721 1641 1161  181\n[84827]   89 4326 4572  343 2379  283 1117 3932   45 1734 2156 2942 1171 2189\n[84841] 5811  512  689 2900  172 1585 1601  706 2910 3044 1309  884 1119  894\n[84855] 4202 3834 3530  491   67 5815 1526 2949  199 2042  221 2488  918 4705\n[84869]  413 1519  167  291 2904  708 3218  488  509 1185 3771  359  415  687\n[84883]  193 1022 4502  434 1212  135 1407 2580 1714  177 2351 1518 4191 3526\n[84897]  169  240 3021 5451  360 3486 4411 1109 1321 2158 2934 2147 1629 3501\n[84911]  535 2191  327  507 1481 1064 1101  299 4240 3596  256 2019 1692 1053\n[84925] 2370  654  426 4201 4131 1013 3070 1637 2954 2331  119 4113 1165 1531\n[84939] 3015 1751  926 5391 1510 3513    5  415  425  183 5948 1185  413 2915\n[84953]   87 2839 1120  389  442  359 2202  195  237 4328 2923 3349 5712 2391\n[84967]  362 2908 5268 3591  263 2139  543  235   29 2160 1611 3445  693 2039\n[84981] 1029 4195 1128 2193 1576  324 5298  245 1499 2928  947 3849  669 2159\n[84995] 1854 4382 1564 1193 4498 1473 4444  691  587 1485 1416 3992  347 2925\n[85009]  711 5769 3535   71 2919 2943 1691 2142 4543  363 1435  435 1020 1078\n[85023]  161 4361  345 4312 2437 1271  201 3374 1211  234  510 2162 1729 2950\n[85037] 5038 3429 4321 3573 4224  225 4370 2065 2314   65  883 1147  415 3603\n[85051] 2195  803 2131 3674 4333 2454  464 3365   21 5956  866 1269  915 1224\n[85065] 3604 1201 1464  427  455  418 3494 4348  314 2914 1651 1205 4204 1091\n[85079] 5383 1295 3257 4033  329 3473 2197  985 2164 4512 4645  775 1247 1182\n[85093] 4536  499 2680 3660  523 1677  994 1115  153 1682 3384 1768 4119 2911\n[85107] 2931 4700 1631  105 4162 4689 4085 1049 3621 5048   97  185 5714 1039\n[85121]  702  425 3846 4186  705  371  611 4106 4672 1183  527 1066 4368 1371\n[85135] 5311 5287 3525 1715  234  486  108 2002 4233  718 3423  745 1503  839\n[85149] 4885 3852 5736 5274 1895 1487 2243  939 5716  359 3819 1441  731 2167\n[85163] 1175  353 2134 4268  301  371  904  303  605 6177 5747 1480 1833 1103\n[85177] 4471 1919 1716  219  601  485 4393  479 5904 4137 1205 1403 3550  840\n[85191] 1989  404 5510 2180  482 3423 1178 1099  929 2810   16 3599 2052 2085\n[85205]  303  575 1627  525 4122 1360 4241  339 4522 1506  245  596 1107  891\n[85219] 3769 5791  398 4533 1121  675 4424  377  479 4412 2493  318 2136 1263\n[85233] 4099 4166 1879  305 2275  343 1439 2169 1547   23  905  430    3  472\n[85247]  399 1190 2002 3842 1262 2702 1077 1943 1352 3547 2279   15 2606  831\n[85261]  573 1456  677 1975 1381  424  183  376 1289 1345   20   29  885   11\n[85275]  307   33  461  807 3808 2935  163 3815 3066 1111 2395 5795 1216  936\n[85289] 1717 2457  440 1307  874 1733 2809 2138 2047  327  398  331 1592 2924\n[85303]  279 2916 1273 1511  397 2171 2190 2017 2932   59  425   84 3528 2267\n[85317]  382 1357 5463  559 3531 1783 2596 4364 1212 4111  212  281  281 2921\n[85331] 4213 3370 4407  561 2912 1626 4691 3363  409 1831 2119 3407 2901 2937\n[85345] 3433  433  219  914 4537  401 4419   27 4945 3419 1025  517 4409 2071\n[85359] 2926 4162 1496  443 4380 1043 4638  313   15 3809 4388  509 1643 1259\n[85373] 5220 2140 1581    1 3565 1747  681 2173 2335 1121  450  189 1701 2280\n[85387] 2444  651  354  422  208 1030  181  493 4087  161 1448  653 1634  275\n[85401]  997 2906 4065 1085  586 3272  199  583  294 1885  215  407  116 2166\n[85415]   15  876 1668 1223  223  970  271  317 3478  251  483 3644  795 5711\n[85429]    5 1195 2142 4060 2175 4255 4510 5208 1110 2319  471 4274  411  469\n[85443]  218 3572 1847 1183  160 4141 1622 1711  465  403 5736 1735 3493 6054\n[85457]  325 1257  893 3466 1131  642  518 1174 2083   19  838 3611  679 4495\n[85471] 4565  187  420 1711  179 1599 2602 1153    1 3675 3852  604 3689 4625\n[85485] 4679   23  457  971 2177 1869 4548 4880 5182 5273  775 1647  507  309\n[85499] 2144 5599 3230  624 1139 2098 1250  698  703  499 2876 5373 5797 3767\n[85513]  707 2219 3281 1143 1442 5796 1120  388 1623 3827 2885  327  785 1180\n[85527] 4567 3616  255 2179  316 6074 2380 5245    3 3566 2146 1685 4445 3386\n[85541] 5611 2902 1947  172 1785   63  423 1129 1143  766  323 3670 2902 4504\n[85555] 1227 3461 1667 4396  701 3806 3848  483 3361   53 2069  127 1697  551\n[85569] 5309  406 1131 4682  178 1198 1318  394 2148 2181  300  439  432  332\n[85583]  587 5207 1145 2056 4622 1256  553  156 1639  652  411  802  426 1280\n[85597] 1734  165 3404 4434  456 1428   34 2789 1880  144 4552 3388  505  331\n[85611]  308 4395 4193  431 4687 1054 1401 2402 2868 1692 1151  287 3340  256\n[85625] 1802 4171  383 2150 2247 4100 1073 1875 2183  213  686  781    3 1663\n[85639]  927 4633  380  643 1571 1779 1611  516 4559  673 3305  561 3588  286\n[85653]  217  405 3527 5189 1111 1070  575  581 5713 2517 1819 1231 1373 1205\n[85667] 2918 4111 1493 1883 4372 4175 5199 3199 1995  320 1186  325 5259 2285\n[85681] 2815 3391 3359 1232 1155  477 1454 3425  485 2938 2003 3202 2152  745\n[85695] 2913 1171  998 4696 3072  721 2181 3669  288  703  455  117 2297 5801\n[85709] 1600 2903 2185 2347  454 2944 1270 1327  301  145 5302 4181  535  419\n[85723] 3493  761 3553 4532 1982 4596  341 2793  118  381  399 2840 4326 2907\n[85737]   85 1942 4580  594 1695 4572 1775  312 1246 1767 1156   83  573 4502\n[85751]   65 2900 4667  133 1705 1935 4576 3231 4215 1299 1410 1801 2593 2459\n[85765] 3734 2187 2154 2922 1117 2280 1048 3264  409 2806  847  375 2917 3825\n[85779] 4352 1843 5601 3301 2963 1619  417 5712   89  428 2933 3357  629 2595\n[85793] 2231 2927  532  681 3748  211 1593 1161 3778  423 2302 4381 1572  407\n[85807] 1098  257 1284 2042 4294 1051   27  181 4695 3216 1554  343  884 4705\n[85821] 3357 1171 1518  477  708 5811   95  918 5293 3932 1721 4328 3365 2942\n[85835] 3771 1734 2156 2379  167  221 2189   45 2389  413 1729  894  753 2904\n[85849] 3530  689  283 4411  415   67 1519 5815 1289  356  291  421 2960 2488\n[85863] 1064  527 4113 4702 3526  256 1185  172 2580 2949 1022 1714  632  345\n[85877] 1185  169  418 2351 1712 1109 1585 4191 1104  193 1462  199  135 1407\n[85891]  359  177  305  226  299  507 1321 4202 4276 3069  654  360 1211  387\n[85905] 2191 2370 2158 2147  691 2019 1637 1481 3513 4131  841 2915 1013  571\n[85919] 2013  926 3691 3486  119 1455  426 1038 3501 1611 2331  195  543  669\n[85933] 3849 2839 2070  235 5948    5  183 2139  866  438 2202 1495  442  400\n[85947] 2391  263 4240 1854 3674  235 2943 1128   21 2908 5287 2160 2193 2931\n[85961] 4033  325   29 2594  247  359 4498  435 1029  250 2958 1193  456  693\n[85975] 5268  201  327 2159 5274 4444  866  711 5769 2959  460 1715 2437 1691\n[85989] 2070 5714 4543  377 3591 3535 4370 1710 2925 2960 2537 3044 3573  161\n[86003] 1078  225 1485 1225 1526 5079 5298 4218  363 4312 1271 2928  234 4195\n[86017] 1119 2131 1498 3374 3603 2195 4368 2590 4382 1147  389 2162  415 2314\n[86031] 1464  883 1201 4321  418  308 1703 4333  427  915 1086   65 4689   71\n[86045]  340 4106 1435 3604 4085 3681 3257 1205  523  436 1416 1651 4224  371\n[86059] 1677 2911 4512 3660 1159 3473  314 2197 2914  168 2164  499  105 2680\n[86073] 4119 5451 1247 4885 3384 4204 1115  994 1295  803 3845 4645 1039  475\n[86087] 3445 4186  527 4348 3621  185 4361  152  702 1049  425 1066 1371 2599\n[86101] 1183 4277 3494 3846 4233 5311 3843 1901 4672  234  486  371  705 1816\n[86115] 2002 4536  718 1346  108  839 1503  745 5147 5337 3349 1895 1014  440\n[86129] 2243  939  793 2167  303 2134  301 1716 1833  353  371 1919 6177 1153\n[86143] 1103  731  904 5747 4268 1175 1735 3817  583  485 1668 1403 3550 1205\n[86157] 4199 4334  479  482 1899   16  601 4270 1099 2180 1360 4096 4122 2810\n[86171]  698 2085  303  929 5716 4150 3599 4161 4422  575 2052  363 1989 4424\n[86185]  398 1299 1454 1107 1121 4993 3769  675  681 4137 1263 1480  318  830\n[86199] 1547 1729 2136  305 2275  472 4099  905    3 2169 1879   23  430  399\n[86213] 2421 2702 1352 2279 1077  831  424 3547 4393 2606  591 1345 1975  390\n[86227]  677 4233 1381 1289   29  183   20 1455  700  461  307  885   11  450\n[86241] 2935   33 1111 1717  440 2395  163 3066  279  936  807 4125  657 1216\n[86255] 2932  874  478 1733 1115  398 1307  425 2457 1511 2047  331  397 2138\n[86269] 4548 2809 2171 2924 1357   59 1273 2190 4364   84 2017  382 2916 4111\n[86283] 1246 3528 5463 2921 4155 1783 3531 4166  281 2267 3370  409 2912 1626\n[86297] 4297 3363  219 4169 3272 1043 2596 2901  914  517 3433 1831   27  443\n[86311]  433  394 2937 4213 2119 4945 4522 3407 3815  676 2926 4409 3419 2071\n[86325] 5814 1496 1025  313  795   15  652 3478 2280  422 4691 1025 2140 5220\n[86339] 2173    1 2335 3565  685 1747 2444  651 4537 1296  970 1121  586  189\n[86353]  181 3812  561 1634 1701  208 4638 1581  161 3301 4065 1170 2906  653\n[86367] 5337  275  509  407  199  223  446  271 1686 1885  876  116 2493 4087\n[86381] 5796   51   15 1085 1030 4274  317  403  653  297  483  251 4060  218\n[86395] 2142 2175    5 4510 5208 5711 1183 3644  673 1847 1110  469 5736 3572\n[86409]  418 2319  160 1711  411 3493  325 3675  893 4255 1131  604 4129  642\n[86423]  838    1  420  472 4495  679   19 3611 1611 2602  258  179 2083 4284\n[86437] 4628  187   23 1174 1599 3689  309  457  971 2144 1869 4676  499 1647\n[86451] 4880 2177 5309 2098 4633 1139 5273 1250 3825 4679 5675 1223 1203 2876\n[86465] 3230 5373  707 2219 1623 3281 1143  249 5599 2885  327 1875 1442 3566\n[86479]  703  323  497 1180  172 3386  565 2380 1685 2146  423 1947 5611    3\n[86493]  766  388 3404 1143 1785 5245  856 2902 4419 2179 3461 3361  488  316\n[86507] 1297 1129 3806   63 2069 5795  483 1386 3670 3299 1697 1131 2166 5846\n[86521]  274  178 4141 1318 1145  144 1663 2148  439 1605  300  127  781 5207\n[86535] 1843 1280 1734 3312  432  652  411  998 1617 4292 2181 1641 5797  456\n[86549]  331 3795 1639 1256 4118  165 1428  426 5948 1880  802  383 2868 4687\n[86563] 2402 4434 2789  505 4395 5189  380 4104 1054 4552 1151  431  507  117\n[86577] 4175 4100 1023 3340  551  308 2517    3 2150  553 1802 3305  686 1073\n[86591]  927 1779  118 2247 1623 2183  288 1401  213 1373  516 4567  256 1232\n[86605] 4171 1200  673 1583 1070 3588 5259 5712 3527  624 1205 5713  561 1231\n[86619] 1493  301  575 5199  541 4133 1554 2918  286 4596 4181  429 1164  320\n[86633] 1270 1995 3202 3359 3199 3391 1171  477  581 3416 3669 2285 3425 2913\n[86647]  454 1186 2946 2152 2185 1155 2815 1048  721 2903 4572 3072  761 2938\n[86661] 2297  841  325 4144 4113  287  703 2181 4377 2003 2347 3231 2793  145\n[86675] 1327  745 4580 3553  341  419 1982 2840  578 2907 1600 3493  573  321\n[86689]  417   65 1775 1638 2900 5302  342 1695 1156 2963  257 1767 1935 1729\n[86703]  133 1819 1705 4276 1942 4576 4684  421 3734  377 1801 1117 2593 2459\n[86717] 2917 1492 2187 4215 3778 2154  409  847 2280 1843 1410 4299  635 3301\n[86731]  375 5601 2927  211 4352 3748  407 1619 1692 5293 2302 2595 3357 2231\n[86745]   27 4294  333 1161  681   83 4702 3044  629 5147  423 3216 1171 1734\n[86759]  884 1139 2042  477 2904 4705 4640 1587 3335 4502   85  413  428  181\n[86773]  343 1242 2389  689 1518 2156  172 2379  918 2806 3365 1721 2960 3530\n[86787]  525 4411 3771   67  221 1519   45  431 2189 2949 1119 1289  512 4202\n[86801] 2933  291 2922  283 1585 2942 3811 2488  415  509  332 1064  753  594\n[86815]  256  359 3526  687 1127 2580  193  169  305  434 1109 2351 4667  894\n[86829] 1407  527 5678 4091 4662  177  345 3069  135 1185  199 3357  701  997\n[86843]  299 3501 1104 1211  360 2147 2370 4382 2158 2191 1321 4195  587  356\n[86857]  312 1053 1284 1618 1013  926 3486  119 3513  426 3691  691  237  456\n[86871] 2954 4300 1022  400  543 1611 5314 1185  235 2915 2945 2331    5 5268\n[86885]  425  669 2839 2598 2202 1120  442  389  201  866 2019 4714  195 2391\n[86899] 3674  485 4131  507 2908  235   29 4218 5274 1751 2943 5287 2160  693\n[86913] 2193 1854 2139  654   21  711 2911 2931 2594 4191  327  325  435 3591\n[86927] 2039 4033 2958  438 1416 2159  183 1193 3573 1128  866 1715  708  263\n[86941]  359   71  448 4361 1029  460 1526 3445 1691 4370  152 3535 2959 2960\n[86955] 5769 2537 5079  377 2925  524 1435 5298 3374 3603 5714 2928 1271 1710\n[86969]  225 1178  695 2013 4312 2162 2437  415 1703 2314 4368 1485 2195 1201\n[86983] 1147 2590  234   95  803  883 4543  308  427 4333  153 1346 4085 4224\n[86997]  371 1224  436 3604  363 1225   65  281 4511  455 1078 1464  314 3257\n[87011]  168 3681 1205 2914  523 4512 1295 4106 2131 4204 3819 4277 1677 2599\n[87025] 1159 4176 2197  105 1247 2164  994 1667  499  775 5451 3473 3660 1071\n[87039]  418 1059 2680 3384 4672 3621 1466 4421 4625  702  527 1371 4321 3845\n[87053]  221 3848  705 4885 3843 3810  185 4179 5311 4565  486 4695 4119 4700\n[87067]  234  108 1816 3494 2002  718 1503  745  839  518 3388 3466 3616 3349\n[87081]  643  711 1643 3525 2914  486 4370  745 4106  839 1371 1895 1545 1153\n[87095] 2243  559  939  731 4150 1103 2134  301  371  904 2167  303 1833 5716\n[87109] 4268 3817 1212 1175 6177 1919 5747 1716 4714  485 1403 4334 1989 1205\n[87123]  601 4270 3550  288   16 2180 4393 1899 1099  303  575  371 1611 2810\n[87137] 1360 2052 2085 3599 4161  929 4122  525 4424 1299 5791  398 1627 4993\n[87151]  785 1148 1121 1454 4137  478 3769 1107  675 1246 1263 2493 1162   23\n[87165] 4155  343 2285 2136 2169  399 1547 1190  305  430  472 4099  905 2421\n[87179] 1879 4522 2275 2702    3 1352 1077 2279  318  831 3547 2606 1456 1975\n[87193]  677  183  390 4166   11  424 1345 1381   20   29   33 1455  461 1289\n[87207]  885  450 4297 2935  307 1717  681  163 2395  327 1111  279 4233 4548\n[87221] 3066  440  398 1216 4125 1592  874 1733 2267 4364 1115 1307 2047 2457\n[87235] 2171 1289  331 1511  172 2190 2138 1273  382 5463   59   84  425  561\n[87249]  397 4691 3528 2017 4407 2924 3531 2809 2087 2596  281 4213 1357 1783\n[87263] 2921 4111 1626 4419 1043  409 1831 2937  219  517 4638 3433 3407   27\n[87277]  433 4422  443 4537  509  914 2119  807 3815 4409 3272  594 3363 1025\n[87291]  795 3419 4087  313 4628 1496   15 1025 1643 4276 1668  701 1581 2071\n[87305] 2444 1296 2280 2173  208  422    1  586 1030  651 2140 2335 1701 1747\n[87319]  161  685 1121 1634  653  653 1085  936  970 1170  223   51  407  373\n[87333] 2166 1885  181  446   15  251 1223  297  317  403    5  469  652  418\n[87347]  411 1110  673 1183  604  642  187   19    1   23  679  838  179 2602\n[87361]  893 1611  925  309 1131  420 2932  274  457  499  189  518 2901 2926\n[87375]  703 1847 1143 3644 1180  766  423 2069 1129 1623  323 1697    3  406\n[87389] 1386  127 4633  483 2916 1318 1428 2902  383 1605  178  411 1297  165\n[87403]  116  439 1663 3311 3795  316  565 1256 1641  456 4679 6030  300 5814\n[87417]  553 1145  652  505  802 1054  332 2083 4395  432 4552 2181 4255  998\n[87431] 1647  252  331 1583  483  497  308 1442  258  686  118 2319    3 2380\n[87445] 1073  213 1232 1373  249 2402  516  927 2098  275 2150  380 1802 1571\n[87459] 1401 1416 1869 2517 1164 4434  218 1200 1599 1205  117  581 4118 3305\n[87473]  286 5901 3588  586  841 1785 1250  301 1779 1589 1151  673  160 1493\n[87487] 5611 1734 3825 2219 2183 1139 1685 2285  325  477  256 2003 2247 2903\n[87501]  454 3072 3425 4060 4181 4945 1902  761 2185 2181 4396 4662 1270 5309\n[87515] 2297  745  573 1155   85 1143 1186 1995 1600 1695  419 2900  578  321\n[87529]  333   65  257  342  703 5712 1280  417 2593 1638  133  320  876 2913\n[87543] 5207 2840 3778 1947 3199 3359 2187 2459  409  421   83 4187 1801 1639\n[87557] 5797 2154 2280 2347 1564 3340 1231  488 5795  211  407 3388 1767  428\n[87571]  847 1139 2595 2302 5796   95 1268 2152   27 3611 2904 4284 1064  145\n[87585] 1242  477  181  375 3806 2938 1498 2946 1177 4276 2156  167  575   45\n[87599] 5259  413 1880 3365 1721 1692  226 1705 2389 1729   67   89  415 2949\n[87613]  291 1519 1819  199 2942  169 2806 4684  256  884 4100 1119 2189  377\n[87627]  918 1734  193  434 1327  359 1185 1982  509  643 2351 1109  629 4495\n[87641] 3416  135 2918  177 2580  287 1131 1284  221 1195 1935 6054 3527 1480\n[87655]  423 1554 4511 1619  541  283 2922 2370  525 1775 1104 1321 1013  997\n[87669] 2927 2019 3044 1942 4576 1410  426 4136  119 1407  356 2945  681 2331\n[87683]  400 3301 1289 1022 1161 1585 2231 1637 2954  527  669  753  438 4580\n[87697]  183  362 1518  431 1038    5 2391  341 2202 2147 4572 3357 2139  464\n[87711] 2917 2065 2789  235 2960 2594  866 2042   29 2923  711  389 2193 1029\n[87725]  561  325  425 1587 2379 4144 4687 3526 2933 2159  693  687 1053  195\n[87739] 1843  460 4640   21   71  309 1211  448 3573  894  201 1495  237 1078\n[87753]  345 1485  507 2537  442 5769 5302 1346 2908 2149 3069 4215  161  225\n[87767] 4352 4695 2039 2928 5147 1128  263 1611 2195 4711 2911 1526 4171 3486\n[87781]  654 2437  883  485 2960  926 1751 2131  708 1730  689   65  427  435\n[87795] 3535 1703  691  234 2907 2590  363 1651 1269 1201  359  436  360 2958\n[87809] 2314 1224 2959  587 1464 1117 3257 3604  418  523 1205 1631 3530 5714\n[87823] 1147 2931 2599 1295  153 3494 3691  543  415 2197 2162  105  775 1247\n[87837] 5287  314 1677 4131  327  803 4300  371 4191  168 1271 2164   97 3374\n[87851]  994 3621  377  698 2160 5451 1682 1039 1435 1710 5268  455  705 1715\n[87865]  736  308  915  152 4321  702  527 2680 3811 3819 1854 5311  108  234\n[87879]  718 3660  185 4700  447 4885 2002 1159  499 4088 4224 1816 5079 4672\n[87893]  695 1503 2906 2912 2915 2943 3357 3323 3340 3493 3312 3445 3681 4218\n[87907] 4033 4065 4274 4277  343  325  327  388 1193 1156 1160 1171 1185 1691\n[87921] 3508 3513 2488  199  271  299  305  971 1171 1174 1875  507  781 3810\n[87935] 3845 3848 4085 4091 4101 4103 4113 4202 4204 4292 4294 4299 4175 4179\n[87949] 4312 4333 4377 4382 4397 4410 4411 4421 4543 4502 4596 4361 4368 4625\n[87963] 4565 4567 4705 4880 4702 5208 5220 5245 5189 5199 5293 5298 5314 5373\n[87977] 5711 5713 5599 5601 5678 5736   63 1070 2876 4119 4133 4141 2839 2793\n[87991] 4667 2963 2815 3202 3216 3281 2868 3566  172  144  707  721 2885 3771\n[88005] 3230 3231 3384 5273 5274 5337 3404 3493 3501 3386 3391 3461 3466 3473\n[88019] 3478 3669 3670 3674 3675 3553 3565 3572 3748 3689 3734 3591 3603 3616\n[88033] 3349 3361 3370  635  866 1048  273  429  431 1711 1843 2142 2144 2146\n[88047] 2148 2158 2175 2177 2179 2191 1503 1895 1012  559  939 2134 3817 1833\n[88061]  301 2243 4150 1153 1919  731  303 1212 2167  371 5747  583  605 6177\n[88075] 1403 4393  485 1989  288   16 3550  404  479 4714 2180 2810 2052 1611\n[88089] 4448  929 5716 4122 2085 1099 4334 3599  303 5791 1454 1175  601 4161\n[88103]  525 1148 1686  575 1121 1360  398 4993 3769 1899  478  675  318 2493\n[88117]  399 1263 1627 2136  305  681 2169  905  472 1539   23 2275 2285  430\n[88131] 1246 2421 4099 1879 2702    3 4155 1547   15 1352 1077 2279  831 3547\n[88145] 2606  904 4424  424 1190 1345  390 4166   11 1975  677  183   29   20\n[88159] 1289 1455  461 4297  885  700 2935  307 4233  327  450  163  440  807\n[88173] 3066  936 2395 4125 1216 1111 1307  279   33  874 1115 1592 1289 2457\n[88187] 2138 2171 1717 4364  398 2809 1733 2932   59 2267 1418 2017  382  425\n[88201] 1511 2190  331 4407 2924 4111 1456 3531  561 4691 1783 2087 2596 4419\n[88215]  281   84  409 2916 2921 1831 1273 2912 4537 3272 3433 1626 2119 3363\n[88229] 3370 2937   27  443  517  914  433  219 1025 3815 4628 4409 1496 5463\n[88243] 1043 4213 4945 4638   15 1643  313 4137 2071 3478 1581 1025 2173 2280\n[88257] 1296 2140  189  422  795  586 3528  594  970 5220  685 1634 2047 2444\n[88271] 1701  397    1  208 1668 1030 2335  161  653 2901 4065 1747 1085  407\n[88285]  223 3419  652  373 1170 4276  199 2166   51 5337 1885 3565  653  116\n[88299]   15  876  446  317  251 1160 5796  271  483  160  403 1223 5814 3644\n[88313]  275  469 4548 2175 1847 2142 1110  411 2319 5208  673    5  181 1183\n[88327] 1711 4060  297  788  380  218  893 1174 3675  604  642 3466 3572 3493\n[88341]  325 4255 4495 3611 1131 2083  518  925  187  679 2926  420 4284    1\n[88355]   23 1611 4711 4274 1599   19 2602  179  838 5736  457 2144  509 1869\n[88369]  309  499 2177 4187 4662 2906  971 1647 4422  507 4633 1439 5599 1250\n[88383] 1143  274 1268 2876 5309 3281 4511  249  707 4880 4679 5273 1875 2219\n[88397] 1442  327 2098  342 2885 5245  323 3689 5711  172 1180 2146  423  316\n[88411] 5611 2380 2069 2179 1685  766 3312 1785 3404 3616 1129  488 3508 3461\n[88425]  483 3566  388 1947 3806  406  127  252   63 1297  332 2902 3230 3340\n[88439] 4118 3361 4292 1697 4141 1357 5795 3670 1131  178 1318 1663    3  411\n[88453]  998  565  654  439 2181  432 1734 1843  165 1428 1605  144 3388 1280\n[88467]  652 5207 1386 1498 3825 2868 6054 3386  802 1641  331  553 1639  505\n[88481] 5797 2402 1880  308  431  456 4104 2789 4567 1623 1054  117 5259 1779\n[88495] 1802 3340 1164 2517 3305  118 1178    3 2183  643 3311 1269  213 1583\n[88509] 2150  781  651 4434 3795 4687 1200  686 2247 4395  256  927  586 1373\n[88523] 5712  301  273 1205  575 2918  561  581 1256 3588 1493  286  541 4181\n[88537] 4596 1070 1819 4171  841 1902 1995 1554 5199 1231 2815  325  721 2152\n[88551] 1073 2297  429 2903 2938  761 5713 3202 1232  454  477 3425 1186 2347\n[88565] 3199 1327 1270 1171 2285 3527 2181 4144  145  673 3416  287 4136 2793\n[88579]  333  419 4396  745 3391  703 2185 2003  341 1982 4576 3669 1600  471\n[88593]  330  417   85 1695 1048 2840   83 1638 2907 4580  516 3231 1155 2593\n[88607] 3493  133  377 1801 1705  409 1935 2927 1729 2459 1572 1587 2280 4572\n[88621] 1843  847 1410 4299 1767 2900  578  211  375 1942 2187   89 5601 2913\n[88635]  428 3748 1775 4215 1117 2595 1139 1161  681  629 2904 1242 1619   27\n[88649] 2231 2917 3357  573 1064 2806 1284 1692 3072  343   95  477 5293 3734\n[88663]  884  181  423 1177  283 1734  918  413 4695 2922  167 2302 2156 2189\n[88677]   45 3044 2960  753 3365 1721 2389 4377 3530 3216 2379 1195  431 1119\n[88691]   67  415  309  257 1585  221 1289 3771  256 3301  407  525  689  509\n[88705] 3778  258  359  687  434  507 3526 3359 3357  199 1407 1185  356  193\n[88719] 2949 1518  894  135 2351  345 1321  527 1104  299  177  237 1211 2191\n[88733]  997 2158 2147  172 2370 4702  400 2933  691 1022 2019  587 1013  421\n[88747] 1053 1611  426 2042  447 1038  305 4218 1519 2331 1637 1751 2013  438\n[88761] 5678  669 5274  425 2954  442 1416 4276  359  866 4382  360  708 2908\n[88775] 2202 2065 4502  201  362 3513 4300  263 2391  485  183  235 2139 1710\n[88789]  195 2160  169 2943   29 3501 2928   21 2594 1128  435  325 3486 2159\n[88803] 1109 1730 1078 5769 5287   71 3535 4033 1526  448 5268  119 1485 3069\n[88817]  161 2537 3674 2958  711 4640 4361 5079 1727  543 3691  363 1715 1854\n[88831] 1346 1480 2925    5 1271  234 2911 2193  225 2162 2314  695 2951 1147\n[88845] 3573 2131 1225 1703 2195 2931  415 3349  883 5314 2960   65  427  152\n[88859] 3591  803  693 3445 2839  371  418 2590  308 4191 3494 4543 1651 4131\n[88873] 1464 4370  168 1201 1224 3681 1435 1205  915 3603 2039  436  460 3604\n[88887] 4368 4224  523 1667 3374  926 1029 2197 2905 5451  314 2164 3819 1159\n[88901]  775 1247 4321  226  153 1071  291 2437 4885  499 1682  389 2914 3384\n[88915] 4106 2580  105  327 1677   97  340  994 2680 4397  185  377  702 3810\n[88929] 4088 3473 1466 1295 3660 1371 5311 4091 3525 4625 4512 4204  486  234\n[88943] 4333  736 3848  527 5298 2002 1816 4277 5714  718 3845 4421  866  108\n[88957]  705  839  745 2915 3335 4268 4270   65  320  300 1103 1107 1121 1193\n[88971] 1205 1151 1156 1171 1185 1381 1691 2488  383 1139 1143 1145 3811 4085\n[88985] 4087 4100 4103 4113 4195 4202 4294 4175 4179 4312 4411 4552 4504 4352\n[88999] 4565 4705 4684 4700 4522 5147 5189 5302 5373 5901 4119 4133 4667 4672\n[89013] 2963 3257  343  418  522  785 3407 3621 2148 2154 1503  839 4348 1014\n[89027] 2243 1204  939  303  371  731  301 1175  904  858 4688  377 5747  883\n[89041]  281 1403  601  482  583 1899  479 2180  605 3307  950 2951 1951 3848\n[89055] 1099 4533  303 1611 2085 1205  929  575 1299 1162  525  398  675  596\n[89069] 2493  318 2421 1263 3825 2275  305 2285   23 1547  905  430 1879  399\n[89083]  331  472 2702 2279  806   15 6177 1345  677    3  183 2020 4118 4559\n[89097]  461  874 1044 1997   11 2339  307  885 4297   29  440  807 1456 2935\n[89111]  163 4571  327 1717  244  936 4140 1511 1216 4240 1733  425   84 1848\n[89125] 2924 1273 2017 2395  561 2047 2190 1357 1455 2932 2267 3605  255 2916\n[89139] 1783 3531 1289  665  281 2596 3370  409 2119 4380 3272 1831  443 2937\n[89153] 2901 1506  407 3915 4565 4234 3363  219  433 3066 3407  313 4638   27\n[89167] 1170 2926 4409 3419 1025 4388  375 4122 2921 1307 2942 3478  795 3815\n[89181] 2173 1682 2280  586 1747 1701 2444  970  711 2335  354    1 3565  181\n[89195]  524  208  422  161 2912  497  509  251 1223 1030  407 3475 1924 1519\n[89209] 1903  199 4714   51 1144 3943 2906  653 2098   15 2516 1160 1885    5\n[89223] 5177 3528  348 1634  673  483 2142 5337  411 4255 5711 3675  855 3572\n[89237]  469  471 1110 1257 3256 4945 2319 5736  254 1174 3466  251  403  604\n[89251] 5814  418  642    1  187 4155 4495  518   19  925 1131 1842  179  407\n[89265] 2602 1232 4548 1875  271 2046 4246 2177 1085 1687  971 4628  499 3917\n[89279] 1647 3230  420   23 2579 1869 1059 3537 1479 2876 1685 1161 2278 4679\n[89293] 2219  249 2457  703 5599 4445  327  388 2009  323  258 1224 3616  251\n[89307] 1775  586 1442  725 3827 2146 2380 3404 4567 2902    3 5309 3588 3386\n[89321] 3670  316 1129 1143 3361 3461 1697 3848  127 1386 4552  687 4214 3455\n[89335] 4233 2375 3388 1318 2181  423 1863 1256  673 6054  165  300  228  781\n[89349]  411  553  421  701 3944 1420  802 2789 1639  323  505 4434  456 1676\n[89363]  431 1164  308 4064  383 1401 1779 4111 4459  234  178 1151 2048 4395\n[89377] 4087 1631 3340 1073 1451  117 4171  686 2247  118 1131 3705  488  587\n[89391]  561 1571 1611 3588  927 1296 1109 1373  301 2181 4181 5713 1819 4633\n[89405]  439 1902 2918  997  286  581 4148 1171 1995  287  841  477 1554 3416\n[89419] 2152  213 2946 2285 2297  325 2815 1155 3359 2003 3391  454 3072  236\n[89433] 2347 3669 2903  685 3202 1837 1327 4572  320  343  145 2938 2944  703\n[89447] 2793  333 3425 4144  573  419 2840 5677 2889 4502 1186 2941 1270 1200\n[89461] 1600 4381   85 1942 1778  424 1593  624 2008  559 5803 1695  257 1410\n[89475] 2062  133 2927 4146 5275 2900 3639 4393 3231 2396 4412  221  409 4580\n[89489] 1587 1403  407 2280 1298 2917 1729 4150 1424 2963 3199 1177 2913 1117\n[89503] 4352   83 1619 1982 1161   95  428 2595 2302 3805 2231 2904  343 2933\n[89517] 4687 1730  210 3216 4227   27  181 4702  423 1518   89 1734 1801 1178\n[89531] 3044 1171 2389  413   45 3501  172 1435 3530  708 1199 1854  632   67\n[89545]  575  894 3365  283  753  918 1119 1585 1284  512 2949  291 2580 4121\n[89559] 4202  199  507  211  437  256 1185  359 1843  493 2351 3486 4292 4161\n[89573]   23  135  299  535 4191 5712 2907 3806  866 2147  926 4437 1127 2019\n[89587]  415  360  119 1611 1526  352 1022 4131 2500  426  305  214 2331 1075\n[89601] 1873 4128  201  183 3810 2954  479  442 2911 2202 2379  438 1047  931\n[89615]  425 2391  237  263  235  711 2923  252 2908 2594   21 3473  327 2581\n[89629] 1805  435 1029 2943    5 2958  394 1416 2159 1631 2437 2959 2070 5714\n[89643] 3591   71 4318 1692 2960 5769 2925 4361  414 1271  460 3535 1480 3374\n[89657]  803  225 2314 1482   65 1201  883 3813 1611  153  418  915  436 2914\n[89671]  523  427 1205   97 1295 2599 5079 1409  105  499 4700 1071 1371 3621\n[89685]  527  702 1677  705 1066  234  486  108 1816 2002  745 2915   59   65\n[89699]  185 1103 1107 1111 1121 1623 1599 2488  116  543 1223 4629 5716  385\n[89713]  573 4700   21  839  702 4625  745  108 1545 2243  371 1955  904  605\n[89727]  939 3820  583 1668 1175 4164 1403  601  400  288 1989 5716  479  929\n[89741] 1611 1205 1153 1099  525  385 1925 5791  478  675 1299  318 2275 1107\n[89755] 1879 1571 2285  905  430   23 1547  472 2493    3  331 2421  399 2702\n[89769] 2279 1077  831 4166  390  559   29 1975  245  424 1345 1263  677   20\n[89783]   11 1455   33  461 1289  885 4297  450  163  440 1111 1717  398 2935\n[89797]  307 3066  354 1216  936 1307 2395 4548 2190 1592 2047 2457 3531 1115\n[89811]   84 1511 4364 2916  821 2924 2932 1273  398 2267 1733 3528 1357  425\n[89825] 2017  561 2596 1783  281 4213 2087 4250 3370  409 3272 3363  821 2921\n[89839]  443 2901  517 1206  305 4422  509  914 4537  219 2119 1626  433 4711\n[89853] 4945 4087 1025 3419  313 4629 2912  795  681 1257   15  997 2335 4276\n[89867] 3478  970 3565 5231    1  189 1149 1121 1747 1701 2444 4357 1634 2280\n[89881]  422  651 1030  181  653 1643 1289  208 3815 1246 1085  275 1162 2906\n[89895]  199 1885 3085 1739  407 2926  271  807  223  116  248   51  876 2937\n[89909] 4714  317  251 1160 5856   59    5  483  160 3579 3644   15 3675  218\n[89923]  417 1847 1519 3572  469  411  325  281 2017 4534 2319 1110 1170  403\n[89937] 3493 1174  279  604 2083 3466 6030  179  838 4255 6181 1591  925  420\n[89951] 5711  679 1183  187 1735    1 1599  642   19  971   23 3689 4880  457\n[89965] 4284 4374  499 2177 1647 5273 1869 4679 3475 3230 1250  507 4233 2098\n[89979] 5017 2602 5309  405 3312 1143 1875 2009 1131  703 2219 1623  518 3281\n[89993]  327  388  249  172  323 3566  779 3616 1180    3 2876 2146  316  488\n[90007]   63 1973 2380 3404 2179 1785 5373  423 1685  766 4099 3508 2085  483\n[90021]  437 5796 3461 1297 1129 4225 5611  471 1386 2639  127  216 3340 3996\n[90035] 5795 1318 1131 3361 3311  144  178 1947  998 5797  691 1280  781 3670\n[90049]  788 2181 4141  165 3825  300 4118 4088  553  439  383  411 1663  802\n[90063] 1641 1605 1843 1639 2868  331  431 2402 5948 4567 1143 5189  456 1998\n[90077]  308 4434 4104  505 4395 2789 3795 4687 1401  431 1054 1145 4552  117\n[90091] 2517 1802 4175 5259    3 3388 3340 3526 1835 1073  643  213 3305 1627\n[90105] 1164  927 1373  520 2150 5207 1583 2183  673  561 4171 1070 1232 3588\n[90119] 3527  686  575 4111 1902 4133 1200  118 1296 1819 3386  581 4596 1151\n[90133] 1171  841  785 1995  286 4346 4181 3416 2918 3199 2285  477 3391 1270\n[90147] 1452  721  340  301  703  454 3669  761 2297  325 2181 2347 4144 2903\n[90161]  287 1416 4572 3359 2247 2185 1327 4155 3425 3493 1048 5302  745 1155\n[90175] 2840  377 1231 1697  257  394 1734 2907 2938 2003 3806 4580  341   83\n[90189] 1982 1942  333 1256  573  417  432 4502 1729  419 3553  608   85 1935\n[90203] 1554 1767 2900 4576 4377 4667  133 1695 1410 3778  594 2459  145 3072\n[90217] 1177  421 2154 1023 1638  409 2280 3734  407 2593 5275 1117  375 1098\n[90231] 1195 1843  847 4352 5601 4431 1262   89 1161 1705 5293 2927 2595 1139\n[90245] 1442 2917 2231 3044 1611  681  211 4702 1242 2315  629 2042   27 1171\n[90259] 1779  181  423 1734  221 2379  172  167  477 1721 3357 2389  894  415\n[90273]  753 4640  397 4684  413   67 2922   95 1104 2904 1518 4215  359  527\n[90287] 3526  237  687  193  507  434 1519  169 2488 1185 1119 1585 1284  356\n[90301]  135  177  509 1022 1289 2351  299 2580  305 3530 2960  535 2147 4218\n[90315] 4662 4091 2158 2302  918 1185 1600 3216 2370 4131  258 3301 1109 1407\n[90329] 2019 1611 2366 4349  283 1221  119 2331  884 1013  669 1751 1801 5268\n[90343]  343  926 2839 2945  425  389  652  201 2954 2391  195 4705 4411  442\n[90357] 1211 1321 3591  183 1637  360  418 2908  263 4382 2039  435  587 1053\n[90371] 3748 2202  426 1587 2598 1854 5314  708 3349  460 1064  543 2159  255\n[90385] 1715 3069  400   71  448 2193 2911  866 2065 3535 3573 5274  693  225\n[90399]  327 2949  362  438  359 2594 3674 1435  497    5 2437 4370 3374 1078\n[90413]  866  485 5287  711  325 1730 2537 1346  377  883 2187 4204 1269 1128\n[90427] 3486 2139 3501 2925 2931 1703 4224 1271 3603  161 4300 2162  803 4361\n[90441]  308 3445  455 1526 2960 1651 1667 4100   65 4516  152 5079 2164 3513\n[90455]   29 1485 2958  915  153 1682  436  427 4543 4119  523 4312  994 1205\n[90469]  689 2599 1159 1147 1247 2131  314 1677 3660  499 3819  363 3810 1692\n[90483] 1071 1464   97  415  185  527  418 4191 4672  371  695 3494 3384 2943\n[90497] 2590 1482 5298  168 5451 4278 3473 1201 3848 3681 3525 4421 5311 1295\n[90511]  775 4179  486 4333  705  234 2680  234 1816 2002 3257 3621 1224  718\n[90525] 4106 1371 4695 1503 2913 2914 2915 2928 2946 3335 3941 4033   45   65\n[90539]  256  199  291  235  345  320 1029 1156 1691 2314   27  105 1223 1619\n[90553] 3811 3845 4085 4103 4113 4195 4202 4212 4294 4299 4321 4565 4885 5712\n[90567] 5714 5678 5956 5769 6054 5940 2793 2963 2815 3202 3771 3231 3604 3357\n[90581] 3365  358 2048 2173 2189 2191 2195 2197 4565 4101 3810  745 1895 1012\n[90595] 2243  939  559 1833  371 2134  605  731 1716  303 2167 1175  583  301\n[90609] 4268 1403 4714  601  485 1205 3550 1989   16 1153  840 2180 4270  288\n[90623]  300 2085  303 1611 3599 1099 4122  525 1454 4393 2810 1360  575 4161\n[90637]  398  929 1299 1121 1148  675  371 3769 1627 4334 1107 2493  904  318\n[90651] 1162  430 2275 2136 1879 2285  305   23 4099 2169 2421 1547  905  472\n[90665]   15    3 1190 2279  399 1212 3817 1352  478 2702 3547 1439 1077  831\n[90679] 4522 5791 2606  677 4424  424   29  461 1975 1345 1289 4166 4137  183\n[90693]  652   33  450   11 2395   20 4297 1455  807 1717  307  163  440  327\n[90707]  885 4233 1307 1511 4155 2935  936 2190 2916 1733 1456 1273  382 1216\n[90721]  279 2457 2017 1115 1289 2171 2809 3066  331   59  874  397   84 4111\n[90735] 1357 2047 5463 1592 2932 2052 1919  561  281 2596 6177  398  390 2267\n[90749] 3528 4691 3531 3370  409 1626 3407   27  517 4419  443 1043  509 3433\n[90763]  219 3419  914 2119 2924 1783  433 2901 1025 2071 4213  490 2912 1496\n[90777]   15 1643 4087 4548 4638 3363 1296  970 1747  701  404  313  189  422\n[90791] 5220 2140  795 2173    1  586  651  594  161 1701 4422 1121  181 2921\n[90805] 1030 1142 1668 1634 3565  275 5337 1581 1263 2335  653 4065 2926  223\n[90819]  199  685 2280 3272 1170  373  407 3478 2906   51  446  271  653  425\n[90833]   15 4274  251 2166 1831  876 1160  317 1885 1223 4628 4060 1025  403\n[90847]    5  469 2142  411 2175 1183 2319 4409  673  116 1110  258 5208 1298\n[90861]  160 1174 1711  218 1847 4407 4945 3675  642 5814 4255 4125  483 2083\n[90875]  893  407  925  187  420  578   19 3466  312  179    1  838  325  518\n[90889] 4495 4150 5711 4187  418   23 1599 1591  457  499 1869  507 2177 4662\n[90903] 1151 1647 4537 5599 3230 5273 1250 5736  274 1139 2098 4711 1143 2876\n[90917] 1623 2219  208 3611 1875 3644 3689 2602 3312  249 5309  707 2144 5373\n[90931]  388 2885 1442 3281  327 4880 1180 5796 2179  323 1685 1268 5611    3\n[90945] 1129  423 1785 2069  971 4276  565  316  488  497  766 1297  483 3616\n[90959] 3815 3461 2380  604  406  127 1947 1697  252 3493  703 4679 3508 2902\n[90973] 3670 3311  172 3361 1145  998  308 2148  411  383 1734   63  432 1280\n[90987]  439 1256 1605 2181 1428 1386 1663 3566 1639  781 2868  331 4284  802\n[91001]  456 3795  553 4118  505 2056 1085 1131 3404 2402 4395  332  165 1779\n[91015] 5207 4567 3386 1802 3340 1164  117 1583 1073 2517 4104 2789  178 1880\n[91029]  927 2183 1149  652 3340  144 1641 2247 5245  686 1232 3588  256  575\n[91043]  308 3388 3305 1902  586  301 4687 5901 1819 1493  213 1205 4181 1554\n[91057]  841  431 1231 1318  325  286 5259 2297 1198 3527 2003 1155  273  454\n[91071] 3669 1070  541  673 2903 2285  643 2185 1373 1327 1995 2815 3359  745\n[91085] 1270 3202  761  703 2181  477  419 2913 5797    3 1611  320 5199 1186\n[91099] 2938 3231 3072 4434 4396  516  257  118 3553   85  145  417 4552  321\n[91113] 4377   83 1589 2152  341 1048 1775 1935 5712  377  429 1695 1200 1638\n[91127] 2793 3199 1410 1054  287 2900 2187  561 1801  409 3391 2459 1171 6054\n[91141] 3425 2280 4136  133 1572 1705 4572  407 5713  847 1843 1587 2907 2593\n[91155] 1619 1692 2595 1139  581 2231 1242 2347 2154 1729 4580 4215  428 2917\n[91169]   27  884 3044 1284 1178 3493 1161 1171  573 2922 2963 2806  338 4511\n[91183]  343 2379  167 4292  413 4576 1721 2389  471 1767 1942   45 2156 2840\n[91197] 2904 2302  421 3301 1734  211 1117  477  753  226  199   89  423  291\n[91211] 2918 4276  509   67  359 3748  525  283 2933 4300  345  221 3734 4171\n[91225] 4684  237 2927  918 1119 4091 1109  721  632 4667 3335  415 5601 2189\n[91239]  177 3771 4299 3365  997  333 1519 2158  587  172  527  256 3778 1177\n[91253]  510 1013 1600 2351 1211 2019 1038  426 3526 1518 1611 1407 4705 2147\n[91267] 5293  464 2191   95 1185  309 2331 2013  362  669  183 2370 1022 2915\n[91281] 1585 1982 3216 1104  689  447 5678 3357 2202 5302  389  359  442  135\n[91295]  356 3530 2042 2139 2391 3825  305  866 2065  375  181  431  263  691\n[91309]  894 1615   29 4352  235  435 3501   21 2594 1193  711 1053  438 3591\n[91323] 2193 2070  119  169 1321 4411 2159  195 1095 1691 1618  325 1485  193\n[91337]  654 2160 3573 1195  708 1435   71 5147 1269 2537  201  693 3349  299\n[91351] 4502 2931 1128 2928 1854 5274 2958 4033 2911    5  225 2131 2195 4382\n[91365] 3535 3486 2314 1029 4202 3513  415  234 2162 2960 2590 2839 2959 4191\n[91379] 4218 4321  153 1710  371  427  803 2437  883  507 1703  915  400  436\n[91393] 1201   65 3674 1495 4370 2943 2925  360 2908 1289  363 1464  327  485\n[91407]  523 1715  543 1205 1651  314 4397 2914  775 1247 5314 3603 1346  455\n[91421] 2599  418 1730 4368 1147 2960  475 1271 3473 1667 2164  377  695 3621\n[91435]   97 3257  926 3604 1677  185 3069 2680  527 4700 3681 1295 4512 1682\n[91449] 3445  168 1224  702  736 4179 3374  866 4543 3691 1039 4885  499  705\n[91463] 5287 5268  486 5298 5451  105 3660 4106  460 1159  994 3384 4672 3494\n[91477]  108 4113 4224 4361 2002  718 3845 4131 5311 5079 1371 4085 4088 3848\n[91491]  234  839 1503 1816 3525 4277   65  300 1103 1111 1131 1151 1156 1185\n[91505] 1381 2488 2580 1143  448 3806 3811 3819 4144 4100 4103 4195 4204 4294\n[91519] 4175 4312 4333 4421 4596 4364 4625 4633 4695 4702 4993 5189 5714 5716\n[91533] 5747 5769 5795 4119 4133 4141 4640 2949  152 3416 3572 3357  681  343\n[91547] 2138 2146 2150 2197  745  839  108 1503 1895 1014  525  939 2243  371\n[91561]  583 1153 2167  301 4150 6177 1716 1833 1175  731  904  605  303 4268\n[91575] 1919 1212 4137  485 4471  601 1403   16 4270 4393 1989  482  840 1205\n[91589] 1099  404 2180 2810 1299  929  575 1360 1627 4122 1454  479 5791 3599\n[91603] 1148  339  525  303 2085  478 1121  675  398 4424  785 1107 4993 2493\n[91617] 3550 1263 2275  399 2421  430 2136 4155 2169   23 1668    3 1879 1190\n[91631]   15  905  343  305  472 2279 4522 1547  318  831 2702 3547  681 2606\n[91645]   11 1077  677  424 1345  340 1975  390  461   29 4233  183 1289 1455\n[91659]   20   33  885 2935 2395  450  440  163  807 1717 3066  936 1592 1511\n[91673]  307  382  874 2267 2457 2138 2017 1216 2932  398 1273 2047 2254 2809\n[91687] 1115 1733 2190  425   59 2916 3528  279  397  327 4407 1783 2921  281\n[91701] 1307  559 2596 3272 3363 2052 1357  219  433 3433  409 2119 4945  331\n[91715]   27 1025 4422 3419 4419 2926  443 2071 1296  795 3407  313   15 1496\n[91729] 2280  997  561  586 1121  517 4087 3478 1626  509 2335  189  208  651\n[91743]  161 1162  422 4409 1634 1701 5220 1030  653 1456 4169  914  970  407\n[91757] 1025 2906  223  199 1289 2166 5463 5337 1747  116  181 4186 1831 1223\n[91771]  483 4510 2142  446    5  271  469  403 1170 1711  251 5736    1 3493\n[91785] 2319   15 4065  518 1885  642 2083  187  604 1085 1131  838  673  893\n[91799] 3644  420  411 4255 4284  160  407 5711 3769   84  876  418 2901   23\n[91813]  676  499 1043 2444 4662  507 4679 4880 1110 5599  971 1711 2602 1869\n[91827] 1183  457 1174 2098 1875 1139  703   19 4628 1143  274 1623    1 1180\n[91841]  179  423 2179    3 2876 2069  766  316  323  249 1129 3566 1143  497\n[91855] 1297 3361  325 4292 1386 5309 3386  406  218 1131 1785  565 1847  432\n[91869] 1697  165 1145  411 1663 2181  383 1734  439  505 6054 1250 1256  652\n[91883]  998 1318 1639  456 2219 1947  312 1641  553  275 1605 2146  781 1054\n[91897] 3311 1151 5208    3 1071 1685 1200 1779 1583 2150 2402  117  460  172\n[91911]  426 1073  673 1571 4171 2247  213 2517 1205  541 1401  273  431 1198\n[91925] 2918  286 1231 1070 1554  325 1164 2003 1232  575 1270  841 1155 3391\n[91939] 4434  454 2902  703  331 2793  118 3231 2903  145 1373 4377 1611 1186\n[91953] 1280  578  320  419 3359 1493 1942 2938  257  927  308 4502 1982 1600\n[91967] 1705 1767   83 2152 1638 2297 2347 2593  287  417 4684 1695  409 1587\n[91981] 2459 5373 2913  477 4572  342 1410 2815 1935  377  847 1564 1801 1843\n[91995] 2806 4580 1156 1631  407 2595 5199 5611 1117  428  581 3778  375 2154\n[92009] 4187 3044 1775  423 1178   85 1242 2922   95  343 1819   27 3357 2280\n[92023] 1139 2907  301  477  745   65 5713  421 2927 2181  181 2042 1734  516\n[92037] 1619  283 3357 2389 3932  356 2156 1518 1721  221 5147 2900 2379   67\n[92051]  333 1585  689  512  415 1729 2189 2488 1284  884  413  305  237 2231\n[92065] 2917 1185 4576  527  359 4300  573 3526  431  761  133  135 3365  594\n[92079]  172 2933  305  177  753 1177 4144 1161 1109  400 3216 2147 2963  708\n[92093] 1710 3486 2158 1022 1321  918 2013 1013 2019  426 1692 2839 1053  299\n[92107] 2580 1119  926 2949 3501  345 2191  256 2351 1618 2331  438 1635 3674\n[92121]  359  235 2943 2391 5274 2915 4131  485 1195 1127 2070 1407 1128 2139\n[92135]  119 1495  456 2960  235 2302 2594  435  442  325  693 3349  258 2908\n[92149] 5268  587 2159  460 3691 2370  535 2928 2911 1611 1854 1078 3591 2193\n[92163]  201 2959 5714 2931 2437   71  377 2202 2958 1211 4543 1485  866 1193\n[92177]  183 1435 5769 5079  711 2160  225  543 3603 2904  263 2537 1346  234\n[92191]   21 1185  507 2131  389  866  195  360 2162 1498 1147   29  654 1526\n[92205] 2195 1715 4368 2590  427  363  153  371 3535 1271 4085 2925  883 1651\n[92219] 1224  436    5 1519 2314 2914 1201 3604  523 4512 1159 1205  168   65\n[92233] 1464 2960  803 2164 2197 3257 3473  418  226 3384 3494  314 1667 1247\n[92247] 1371 5298 1691 2599  415  152 5287  308 1677 5451  705 1682 3621  185\n[92261]  499 1703 4516 1416 1295  702 4179 4277  736  994 2680  471 5311  234\n[92275]  327 2070 3819 4885  486 5846 1225  527  718 4462 1816 4370 4119 2002\n[92289]  105 2912 2937 2942 3527 3445 3681 3843 4213 4215 4218 4033 4060 4274\n[92303] 4276   45  178  199  291  211  341  317  327  300  388 1103 1111 1029\n[92317] 1171 1327 1381 1599 2285 3513  127  561 1171 2380 1442 1647 1151 3260\n[92331] 3806 3810 3811 3815 3817 3818 3825 3845 4091 4099 4100 4104 4106 4111\n[92345] 4113 4195 4202 4204 4224 4294 4297 4299 4161 4166 4175 4176 4181 4191\n[92359] 4312 4321 4333 4334 4382 4395 4411 4421 4511 4548 4552 4495 4596 4352\n[92373] 4361 4364 4625 4565 4567 4711 4714 4633 4687 4691 4695 4700 4702 4536\n[92387] 4537 5207 5245 5259 5189 5293 5302 5712 5716 5601 5747 5678 5797 5795\n[92401] 5948   63 4118 4125 4129 4133 4141 2840 2789 4640 4667 4672 3072 3199\n[92415] 3202 3281  169  193 2868  332 1289 1428  483 1352 3069 1104  144 1880\n[92429] 2885 3771 3230 3374 5273 3340 3404 3425 3493 3388 3530 3531 3301 3305\n[92443] 3461 3466 3669 3670 3675 3553 3565 3572 3573 3660 3748 3689 3734 3588\n[92457] 3611 3616 3370 1246 1681  252  256  297  429  488  643  646  652  685\n[92471]  691  700 1048  686  707  721  802  894 1802 1995 2056 2134 2140 2144\n[92485] 2148 2171 2173 2175 2177 2183 2185 2187  632 1895 1014  440 2243  939\n[92499] 1103 5716 2134  731 2167 1175  371  904 1716 1919 1833  301  583  303\n[92513] 1668 3817 6177 5747 4137 1153  601 1403 4334 3550 4199   16 1701 1989\n[92527] 1899  479 2180  485 1099  929 1360  303 1454 4393 4122 2052  525  575\n[92541] 2810 1148 1299  785 4161 1205 1121  371 4993 1107  675 4150 1495  681\n[92555] 1729  305  343   23  318  905  398 2136 1263 2275 4099 4155    3 2421\n[92569] 1547 1051  472 3599  430 1879 2169 4422 2702 2279 2493 1352 1077  183\n[92583] 2606  831 1456 4233  424 1345  390   29 1975   11 4522  677 4166  461\n[92597]   33  700   20 1381 1289  450 4297 3547 2935  885 1717  807  307 2395\n[92611]  163  440 3066 1111  399  936  657 1511  874  279  331 1455 1592 2916\n[92625] 2924 2809 1115 2138 2457  398 1733 2267 2190 1246 2017 2047 4364  382\n[92639] 4424 1216 2171  425 4548 1273  397 5463  561 1357 1783 3531 4407 2596\n[92653] 4213   59  281 4125 2921 4111 3370 2901 1626 4537  409 2912  914 3407\n[92667] 3272 1043 1307  219 3363 1831   27 4169  443  433 2119 1496 4945 2926\n[92681] 4409 1025 2071   15   84  676 4711  517  652  653 1025  313  795 3478\n[92695] 1643  509 1581 2140  586 2444 3565 1289 1747  685 2173 2335  189  651\n[92709] 5220 1121 1030  161    1  208 1701 3433  970  181  275 1634 5337  653\n[92723] 1296 1085 4419 3301 2932 4065 4691  223 1170  407  271 5814  199 4638\n[92737]  384 4087 3815   51   15 1885  116 2166  876  446  422 3419  317 1223\n[92751] 2906 5796  251 4060  403  483 3644 5208  218 3675 2142 2175 5711  160\n[92765]  418    5 4510  469  411  673  297  472 1183 1711 5736 2319 1110 1847\n[92779]  258 3493  325 4274  604 3466  893 1131 4255  642 1174 3572  838 2083\n[92793]    1  420  187 1611 4284  679 4129  179 1599 2602   23  971 4628 4495\n[92807] 2144 3689 3611  507 4662   19  457 4679 1869 1151 3230 5309 4633 5599\n[92821] 2098 3825 1203 1139 5273 2177 1647 2876 1875 3312 1143  703  707 2219\n[92835] 1623 4880 3281 5373  388 2885  323  172 1250 5611 1180    3   63 2146\n[92849]  766  316 5245 3386 3528 1442 1494 2179  327 2380 1685 1947 3616 1143\n[92863] 2069 2902  423 1129 3670  499 3461 3404  565 1297  127 1697 3806  551\n[92877] 1386 4118 3361  483 5795  497 5797 3566 4141 1663  383  998 2181 1318\n[92891] 1145 2148  178 3388 1280  332 1617 1843  249 4567  300  439 5207 1131\n[92905] 1734  411 1605  652  781  165 3299  456  553 1641 3795 2868  331 6054\n[92919]  431 2789 5846  274 5189 1054 1428  144 4395  802  308  432  380  426\n[92933] 4434 1880 1785 1151 1401 1802  117 5259  288 1583 3305 1023  927 1779\n[92947]  516 1073 3340  686 1639 2150 2183  643 2247 4292 1200  256 4552 2402\n[92961]  118 1571  213 1373  673 1232 2517 5712 4171    3 3588  561 5713 3527\n[92975] 1493 4104 1205 4100 4133 1819  575  541 1070 5199 4181 1554  286 1164\n[92989] 4596  301  429  320  325  841  581 3416 1231 2815 3391 2297 3359 2285\n[93003]  454 2913 2003 1256  703 1171 4175 2938 2347 3669 2152 1155 1995  761\n[93017]  287  721 3072 1186 4113  624  477 2181 3202 1327 2185 1048  745  333\n[93031] 2793 3493 3553  145 1982 3231 2918 1942  342  341 4572 4687 3199  578\n[93045]  419 2907  417 4502   83 4144  377 4576  562 2946  257 1695 1729 3425\n[93059] 1270   65 1156  573  133 3778 1638 1935 5948 2593 2840 2963 2927 4215\n[93073] 2806 2280  409 2459 4580  847 3734 1705 2154   85 2187 2922 2917  375\n[93087] 1767 1410 1801 1492  407 1775 4299 5601 1843  211 2933 1619 4684 1117\n[93101] 2302  421 1587  428 4352 2231 5293 3357 2595 4377 3044 1242 1692  681\n[93115] 1195 2903 2900   95  629 3216 4667  884 3771 3748 1139  477  423 1289\n[93129] 2904 1284 1734 3301  181 1177 2042 2942 1178 3335 1171  413 2389 1104\n[93143] 2379 4705 4640  221 2960 3365 2156  172 1161 1518   45 1721  753  918\n[93157] 1519 3530   67  343  431 2189 2949  689  291  356  512  415  199 1585\n[93171]  701  509  256 4276 1119 3069  525  359 1185  527  687 4294 1185  434\n[93185]  507 1127 5147  193 4202 4411 1321  594 2580  169 3526  135 3811 4702\n[93199]  587 5302  237 4300  177   27 3486  894 4218 2191  299  926  400  708\n[93213]  997 2158 3357  345  360 1211  691 3501 2019 4091 1710 1013 1618 1611\n[93227]  426 5678 2147 3691 1053  119 1407    5 2915  305 2370 2839 2331 2598\n[93241] 5274  201 2013 1751  669 3513 2945  456 2139  442  866 2908 1480  389\n[93255] 2202  438  543  235 1022 2351  183  425  195  235 2911 3591 4695 1128\n[93269] 1416 1854 3674 2193  524 3349 1029 4714 2943  327 2160 5287 2928 2594\n[93283] 1109 2931   29 2958   21 1193  460  263 4511  435  152 1600 5268 1526\n[93297] 2437 2391 5769 3445 5314  359  693 1078 2925  225 1715  866 3573 2960\n[93311]  803  377 1485 2537 4382 4191 4195   71 1435 4361 5714 1225  448 3603\n[93325]  363 1271 3374  711 2131 2159  234 4370  695  325 5298 3535 2195  654\n[93339] 2162 1346  883 1703 4333 2314 2590  308  415  153  427   65 4321 1224\n[93353]  371  485 1147  436 2914 3494 1464 4312 3257  340  168  523 4224 4512\n[93367] 4085 3604 2599 1201 1691 1295 3819 1651  314 2197  105 4543 1247 4131\n[93381] 2039 5451 3473 4368 2164  775 1159 5079 3660 1071 1667  312 1682 4700\n[93395] 4885 3384 4176 4010 2680 4033 3681 1205 3621 1466  527 4204  185  499\n[93409] 4106  994 3848 3810  418  702  705 4119 1677 3845 5311  221 4672 4179\n[93423] 4421 4565  522 4625 3843  234  108  486  718 1816 2002 4462 1503  839\n[93437]  745 3769 4268 4270 2488  283  505  518 1371 2280 2085  839 1503  745\n[93451]  522 1895 1545  559 2243  939 2134 2167 1103 3817 1716  371  904 4150\n[93465] 1833  583  731 4268 4714 6177 4137  485  301 1175  303 1919 1153 1403\n[93479]  601 1205 1989 2180 5716 3550  288   16  332 1899 4270 1454 2085 4393\n[93493] 2810  303 1099 1611 1627 2052  371 1360  929 4161 4122 3599  625  525\n[93507]  575 4334 4424 1299  785  675 1121 3769 4993  398 5747  478 2493  681\n[93521] 1246 1162  305 1263  318  399  905 2285  430 2136 2169   23 2275  472\n[93535] 1547  343 1879 4155 2421 1077 1190    3 2702 5791 1148 1352 2279 4522\n[93549]  831 1107 2606 3547  424 1975  390 1345 1456  677 4233   29  461  183\n[93563] 1381   33   20 4166 1289  307 4297  450 2935 1717 1111  163 2395  807\n[93577]  440 3066 1307  936  279  398 2809 1115 2171  874 4548 1592  425 2924\n[93591] 2017 3531 1216   59 2190  382 2916 1511 2047  327 2267  397 4364  561\n[93605] 5463 1357 4691 4407 2138  490   11 1289  281 1783 4213 2596  409 3272\n[93619] 3528 3363 1831 2912 3370  517 4419 4422 4638 1626 2901 1043  885  219\n[93633] 2457  914 3407 4125  433  509 2119   27 4537 3433  443 1733 2921  594\n[93647]  652 2926 4111 1496 4409 4945 3419 1455 1025 4087 4628  795 2071  701\n[93661] 4276   15 3815 2280 3478 1643   84 1273 3565 1581  586  970 2173    1\n[93675]  685 2444 1747 2140  189 5220 1121  313  422 1025 1030 1701  651  208\n[93689] 2335  161 1296 5337  653 4065 1085  407 1634  181 1170 2906  223  199\n[93703]  373  271 2166  446 1885  116  275  876   15 5796 4274 1223  317  653\n[93717]  251  483  403  160  297 4060    5 5814 3675 2142 2175  469 1160 3644\n[93731] 1110  411 1847 3572 1183 2319  788  325 5711 1174 5736  218  604 3466\n[93745]    1 4255  642  893  518  187  418 4187 4495 3611   19  838  925 2083\n[93759]  420  179 1611 4284   23  679 1599 2602 4711 1869 1131 4679  457 4662\n[93773] 2144 1151  971  507  499 2098 4880 1250  274 1139 3230 4633 5273 1711\n[93787] 2876 3689 1143 1268 3312 3281 2219 1623  249 2177 4511  707  703 1875\n[93801] 2932 5208  388  323  327 5309  172 2885 1442 3493   63  497 2380 1685\n[93815] 2069    3 1647 3566 1947  766  423  565 2146 3404 3386 1785  483 1129\n[93829] 4567 3616 3508 1143  488 5611 3461 3361 1297 3670 2179 1180 1697 4292\n[93843] 3806  332  127 4118  406  252 2902 4141 3311 5795  383 5245  178 1318\n[93857] 3825  998 1663  165 1880 1386 1428 2181  432 6054 2148 1843 3340 5207\n[93871] 1280  316  411 1734 1256 4552 1498 1605  439  781  258 5797 5901  300\n[93885] 1145 2868  380  553 3795  144  802 1641 1131  331 3388 5189 4687  308\n[93899]  273  431 2402 5599 6030 1054 4395 4434 1802 1151 1639  117 1164 2517\n[93913] 1583 2789 3305  516 3340 1416 2150 2183 2247 1073 1779    3 1401 4100\n[93927] 1200 1571 1373  213  256  118  561 4175  673 5373  575 5713 3527 3588\n[93941] 1205 2918  301  927  505 1070 1232 1902 4133  581 1231 1819 4596 5199\n[93955] 1554  586  286  456  320 4171 4136 1493 3416 3199  325  686 1995 2946\n[93969] 3391 3359 2297 2003 1270 3425  841 3202  541 2152 2938 2285 1186  429\n[93983] 3072  761 2181 2903  703  721 4396  287 2347 2185 4144 4181  477  454\n[93997] 1589 1155 1327 1048  333 1171  145 3553  745 4377 3231 2907 5302 1982\n[94011] 1600   85   83 1942  377  257 4502  321 2900 4572  573 1729 2793 2815\n[94025]  417  419  342 5712  578 1767  341   65 2840 1638 4580 1935 1705 1775\n[94039] 2806 5259 4667 3493 2927 1695  421 2154 4276 2963 3734 1801 1843 2187\n[94053] 2459 4684 2922 1195 1587  847 2280  407 4215 4299 1564 1410 2593  409\n[94067] 2913 2933 3669 1117  211 4352 1156 1692 2595 1619 3357 2917  428 1242\n[94081]  629 2904   95   27 3357   89 4294  423 1178 3216 3044 2231 1284  681\n[94095] 3771  343 5601 4705 2302  477 4702 5293 1104 4576 1171 1734 3365  918\n[94109] 1289 4640 1177 2156 2189  356 2942  221 1139   45 2389  413 1744 5147\n[94123]  172 1119 3530 1721   67 1519  894 1518 2960 2379  525  431 1585  226\n[94137] 3323 2042 2949  309  291 4695 3301  181  167  509  652 3526  199  237\n[94151]  464  133  753  507 3778  687  283  415 2488 1185 1109 2351 1185 4202\n[94165]  345 1161  256  305 4300  193  884  587 4411  434 4091 3069 1321  527\n[94179]  359 1211  169 2158  299 2580 2370  691 3513 2019 1637 2191 3486 2147\n[94193] 1038 5678 2065  400 3691 3811 1611 4382  426 2013 1013 4410 1053  119\n[94207]    5 2839 1751 2945  926  708 5274  360 2331  195  362 3501  447  425\n[94221]  359  997 1495 4218  669 1407 1710 3674 3349 2391 4131 2911 3591 1480\n[94235]  485 2908  183  866  177  438 1128  543  135 2139 5268  235 4191 2160\n[94249] 2594 2193 2943 1029 2928 2958 5287  325 4103 2915  435  460 1193 2159\n[94263] 1078 4397  693  263  711 1526  448 1715 3573 1022 3535 5714 3445   29\n[94277] 2925 4033 2437  327 4370 2959 2202 4543  389   21 5314 5769 1435 1485\n[94291]  225  442 1854 2039 2931  375  363   71 4361 5079 1730 5298  654 2537\n[94305] 4312  152 3374  695 2131 2195 2314  377 2162   65 1691 1271 2590  866\n[94319]  803 1346 4088 1224  161  415 1147 4368 1651  371  436  418 4333 1464\n[94333] 4321 2914 3603 2960 3681  168 4204  915 3257  883 4224  234 4512  314\n[94347]  427 1667 4106 1201 1159  153  201 3494 1205 3819 4113 5451 1269 2164\n[94361]  499  455 4010  775 2197 4885  523 2599 1247  308 3384 1682  105 4085\n[94375] 1703 4672  994 1295 3621 1371 3660 2680 1039  185 3604 4700 4625  705\n[94389] 5311  736 3810 4179 3525 1677 4119 3848 3845   97 4421  527 4101  486\n[94403] 3473  702  718 1816  234 2002 4565  108 4099 3748  643 1212  331  745\n[94417] 3525 1895 1012 2243  939  559  731 2167  904 5747  301 1175  371  583\n[94431] 6177  605 1919 1716 2134 4268 1103  303 1153 5716 1212 4714 4137  485\n[94445]  601 3550 1989 1205 1899 1403  479 4393  288   16 4270 2180  404 2810\n[94459] 3599 2052 1360 1611 1099 4334 1454  575 1627 4161  929 4424  363  525\n[94473] 1148 5791 4122 2085  398 1121  785  675 3769 1833 4993 1107 2493 1246\n[94487]  318  681 1539  343 2275 1263  478 2136 1190 2169  305  399 2285   23\n[94501] 1547 2421 1352 4522  905  472 1077 1879    3  831 3547 2279  430   15\n[94515] 4155  424 2702 1456  677  390 2606 1345  461 1455   11 4099 4233   20\n[94529]   33 1289   29  183  450  700  807  307 2395  163  440 1111 3066 4166\n[94543] 4548 2935 1381 1216  327  936  279 4125 1592 4364 2457  331  874 2138\n[94557] 2171 1511 2190 1289 2809 1115 2924  382 4297 2047 1975  397 1733 2916\n[94571] 3528  885 1307  425 4150  398   59 1357 1273 2017  561 4111 4691 2267\n[94585] 1783  281 4407   84 4213 1418 2596 3531 3272  409 2901 2921 2087 2912\n[94599] 3370 3363 5463 1626 1831  517 3433 3407 1043 4419   27  509  443  914\n[94613] 2119 4537  433 4422 4628 4409 4945  594 1025 2071 1025 1496 4087 4638\n[94627]  652  313   15 2280 4276 3419 3815 1668 1643 1296 1747 5220 3478 2173\n[94641] 2937  653 2335  651 2140    1  795 1121  189  586  422  685 2926 1701\n[94655] 3565 1581 1717 2444  161  208  275 1030 1634 1085 3817 2932 1170  653\n[94669]  223  970 4065  407 2166  181  373 2906  199 1885   51  116  876 5796\n[94683] 5337   15  317  251  446 1160  218  403 5711 1223 3675  297    5  469\n[94697]  673  271 5208  160 2142 3644 1183 4060  418 2319  483 4274 1847 3572\n[94711]  788  411 1711 1110  380  325  604 3493  219  642 4255 4495 2175 1131\n[94725]  838    1 2083 4187  679 3611  518 3466  893  179   19  420  187 1174\n[94739] 4284 1599  925   23 3689 1711 2144  457 3230 4662 2177  499 1647 4679\n[94753] 4633 2098  274 1139  971 1151 2876 1268 1143 1869 4880 2219 5373 5736\n[94767] 3312  249  703 5309 1623  707  507  388 4511 1250  342 2885  327 1180\n[94781] 5599 1442  172 5245 2380 1947 3616  766 2069 2146 5611 3281  423  565\n[94795]    3  323 1143 1129 2902   63 4711 3508 3670  483 3461 1875  316 3806\n[94809] 3361 1697 4567 2179  127 1386 1785  406 1297 3404  252 3340  332 5814\n[94823] 4118  178 1131  383 1318 1880 1685  998 3388 4292 6054 2148  144  654\n[94837] 1428 1280 1663 1734  781  432  439 5901 1605  300  165 1051 4552 5797\n[94851]  411 1843  652 1145 4141 3795 3566 3386  331 5207 1641  456 2181 2868\n[94865]  802 3825 4687 5189 1256 4104 4395 1054  273 2402  308  431 1639 5795\n[94879] 4100  553 3305 1802  117 5259 1073 1779 4175 2789 3340 1611 2150 1583\n[94893]  686  516  643 1164 1269  213  927 1200 5273 2247 2517 4434 1151 1373\n[94907]  118 2183  561    3  673 3588 1232 1070  575 2918  301 1205 4181 3311\n[94921]  429  586  581 5199 4133 1231 4596 1554 1819  286  325 1493 5713 3199\n[94935] 1995  841 1155 3416 1270  256 2003 2815  320 2297 4171  541 4396  454\n[94949]  721  477 1902 3202 3359 2938 3391 1048 2152 3425 4572 5712 3072  761\n[94963]  287 1327  745 4136 3231 3527 4377 2793  333 2185 2285 2347 4580 1186\n[94977]  341 2181 3493 2903  578  419 1982 2840  573 4502 2913   85   83 1729\n[94991]  417  471 4576 3669  330 1775 1600 4144 2900 2907   65 1942 4667  377\n[95005]  133 1767  703 2963  257 1156  145  421 1638 1935 1410 4215 2806 2593\n[95019] 3734 1695 1117 1171 2927 2459 4684 2187 1195 1572 1587  847 2917 4276\n[95033] 2280 4299 2154 1843 5302 3778 2922 3301  409  211  407 4352 2933 1619\n[95047] 1692 3748 3357  428 5293 5601 2231  629  423 2595 2904   95   27 2302\n[95061] 1242  375 3044 4294  343 1705 3216  681 1104 1178 1139 1518  477 1171\n[95075] 1284 3357  918 1177   89  689  283 4640 2156 2189 2389 4695  413  167\n[95089] 3365 1161  221 1721 2379   45 4702 1734 3530 4411  753  894 1289  356\n[95103]   67  226  431  415 2949  525 3811  199  291 1519 1585 2488  359  507\n[95117]  172 3526  509  305  527  434  237  256  687 1185  193 3069  169 4202\n[95131] 1480 2580 3335 1119 5678  400 1801 4300  181  345  135 1407  505  309\n[95145]  258 1321  177  587 1185 4705 2960  884 4113  299 2158  997 1211  691\n[95159] 4218 4382  708  926 2019 3501 2351 2147 4195 2370  195 2191 1710 3486\n[95173] 1637 1611 3513 2013 3691 2839  426 1022 2065    5 1013 3771 5268 1053\n[95187] 5274 2954  119  438 1109  543 2331 1038  425 1751 2908  669 1416  362\n[95201] 2911  447  359  183 2391 4131 3674  485 1128 2915 2039  201  325 2160\n[95215] 5287 2943  327   29 2928 4033  866 2193  435 4191 2202  442 2594  693\n[95229] 1029 1730 2958 1193 2139 2931 4397 1854 4103  460 2159 1727  389 3349\n[95243]  360  263 1078 2951   21  235  711  448 5769  152 3573 5714 2925 2960\n[95257] 1526 2537 2437 1715 4370 1691 3535  363 1271 5298 3603   71 3374 4361\n[95271] 1346 1485 5314  225 2131 3591 2195 3445 2590 1225  234 2162 2314  415\n[95285]   65 1147  161  883 4321  803  866 1435 5079  308  418 4333  427  153\n[95299] 4204 1703  371 1159 4085 4088 4368 1464 1651 3604 4312 4543 1201  436\n[95313] 3494  340  915 3257 4512 1667 4091 2914 2042  377 4224 2164 2905 1071\n[95327] 2197 3473 4010  499 1295 5451  105  775 1677  994 3819 4106 1205 4885\n[95341] 3384 1247 1682 4119  523 3810   97 4700  168 3660 3621 1466  185 4672\n[95355] 1371  702 3848  736  314 4625 5311 2680 4421 4179 3681 3845  527 4565\n[95369] 1224  705 4101  486  234  108 1816  522 2002  718  839 1503  303 2602\n[95383] 5147  488  695  839 1503 2959  745   71  702 1677 1014 2243  731 6177\n[95397]  301  371  939 1204 1175  605 1103  858 4688  377  303  583  904 1403\n[95411]  601 1205  479 1899  950 2180 1951 2951  303 1099 4533 2085 1611  281\n[95425] 1299  575  525  929 3307  596  398  482 1107  675 2493 3825  318 2275\n[95439] 1547  305 1162 1263   23 2421  331  430  472 1879  399  806    3 2285\n[95453] 2702 2279 1345  905  183  883   15  573 1044 1997   29 1289  874 2020\n[95467] 4559   11 1455  677 3848  307 4297  461  807 3066 2935 1717 4571 1111\n[95481] 2339  327  440  244  163 1456 1511 2190 1848   84 2395 1307 4240 2047\n[95495] 1216 4122 3531 1115  544 1273 2017  255 2916   59  936 3605  665  561\n[95509] 1733  425 1357 2596 2921  418 2924 4638 2267  885 3272 3370 2119 2912\n[95523]  409 3915 3407  443 1831 1783  313  281 2391   27 1626 4565 2937 2942\n[95537] 1025 3419  433  375 1170  219 3478  795 2280  970  509 4409 2173 1121\n[95551] 3565 1747 2444 1682  497 2516 2335  653  161  586 1701  181  422 1223\n[95565]    1 1634  348 3363 1085 2926  643 2906  711  199  271  208 3475 1885\n[95579]  524   51 1924 4380  407 1519 4714  251 1160  116 1903    5 1223  403\n[95593]  251  483 4945 5337 3675 3572 2142  469  411 1110  855 5736  354 3493\n[95607] 3528 1174  673 5177 2319 4255  642  518 3466 1257  604 4495  471 1842\n[95621]    1  187 5711  925  407  420 2602 4155  179 1131 1232   19 3256 1599\n[95635]  499 3917  971 4246 2046   23 1647 1687 1869 2579 1875 4679 1479 2876\n[95649] 2009 2098 5814 2219 1161 3537  703 2278 1059 2177 1775 2457 1442 5309\n[95663] 5599 1623  258 2146 3616 1224  323 3230  725 1685 2380 3827 3386    3\n[95677] 3404 1129  388 1143 2902  586 3670 3461  327 3848  127 4214 3361 1697\n[95691]  701 1386  423  687  383  300  316  421 1863 3944  228  178  165 3455\n[95705] 3388  411 2181  802  553 1318 1420  456  505 1199 1131 4064 1401 1631\n[95719] 1639 1164 3588 4459  308  431 1779  251  117 2375 1296  927 4111  673\n[95733]  686 1676 2048 1571  561  488  394 1151 3705  118  213   15 1073 2181\n[95747] 2901 2247 1373 1902  301 1611 3588  841 1554 1995  320  325 1109 1155\n[95761]  997 1837  439 3359 1819 3072 2152 1327 3669 2003  703 1171  477 2938\n[95775]  454  333  419 2840  352  573 1424 3231 3416  437 2889 1451   85 1778\n[95789] 2297 1695   65   83  781 1117 1186 2008  221 1801 1593 3425 1843 2478\n[95803] 1177 3639 1942 2900 1410 2285  323  286 1619 2280  145 1982  624 1178\n[95817]  407 2062  133  211  423 1284 2918 2389 2347  409  428 1854  708 3501\n[95831]  172 3199  332  415 3044  632 1403 1171  283  559  181 2595 3365 2488\n[95845]  305  493 1518 2815  359  581  135 1119 1161  424 2231 1435 2946  753\n[95859] 1127 1585 2019 1526  543 1873  119  425 2331 1729 4128 3530 2917   95\n[95873]  343 1185  894 2944  299 2302 2941  183  327 2903 1611  426 1047 1734\n[95887] 2923  263 2147 3216   89 1805  931  435 2913 4161 2927 2949  448 2351\n[95901]  507  442 2581   21  711 2500 1692 2933  460  414  225  201 1271 1482\n[95915] 2437 1611  438 1409 1295 3535  235    5 1071 1205  153  436  427  527\n[95929] 2202 2954  803 1371 1066  705  883  185   97   65  523 2911 2159 2594\n[95943]  499 2599  915  718 1816 1201 2002  105 2914  486 2904 2907 2908 2915\n[95957] 2925 2932 2943 2958 2960   45   67  256  199  291 1029 1256 2314 2379\n[95971]  108  234  418  575  918 2580  926 3805 3806 3810 4118 3813 3815 4087\n[95985] 4144 4146 4148 4150 4202 4292 4227 4233 4234 4348 4171 4181 4191 4318\n[95999] 4381 4388 4393 4395 4412 4434 4437 4445 4548 4552 4502 4580 4352 4361\n[96013] 4628 4567 4572 4629 4633 4687 4700 4702 5079 5712 5713 5714 5716 5747\n[96027] 5677 5803 5769 6054   23 4121 4131 4140 2789 2793 2963 3202   27  413\n[96041] 3374 5275 3340 3391 3473 3486 3591 3621 1600 1631 1708 1730  210  214\n[96055]  234  236  237  249  252  254  257  287  360  385  479  512  535  587\n[96069]  685  866 1022 1075 1200 1270 1416 1480 1587  745  108 1545 2243  904\n[96083] 3820  583 1153 1668 1989  400  479  939 4164 1205 2085 2437  929 1925\n[96097] 1299  245  478  675  601 2493  288  305 1263 2285 1879  430  472 2275\n[96111]  525 1547 2421  331 2279 1403    3  318 5791 2702  399  831 1077  677\n[96125]   33 1289 1345  307  450  163 1455  807 1111  440 1717 3066 1511 1729\n[96139]  461 1115 2267 1733 2047 1289 2017 2395 2932 3531   59 2190 3528  561\n[96153] 1216 4213 1307 1357 1273 2924  425 2457 2596  409 3272  914 3363 1626\n[96167] 1592 2921 4422  509  433 2119  443  821  281 4629  997 1257 2926  313\n[96181] 3419 3478 2280 1643 2335 2173 1747 3565 1494  885  422  651 1121  970\n[96195]  586  181 5231  821   15  936 1162  219    1 1085 2901 1025  625 1030\n[96209]  275 1519 1170 1739   84 2935  407  199 1783  189  271 2087 1885  116\n[96223]  248   51 3370 1160 5856 1223 2444 1634 1454 2937  160  251    5 3579\n[96237] 2017 5711  483  681  411  469 1847  417 1183 1246 2906 2319 6181 1149\n[96251]  325 1174 3493  604 3466  642  795 3644  317  223  403 2083  518  179\n[96265]  420  838   19 4284 4534 1735 1599    1  679  971 4880 3675 1591 1701\n[96279]   23 3689  279 4099 2177 3572   15  457 1869  499 1647 4679  507 4374\n[96293]  925 2098 5017 5273  405 2876 2009 1875 1623 1131 3312  249  703  388\n[96307] 2219  471   63 1442 1250 3475 3281 2602 5373 1143 3566 3616 3386 2179\n[96321] 1685 4567  766 1785  488 2146    3  423  437  327 1947 5611 3670 5309\n[96335] 1143 3361  779 1686 1129 5795  127 3508 3340  172 4118 1180 1973 4141\n[96349] 1318  998 3404 1663 1843 3996 1145 3311 3806  323 4225  439 3461  691\n[96363] 1280 1605 1256 2181 3388 5207  331  300 5797 1131  144 1734 3795  781\n[96377] 2868 4552  456  505  432  802 6054 4104 5189  431 5948  431 2789 1401\n[96391] 4395 1697  553 1779  316 4687 1054  117 4175 1151 1802 2380 1386 1641\n[96405] 5259 1073 2517 2247  643  686  213  788 1627 2183 2402    3 3340 1416\n[96419]  927 1583 1998 3305 4088 1164 1835 1200 1232 1639  520  561 1070  673\n[96433] 5796 4111 3588 3527 1902  383 1819 5712 2918  301 1296 2150 4171 4133\n[96447]  320 5940  841 1155 3199 2946 3391 4434 1452 4181 1231 2181 2347 2297\n[96461]  477 2003 4155  745 2185  721  287 3072 1554  454 3202 3669 4572 3416\n[96475]  761  785 1373 5302 1270 1327  340  178 4377 1982 3231 3553 1048 3526\n[96489] 3425  608  703  118 1681 2285  575 2938 4346  308  573 4502  377 1600\n[96503]  417 4580  257 2840 2048 2907  394   85  286 1942 1767  594 2913   65\n[96517] 1935 1729 4576 2927 1705 1695 1410 2154 4596 1638  325  409 3734  341\n[96531]  847 1177 1117 2459  421 1195 2187 4667 2280 3778 1098 2922 4299 2963\n[96545] 4215 3301  211 4684 1843 1262  581 3748 2315 3493 2903 2231  629   83\n[96559] 1023 3357  681 2917 3357 2815 2793   27 1619 3771 1156  343 5601 2593\n[96573] 4294 2904  423 1139 4702 4431 2900 3359 4352  407 2042 1611  884 1171\n[96587]  419 5293 3365 1801  133 4705 1518 2389  167 1289 2189  172 2379  689\n[96601] 5275  413 1104   45  477   89  283   67 3216  221 4411 1242 1284  894\n[96615] 1119 1734 2949  358  753 4202 3044  397  181  491 1519 4662  356  291\n[96629] 4640 2488  509 3530  237 1171 1721  687  199  434  507  415 1109 1185\n[96643] 2960  652 3526 1585  169  359  418 4091  135  193 1211 2302 3069  527\n[96657] 2158 2191  375  400 4195 1221 3501  926  535 1637 4218   95 4382 3811\n[96671] 2915  360 2019 2366 1611 3335 1321  255 1022  119 4349 4144 1587 1053\n[96685]  426 2945 1751    5 2370 2954  145 2331 5268 4131  425  918 4278 2839\n[96699] 3513 1161  669 1064  345 1013 5274 3486  389 1995 2065  708 2908  866\n[96713] 2595 1407 3349 3591  442 2391 3674  362 2580 4103 1854 1205  359  195\n[96727] 1128 2039 4033 2928 2193  325 2594 4100  587 1029   21 1185 2139 2598\n[96741]  263  460 2911 4191 2943 2159 5678 1715  201 3573 4361  256  438 4516\n[96755] 4543 2925 2931 1691 4370 2958 1526  363 1485  152 1435 5079  448 5314\n[96769]  299  435  485  377 5298 1730 1346   29 3603 2537  524 1078 2131 2162\n[96783] 2195  183 5769  327 2590 3445  695  543 4321 2202 1692 1271 1147 2314\n[96797]  308 5287 4204  693 4300 5956 1651   71 3604  415 4085 1224 2351  427\n[96811] 4312 4333 3681  153 3494  235  455 3257  314 4224 3535  371 2197 1159\n[96825] 2914  775 1205  499  177  168 2164 1247 4885 1703 3819 1667 1071 1682\n[96839] 4212  436 4113 3384 3374 4672 4119  161 3473 3810   97  289 2599 3660\n[96853]  185 3621  883   65 4700  994 4106 4625 1269 4421 5311 4179 3941 1295\n[96867] 1482 3845  527 1371  702  234 1464 3525 4565  486  105  522 3848 4695\n[96881] 2002  523 1816  803  915 5451 2680  705 5714 1201  234 2147 1677  418\n[96895]  839  718 2912 2916 2960   29 1107 1175  711  905 1099 1503   23   27\n[96909]  208  225  305  371  605  653  517 1611 3815 3825 4087 4297 4166 4233\n[96923] 4250 4255 4276 4548 4357 4364 4711 4714 4537 4945 5716 6030   11  165\n[96937]  187  411 3085 1975  398  483 1955   20  876  218 2639 3230  216  354\n[96951]  511  559 1206 1571  390  398  424  839 1816 1503  718  745 1895 1012\n[96965] 2243  559  939  301 2134 4150 1833 6177 1103 2167 3817  731  904 4137\n[96979]  303 1153  371  583 1716 4268 1919 1175 4393 4714 3550 1989  601 4270\n[96993] 4334  605  840 1403  300 1099  303  485 1611 1360 2810 1299 2052 3599\n[97007] 1205  575 5791 4122  371 2085 2180 1148 1454 4424  478  525  398  288\n[97021] 1107 4993 1121  675 3769 2493 1439   16  929 1627 1263 2275  318  305\n[97035] 2136 2169 1547  905 1162 1190 1879  430   15 2421 2285 4099  343  681\n[97049]   23  472 4161 2702 4522 1077 4155 2279    3 3547 1212 1345 5747  424\n[97063]  677  399  831 4233  450 1381 4166 1455   20   29   11  183  652   33\n[97077]  885 1289  307 1352  461 1456 4297 2395  163  807 1717  327 1111  440\n[97091]  390 2606 1592 1115  279 2138 2935 4548 1733 1216 1307  331 2171   59\n[97105] 2457 4125 2809 3066 2047  382 1511 2916   84 2017  397 2924 2267 1289\n[97119]  425 4364 1975 3531 1357  561 4111 2596  281 3370 4407 5463  409 2921\n[97133]  936 1273 1783 3272  874 1626 5716 2901 3528 4213 1043 1831 2912 4691\n[97147] 3363  517  433  219 4419  509  914 3407  443 2119   27 2932 4537  398\n[97161] 2190 4422 4945  594 4638 3419 4087  313 1496  653 2071  795 3478  701\n[97175] 1643  490 4628 4276 1025 3815 5220 3433 1581 1747 2173 1296 1668  685\n[97189]  651 1025 1121  970 1030  422 2444 1142  181 2280  161  208  653    1\n[97203] 1634 1085 4409  275 2926  189 4065  586 3565  407 1170 2906  199  271\n[97217] 2166 1885 2140   51  446  876  317 1223  223 5796    5 4060  251 3675\n[97231]  578  218 3644   15  373 1160 5711 5814  469  160 1110 2319 1298 5337\n[97245] 3572  411 5208   15  312 1711 4274  418 1183 2175 5736  325  483  258\n[97259] 3466 3493  673  642 2142 1174  116 4255 2083 1591  838 1701  403 3611\n[97273]  420  187 1131  407 4284 4495   23 1599  179  893  925 2602  971   19\n[97287] 2177 2144 4662 1869  499  507 4679 5599 5273 1847  457 2098 1139  274\n[97301] 1647 4711    1 4880 5309 1143  703  518 1250 3281  707 3312 1623  249\n[97315] 1268 4511 5373 1442  388  327  323 1875 2219 2885 2335 2876 2146 1180\n[97329] 5245 5611  423  316 1685 1785 3386 2179 1143  766 3404    3 4567   63\n[97343]  497 3670  565 3461 2902 1297 2069 1947 3361 3566  483  332 3806 4633\n[97357] 1697  488 2380  406  127 1129  252 3340 3508 1131 4141 4292 3616 1318\n[97371] 5795 3825 1663 6054 1386  178 1880  439  144  432 2148 1734 3311 1256\n[97385]  308  300 5797 1280 2056  781  411 1198 4187 1163 5207 1605 2181 1428\n[97399] 4552  165 1641 3230 5901  802  331  456  553 2868 2402  308 3795  998\n[97413] 4434 4687 4395 1151 1802 1639 1145  431 4100 2517 1779 1073 3305  273\n[97427] 5259 3340 1151 2150 1164 1200  927  256  516 1149 2789 1054  643  213\n[97441]  383 2247 2183 1611 1232 1583 4175 5713  541 1070 5712    3  561 4181\n[97455] 5199 4171 3527 3588 1493 2918  581  586  575 1373 1205  686 3199  841\n[97469] 1995 3416 3689 1902 1554 1155  673  118 2815 2938 4118 2297 3202 3391\n[97483]  721 2347 1270 2152 3359  761 2903 3072  287 2003 4144 1589 3669 1171\n[97497] 1327 1048 2185  429  745 1231  454 3493 1982 5189  320 4596  505 4133\n[97511] 4377 5302 2181 3553  477 3231 1942  338  419 2907  145 4580  703 2840\n[97525] 2793  286 2285   85 1600  417  257   83  321  377 1186 1935 1705 1156\n[97539]  471 1819 1638 1767  573 4502  133 4667 1410 4104 3734  847 4396 2913\n[97553] 2154 1775 2927  341 2593 4576  333 1695 2459 1195 2187 1843 4136 1587\n[97567]  407 2917 2280 4572 1801 5601 3778  409  211 1117 1729 3748 4352  421\n[97581] 1619  428 1572 1692 2904   89   65 2595 4684 2963  172 3357  423  343\n[97595] 4702 3044 4294  375  301 3216 4276  477 1139 2231 2302 2042 3335 4215\n[97609]   27 1104   95 1171 4640  309 2156  283  632 2379  221 2389  167 1289\n[97623] 1734 3771  305  415 2960 3530 3365  753  226  525 2189   45 1242  894\n[97637]   67 1119 2949  431 3357 3425 1177 1721  918 2933 3811  413 1284 1178\n[97651] 5293  689 1585  884  359  507 3526 1185 4300 2806 2922  172 1185 4411\n[97665] 2488 4091 2900 5678  400  193  237  135 1407 5147  587 2580 4705  464\n[97679]  509  117 1321  169 2351  527 4695 3069 1495 2158 4218  177  926  291\n[97693]  997 4382 2191  299  691 1211 4195  356 3501 1161  199 2013 1013 2147\n[97707] 3691 2839  708 1611  426 1053 1518 1038 3513 1109  543 2019 2331    5\n[97721]  669  447 2070  362  256 2065  359  442  389  183 2391 1618 2908  195\n[97735]  485 2915 3349 2911  263 1710 1128  235  201  510  438 3591 2160 4103\n[97749] 4299   29 5287 1029 2594  435  327 2193  711 1022 2958 1193   21 2931\n[97763] 2159  460 4191  448 1730 1715 3573 3674 5769 2437 2370  152 1854  377\n[97777]   71 5714 4543 2959  654  693 1519 4361 2960 1691  161 2925  866  360\n[97791] 2943  866 1435 1346 4033  119 5298  363 4131 2537 2202 1271 3603 1269\n[97805] 2590 4370 1526 3374  803 2928 5314 1078 2162 4321 5079 4397   65  695\n[97819] 2195 1201  225 2314 2139 4204  325 1703  418 4333 4368 4113  153 4312\n[97833] 5268  475  371  234 4202 1651 1464 2914 5274  436 1224 2131 3257 3681\n[97847]  427  314 1147  883 4088 1159  415 4512 2599  523 4106  455 3819 1667\n[97861] 3604 4224 5451 2164  775 1677 3473 3660 2197  105  499  994 4119 4010\n[97875] 2680 1247  915 1682 4700 3384 4672 3535 3445 1295 3494 3621 1039 1485\n[97889]  527  168 4421 1371 4085 1205  702 4625  705  181 3810  736   97 3848\n[97903] 4885 5311 4179 4565  486  522 4101 3525 3845 2002  234  185  108  345\n[97917]  325 3388 3301 3486  604  839 5311  225 1407 1371 1816 1677 4516 2002\n[97931]  168 1503  745 4565 5714 1895 1014  525 2243  939  605  301 1833 1103\n[97945] 1153  371 4150 2134 2167  731 5747 4268  904 5716 1175 4137  485  601\n[97959] 1919 1212 4471  404 1403  479 1716 3550  482   16 4270 1099 2180 3599\n[97973] 4122 2085 5791  339  575  929 1360 1627 1205 1299  525 1148 2052 3769\n[97987]  398 1107  675 4424 1121 4993  478  303 2493  785  840  318 6177 4099\n[98001]  303 1263 2136 2275 4155  430   23 1879  905 2421 4393    3  305 2702\n[98015]  172 1352  681 2810  831 3547 1077 4522  424 1345  399  390 2606 1190\n[98029]   15 1381 2279   33   29  472 1668 2169 1455 2935   11   20 1643 1456\n[98043]  307 1975 1717 2395  183  327 1061  163 1289 1989  279 2809  440 2138\n[98057]  677 2457  874 1216 1733 1307 4233 2924   59  885 1246  425 2190 3531\n[98071] 2932  461 2267 1511 3528 2017 1115 1111  398 1592  343 1273 2596 4407\n[98085] 1357 2047  331  281  409 3363  397 1831  517 1626  433 1043  443  219\n[98099]  936  914  382 2901 2937 1496 2119 2171 2921  509 1025  559 2912 4087\n[98113]  997  313 1783 2926 2071 3066   15   84 3478  586 1547 1747 1289 2140\n[98127]  795  651 2444  970 1296 2280  422 3433 1162    1 3565  652 1025 1634\n[98141]  189 4065  161 1030 1701  181 1085 2906  223 1170 2173  199  407  208\n[98155] 2166  676  271  446  561 3272 2335 1885   51 2916 4186  160  876  483\n[98169] 3370 2142  411 5208 5711  251  275 2175 1121 2319    5 1847  418  469\n[98183] 1110  317  325  403   27 1183 3419  297 3675 1223  788 5337  604 3493\n[98197]  673 4255  642  312 1131  838  893 5736 1711  518   19 1711 2083  420\n[98211]  407   23 3611  187 1599 3407  179 2602 3689    1 1869 3230  499 1647\n[98225] 4662  507  971  218 1151 4880 5309  583 1174  457 4633 4274 1250  703\n[98239] 1623 2144 2098 2219  274 1071 1143 1875  249  807 1442  327 1139  116\n[98253]  565  707 2885 2069  766 1180    3 5611 1685 1947  423  388  323 3566\n[98267]  497  172  483 2177 1297 2179 1143 3670  488 2876  316 5373  127 1129\n[98281] 3361  406 4292 2902  252 3461 1386 1697 5797  426 1663  411  432  332\n[98295] 3644 1785   15  165  439  802 1131 2380 1428  456 1163 6054 1605  781\n[98309] 3404 1641  273 1280 1198  553 1734  300 5189 3281  998  505  117 1145\n[98323] 4100 4552  308 1802  460 1256 1054 1880 1571 2056  686 1151  927 1583\n[98337]  383 2247 1200 2148 2517 3386  331 1611 5712 1318 3305 1232 1779 1401\n[98351] 2789  144 2402  213  431  581  178 1639 4596 1205  841 2918 1107 2181\n[98365] 4181 1073 2815 1493 2938  721 2913 3202  516  287 4144  703 1164 2003\n[98379] 2297 2347  320  325  477  118 1373 3669 3527  673  256 1270 1186 1995\n[98393]  333  541 3553 2868 1819    3 4572  257 1554 4502 2793  341 4377  745\n[98407] 1231 5207  286  578  761  363   85 4576 3231 1600 1935 1982  429 1695\n[98421]  419 1705  421 2927 4215 1155 1048  561  847 3588 2459 3072  342  409\n[98435] 1638 1587 5259 1327  417 5713  145  377 2285 1171 3425  573 1729 2900\n[98449] 1843 5199 3778  428 2280 1564 1156  575 1410 2231 1195 1631 1139   89\n[98463] 2595  423 1767 2917 2181 2907   83  454  211  477  375  884 1177   65\n[98477]   95 1242 4187 2152 4276 4695 2922  133 1284 2389  894 2933  407 1721\n[98491]  753  356 2903 2302 2949 1070 2963 5302 2840 3530 3932 1178 1734 3365\n[98505]  512 2189  343  283   45  291  181  199   67 1119 2593 3216  193  413\n[98519] 1775   27 1064  169 1619 1519 1109  359 4702  415 1801 2960  237 1127\n[98533]  535 2351  135 3301 4411 3691 1942 1013 1022  119  426 2013 2191 1585\n[98547] 1618 3357 1171  689  177 2379 1518 1053  587  305 1185 2147 5601  669\n[98561]  360 1635  221  438 4294  389  359  700 2911  632 1104 3734  527  400\n[98575]  235 4580 4684  507 2070 2370 2331  258 2928 1117  926 3501 1416 2042\n[98589]  597 2806 2156  435 2958 2019 1692 1185 3811  442 2391 3526 2159   29\n[98603]  456 3674  460    5 5147 4640 2943 4113  256   21 2594 3573 1128 1078\n[98617]  183 2537 4191 3513 2139 4300 4352 2488 4714 5678 3374 1211  711  263\n[98631] 2915   71  201  325 1854 4299 2925 2959  866 1715  693  195  803 2590\n[98645] 1193 1321 3535 2437 4218 1611 2202 1435 4033 1464 4382 4195 5274 3069\n[98659]  543 1029 4333 1224 3257 1225 1526 5293 4370 1289 4361 1667 1205 4131\n[98673] 2908 4106 4312 1346  377 1703 2193  161  234 4511 4543 1485  654  415\n[98687] 2914  299  485 1710 3604 4224 3349  448 3660  866  883  308  594 2197\n[98701] 1651  340 2131  527 4512 5769 4368 3621 1247 4672  314 1682 5079 5287\n[98715] 1295 1201 2195 2599 5298 3603 4700  994 1147 4176 5268 1106  371   97\n[98729]  153 4204  918 3819   65  436 5846 4625  234  185 4421  363  152 3845\n[98743]  705  471  108 4119  427 3473 3810 4179  523 4321  486  499 4462 1159\n[98757]  695  718 4885  105 2904 2931 2942 2960 3311 3445 3681 3843 4213 4010\n[98771] 4060  235  345 1691 2314  301  327  418  653  702 1161 1271 2580 2680\n[98785] 3260 3806 3815 3817 3818 3825 4169 4085 4091 4104 4111 4202 4284 4297\n[98799] 4161 4166 4171 4175 4334 4395 4409 4419 4422 4434 4510 4548 4495 4364\n[98813] 4628 4567 4711 4679 4687 4691 4536 4537 4945 5220 5245 5451 5463 5599\n[98827] 5795 5948   63 4118 4125 4129 4133 4141 2839 4667 3044 3199 3494 3771\n[98841] 5273 3340 3493 3384 3388 3391 3466 3486 3572 3748 3591 3616 3357 3359\n[98855]  305  643  685  691  736 1454 2146 2150 2154 2158 2160 2162 2164 2183\n[98869] 2185 2187 1895 1014 2243  939 6177 1175 1153  371 1668 2134  301  731\n[98883]  904  583  378 2167 1833 1919 3817 5747  485 4199 4393 1403 4334 5388\n[98897] 3550 1103 1716 1701 1989 2180 1205 1099  479  303 1899  929  363 4122\n[98911] 2810 3599  525 2052 4422 2085 4161 1360 1299 4594   16  303  398  785\n[98925] 4993 1121 1454 3769 1148  318  305 1107 2136 1263 1547 1729 1879 4099\n[98939]  681 2169 1403 1611    3   23  343  430  472  905  575 1352 2279 2493\n[98953]  399 1495  675 4522  601 3547 2421  424  795 4150  390 1975 1077 4166\n[98967]  677  461 1381  183   11 2606   29  831 1345  700  450   33 2702 4233\n[98981] 1717 1455  807 2395 3066 2935  885 2275  440  279 4137 1216  936 4548\n[98995] 1307 1273 1456 2932 4364   20 2267 2171 1733 1511 2457 1115  425  874\n[99009] 2047  397 1592   84 5463 1111 2190 4125 2138 3528  398 1246  382 4407\n[99023]  561   59 2809 4213 2017 1357  163  307 1289 3370  281 1043  409 2596\n[99037] 3272  443 2916 2921 4419  219   27 2912 4537 3433  509 2119 1831  914\n[99051] 3407 4945 4638 3531 4169 4409 4691 1626  676  433 4711 3419 2901 3815\n[99065] 4297 1496 2071  313 1025 1643 2924 2173  970  653 2280  586 1581 2444\n[99079]  181  652 1634  422  651 1025    1 1783  208  161 1296  685  653 4087\n[99093]  275 1747 1289  795 2906 1085 1170  657 1121  189 5220 2335 3478 3565\n[99107] 4065  446 1030  384  199  271   51 1885 5337  876 1701 4274  317 1223\n[99121] 3301   15 4270 5796  251 2166  116 4510    5  407 4060 2175 5711 3363\n[99135] 2140  411  483 2319 1183  418 3572  469 5814  218 3644 4111 1847  258\n[99149]  472 1110  223  893 5736 4255 3466 3493 1174  297  604  325  673 3675\n[99163] 2083  642   19  518 4129 2142  179  838 3611  187 1131  420 4495 4284\n[99177] 1711  679 1599  971 4628  457 2144 4679 5599 1647 4662 3230 2177  507\n[99191] 1869  403  499 3825 2098 4633 1139 1250 3689  274    1 2926 2219 1875\n[99205] 3281  707   23  643 3312 1143 2602 2876  249  703 2885 1151  327 1623\n[99219]  497  565 3616  172  423 1442 3386 1203 5245 1685 2069  766 1129  323\n[99233] 1947  316   63 1180 1143 2902 2146 1297  483 5795 3670  388  127 5309\n[99247] 5611  332 3404 3461 4880 5373 3566 5273 5797  551 2179 1386 4292 1785\n[99261] 3361 1697 1131 1711 1318 4567 4118 2181 5208 2380  178  439 6054 1734\n[99275] 1617 3299  300 1605 3806 5846 1843  781 1163 5948  411  432  165 1428\n[99289] 1280 1256   15 1145  456  331  998 4552 1880 1663 4141 3795  553  802\n[99303] 2789  426  144 1641 4395  380 2148 4104 4687 2868 5207 3388 1639 4100\n[99317] 1151  117 1401 1802  308 4434 5259 4175 1779  288 2402  431 1054 2517\n[99331]    3 3340 2183  927  686  505 2247  643 1073  383  213  516 5189 1611\n[99345]  118  673    3 1200 1583 1232 2150 1373  520 5712  575 3588  586 3527\n[99359] 5713 1070 4171  541  561  581 1231 3305  301  286 4181 1493 1554 2918\n[99373] 1819 4596  841  320 3199 3416 4144 1270 1571 2152 2297  721 2285  454\n[99387] 2347 1883 4572 3202 2903  287  325 3072 3669 2185 1171 2815  761 1120\n[99401] 1155 5199 3425 1164 2003 2181 4377  703 1186  333 3359 1327  341 1982\n[99415] 3493 4113 2793 3553 3231 4502  342 2840  578 2913  377 1600 2907 1942\n[99429] 4133  429 3391  417  257  477  419 4580 1775  562 1695 1729   83  133\n[99443] 4576 2963 1705 1638 1410 1935 3778 2941 2154  573 1156  847 4684 2459\n[99457] 4215   65 3734 1117 1048 2927 1492 1195 1843 4299 2900  409 4276 4667\n[99471]  375  421  145  407 1619 2280  211  428 4294 2806 3301 3748 3357 2187\n[99485] 2595 3044  629  681  423   85 2231 3357   95 3771  488 3216 1587 4352\n[99499] 4702 1178 1139   89  343 2593 4705 2917  884 1692 1734 2042 2904 5601\n[99513]  181 1518 4640 1104 2389 2942  221 4695 5302 1177  477 2302  689 3335\n[99527] 1995   45  160  640  753 2949  491  525   67 1119 2379  415 2960  172\n[99541] 3365  918  356 2156 1171 3526 1721 2189 2488  291  701   27  509  894\n[99555] 2933 1585  594  507  687 1284  359 4202  169 1289 1185 2580 1519  305\n[99569] 2922  512 4411 1185  434 1407 5293  482  256  167  527 1321 5678  237\n[99583]  135  345  283  177 3530 1127 1211 4091  413 1801  691 2351  193 4195\n[99597] 4300 1161 2147 4218  997 1109 3486 2158 1064  926 1022 3513 1013 5147\n[99611] 1767 2019 3501 1053 1225 2191 3069 2370 2013  400 3691  708  426 2839\n[99625]  195 1751 1047 4382 2915 1611 5274 2331  543  425 3811 2514    5 2202\n[99639]  299  866  359 2911  442  746 2391 4131  524  263 1480 2908 3349  456\n[99653] 2039  325 3591  693  235 2160 1128  389 2928 2594  669 3674 1710 2931\n[99667]  119  435 4033 2193 5268  235 2943  199 1193 5287 1416  327 1715  654\n[99681]  711   29   71 2437 5769 1526  201 3535 1854 4191 4543  152 1435 4714\n[99695]  377 3573  803  469 2537  438 3445  866  363 5714 1485 5298 4312 2960\n[99709] 2159 1271  460 1078 2131 2162 3374  161 2590 4321 2925 1703  234 1147\n[99723]  183 4204 3603 2195  418 4224 2314 4333 6001  436  415 2139 3604   65\n[99737] 1464 4380 1651  308  168  371 4512 1029  883  225 1691  314 3681 5079\n[99751] 1295 2599 3473 2914 1247 4010 2197  775 1201 3660 3257 1159 2680  105\n[99765] 4536 5451  448  915 5314  994 4885  427 2164  499 3494  153 4119  340\n[99779] 3384  471 1071  523 3810 3809 3621 1677 4421  185 1466 4700  856  527\n[99793] 4672 3845 3848  702 1682 1346 4381 4645  705 4361 1205 3843 5311 1218\n[99807] 1183  486  234 1371 2002 1816 2053  718 4565 1066  108   21   97 1389\n[99821] 1503  745  839  517 4155 5716  424  745 1895 1102 2243  939  404  274\n[99835]  471 2134 5485  731  583 1909 3849 1716 1103 1175  371 4241  904  303\n[99849] 4393 1654  301 4137  485  601 1403  840 5708 3550 6177 1205 3812 4166\n[99863] 1963 3399 2180 1701 1143   16 4533  929 1360 1044 2810  303  525 3599\n[99877]  371 1099  575 2085  305  398 4099 1121  618 1899 4388 1043 1107  675\n[99891] 4535  690 2034 2493 2136  204 5603  318 3769 3843  905  430 2169  453\n[99905] 2285 4304  486  305 1401  821 1263 1665 2003  343 1144  331 2279 1547\n[99919] 2275 3547 2702 1352  399  831   23 2606 1345  472 1975 4373  677 1381\n[99933]  385    3   33   29   20 5747 1223  183  608 2916  885  416  461   11\n[99947] 1539 4364 1122 3066  307  807 1717 4125  936 1111 2935  163 2924  440\n[99961] 2809 1733 1262  398 2267   84 1307 1511 2457  834 4407 4585 1216  401\n[99975] 2171 2047 2190  463 2442 1592 2017 3807  397   59 1357  665  561 1783\n[99989] 3531  901 2395 2932 2596  409 2165 4234 3741  281  623\n [ reached getOption(\"max.print\") -- omitted 236777 entries ]"
  },
  {
    "objectID": "slides/11_mutating.html#apply-functions-to-multiple-columns",
    "href": "slides/11_mutating.html#apply-functions-to-multiple-columns",
    "title": "Mutating columns",
    "section": "Apply functions to multiple columns",
    "text": "Apply functions to multiple columns\n\nmutate(flights, min_dep_time = min(dep_time, sched_dep_time, na.rm = TRUE), \n       .after = arr_time)\n\n# A tibble: 336,776 × 20\n    year month   day dep_time sched_dep_time dep_delay arr_time min_dep_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;        &lt;int&gt;\n 1  2013     1     1      517            515         2      830            1\n 2  2013     1     1      533            529         4      850            1\n 3  2013     1     1      542            540         2      923            1\n 4  2013     1     1      544            545        -1     1004            1\n 5  2013     1     1      554            600        -6      812            1\n 6  2013     1     1      554            558        -4      740            1\n 7  2013     1     1      555            600        -5      913            1\n 8  2013     1     1      557            600        -3      709            1\n 9  2013     1     1      557            600        -3      838            1\n10  2013     1     1      558            600        -2      753            1\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/11_mutating.html#apply-functions-to-multiple-columns-1",
    "href": "slides/11_mutating.html#apply-functions-to-multiple-columns-1",
    "title": "Mutating columns",
    "section": "Apply functions to multiple columns",
    "text": "Apply functions to multiple columns\ndplyr::rowwise()\n\n  mutate(rowwise(flights), min_dep_time = min(dep_time, sched_dep_time), .after = arr_time)\n\n# A tibble: 336,776 × 20\n# Rowwise: \n    year month   day dep_time sched_dep_time dep_delay arr_time min_dep_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;        &lt;int&gt;\n 1  2013     1     1      517            515         2      830          515\n 2  2013     1     1      533            529         4      850          529\n 3  2013     1     1      542            540         2      923          540\n 4  2013     1     1      544            545        -1     1004          544\n 5  2013     1     1      554            600        -6      812          554\n 6  2013     1     1      554            558        -4      740          554\n 7  2013     1     1      555            600        -5      913          555\n 8  2013     1     1      557            600        -3      709          557\n 9  2013     1     1      557            600        -3      838          557\n10  2013     1     1      558            600        -2      753          558\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/11_mutating.html#changing-multiple-columns",
    "href": "slides/11_mutating.html#changing-multiple-columns",
    "title": "Mutating columns",
    "section": "Changing multiple columns",
    "text": "Changing multiple columns\ndplyr::across()\n\nmutate(flights, across(contains(\"_time\"), as.character))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;         \n 1  2013     1     1 517      515                    2 830      819           \n 2  2013     1     1 533      529                    4 850      830           \n 3  2013     1     1 542      540                    2 923      850           \n 4  2013     1     1 544      545                   -1 1004     1022          \n 5  2013     1     1 554      600                   -6 812      837           \n 6  2013     1     1 554      558                   -4 740      728           \n 7  2013     1     1 555      600                   -5 913      854           \n 8  2013     1     1 557      600                   -3 709      723           \n 9  2013     1     1 557      600                   -3 838      846           \n10  2013     1     1 558      600                   -2 753      745           \n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;chr&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/11_mutating.html#changing-multiple-columns-1",
    "href": "slides/11_mutating.html#changing-multiple-columns-1",
    "title": "Mutating columns",
    "section": "Changing multiple columns",
    "text": "Changing multiple columns\ndplyr::across()\nWhat if you need to pass arguments to your function?\n\nmutate(flights, across(contains(\"_time\"), ~ .x / 60))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;\n 1  2013     1     1     8.62           8.58         2     13.8           13.6\n 2  2013     1     1     8.88           8.82         4     14.2           13.8\n 3  2013     1     1     9.03           9            2     15.4           14.2\n 4  2013     1     1     9.07           9.08        -1     16.7           17.0\n 5  2013     1     1     9.23          10           -6     13.5           14.0\n 6  2013     1     1     9.23           9.3         -4     12.3           12.1\n 7  2013     1     1     9.25          10           -5     15.2           14.2\n 8  2013     1     1     9.28          10           -3     11.8           12.0\n 9  2013     1     1     9.28          10           -3     14.0           14.1\n10  2013     1     1     9.3           10           -2     12.6           12.4\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/11_mutating.html#changing-multiple-columns-2",
    "href": "slides/11_mutating.html#changing-multiple-columns-2",
    "title": "Mutating columns",
    "section": "Changing multiple columns",
    "text": "Changing multiple columns\ndplyr::across()\nWhat if you need to pass arguments to your function?\n\nprint(mutate(flights, across(contains(\"_time\"), ~ .x / 60)), n = 5)\n\n\n\n\n\n\n\nNote\n\n\n\nStart with ~\n\nReplace where the column name should be with .x\n\nNote dividing these numbers by 60 doesn’t make sense—just an example"
  },
  {
    "objectID": "slides/11_mutating.html#mental-model-of-mutating-columns-1",
    "href": "slides/11_mutating.html#mental-model-of-mutating-columns-1",
    "title": "Mutating columns",
    "section": "Mental model of mutating columns",
    "text": "Mental model of mutating columns"
  },
  {
    "objectID": "slides/11_mutating.html#lets-code",
    "href": "slides/11_mutating.html#lets-code",
    "title": "Mutating columns",
    "section": "Let’s code!",
    "text": "Let’s code!\nMutating data"
  },
  {
    "objectID": "slides/09_validating.html#mental-model-of-importing-data",
    "href": "slides/09_validating.html#mental-model-of-importing-data",
    "title": "Validating data",
    "section": "Mental model of importing data",
    "text": "Mental model of importing data"
  },
  {
    "objectID": "slides/09_validating.html#set-up",
    "href": "slides/09_validating.html#set-up",
    "title": "Validating data",
    "section": "Set up",
    "text": "Set up\nImport dog breed traits data\n\n(mydf &lt;- readr::read_csv(here::here(\"data/dog_breed_traits.csv\")))\n\n# A tibble: 195 × 17\n   Breed    Affectionate With Fa…¹ Good With Young Chil…² `Good With Other Dogs`\n   &lt;chr&gt;                     &lt;dbl&gt;                  &lt;dbl&gt;                  &lt;dbl&gt;\n 1 Retriev…                      5                      5                      5\n 2 French …                      5                      5                      4\n 3 German …                      5                      5                      3\n 4 Retriev…                      5                      5                      5\n 5 Bulldogs                      4                      3                      3\n 6 Poodles                       5                      5                      3\n 7 Beagles                       3                      5                      5\n 8 Rottwei…                      5                      3                      3\n 9 Pointer…                      5                      5                      4\n10 Dachshu…                      5                      3                      4\n# ℹ 185 more rows\n# ℹ abbreviated names: ¹​`Affectionate With Family`, ²​`Good With Young Children`\n# ℹ 13 more variables: `Shedding Level` &lt;dbl&gt;, `Coat Grooming Frequency` &lt;dbl&gt;,\n#   `Drooling Level` &lt;dbl&gt;, `Coat Type` &lt;chr&gt;, `Coat Length` &lt;chr&gt;,\n#   `Openness To Strangers` &lt;dbl&gt;, `Playfulness Level` &lt;dbl&gt;,\n#   `Watchdog/Protective Nature` &lt;dbl&gt;, `Adaptability Level` &lt;dbl&gt;,\n#   `Trainability Level` &lt;dbl&gt;, `Energy Level` &lt;dbl&gt;, `Barking Level` &lt;dbl&gt;, …"
  },
  {
    "objectID": "slides/09_validating.html#set-up-1",
    "href": "slides/09_validating.html#set-up-1",
    "title": "Validating data",
    "section": "Set up",
    "text": "Set up\nAlso load {palmerpenguins} for access to penguins\n\n\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "slides/09_validating.html#data-validation-1",
    "href": "slides/09_validating.html#data-validation-1",
    "title": "Validating data",
    "section": "Data validation",
    "text": "Data validation\nCheck that your imported data are correct/valid/reasonable\n\nDimensions\nData types\nRanges and constraints\nAllowed values (code lists)\nColumn dependencies\nCompleteness/uniqueness\nMissing values"
  },
  {
    "objectID": "slides/09_validating.html#dimensions",
    "href": "slides/09_validating.html#dimensions",
    "title": "Validating data",
    "section": "Dimensions",
    "text": "Dimensions\nDoes the data frame have the correct dimensions?\nHow do we view dimensions of a data frame?\n\n\ndim(mydf)\n\n[1] 195  17\n\n\n\n\nHow do we check if dimensions match a specific set of values?\n\n\n\ndim(mydf) == c(195, 17)\n\n[1] TRUE TRUE\n\n\n\n\nAnd we can stop a script from processing with stopifnot()\n\n\nstopifnot(dim(mydf) == c(19, 17))\n\nError: dim(mydf) == c(19, 17) are not all TRUE"
  },
  {
    "objectID": "slides/09_validating.html#data-types",
    "href": "slides/09_validating.html#data-types",
    "title": "Validating data",
    "section": "Data types",
    "text": "Data types\nDo the data columns have the correct data types?\nHow do we check all data types of a data frame?\n\n\nstr(mydf)\n\nspc_tbl_ [195 × 17] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Breed                     : chr [1:195] \"Retrievers (Labrador)\" \"French Bulldogs\" \"German Shepherd Dogs\" \"Retrievers (Golden)\" ...\n $ Affectionate With Family  : num [1:195] 5 5 5 5 4 5 3 5 5 5 ...\n $ Good With Young Children  : num [1:195] 5 5 5 5 3 5 5 3 5 3 ...\n $ Good With Other Dogs      : num [1:195] 5 4 3 5 3 3 5 3 4 4 ...\n $ Shedding Level            : num [1:195] 4 3 4 4 3 1 3 3 3 2 ...\n $ Coat Grooming Frequency   : num [1:195] 2 1 2 2 3 4 2 1 2 2 ...\n $ Drooling Level            : num [1:195] 2 3 2 2 3 1 1 3 2 2 ...\n $ Coat Type                 : chr [1:195] \"Double\" \"Smooth\" \"Double\" \"Double\" ...\n $ Coat Length               : chr [1:195] \"Short\" \"Short\" \"Medium\" \"Medium\" ...\n $ Openness To Strangers     : num [1:195] 5 5 3 5 4 5 3 3 4 4 ...\n $ Playfulness Level         : num [1:195] 5 5 4 4 4 5 4 4 4 4 ...\n $ Watchdog/Protective Nature: num [1:195] 3 3 5 3 3 5 2 5 4 4 ...\n $ Adaptability Level        : num [1:195] 5 5 5 5 3 4 4 4 4 4 ...\n $ Trainability Level        : num [1:195] 5 4 5 5 4 5 3 5 5 4 ...\n $ Energy Level              : num [1:195] 5 3 5 3 3 4 4 3 5 3 ...\n $ Barking Level             : num [1:195] 3 1 3 1 2 4 4 1 3 5 ...\n $ Mental Stimulation Needs  : num [1:195] 4 3 5 4 3 5 4 5 5 3 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Breed = col_character(),\n  ..   `Affectionate With Family` = col_double(),\n  ..   `Good With Young Children` = col_double(),\n  ..   `Good With Other Dogs` = col_double(),\n  ..   `Shedding Level` = col_double(),\n  ..   `Coat Grooming Frequency` = col_double(),\n  ..   `Drooling Level` = col_double(),\n  ..   `Coat Type` = col_character(),\n  ..   `Coat Length` = col_character(),\n  ..   `Openness To Strangers` = col_double(),\n  ..   `Playfulness Level` = col_double(),\n  ..   `Watchdog/Protective Nature` = col_double(),\n  ..   `Adaptability Level` = col_double(),\n  ..   `Trainability Level` = col_double(),\n  ..   `Energy Level` = col_double(),\n  ..   `Barking Level` = col_double(),\n  ..   `Mental Stimulation Needs` = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt;"
  },
  {
    "objectID": "slides/09_validating.html#data-types-1",
    "href": "slides/09_validating.html#data-types-1",
    "title": "Validating data",
    "section": "Data types",
    "text": "Data types\nDo the data columns have the correct data types?\nTest specific data type for individual columns\n\nis.numeric(mydf$`Drooling Level`)\n\n[1] TRUE"
  },
  {
    "objectID": "slides/09_validating.html#ranges-and-constraints",
    "href": "slides/09_validating.html#ranges-and-constraints",
    "title": "Validating data",
    "section": "Ranges and constraints",
    "text": "Ranges and constraints\nDo numerical column values have the correct range and/or other constraints?\n\n\n\n\n\n\n\nNote\n\n\nUseful to check for Likert scales and measures of age (especially coming out of Qualtrics).\n\n\n\n\nrange(mydf$`Drooling Level`)\n\n[1] 1 5"
  },
  {
    "objectID": "slides/09_validating.html#allowed-values-code-lists",
    "href": "slides/09_validating.html#allowed-values-code-lists",
    "title": "Validating data",
    "section": "Allowed values (code lists)",
    "text": "Allowed values (code lists)\nDo categorical column values have the correct possible values?\n\n\n\n\n\n\n\nNote\n\n\nUseful to check for when users can enter text instead of choose options.\n\n\n\n\n(recorded_coats &lt;- unique(mydf$`Coat Type`))\n\n[1] \"Double\"   \"Smooth\"   \"Curly\"    \"Silky\"    \"Wavy\"     \"Wiry\"     \"Hairless\"\n[8] \"Rough\"    \"Corded\"  \n\n\n\nallowed_coats &lt;- c(\"Smooth\", \"Curly\", \"Silky\", \"Wavy\", \"Wiry\", \"Rough\")\nrecorded_coats %in% allowed_coats\n\n[1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE"
  },
  {
    "objectID": "slides/09_validating.html#column-dependencies",
    "href": "slides/09_validating.html#column-dependencies",
    "title": "Validating data",
    "section": "Column dependencies",
    "text": "Column dependencies\nDo column dependencies match up?\nE.g., if “other” is selected in choice column, does other column have an entry?\n\ndf$choice == \"other\" & !is.na(df$other)\n\n\n\n\n\n\n\n\nMultiple conditional statements\n\n\n& is the conditional AND where both individual conditional statements must be true for the overall return value to be TRUE\n\na &lt;- 7\na &gt; 5 & a &lt; 10\n\n[1] TRUE"
  },
  {
    "objectID": "slides/09_validating.html#completeness",
    "href": "slides/09_validating.html#completeness",
    "title": "Validating data",
    "section": "Completeness",
    "text": "Completeness\nAre all expected observations included?\nHow do we test this?\n\n\nobserved_subjects %in% expected_subjects"
  },
  {
    "objectID": "slides/09_validating.html#uniqueness",
    "href": "slides/09_validating.html#uniqueness",
    "title": "Validating data",
    "section": "Uniqueness",
    "text": "Uniqueness\nAre there duplicate observations?\n\n\n\n\nduplicated(mydf$Breed)\n\n  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[145] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[157] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[169] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[181] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[193] FALSE FALSE FALSE\n\n\n\n\nmydf[duplicated(mydf$Breed), ]\n\n# A tibble: 0 × 17\n# ℹ 17 variables: Breed &lt;chr&gt;, Affectionate With Family &lt;dbl&gt;,\n#   Good With Young Children &lt;dbl&gt;, Good With Other Dogs &lt;dbl&gt;,\n#   Shedding Level &lt;dbl&gt;, Coat Grooming Frequency &lt;dbl&gt;, Drooling Level &lt;dbl&gt;,\n#   Coat Type &lt;chr&gt;, Coat Length &lt;chr&gt;, Openness To Strangers &lt;dbl&gt;,\n#   Playfulness Level &lt;dbl&gt;, Watchdog/Protective Nature &lt;dbl&gt;,\n#   Adaptability Level &lt;dbl&gt;, Trainability Level &lt;dbl&gt;, Energy Level &lt;dbl&gt;,\n#   Barking Level &lt;dbl&gt;, Mental Stimulation Needs &lt;dbl&gt;"
  },
  {
    "objectID": "slides/09_validating.html#missing-values",
    "href": "slides/09_validating.html#missing-values",
    "title": "Validating data",
    "section": "Missing values",
    "text": "Missing values\nAre there individual vectors with missing data?\n\nis.na(penguins$bill_length_mm)\n\n  [1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [97] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[109] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[121] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[133] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[145] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[157] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[169] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[181] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[193] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[205] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[217] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[229] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[241] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[253] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[265] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n[277] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[289] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[301] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[313] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[325] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[337] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\n\n\npenguins[is.na(penguins$bill_length_mm), ]\n\n# A tibble: 2 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen             NA            NA                NA          NA\n2 Gentoo  Biscoe                NA            NA                NA          NA\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/09_validating.html#missing-values-1",
    "href": "slides/09_validating.html#missing-values-1",
    "title": "Validating data",
    "section": "Missing values",
    "text": "Missing values\nDo any columns have missing data?\ncomplete.cases() returns logical vector of which cases have no missing values\n\npenguins[!complete.cases(penguins), ]\n\n# A tibble: 11 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           NA            NA                  NA          NA\n 2 Adelie  Torgersen           34.1          18.1               193        3475\n 3 Adelie  Torgersen           42            20.2               190        4250\n 4 Adelie  Torgersen           37.8          17.1               186        3300\n 5 Adelie  Torgersen           37.8          17.3               180        3700\n 6 Adelie  Dream               37.5          18.9               179        2975\n 7 Gentoo  Biscoe              44.5          14.3               216        4100\n 8 Gentoo  Biscoe              46.2          14.4               214        4650\n 9 Gentoo  Biscoe              47.3          13.8               216        4725\n10 Gentoo  Biscoe              44.5          15.7               217        4875\n11 Gentoo  Biscoe              NA            NA                  NA          NA\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/09_validating.html#missing-values-2",
    "href": "slides/09_validating.html#missing-values-2",
    "title": "Validating data",
    "section": "Missing values",
    "text": "Missing values\nWhat are the index values of the observations with missing data?\nwhich() returns which indices are TRUE\n\nwhich(!complete.cases(penguins))\n\n [1]   4   9  10  11  12  48 179 219 257 269 272"
  },
  {
    "objectID": "slides/09_validating.html#summarizing-data-1",
    "href": "slides/09_validating.html#summarizing-data-1",
    "title": "Validating data",
    "section": "Summarizing data",
    "text": "Summarizing data\nhead()\n\nhead(mydf)\n\n# A tibble: 6 × 17\n  Breed     Affectionate With Fa…¹ Good With Young Chil…² `Good With Other Dogs`\n  &lt;chr&gt;                      &lt;dbl&gt;                  &lt;dbl&gt;                  &lt;dbl&gt;\n1 Retrieve…                      5                      5                      5\n2 French B…                      5                      5                      4\n3 German S…                      5                      5                      3\n4 Retrieve…                      5                      5                      5\n5 Bulldogs                       4                      3                      3\n6 Poodles                        5                      5                      3\n# ℹ abbreviated names: ¹​`Affectionate With Family`, ²​`Good With Young Children`\n# ℹ 13 more variables: `Shedding Level` &lt;dbl&gt;, `Coat Grooming Frequency` &lt;dbl&gt;,\n#   `Drooling Level` &lt;dbl&gt;, `Coat Type` &lt;chr&gt;, `Coat Length` &lt;chr&gt;,\n#   `Openness To Strangers` &lt;dbl&gt;, `Playfulness Level` &lt;dbl&gt;,\n#   `Watchdog/Protective Nature` &lt;dbl&gt;, `Adaptability Level` &lt;dbl&gt;,\n#   `Trainability Level` &lt;dbl&gt;, `Energy Level` &lt;dbl&gt;, `Barking Level` &lt;dbl&gt;,\n#   `Mental Stimulation Needs` &lt;dbl&gt;"
  },
  {
    "objectID": "slides/09_validating.html#summarizing-data-2",
    "href": "slides/09_validating.html#summarizing-data-2",
    "title": "Validating data",
    "section": "Summarizing data",
    "text": "Summarizing data\nglimpse()\n\ntibble::glimpse(mydf)\n\nRows: 195\nColumns: 17\n$ Breed                        &lt;chr&gt; \"Retrievers (Labrador)\", \"French Bulldogs…\n$ `Affectionate With Family`   &lt;dbl&gt; 5, 5, 5, 5, 4, 5, 3, 5, 5, 5, 5, 3, 5, 4,…\n$ `Good With Young Children`   &lt;dbl&gt; 5, 5, 5, 5, 3, 5, 5, 3, 5, 3, 3, 5, 5, 5,…\n$ `Good With Other Dogs`       &lt;dbl&gt; 5, 4, 3, 5, 3, 3, 5, 3, 4, 4, 4, 3, 3, 3,…\n$ `Shedding Level`             &lt;dbl&gt; 4, 3, 4, 4, 3, 1, 3, 3, 3, 2, 4, 3, 1, 2,…\n$ `Coat Grooming Frequency`    &lt;dbl&gt; 2, 1, 2, 2, 3, 4, 2, 1, 2, 2, 2, 2, 5, 2,…\n$ `Drooling Level`             &lt;dbl&gt; 2, 3, 2, 2, 3, 1, 1, 3, 2, 2, 1, 1, 1, 3,…\n$ `Coat Type`                  &lt;chr&gt; \"Double\", \"Smooth\", \"Double\", \"Double\", \"…\n$ `Coat Length`                &lt;chr&gt; \"Short\", \"Short\", \"Medium\", \"Medium\", \"Sh…\n$ `Openness To Strangers`      &lt;dbl&gt; 5, 5, 3, 5, 4, 5, 3, 3, 4, 4, 4, 3, 5, 4,…\n$ `Playfulness Level`          &lt;dbl&gt; 5, 5, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4,…\n$ `Watchdog/Protective Nature` &lt;dbl&gt; 3, 3, 5, 3, 3, 5, 2, 5, 4, 4, 5, 3, 5, 4,…\n$ `Adaptability Level`         &lt;dbl&gt; 5, 5, 5, 5, 3, 4, 4, 4, 4, 4, 4, 3, 5, 3,…\n$ `Trainability Level`         &lt;dbl&gt; 5, 4, 5, 5, 4, 5, 3, 5, 5, 4, 4, 5, 4, 4,…\n$ `Energy Level`               &lt;dbl&gt; 5, 3, 5, 3, 3, 4, 4, 3, 5, 3, 4, 5, 4, 4,…\n$ `Barking Level`              &lt;dbl&gt; 3, 1, 3, 1, 2, 4, 4, 1, 3, 5, 4, 3, 4, 3,…\n$ `Mental Stimulation Needs`   &lt;dbl&gt; 4, 3, 5, 4, 3, 5, 4, 5, 5, 3, 4, 5, 4, 4,…"
  },
  {
    "objectID": "slides/09_validating.html#summarizing-data-3",
    "href": "slides/09_validating.html#summarizing-data-3",
    "title": "Validating data",
    "section": "Summarizing data",
    "text": "Summarizing data\nsummary()\n\nsummary(penguins)\n\n      species          island    bill_length_mm  bill_depth_mm  \n Adelie   :152   Biscoe   :168   Min.   :32.10   Min.   :13.10  \n Chinstrap: 68   Dream    :124   1st Qu.:39.23   1st Qu.:15.60  \n Gentoo   :124   Torgersen: 52   Median :44.45   Median :17.30  \n                                 Mean   :43.92   Mean   :17.15  \n                                 3rd Qu.:48.50   3rd Qu.:18.70  \n                                 Max.   :59.60   Max.   :21.50  \n                                 NA's   :2       NA's   :2      \n flipper_length_mm  body_mass_g       sex           year     \n Min.   :172.0     Min.   :2700   female:165   Min.   :2007  \n 1st Qu.:190.0     1st Qu.:3550   male  :168   1st Qu.:2007  \n Median :197.0     Median :4050   NA's  : 11   Median :2008  \n Mean   :200.9     Mean   :4202                Mean   :2008  \n 3rd Qu.:213.0     3rd Qu.:4750                3rd Qu.:2009  \n Max.   :231.0     Max.   :6300                Max.   :2009  \n NA's   :2         NA's   :2"
  },
  {
    "objectID": "slides/09_validating.html#excluder",
    "href": "slides/09_validating.html#excluder",
    "title": "Validating data",
    "section": "{excluder}",
    "text": "{excluder}\nWorking with Qualtrics data can be … challenging.\n{excluder} helps:\n\n\nget rid of initial rows with remove_label_rows()\n\nuse Qualtrics labels as column names with use_labels()\n\ndeidentify data with deidentify()\n\nview, mark, or exclude data based on: preview status, survey progress, survey completion time, IP address country, geolocation, duplicate IP address, and screen resolution"
  },
  {
    "objectID": "slides/09_validating.html#datareporter",
    "href": "slides/09_validating.html#datareporter",
    "title": "Validating data",
    "section": "{dataReporter}",
    "text": "{dataReporter}"
  },
  {
    "objectID": "slides/09_validating.html#datareporter-1",
    "href": "slides/09_validating.html#datareporter-1",
    "title": "Validating data",
    "section": "{dataReporter}",
    "text": "{dataReporter}"
  },
  {
    "objectID": "slides/09_validating.html#datareporter-2",
    "href": "slides/09_validating.html#datareporter-2",
    "title": "Validating data",
    "section": "{dataReporter}",
    "text": "{dataReporter}\n\ndataReporter::makeCodebook(mydf3, file = here::here(\"06_codebook.Rmd\"))"
  },
  {
    "objectID": "slides/09_validating.html#lets-code",
    "href": "slides/09_validating.html#lets-code",
    "title": "Validating data",
    "section": "Let’s code!",
    "text": "Let’s code!\nValidating data"
  },
  {
    "objectID": "slides/07_datastructures.html#mental-model-of-data-types",
    "href": "slides/07_datastructures.html#mental-model-of-data-types",
    "title": "Data structures",
    "section": "Mental model of data types",
    "text": "Mental model of data types"
  },
  {
    "objectID": "slides/07_datastructures.html#vectors-1",
    "href": "slides/07_datastructures.html#vectors-1",
    "title": "Data structures",
    "section": "Vectors",
    "text": "Vectors\n\n\nActually, everything in R is a vector\n\n\nvector = atomic vector\n\n\nelements with a single dimension of the same data type"
  },
  {
    "objectID": "slides/07_datastructures.html#create-vectors-with-c",
    "href": "slides/07_datastructures.html#create-vectors-with-c",
    "title": "Data structures",
    "section": "Create vectors with c()\n",
    "text": "Create vectors with c()\n\nNumeric vectors\n\n(myvec1 &lt;- c(1, 5, 3, 6))\n\n[1] 1 5 3 6\n\n(myvec2 &lt;- c(11, 14, 18, 12))\n\n[1] 11 14 18 12\n\n\n\nc(myvec1, myvec2)\n\n[1]  1  5  3  6 11 14 18 12"
  },
  {
    "objectID": "slides/07_datastructures.html#create-vectors-with-c-1",
    "href": "slides/07_datastructures.html#create-vectors-with-c-1",
    "title": "Data structures",
    "section": "Create vectors with c()\n",
    "text": "Create vectors with c()\n\nCharacter vectors\n\n(myvec3 &lt;- c(\"a\", \"b\", \"c\"))\n\n[1] \"a\" \"b\" \"c\""
  },
  {
    "objectID": "slides/07_datastructures.html#create-vectors-with-c-2",
    "href": "slides/07_datastructures.html#create-vectors-with-c-2",
    "title": "Data structures",
    "section": "Create vectors with c()\n",
    "text": "Create vectors with c()\n\n\n\n\n\n\n\nStrain your brain\n\n\nWhat do you think will happen if you combine myvec2 and myvec3?\n\n\n\n\nmyvec2\n\n[1] 11 14 18 12\n\nmyvec3\n\n[1] \"a\" \"b\" \"c\"\n\n\n\nc(myvec2, myvec3)\n\n\n\n\n[1] \"11\" \"14\" \"18\" \"12\" \"a\"  \"b\"  \"c\" \n\n\nNumeric vector myvec2 converts to character vector to combine with myvec3"
  },
  {
    "objectID": "slides/07_datastructures.html#create-sequences-with-seq",
    "href": "slides/07_datastructures.html#create-sequences-with-seq",
    "title": "Data structures",
    "section": "Create sequences with seq()\n",
    "text": "Create sequences with seq()\n\n\nseq(from = 0, to = 20, by = 5)\n\n[1]  0  5 10 15 20\n\nseq(from = 20, to = 0, by = -5)\n\n[1] 20 15 10  5  0\n\nseq(0, 1, 0.2)\n\n[1] 0.0 0.2 0.4 0.6 0.8 1.0\n\n\n\n\n\n\n\n\n\nTry it!\n\n\nMake a sequence from 0 to 100 in steps of 10."
  },
  {
    "objectID": "slides/07_datastructures.html#create-sequences-with",
    "href": "slides/07_datastructures.html#create-sequences-with",
    "title": "Data structures",
    "section": "Create sequences with :\n",
    "text": "Create sequences with :\n\nSequences with increments of 1\n\n4:9\n\n[1] 4 5 6 7 8 9\n\n9:4\n\n[1] 9 8 7 6 5 4"
  },
  {
    "objectID": "slides/07_datastructures.html#create-repetitions-with-rep",
    "href": "slides/07_datastructures.html#create-repetitions-with-rep",
    "title": "Data structures",
    "section": "Create repetitions with rep()\n",
    "text": "Create repetitions with rep()\n\nRepeat single numbers\n\nrep(0, times = 10)\n\n [1] 0 0 0 0 0 0 0 0 0 0"
  },
  {
    "objectID": "slides/07_datastructures.html#create-repetitions-with-rep-1",
    "href": "slides/07_datastructures.html#create-repetitions-with-rep-1",
    "title": "Data structures",
    "section": "Create repetitions with rep()\n",
    "text": "Create repetitions with rep()\n\nRepeat vectors\n\nrep(myvec3, times = 3)\n\n[1] \"a\" \"b\" \"c\" \"a\" \"b\" \"c\" \"a\" \"b\" \"c\"\n\nrep(c(\"d\", \"e\", \"f\"), times = 3)\n\n[1] \"d\" \"e\" \"f\" \"d\" \"e\" \"f\" \"d\" \"e\" \"f\""
  },
  {
    "objectID": "slides/07_datastructures.html#create-repetitions-with-rep-2",
    "href": "slides/07_datastructures.html#create-repetitions-with-rep-2",
    "title": "Data structures",
    "section": "Create repetitions with rep()\n",
    "text": "Create repetitions with rep()\n\nRepeat sequences\n\nrep(1:4, times = 3)\n\n [1] 1 2 3 4 1 2 3 4 1 2 3 4\n\n\n\nrep(1:4, each = 3)\n\n [1] 1 1 1 2 2 2 3 3 3 4 4 4\n\n\n\n\n\n\n\n\n\nTry it!\n\n\nCreate a repetition of “yes” and “no” with 10 instance of each, alternating between the two. Then make one with 10 “yes” and then 10 “no”."
  },
  {
    "objectID": "slides/07_datastructures.html#working-with-vectors",
    "href": "slides/07_datastructures.html#working-with-vectors",
    "title": "Data structures",
    "section": "Working with vectors",
    "text": "Working with vectors\nFind vector length with length()\n\n\nmyvec3\n\n[1] \"a\" \"b\" \"c\"\n\nlength(myvec3)\n\n[1] 3\n\n\n\n\n\n\n\n\n\nTry it!\n\n\nHow long is the combined vector of myvec1 and myvec2?"
  },
  {
    "objectID": "slides/07_datastructures.html#checking-typeof-and-str",
    "href": "slides/07_datastructures.html#checking-typeof-and-str",
    "title": "Data structures",
    "section": "Checking typeof() and str()\n",
    "text": "Checking typeof() and str()\n\n\n\n\nmyvec2\n\n[1] 11 14 18 12\n\ntypeof(myvec2)\n\n[1] \"double\"\n\nstr(myvec2)\n\n num [1:4] 11 14 18 12\n\n\n\n\nmyvec3\n\n[1] \"a\" \"b\" \"c\"\n\ntypeof(myvec3)\n\n[1] \"character\"\n\nstr(myvec3)\n\n chr [1:3] \"a\" \"b\" \"c\""
  },
  {
    "objectID": "slides/07_datastructures.html#index-with",
    "href": "slides/07_datastructures.html#index-with",
    "title": "Data structures",
    "section": "Index with []\n",
    "text": "Index with []\n\nTracks the content of a specific element (starting with 1)\n\n\nmyvec2\n\n[1] 11 14 18 12\n\nmyvec2[2]\n\n[1] 14\n\n\n\n\nAllows subsetting\n\nmyvec2[2:4]\n\n[1] 14 18 12\n\nmyvec2[c(4, 1, 3)]\n\n[1] 12 11 18\n\n\n\n\nAllows reassignment\n\nmyvec2[2] &lt;- NA\nmyvec2\n\n[1] 11 NA 18 12"
  },
  {
    "objectID": "slides/07_datastructures.html#lists",
    "href": "slides/07_datastructures.html#lists",
    "title": "Data structures",
    "section": "Lists",
    "text": "Lists\nRecursive vectors (vectors of vectors) potentially with different data types\n\n\n(mylist &lt;- list(a = 1:4, b = c(4, 3, 8, 5), c = LETTERS[10:15], d = c(\"yes\", \"yes\")))\n\n$a\n[1] 1 2 3 4\n\n$b\n[1] 4 3 8 5\n\n$c\n[1] \"J\" \"K\" \"L\" \"M\" \"N\" \"O\"\n\n$d\n[1] \"yes\" \"yes\""
  },
  {
    "objectID": "slides/07_datastructures.html#working-with-lists",
    "href": "slides/07_datastructures.html#working-with-lists",
    "title": "Data structures",
    "section": "Working with lists",
    "text": "Working with lists\n\ntypeof(mylist)\n\n[1] \"list\"\n\ntypeof(mylist$b)\n\n[1] \"double\"\n\nstr(mylist)\n\nList of 4\n $ a: int [1:4] 1 2 3 4\n $ b: num [1:4] 4 3 8 5\n $ c: chr [1:6] \"J\" \"K\" \"L\" \"M\" ...\n $ d: chr [1:2] \"yes\" \"yes\""
  },
  {
    "objectID": "slides/07_datastructures.html#data-frames",
    "href": "slides/07_datastructures.html#data-frames",
    "title": "Data structures",
    "section": "Data frames",
    "text": "Data frames\nList of named vectors of the same length (rectangular)\n\nmydf &lt;- data.frame(\n  datetime = as.Date(c(\"2021-04-21 11:56:12\", \"2021-04-21 14:57:44\", \"2021-04-22 03:09:56\", \"2021-04-22 12:39:22\")),\n  session_complete = as.logical(c(\"TRUE\", \"TRUE\", \"TRUE\", \"FALSE\")),\n  condition = as.factor(c(\"control\", \"control\", \"experimental\", \"experimental\")),\n  mean_response = c(17.53, 24.45, 19.82, NA),\n  age = c(19, 20, 19, NA),\n  comments = c(\"none\", \"Great study\", \"toooo long\", NA)\n  )"
  },
  {
    "objectID": "slides/07_datastructures.html#data-frames-1",
    "href": "slides/07_datastructures.html#data-frames-1",
    "title": "Data structures",
    "section": "Data frames",
    "text": "Data frames\nList of named vectors of the same length (rectangular)\n\nmydf\n\n    datetime session_complete    condition mean_response age    comments\n1 2021-04-21             TRUE      control         17.53  19        none\n2 2021-04-21             TRUE      control         24.45  20 Great study\n3 2021-04-22             TRUE experimental         19.82  19  toooo long\n4 2021-04-22            FALSE experimental            NA  NA        &lt;NA&gt;\n\n\n\n\ntypeof(mydf)\n\n[1] \"list\"\n\nstr(mydf)\n\n'data.frame':   4 obs. of  6 variables:\n $ datetime        : Date, format: \"2021-04-21\" \"2021-04-21\" ...\n $ session_complete: logi  TRUE TRUE TRUE FALSE\n $ condition       : Factor w/ 2 levels \"control\",\"experimental\": 1 1 2 2\n $ mean_response   : num  17.5 24.4 19.8 NA\n $ age             : num  19 20 19 NA\n $ comments        : chr  \"none\" \"Great study\" \"toooo long\" NA"
  },
  {
    "objectID": "slides/07_datastructures.html#creating-data-frames",
    "href": "slides/07_datastructures.html#creating-data-frames",
    "title": "Data structures",
    "section": "Creating data frames",
    "text": "Creating data frames\n\n\nCreate new vectors\n\n(mydf1 &lt;- data.frame(subject = 1:3, \n                     response = 8:6))\n\n  subject response\n1       1        8\n2       2        7\n3       3        6\n\n\n\n\nCombine existing vectors\n\nvar1 &lt;- c(1:6)\nvar2 &lt;- c(6:1)\nvar3 &lt;- c(21:26)\nmydf2 &lt;- data.frame(var1, var2, \n                    resp = var3)\nmydf2\n\n  var1 var2 resp\n1    1    6   21\n2    2    5   22\n3    3    4   23\n4    4    3   24\n5    5    2   25\n6    6    1   26"
  },
  {
    "objectID": "slides/07_datastructures.html#index-with-row-column",
    "href": "slides/07_datastructures.html#index-with-row-column",
    "title": "Data structures",
    "section": "Index with [row, column]\n",
    "text": "Index with [row, column]\n\n\nmydf1\n\n  subject response\n1       1        8\n2       2        7\n3       3        6\n\nmydf1[2, 1] \n\n[1] 2\n\nmydf1[2, 1] &lt;- 6\nmydf1\n\n  subject response\n1       1        8\n2       6        7\n3       3        6"
  },
  {
    "objectID": "slides/07_datastructures.html#index-with-row-column-1",
    "href": "slides/07_datastructures.html#index-with-row-column-1",
    "title": "Data structures",
    "section": "Index with [row, column]\n",
    "text": "Index with [row, column]\n\n\n\nExtract whole rows/columns\n\nmydf1[2, ] \n\n  subject response\n2       6        7\n\nmydf1[, 2] \n\n[1] 8 7 6\n\n\n\n\nExtract subsets\n\nmydf1[2:3, 2]\n\n[1] 7 6\n\nmydf1[2:3, 1:2]\n\n  subject response\n2       6        7\n3       3        6"
  },
  {
    "objectID": "slides/07_datastructures.html#working-with-data-frames",
    "href": "slides/07_datastructures.html#working-with-data-frames",
    "title": "Data structures",
    "section": "Working with data frames",
    "text": "Working with data frames\nBut extract columns by name with $\n\n\nmydf1$response \n\n[1] 8 7 6\n\nmydf1$response[2] \n\n[1] 7\n\nmydf1$response[2:3] \n\n[1] 7 6\n\n\n\n\n\n\n\n\n\nStrain your brain\n\n\nWhy should you use column names rather than number?"
  },
  {
    "objectID": "slides/07_datastructures.html#working-with-data-frames-1",
    "href": "slides/07_datastructures.html#working-with-data-frames-1",
    "title": "Data structures",
    "section": "Working with data frames",
    "text": "Working with data frames\nView first rows with head()\n\n\nhead(mtcars)\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAdd the argument n = 10 to head(mtcars). What does this do?"
  },
  {
    "objectID": "slides/07_datastructures.html#working-with-data-frames-2",
    "href": "slides/07_datastructures.html#working-with-data-frames-2",
    "title": "Data structures",
    "section": "Working with data frames",
    "text": "Working with data frames\nView dimensions\n\ndim(mtcars)\n\n[1] 32 11\n\nnrow(mtcars)\n\n[1] 32\n\nncol(mtcars)\n\n[1] 11"
  },
  {
    "objectID": "slides/07_datastructures.html#tibbles",
    "href": "slides/07_datastructures.html#tibbles",
    "title": "Data structures",
    "section": "Tibbles",
    "text": "Tibbles\nTibbles are just tidyverse versions of data frames\n\n\n\nmydf2\n\n  var1 var2 resp\n1    1    6   21\n2    2    5   22\n3    3    4   23\n4    4    3   24\n5    5    2   25\n6    6    1   26\n\n\n\n\n(mytibble &lt;- tibble::tibble(mydf2))\n\n# A tibble: 6 × 3\n   var1  var2  resp\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     1     6    21\n2     2     5    22\n3     3     4    23\n4     4     3    24\n5     5     2    25\n6     6     1    26"
  },
  {
    "objectID": "slides/07_datastructures.html#mental-model-of-data-in-r",
    "href": "slides/07_datastructures.html#mental-model-of-data-in-r",
    "title": "Data structures",
    "section": "Mental model of data in R",
    "text": "Mental model of data in R"
  },
  {
    "objectID": "slides/07_datastructures.html#lets-code",
    "href": "slides/07_datastructures.html#lets-code",
    "title": "Data structures",
    "section": "Let’s code!",
    "text": "Let’s code!\nData structures coding"
  },
  {
    "objectID": "slides/05_rmarkdown.html#mental-model-of-file-directories",
    "href": "slides/05_rmarkdown.html#mental-model-of-file-directories",
    "title": "Literate programming",
    "section": "Mental model of file directories",
    "text": "Mental model of file directories"
  },
  {
    "objectID": "slides/05_rmarkdown.html#computer-files",
    "href": "slides/05_rmarkdown.html#computer-files",
    "title": "Literate programming",
    "section": "Computer files",
    "text": "Computer files\nAll files are collections of 1s and 0s"
  },
  {
    "objectID": "slides/05_rmarkdown.html#plain-text",
    "href": "slides/05_rmarkdown.html#plain-text",
    "title": "Literate programming",
    "section": "Plain text",
    "text": "Plain text\n\nOnly characters with no formatting\nViewable in text editor\nUsed for plain text storage (.txt, .csv) and coding (.R, .Rmd, .py, .m, .cpp)"
  },
  {
    "objectID": "slides/05_rmarkdown.html#binary",
    "href": "slides/05_rmarkdown.html#binary",
    "title": "Literate programming",
    "section": "Binary",
    "text": "Binary\n\n1s and 0s are converted to images, audio, formatted text\nWYSIWYG\nBinary document files: .docx, .xlsx, .pptx, .pdf, .png, .jpg"
  },
  {
    "objectID": "slides/05_rmarkdown.html#interacting-with-r-1",
    "href": "slides/05_rmarkdown.html#interacting-with-r-1",
    "title": "Literate programming",
    "section": "Interacting with R",
    "text": "Interacting with R\n\nConsole\nR scripts (.R)\nR Markdown files (.Rmd)"
  },
  {
    "objectID": "slides/05_rmarkdown.html#console",
    "href": "slides/05_rmarkdown.html#console",
    "title": "Literate programming",
    "section": "Console",
    "text": "Console"
  },
  {
    "objectID": "slides/05_rmarkdown.html#scripts",
    "href": "slides/05_rmarkdown.html#scripts",
    "title": "Literate programming",
    "section": "Scripts",
    "text": "Scripts"
  },
  {
    "objectID": "slides/05_rmarkdown.html#scripts-1",
    "href": "slides/05_rmarkdown.html#scripts-1",
    "title": "Literate programming",
    "section": "Scripts",
    "text": "Scripts\nRun commands\nLine-by-line or selected code\nCtrl/Cmd+Enter\nAll code above cursor\nCtrl/Cmd+Alt/Opt+B\nAll code below cursor\nCtrl/Cmd+Alt/Opt+E"
  },
  {
    "objectID": "slides/05_rmarkdown.html#scripts-2",
    "href": "slides/05_rmarkdown.html#scripts-2",
    "title": "Literate programming",
    "section": "Scripts",
    "text": "Scripts\nRun commands\nSourcing runs whole script\nCtrl/Cmd+Shift+S"
  },
  {
    "objectID": "slides/05_rmarkdown.html#comments",
    "href": "slides/05_rmarkdown.html#comments",
    "title": "Literate programming",
    "section": "Comments",
    "text": "Comments\nComments are not executed by R\n\n2+2 # this is a comment--I can say stuff that isn't run. use me often!\n# this is also a comment--I can be on my own line!"
  },
  {
    "objectID": "slides/05_rmarkdown.html#sections",
    "href": "slides/05_rmarkdown.html#sections",
    "title": "Literate programming",
    "section": "Sections",
    "text": "Sections\nYou can organize your R scripts with sections\nCtrl/Cmd+Shift+R inserts a section.\nBut all you need is\n# &lt;section label&gt; ---- (add #s for subsections)"
  },
  {
    "objectID": "slides/05_rmarkdown.html#lets-code",
    "href": "slides/05_rmarkdown.html#lets-code",
    "title": "Literate programming",
    "section": "Let’s code!",
    "text": "Let’s code!\n\n\n\nOpen course RStudio project.\nCreate new R script and save as test.R.\nType library(palmerpenguins) into script.\nIs palmerpenguins loaded? How can you check?\nRun the line to load palmerpenguins.\nType print(penguins) into script.\nSource the whole script.\nComment out the print(penguins) line.\nSource the script.\nInsert a section."
  },
  {
    "objectID": "slides/05_rmarkdown.html#literate-programming-1",
    "href": "slides/05_rmarkdown.html#literate-programming-1",
    "title": "Literate programming",
    "section": "Literate programming",
    "text": "Literate programming\n\nAn article [. . . ] in a scientific publication is not the scholarship itself, it is merely advertising of the scholarship. The actual scholarship is the complete software development environment and the complete set of instructions which generated the figures — Buckheit & Donoho (1995)\n\n\n\n\nBuckheit, J., & Donoho, D. L. (1995). WaveLab and reproducible research. In A. Antoniadis & G. Oppenheim (Eds.), Wavelets and Statistics (pp. 55–81). Springer-Verlag."
  },
  {
    "objectID": "slides/05_rmarkdown.html#why-use-literate-programming",
    "href": "slides/05_rmarkdown.html#why-use-literate-programming",
    "title": "Literate programming",
    "section": "Why use literate programming?",
    "text": "Why use literate programming?\n\nDirect connection between computations and presentation\nUpdating presentation is a breeze\nTransparent and reproducible\nPlain text less corruptable\nEasily create different kinds of output styles and files\nEasily switch between different templates"
  },
  {
    "objectID": "slides/05_rmarkdown.html#mental-model-of-r-markdown",
    "href": "slides/05_rmarkdown.html#mental-model-of-r-markdown",
    "title": "Literate programming",
    "section": "Mental model of R Markdown",
    "text": "Mental model of R Markdown"
  },
  {
    "objectID": "slides/05_rmarkdown.html#markdown",
    "href": "slides/05_rmarkdown.html#markdown",
    "title": "Literate programming",
    "section": "Markdown",
    "text": "Markdown\nHuman-readable markup that can be converted to formatted file types"
  },
  {
    "objectID": "slides/05_rmarkdown.html#markdown-1",
    "href": "slides/05_rmarkdown.html#markdown-1",
    "title": "Literate programming",
    "section": "Markdown",
    "text": "Markdown\nSee Markdown tutorial for Markdown syntax\nComments\nMarkdown uses HTML syntax for comments\n&lt;!-- comment here --&gt;"
  },
  {
    "objectID": "slides/05_rmarkdown.html#visual-editor",
    "href": "slides/05_rmarkdown.html#visual-editor",
    "title": "Literate programming",
    "section": "Visual editor",
    "text": "Visual editor"
  },
  {
    "objectID": "slides/05_rmarkdown.html#r-markdown",
    "href": "slides/05_rmarkdown.html#r-markdown",
    "title": "Literate programming",
    "section": "R Markdown",
    "text": "R Markdown\nHuman-readable markup that embeds R code and output into formatted file types"
  },
  {
    "objectID": "slides/05_rmarkdown.html#from-text-to-document",
    "href": "slides/05_rmarkdown.html#from-text-to-document",
    "title": "Literate programming",
    "section": "From text to document",
    "text": "From text to document\n\n\n\n\n\n\nSource: Allison Horst"
  },
  {
    "objectID": "slides/05_rmarkdown.html#inline-r-code",
    "href": "slides/05_rmarkdown.html#inline-r-code",
    "title": "Literate programming",
    "section": "Inline R code",
    "text": "Inline R code\nEmbed R code directly within your text with `r `\n\n\nCode:\nThe answer to 2 + 2 is `r 2 + 2`\n\n\nOutput:\nThe answer to 2 + 2 is 4."
  },
  {
    "objectID": "slides/05_rmarkdown.html#r-code-chunksblocks",
    "href": "slides/05_rmarkdown.html#r-code-chunksblocks",
    "title": "Literate programming",
    "section": "R code chunks/blocks",
    "text": "R code chunks/blocks\nWrite large chunks of R code outside of text\n\nCode:\n```{r}rnorm(10, mean = 0, sd = 1)```\n\n\nOutput:\n\n\n [1]  2.20959711  0.24486408 -0.02166971 -1.15374873  0.48231597  1.30796480\n [7] -0.48946208  0.71721902 -0.02762786  1.76987403"
  },
  {
    "objectID": "slides/05_rmarkdown.html#embed-figures",
    "href": "slides/05_rmarkdown.html#embed-figures",
    "title": "Literate programming",
    "section": "Embed figures",
    "text": "Embed figures\n```{r}plot(1:10, 2:11)```"
  },
  {
    "objectID": "slides/05_rmarkdown.html#mental-model-of-r-markdown-1",
    "href": "slides/05_rmarkdown.html#mental-model-of-r-markdown-1",
    "title": "Literate programming",
    "section": "Mental model of R Markdown",
    "text": "Mental model of R Markdown"
  },
  {
    "objectID": "slides/05_rmarkdown.html#lets-code-1",
    "href": "slides/05_rmarkdown.html#lets-code-1",
    "title": "Literate programming",
    "section": "Let’s code!",
    "text": "Let’s code!\n\n\nCreate new R Markdown file.\nType “The mean of the first 9 digits is `r mean(1:9)`.”\nKnit/render the document.\nCreate a new code chunk.\nInside the code chunk, load the palmerpenguins package and print the penguins data set.\nRun the code chunk without knitting the file.\nKnit/render the file."
  },
  {
    "objectID": "slides/03_coding.html#review-mental-model-of-rstudio",
    "href": "slides/03_coding.html#review-mental-model-of-rstudio",
    "title": "Coding basics",
    "section": "Review: Mental model of RStudio",
    "text": "Review: Mental model of RStudio"
  },
  {
    "objectID": "slides/03_coding.html#coding-actions",
    "href": "slides/03_coding.html#coding-actions",
    "title": "Coding basics",
    "section": "Coding actions",
    "text": "Coding actions\n\n\nTo evaluate means to send code to the R interpreter to process\n\n\n2 + 2 is evaluated by submitting the numbers 2 and 2 to the addition function\n\n\nTo return means to output the results\n\nAfter 2 + 2 is evaluated, the number 4 is returned\n\n\nTo print means to return the output to the console\n\nOutput can be returned without being printed"
  },
  {
    "objectID": "slides/03_coding.html#comments",
    "href": "slides/03_coding.html#comments",
    "title": "Coding basics",
    "section": "Comments",
    "text": "Comments\n\nEverything on a line after a hashtag # is a comment\nComments are not evaluated\nComments can be used as notes for the reader and to prevent code from being evaluated\n\n\n# we're about to add 2 and 2\n2 + 2 # looky there, we added 2 and 2\n\n[1] 4\n\n# 2 + 2  the hashtag was before the code here, so the code was not evaluated"
  },
  {
    "objectID": "slides/03_coding.html#functions",
    "href": "slides/03_coding.html#functions",
    "title": "Coding basics",
    "section": "Functions",
    "text": "Functions\nPerform computations and return output\n\nSys.Date()\n\n[1] \"2025-01-29\"\n\n\n\n\ngetwd()\n\n[1] \"/home/jstevens/github/dpavir2025/slides\""
  },
  {
    "objectID": "slides/03_coding.html#arguments",
    "href": "slides/03_coding.html#arguments",
    "title": "Coding basics",
    "section": "Arguments",
    "text": "Arguments\nInformation needed by functions\n\nThey include argument names and values\n\nread.csv(file = \"mypath/myfile.csv\")\ndplyr::filter(.data = mydata, mycolumn == \"Sophomore\")\nplot(x = x, y = y)\nwrite.csv(x = mydata, file = \"mypath/myfile.csv\")\n\n\n\n\n\n\n\n\n\nNote\n\n\nIf you give argument values in correct order, you don’t need to include argument names. But it’s usually a good idea anyway.\n\nread.csv(\"mypath/myfile.csv\")\ndplyr::filter(mydata, mycolumn == \"Sophomore\")\nplot(x, y)\nwrite.csv(mydata, \"mypath/myfile.csv\")"
  },
  {
    "objectID": "slides/03_coding.html#objects",
    "href": "slides/03_coding.html#objects",
    "title": "Coding basics",
    "section": "Objects",
    "text": "Objects\nVariables created to store information\n\nmydata &lt;- read.csv(file = \"mypath/myfile.csv\")\ntrimmed_data &lt;- dplyr::filter(.data = mydata, mycolumn == \"Sophomore\")\nmyplot &lt;- plot(x = x, y = y)"
  },
  {
    "objectID": "slides/03_coding.html#assignment",
    "href": "slides/03_coding.html#assignment",
    "title": "Coding basics",
    "section": "Assignment",
    "text": "Assignment\nAssign a value or set of values to an object\n\n# the best way\nx &lt;- 9\n# avoid this\ny = 10\n# definitely don't do this\n11 -&gt; z\n\n\n\n\n\n\n\n\nNote\n\n\nYou can assign multiple objects at the same time:\n\n# chain assignments of the same value to different objects\na &lt;- b &lt;- c &lt;- 0"
  },
  {
    "objectID": "slides/03_coding.html#assignment-1",
    "href": "slides/03_coding.html#assignment-1",
    "title": "Coding basics",
    "section": "Assignment",
    "text": "Assignment\nViewing object contents while assigning\n\nx &lt;- 9  # assign value 9 to object x\n\n\n\nx  # print contents of object x to console\n\n[1] 9\n\n\n\n\n\n(x &lt;- 9)  # add parentheses to print to console when assigning\n\n[1] 9"
  },
  {
    "objectID": "slides/03_coding.html#when-things-go-wrong",
    "href": "slides/03_coding.html#when-things-go-wrong",
    "title": "Coding basics",
    "section": "When things go wrong",
    "text": "When things go wrong\nErrors\nWhen a function hits a problem that stops it from completing\n\nmean()\n\nError in mean.default() : argument \"x\" is missing, with no default"
  },
  {
    "objectID": "slides/03_coding.html#when-things-go-wrong-1",
    "href": "slides/03_coding.html#when-things-go-wrong-1",
    "title": "Coding basics",
    "section": "When things go wrong",
    "text": "When things go wrong\nWarnings\nWhen a function completes but something strang happens, so it alerts you\n\nmean(sqrt(-1))\n\nWarning in sqrt(-1): NaNs produced\n\n\n[1] NaN"
  },
  {
    "objectID": "slides/03_coding.html#when-things-go-wrong-2",
    "href": "slides/03_coding.html#when-things-go-wrong-2",
    "title": "Coding basics",
    "section": "When things go wrong",
    "text": "When things go wrong\nMessages\nWhen a function just wants to let you know something\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "slides/03_coding.html#mental-model-of-coding",
    "href": "slides/03_coding.html#mental-model-of-coding",
    "title": "Coding basics",
    "section": "Mental model of coding",
    "text": "Mental model of coding"
  },
  {
    "objectID": "slides/03_coding.html#who-are-we-coding-for",
    "href": "slides/03_coding.html#who-are-we-coding-for",
    "title": "Coding basics",
    "section": "Who are we coding for?",
    "text": "Who are we coding for?\n\n\n\n\n\nComputer\nOurselves\nOthers"
  },
  {
    "objectID": "slides/03_coding.html#how-to-write-good-code",
    "href": "slides/03_coding.html#how-to-write-good-code",
    "title": "Coding basics",
    "section": "How to write good code",
    "text": "How to write good code\nThe Fundamental Theorem of Readability\n\n\nCode should be written to minimize the time it would take for someone else to understand it.\n\n\nFrom: The Art of Readable Code by Boswell et al. 2011"
  },
  {
    "objectID": "slides/03_coding.html#principles-of-writing-good-code",
    "href": "slides/03_coding.html#principles-of-writing-good-code",
    "title": "Coding basics",
    "section": "Principles of writing good code",
    "text": "Principles of writing good code\n\n\nWrite less code\nAvoid repetition\nUse clear syntax\nUse good names\nUse comments"
  },
  {
    "objectID": "slides/03_coding.html#coding-style-spacing",
    "href": "slides/03_coding.html#coding-style-spacing",
    "title": "Coding basics",
    "section": "Coding style: Spacing",
    "text": "Coding style: Spacing\n\n\nmean1&lt;-mean (x[1,4:10],na.rm=TRUE)+0.5\n\n\n\n\nmean1 &lt;- mean(x[1, 4:10], na.rm = TRUE) + 0.5"
  },
  {
    "objectID": "slides/03_coding.html#coding-style-clarity",
    "href": "slides/03_coding.html#coding-style-clarity",
    "title": "Coding basics",
    "section": "Coding style: Clarity",
    "text": "Coding style: Clarity\n\n\nmean(x, T)\n\n\n\n\nmean(x, na.rm = TRUE)"
  },
  {
    "objectID": "slides/03_coding.html#coding-style-indenting",
    "href": "slides/03_coding.html#coding-style-indenting",
    "title": "Coding basics",
    "section": "Coding style: Indenting",
    "text": "Coding style: Indenting\n\n\nfor(i in 1:10) {\nfor(j in 1:5) {\nprint(x[i, j])\n}\n}\n\n\n\n\nfor(i in 1:10) {\n  for(j in 1:5) {\n    print(x[i, j])\n  }\n}"
  },
  {
    "objectID": "slides/03_coding.html#coding-style-line-breaks",
    "href": "slides/03_coding.html#coding-style-line-breaks",
    "title": "Coding basics",
    "section": "Coding style: Line breaks",
    "text": "Coding style: Line breaks\n\n\nif (x &gt; 5) {print(\"Too big!\")}\n\n\n\n\nif (x &gt; 5) {\n  print(\"Too big!\")\n}"
  },
  {
    "objectID": "slides/03_coding.html#coding-style",
    "href": "slides/03_coding.html#coding-style",
    "title": "Coding basics",
    "section": "Coding style",
    "text": "Coding style\nThe tidyverse style guide\n\nUse &lt;- as assignment operator\nUse space between operators (*, =, ==) and after commas\nDo not use space between function and parentheses \nUse indents to separate nested components (Ctrl/Cmd+I)\nWrite out argument names\nWrite out TRUE and FALSE\nUse \", not ', for quoting text unless it already contains double quotes"
  },
  {
    "objectID": "slides/03_coding.html#naming-things-1",
    "href": "slides/03_coding.html#naming-things-1",
    "title": "Coding basics",
    "section": "Naming things",
    "text": "Naming things\nCore principles for naming objects, data columns, files, folders\n\nBe nice to machines\nBe nice to humans\nMake sorting and searching easy\n\n\n\nSources: Naming things: Jenny Bryan, Project structure: Danille Navarro"
  },
  {
    "objectID": "slides/03_coding.html#be-nice-to-machines",
    "href": "slides/03_coding.html#be-nice-to-machines",
    "title": "Coding basics",
    "section": "Be nice to machines",
    "text": "Be nice to machines\n\n\navoid spaces, special characters, and accented characters\n\n\nmy_file.R not My filé$.R\n\n\n\navoid case sensitivity\n\n\nfoo.R and Foo.R\n\n\n\nuse consistent, searchable text chunks\n\nexpt1_cond2_subj114.csv\n\n\ncan’t start with a number"
  },
  {
    "objectID": "slides/03_coding.html#be-nice-to-humans",
    "href": "slides/03_coding.html#be-nice-to-humans",
    "title": "Coding basics",
    "section": "Be nice to humans",
    "text": "Be nice to humans\n\n\nbe descriptive (not x) but not too descriptive (this_is_my_object)\n\n\n\n\nseparate words (preferably using snake_case) \n\n\n\n\n\navoid capital letters (case matters: a ≠ A)\n\n\n\n\nuse human readable names that contain content (slugs)\n\nprelim_analysis_expt1.R"
  },
  {
    "objectID": "slides/03_coding.html#make-sorting-and-searching-easy",
    "href": "slides/03_coding.html#make-sorting-and-searching-easy",
    "title": "Coding basics",
    "section": "Make sorting and searching easy",
    "text": "Make sorting and searching easy\n\n\nuse ISO 8601 standard for date YYYY-MM-DD\n\nno, really—always use ISO 8601 standard for date!!\nuse ISO 8601 dates before or after slugs\n\n2021-04-06_prelim_analysis_expt1.Rmd\nprelim_analysis_expt1_2021-04-06.Rmd\n\n\nuse padded numbers as prefixes\n\n01_preface.Rmd\n02_introduction.Rmd"
  },
  {
    "objectID": "slides/03_coding.html#mental-model-of-coding-1",
    "href": "slides/03_coding.html#mental-model-of-coding-1",
    "title": "Coding basics",
    "section": "Mental model of coding",
    "text": "Mental model of coding"
  },
  {
    "objectID": "slides/03_coding.html#lets-code",
    "href": "slides/03_coding.html#lets-code",
    "title": "Coding basics",
    "section": "Let’s code!",
    "text": "Let’s code!\nCoding basics"
  },
  {
    "objectID": "slides/01_introduction.html#course-goal",
    "href": "slides/01_introduction.html#course-goal",
    "title": "Data Processing and Visualization in R",
    "section": "Course goal",
    "text": "Course goal\n\nSource: Allison Horst"
  },
  {
    "objectID": "slides/01_introduction.html#course-information",
    "href": "slides/01_introduction.html#course-information",
    "title": "Data Processing and Visualization in R",
    "section": "Course information",
    "text": "Course information\nCourse structure and materials\n\n\n\nBefore class: Readings\nDuring class: Coding\nAfter class: Exercises\nStudent and coding hours\nCourse website: dpavir.org"
  },
  {
    "objectID": "slides/01_introduction.html#course-information-1",
    "href": "slides/01_introduction.html#course-information-1",
    "title": "Data Processing and Visualization in R",
    "section": "Course information",
    "text": "Course information\nAssignments\n\n\nLearning journal\nExercises\nCheck-ins\nProjects\nWrapped"
  },
  {
    "objectID": "slides/01_introduction.html#course-information-2",
    "href": "slides/01_introduction.html#course-information-2",
    "title": "Data Processing and Visualization in R",
    "section": "Course information",
    "text": "Course information\nDiversity, inclusion, wellness\n\nSource: Allison Horst"
  },
  {
    "objectID": "slides/01_introduction.html#course-information-3",
    "href": "slides/01_introduction.html#course-information-3",
    "title": "Data Processing and Visualization in R",
    "section": "Course information",
    "text": "Course information\nCourse culture\n\n\n\nFutz around and find out\nMistakes are OK (they’ll happen a lot)\nLearn from your mistakes (bug journal?)\nAsk for help\nShare successes and failures with others"
  },
  {
    "objectID": "slides/01_introduction.html#questions",
    "href": "slides/01_introduction.html#questions",
    "title": "Data Processing and Visualization in R",
    "section": "Questions",
    "text": "Questions\nQuestions about R or the course?"
  },
  {
    "objectID": "slides/01_introduction.html#conventions",
    "href": "slides/01_introduction.html#conventions",
    "title": "Data Processing and Visualization in R",
    "section": "Conventions",
    "text": "Conventions\n\nAll code is in monospace font purple text\nR functions end with parentheses: function()\nDirectory names end with slash: home/\nPackage names are surrounded by curly braces: {tidyverse}\nKeyboard buttons separate keys with a plus: Ctrl+S\nThese are parentheses (), brackets [], and braces {}\nLinks are in light blue text"
  },
  {
    "objectID": "slides/01_introduction.html#mental-model-of-r",
    "href": "slides/01_introduction.html#mental-model-of-r",
    "title": "Data Processing and Visualization in R",
    "section": "Mental model of R",
    "text": "Mental model of R"
  },
  {
    "objectID": "slides/01_introduction.html#base-r-vs.-tidyverse",
    "href": "slides/01_introduction.html#base-r-vs.-tidyverse",
    "title": "Data Processing and Visualization in R",
    "section": "Base R vs. tidyverse",
    "text": "Base R vs. tidyverse"
  },
  {
    "objectID": "slides/01_introduction.html#lets-code",
    "href": "slides/01_introduction.html#lets-code",
    "title": "Data Processing and Visualization in R",
    "section": "Let’s code!",
    "text": "Let’s code!\nIntroduction coding"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Data Processing and Visualization in R",
    "section": "",
    "text": "Note this is tentative!\n\n\n\n\n\n\nWeek\nDate\nModule\nTopic\n\n\n\n\n1\n2025-01-20\n1\nMLK Day\n\n\n\n2025-01-22\n1\nCourse introduction\n\n\n\n2025-01-24\n1\nWorking in RStudio\n\n\n2\n2025-01-27\n1\nCoding basics\n\n\n\n2025-01-29\n1\nWorkflows\n\n\n\n2025-01-31\n1\nLiterate programming\n\n\n3\n2025-02-03\n2\nData types\n\n\n\n2025-02-05\n2\nData structures\n\n\n\n2025-02-07\n2\nImporting data\n\n\n4\n2025-02-10\n2\nValidating data\n\n\n\n2025-02-12\n3\nSelecting columns\n\n\n\n2025-02-14\n3\nMutating columns\n\n\n5\n2025-02-17\n3\nPiping commands\n\n\n\n2025-02-19\n3\nFiltering rows\n\n\n\n2025-02-21\n3\nSummarizing rows\n\n\n6\n2025-02-24\n4\nPivoting data\n\n\n\n2025-02-26\n4\nSeparating data\n\n\n\n2025-02-28\n4\nMerging columns\n\n\n7\n2025-03-03\n4\nMerging rows\n\n\n\n2025-03-05\n5\nNumbers\n\n\n\n2025-03-07\n5\nStrings\n\n\n8\n2025-03-10\n5\nMatching patterns\n\n\n\n2025-03-12\n5\nFactors\n\n\n\n2025-03-14\n5\nProject workday\n\n\n9\n2025-03-17\n\nSpring break\n\n\n\n2025-03-19\n\nSpring break\n\n\n\n2025-03-21\n\nSpring break\n\n\n10\n2025-03-24\n6\nFunctions\n\n\n\n2025-03-26\n6\nIteration\n\n\n\n2025-03-28\n7\nGrammar of graphics I\n\n\n11\n2025-03-31\n7\nGrammar of graphics II\n\n\n\n2025-04-02\n7\nDesign and themes\n\n\n\n2025-04-04\n7\nColor\n\n\n12\n2025-04-07\n8\nPlotting distributions: histograms\n\n\n\n2025-04-09\n8\nPlotting distributions: boxplots\n\n\n\n2025-04-11\n8\nPlotting amounts: bar charts\n\n\n13\n2025-04-14\n8\nPlotting x-y data: associations\n\n\n\n2025-04-16\n\nNebraska Symposium\n\n\n\n2025-04-18\n8\nPlotting x-y data: time series\n\n\n14\n2025-04-21\n8\nPlotting x-y data: categories\n\n\n\n2025-04-23\n9\nAdjusting axes\n\n\n\n2025-04-25\n9\nAnnotating plots\n\n\n15\n2025-04-28\n9\nPlotting challenge\n\n\n\n2025-04-30\n10\nTables\n\n\n\n2025-05-02\n10\nPublications\n\n\n16\n2025-05-05\n10\nAdvanced R Markdown\n\n\n\n2025-05-07\n11\nStatistics I\n\n\n\n2025-05-09\n11\nStatistics II"
  },
  {
    "objectID": "schedule.html#course-schedule",
    "href": "schedule.html#course-schedule",
    "title": "Data Processing and Visualization in R",
    "section": "",
    "text": "Note this is tentative!\n\n\n\n\n\n\nWeek\nDate\nModule\nTopic\n\n\n\n\n1\n2025-01-20\n1\nMLK Day\n\n\n\n2025-01-22\n1\nCourse introduction\n\n\n\n2025-01-24\n1\nWorking in RStudio\n\n\n2\n2025-01-27\n1\nCoding basics\n\n\n\n2025-01-29\n1\nWorkflows\n\n\n\n2025-01-31\n1\nLiterate programming\n\n\n3\n2025-02-03\n2\nData types\n\n\n\n2025-02-05\n2\nData structures\n\n\n\n2025-02-07\n2\nImporting data\n\n\n4\n2025-02-10\n2\nValidating data\n\n\n\n2025-02-12\n3\nSelecting columns\n\n\n\n2025-02-14\n3\nMutating columns\n\n\n5\n2025-02-17\n3\nPiping commands\n\n\n\n2025-02-19\n3\nFiltering rows\n\n\n\n2025-02-21\n3\nSummarizing rows\n\n\n6\n2025-02-24\n4\nPivoting data\n\n\n\n2025-02-26\n4\nSeparating data\n\n\n\n2025-02-28\n4\nMerging columns\n\n\n7\n2025-03-03\n4\nMerging rows\n\n\n\n2025-03-05\n5\nNumbers\n\n\n\n2025-03-07\n5\nStrings\n\n\n8\n2025-03-10\n5\nMatching patterns\n\n\n\n2025-03-12\n5\nFactors\n\n\n\n2025-03-14\n5\nProject workday\n\n\n9\n2025-03-17\n\nSpring break\n\n\n\n2025-03-19\n\nSpring break\n\n\n\n2025-03-21\n\nSpring break\n\n\n10\n2025-03-24\n6\nFunctions\n\n\n\n2025-03-26\n6\nIteration\n\n\n\n2025-03-28\n7\nGrammar of graphics I\n\n\n11\n2025-03-31\n7\nGrammar of graphics II\n\n\n\n2025-04-02\n7\nDesign and themes\n\n\n\n2025-04-04\n7\nColor\n\n\n12\n2025-04-07\n8\nPlotting distributions: histograms\n\n\n\n2025-04-09\n8\nPlotting distributions: boxplots\n\n\n\n2025-04-11\n8\nPlotting amounts: bar charts\n\n\n13\n2025-04-14\n8\nPlotting x-y data: associations\n\n\n\n2025-04-16\n\nNebraska Symposium\n\n\n\n2025-04-18\n8\nPlotting x-y data: time series\n\n\n14\n2025-04-21\n8\nPlotting x-y data: categories\n\n\n\n2025-04-23\n9\nAdjusting axes\n\n\n\n2025-04-25\n9\nAnnotating plots\n\n\n15\n2025-04-28\n9\nPlotting challenge\n\n\n\n2025-04-30\n10\nTables\n\n\n\n2025-05-02\n10\nPublications\n\n\n16\n2025-05-05\n10\nAdvanced R Markdown\n\n\n\n2025-05-07\n11\nStatistics I\n\n\n\n2025-05-09\n11\nStatistics II"
  },
  {
    "objectID": "posts/17_mergingcolumns/index.html",
    "href": "posts/17_mergingcolumns/index.html",
    "title": "Merging columns",
    "section": "",
    "text": "Often, we have data spread across multiple data sets that need to be merged into a single data set. We’ll do this in a way that merges columns using mutating join functions from {dplyr}."
  },
  {
    "objectID": "posts/17_mergingcolumns/index.html#learning-objectives",
    "href": "posts/17_mergingcolumns/index.html#learning-objectives",
    "title": "Merging columns",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nUnderstand the concept of a key column\nConduct inner joins\nConduct outer joins"
  },
  {
    "objectID": "posts/17_mergingcolumns/index.html#pre-meeting",
    "href": "posts/17_mergingcolumns/index.html#pre-meeting",
    "title": "Merging columns",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nRead R4DS2 19.1 - 19.3.2"
  },
  {
    "objectID": "posts/17_mergingcolumns/index.html#class-meeting",
    "href": "posts/17_mergingcolumns/index.html#class-meeting",
    "title": "Merging columns",
    "section": "Class meeting",
    "text": "Class meeting\n\nIntroduce merging data\nKey columns\ninner_join()\nfull_join()\nleft_join()\nright_join()\nSlides and Code"
  },
  {
    "objectID": "posts/17_mergingcolumns/index.html#homework-after-the-class-meeting",
    "href": "posts/17_mergingcolumns/index.html#homework-after-the-class-meeting",
    "title": "Merging columns",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead R4DS2 19.3.3 - 19.5"
  },
  {
    "objectID": "posts/15_pivoting/index.html",
    "href": "posts/15_pivoting/index.html",
    "title": "Pivoting data",
    "section": "",
    "text": "Tidy data is a specific form of data that let’s you apply formulas to your data for modeling or plotting. To make your data tidy, you may need to pivot it to a longer or wider format."
  },
  {
    "objectID": "posts/15_pivoting/index.html#learning-objectives",
    "href": "posts/15_pivoting/index.html#learning-objectives",
    "title": "Pivoting data",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nRecognize tidy data\nPivot wide data longer\nPivot long data wider"
  },
  {
    "objectID": "posts/15_pivoting/index.html#pre-meeting",
    "href": "posts/15_pivoting/index.html#pre-meeting",
    "title": "Pivoting data",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nRead R4DS2 5"
  },
  {
    "objectID": "posts/15_pivoting/index.html#class-meeting",
    "href": "posts/15_pivoting/index.html#class-meeting",
    "title": "Pivoting data",
    "section": "Class meeting",
    "text": "Class meeting\n\nDefine tidy data\npivot_longer()\npivot_wider()\nSlides and Code"
  },
  {
    "objectID": "posts/15_pivoting/index.html#homework-after-the-class-meeting",
    "href": "posts/15_pivoting/index.html#homework-after-the-class-meeting",
    "title": "Pivoting data",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead R4DS1 12.4 - 12.5"
  },
  {
    "objectID": "posts/13_filtering/index.html",
    "href": "posts/13_filtering/index.html",
    "title": "Filtering rows",
    "section": "",
    "text": "We’ll move from cleaning columns to working with rows. We’ll use the {dplyr} filter() functions to only keep rows that we want to keep."
  },
  {
    "objectID": "posts/13_filtering/index.html#learning-objectives",
    "href": "posts/13_filtering/index.html#learning-objectives",
    "title": "Filtering rows",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nFilter rows based on data values\nRefine understanding of conditional statements\nRemove missing data\nArrange rows based on data values"
  },
  {
    "objectID": "posts/13_filtering/index.html#pre-meeting",
    "href": "posts/13_filtering/index.html#pre-meeting",
    "title": "Filtering rows",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nRead R4DS2 3.2.1"
  },
  {
    "objectID": "posts/13_filtering/index.html#class-meeting",
    "href": "posts/13_filtering/index.html#class-meeting",
    "title": "Filtering rows",
    "section": "Class meeting",
    "text": "Class meeting\n\nFiltering basics\nFiltering with OR\nMultiple filters\nNegating conditional statements\nFiltering NA\nArranging in ascending and descending order\nSlides and Code"
  },
  {
    "objectID": "posts/13_filtering/index.html#homework-after-the-class-meeting",
    "href": "posts/13_filtering/index.html#homework-after-the-class-meeting",
    "title": "Filtering rows",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead R4DS2 3.5"
  },
  {
    "objectID": "posts/11_mutating/index.html",
    "href": "posts/11_mutating/index.html",
    "title": "Mutating columns",
    "section": "",
    "text": "We’ll continue our data wrangling by cleaning up the columns of our data. We’ll use the {dplyr} mutate() functions to change and create column data."
  },
  {
    "objectID": "posts/11_mutating/index.html#learning-objectives",
    "href": "posts/11_mutating/index.html#learning-objectives",
    "title": "Mutating columns",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nChange existing column values\nCreate new columns\nMove new columns when creating them\nApply functions across columns"
  },
  {
    "objectID": "posts/11_mutating/index.html#pre-meeting",
    "href": "posts/11_mutating/index.html#pre-meeting",
    "title": "Mutating columns",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nRead R4DS2 3.3.1"
  },
  {
    "objectID": "posts/11_mutating/index.html#class-meeting",
    "href": "posts/11_mutating/index.html#class-meeting",
    "title": "Mutating columns",
    "section": "Class meeting",
    "text": "Class meeting\n\nChanging columns\nConditional changes\nMultiple changes\nCreating columns\nMoving columns when creating\nRemoving old columns\nApplying functions to multiple columns\nChanging multiple columns\nSlides and Code"
  },
  {
    "objectID": "posts/11_mutating/index.html#homework-after-the-class-meeting",
    "href": "posts/11_mutating/index.html#homework-after-the-class-meeting",
    "title": "Mutating columns",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead R4DS2 3.3.1"
  },
  {
    "objectID": "posts/09_validating/index.html",
    "href": "posts/09_validating/index.html",
    "title": "Validating data",
    "section": "",
    "text": "Typically, the first step of data cleaning after importing data is to check that they data are valid."
  },
  {
    "objectID": "posts/09_validating/index.html#learning-objectives",
    "href": "posts/09_validating/index.html#learning-objectives",
    "title": "Validating data",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nDescribe characteristics of valid data\nSummarize, test, and exclude data\nCreate a codebook"
  },
  {
    "objectID": "posts/09_validating/index.html#pre-meeting",
    "href": "posts/09_validating/index.html#pre-meeting",
    "title": "Validating data",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nWikipedia"
  },
  {
    "objectID": "posts/09_validating/index.html#class-meeting",
    "href": "posts/09_validating/index.html#class-meeting",
    "title": "Validating data",
    "section": "Class meeting",
    "text": "Class meeting\n\nChecking for valid data\nSummarizing data\nTesting data\nExcluding data\nCodebooks\nSlides and Code"
  },
  {
    "objectID": "posts/09_validating/index.html#homework-after-the-class-meeting",
    "href": "posts/09_validating/index.html#homework-after-the-class-meeting",
    "title": "Validating data",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead R4DS2 3.3.2 - 3.3.4"
  },
  {
    "objectID": "posts/07_datastructures/index.html",
    "href": "posts/07_datastructures/index.html",
    "title": "Data structures",
    "section": "",
    "text": "All data in R are vectors, but there are some special forms of vectors such as lists and data frames. We’ll explore how to create, modify, and subset vectors, lists, and data frames."
  },
  {
    "objectID": "posts/07_datastructures/index.html#learning-objectives",
    "href": "posts/07_datastructures/index.html#learning-objectives",
    "title": "Data structures",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nCreate vectors, lists, and data frames\nLearn how to subset data\nView attributes of data"
  },
  {
    "objectID": "posts/07_datastructures/index.html#pre-meeting",
    "href": "posts/07_datastructures/index.html#pre-meeting",
    "title": "Data structures",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nRead PWR 13"
  },
  {
    "objectID": "posts/07_datastructures/index.html#class-meeting",
    "href": "posts/07_datastructures/index.html#class-meeting",
    "title": "Data structures",
    "section": "Class meeting",
    "text": "Class meeting\n\nCreating vectors\nSequences and repetitions\nVector indexes\nCreating lists and data frames\nSubsetting data frames\nDimensions\nTibbles\nSlides and Code"
  },
  {
    "objectID": "posts/07_datastructures/index.html#homework-after-the-class-meeting",
    "href": "posts/07_datastructures/index.html#homework-after-the-class-meeting",
    "title": "Data structures",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead R4DS2 7 and R4DS2 20"
  },
  {
    "objectID": "posts/05_rmarkdown/index.html",
    "href": "posts/05_rmarkdown/index.html",
    "title": "Literate programming",
    "section": "",
    "text": "Literate programming involves embedding all of the code used to generate statistics and figures into the documents used to present them. We will learn how to use R Markdown to embed data and code into our documents."
  },
  {
    "objectID": "posts/05_rmarkdown/index.html#learning-objectives",
    "href": "posts/05_rmarkdown/index.html#learning-objectives",
    "title": "Literate programming",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nDistinguish between plaintext and binary file types\nCreate and work with R scripts\nLearn basic Markdown syntax\nCreate new R Markdown documents\nInsert R code into R Markdown documents both inline and as code chunks"
  },
  {
    "objectID": "posts/05_rmarkdown/index.html#pre-meeting",
    "href": "posts/05_rmarkdown/index.html#pre-meeting",
    "title": "Literate programming",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nRead R Markdown, complete Markdown tutorial"
  },
  {
    "objectID": "posts/05_rmarkdown/index.html#class-meeting",
    "href": "posts/05_rmarkdown/index.html#class-meeting",
    "title": "Literate programming",
    "section": "Class meeting",
    "text": "Class meeting\n\nFile types\nInteracting with R\nWriting scripts\nLiterate programming\nMarkdown\nR Markdown\nSlides and Code"
  },
  {
    "objectID": "posts/05_rmarkdown/index.html#homework-after-the-class-meeting",
    "href": "posts/05_rmarkdown/index.html#homework-after-the-class-meeting",
    "title": "Literate programming",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead R4DS1 20"
  },
  {
    "objectID": "posts/03_coding/index.html",
    "href": "posts/03_coding/index.html",
    "title": "Coding basics",
    "section": "",
    "text": "Before we get too far into learning R, it makes sense to start by getting up to speed on some coding basics."
  },
  {
    "objectID": "posts/03_coding/index.html#learning-objectives",
    "href": "posts/03_coding/index.html#learning-objectives",
    "title": "Coding basics",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nLearn the terminology used in coding\nLearn how to assign information to objects in R\nLearn how to use tidyverse coding style\nLearn how to name files and folders"
  },
  {
    "objectID": "posts/03_coding/index.html#pre-meeting",
    "href": "posts/03_coding/index.html#pre-meeting",
    "title": "Coding basics",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nRead R4DS2 3 and R4DS2 4.1 - 4"
  },
  {
    "objectID": "posts/03_coding/index.html#class-meeting",
    "href": "posts/03_coding/index.html#class-meeting",
    "title": "Coding basics",
    "section": "Class meeting",
    "text": "Class meeting\n[Slides] [Code]\n\nCoding terms\nAssignment\nMental model of coding\nCoding style\nNaming things\nLet’s code!"
  },
  {
    "objectID": "posts/03_coding/index.html#homework-after-the-class-meeting",
    "href": "posts/03_coding/index.html#homework-after-the-class-meeting",
    "title": "Coding basics",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead R4DS2 6"
  },
  {
    "objectID": "posts/01_introduction/index.html",
    "href": "posts/01_introduction/index.html",
    "title": "Course introduction",
    "section": "",
    "text": "Our first lesson will introduce the course to you and get you started using R. If you’ve used R before, some of this may be review. But I bet everyone learns something new!"
  },
  {
    "objectID": "posts/01_introduction/index.html#learning-objectives",
    "href": "posts/01_introduction/index.html#learning-objectives",
    "title": "Course introduction",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nInstall R and RStudio on your local computer\nLearn how to install, uninstall, load, and unload packages\nUnderstand the tidyverse philosophy\nBuild a mental model of R\nCode in the console"
  },
  {
    "objectID": "posts/01_introduction/index.html#pre-meeting-getting-started",
    "href": "posts/01_introduction/index.html#pre-meeting-getting-started",
    "title": "Course introduction",
    "section": "Pre-meeting: Getting started",
    "text": "Pre-meeting: Getting started\nTo prepare for the course, please do the following:\n\nView presentation on Getting Started with R (slides)\nInstall R from https://r-project.org\nInstall RStudio from Posit\nInstall {tidyverse} package\nIf you have any trouble installing these, contact me.\nRead the syllabus\nComplete course introduction form\nRead SIDS 1, Wickham 2020, R4DS2 Intro"
  },
  {
    "objectID": "posts/01_introduction/index.html#class-meeting",
    "href": "posts/01_introduction/index.html#class-meeting",
    "title": "Course introduction",
    "section": "Class meeting",
    "text": "Class meeting\n[Slides] [Code]\n\nReview syllabus\nMental model of R\nBase R vs. tidyverse\nSlides and Code"
  },
  {
    "objectID": "posts/01_introduction/index.html#homework-after-the-class-meeting",
    "href": "posts/01_introduction/index.html#homework-after-the-class-meeting",
    "title": "Course introduction",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nTroubleshoot any installation issues (contact me)\nInstall R packages needed for the course\nRead RYWM 1"
  },
  {
    "objectID": "meetings.html",
    "href": "meetings.html",
    "title": "Class meetings",
    "section": "",
    "text": "Merging columns\n\n\n\n\n\n\nmodule 4\n\n\nweek 6\n\n\ncolumns\n\n\njoin\n\n\nmerge\n\n\nmutating joins\n\n\n\nMerge columns with mutating joins\n\n\n\n\n\nFeb 28, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nSeparating data\n\n\n\n\n\n\nmodule 4\n\n\nweek 6\n\n\ncoalesce\n\n\ncomplete\n\n\nexpand\n\n\nfill\n\n\nmissing data\n\n\nnesting\n\n\nseparate\n\n\nunite\n\n\n\nSeparate or unite values in columns\n\n\n\n\n\nFeb 26, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nPivoting data\n\n\n\n\n\n\nmodule 4\n\n\nweek 6\n\n\nlong data\n\n\npivoting\n\n\ntidy data\n\n\nwide data\n\n\n\nTidy up your data into long or wide format\n\n\n\n\n\nFeb 24, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nSummarizing rows\n\n\n\n\n\n\nmodule 3\n\n\nweek 5\n\n\nacross\n\n\ncount\n\n\ngroup_by\n\n\nslice\n\n\nsummarise\n\n\n\nAggregate row values\n\n\n\n\n\nFeb 21, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nFiltering rows\n\n\n\n\n\n\nmodule 3\n\n\nweek 5\n\n\narrange\n\n\nconditional statements\n\n\nfilter\n\n\nmissing data\n\n\nrows\n\n\n\nRemove rows based on data values\n\n\n\n\n\nFeb 19, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nPiping\n\n\n\n\n\n\nmodule 3\n\n\nweek 5\n\n\nmutate\n\n\npipes\n\n\nselect\n\n\n\nPipes let us combine chains of functions\n\n\n\n\n\nFeb 17, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nMutating columns\n\n\n\n\n\n\nmodule 3\n\n\nweek 4\n\n\nacross\n\n\ncase_when\n\n\ncolumns\n\n\nconditional statements\n\n\nifelse\n\n\nmutate\n\n\nrowwise\n\n\n\nChange and create data in columns\n\n\n\n\n\nFeb 14, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nSelecting columns\n\n\n\n\n\n\nmodule 3\n\n\nweek 4\n\n\ncolumns\n\n\nrelocate\n\n\nrename\n\n\nselect\n\n\n\nSelect, move, and rename columns\n\n\n\n\n\nFeb 12, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nValidating data\n\n\n\n\n\n\nmodule 2\n\n\nweek 4\n\n\ncodebooks\n\n\ndata types\n\n\nduplicates\n\n\nmissing data\n\n\nvalidate\n\n\n\nTools for ensuring your data are valid\n\n\n\n\n\nFeb 10, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nImporting data\n\n\n\n\n\n\nmodule 2\n\n\nweek 3\n\n\nCSV\n\n\nExcel\n\n\nexport\n\n\nimport\n\n\nQualtrics\n\n\n\nImport and export data from different sources\n\n\n\n\n\nFeb 7, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nData structures\n\n\n\n\n\n\nmodule 2\n\n\nweek 3\n\n\ndata frames\n\n\nlists\n\n\ntibbles\n\n\nvectors\n\n\n\nCreate, modify, and subset vectors, lists, and data frames\n\n\n\n\n\nFeb 5, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nData types\n\n\n\n\n\n\nmodule 2\n\n\nweek 3\n\n\ncharacters\n\n\ncoercion\n\n\ndates\n\n\nfactors\n\n\nlogicals\n\n\nmissing data\n\n\nnumerics\n\n\n\nCreate and convert numerics, character strings, logicals, factors, and dates.\n\n\n\n\n\nFeb 3, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nLiterate programming\n\n\n\n\n\n\nmodule 1\n\n\nweek 2\n\n\nknitr\n\n\nR Markdown\n\n\nscripts\n\n\n\nCombining text, data, and code in R Markdown\n\n\n\n\n\nJan 31, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nWorkflows\n\n\n\n\n\n\nmodule 1\n\n\nweek 2\n\n\nfile systems\n\n\npaths\n\n\nRStudio Projects\n\n\nworking directories\n\n\n\nAccess file systems with paths and set working directories with RStudio Projects\n\n\n\n\n\nJan 29, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nCoding basics\n\n\n\n\n\n\nmodule 1\n\n\nweek 2\n\n\ncoding\n\n\nnames\n\n\nstyle\n\n\n\nBasic concepts in coding, style, and naming\n\n\n\n\n\nJan 27, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nWorking in RStudio\n\n\n\n\n\n\nmodule 1\n\n\nweek 1\n\n\nhelp\n\n\nreprex\n\n\nRStudio\n\n\n\nIntroduction to RStudio Integrated Development Environment\n\n\n\n\n\nJan 24, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nCourse introduction\n\n\n\n\n\n\nmodule 1\n\n\nweek 1\n\n\ncourse-admin\n\n\nR\n\n\nRStudio\n\n\n\nIntroduction to Data Processing and Visualization in R\n\n\n\n\n\nJan 22, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\n\n\n\n\n\n\nGetting started with R\n\n\n\n\n\n\nmodule 1\n\n\nweek 1\n\n\nR\n\n\nRStudio\n\n\n\nWelcome to Data Processing and Visualization in R\n\n\n\n\n\nJan 20, 2025\n\n\nJeff Stevens\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Processing and Visualization in R",
    "section": "",
    "text": "Welcome! This course introduces students to the fundamental concepts and methods used in the R statistical software package to process, visualize, and disseminate data. The course is based around R for Data Science and Fundamentals of Data Visualization and assumes no prior coding experience."
  },
  {
    "objectID": "index.html#course-materials",
    "href": "index.html#course-materials",
    "title": "Data Processing and Visualization in R",
    "section": "Course materials",
    "text": "Course materials\n\nSyllabus (with course schedule)\nClass meetings\nReadings, slides, code, exercises\nResources"
  },
  {
    "objectID": "index.html#course-modules",
    "href": "index.html#course-modules",
    "title": "Data Processing and Visualization in R",
    "section": "Course modules",
    "text": "Course modules\n\nR basics\nWorking with data\nCleaning and wrangling data\nTidy data\nTransforming data values\nProgramming\nGrammar of graphics\nPlotting data\nCustomizing plots\nTables, documents, and presentations\nStatistics\n\n\n\n\nSource: Allison Horst"
  },
  {
    "objectID": "index.html#instructor",
    "href": "index.html#instructor",
    "title": "Data Processing and Visualization in R",
    "section": "Instructor",
    "text": "Instructor\nJeffrey (Jeff) Stevens is a Professor in the Department of Psychology and the Center for Brain, Biology & Behavior at the University of Nebraska-Lincoln. He is also a Data Science Mentor at Posit (formerly RStudio), a company that develops open source data science tools such as RStudio IDE and tidyverse. Jeff has been using R since 2010 (and the predecessor S-PLUS since 1998) and integrating it into his documents and presentations since then. He has also developed three R packages available on CRAN: {excluder} helps researchers exclude participant data collected from online surveys; {flashr} creates flashcards for learning terms and descriptions to help people learn and remember what R functions do; and {cocoon} helps researchers extract, format, and print statistics in their R Markdown or Quarto documents."
  },
  {
    "objectID": "index.html#citation",
    "href": "index.html#citation",
    "title": "Data Processing and Visualization in R",
    "section": "Citation",
    "text": "Citation\nIf you use materials from this site, please cite:\n\nStevens, J.R. (2025). Data Processing and Visualization in R. http://dpavir.org"
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Data Processing and Visualization in R",
    "section": "License",
    "text": "License\nAll materials presented here are released under the Creative Commons Attribution 4.0 International Public License (CC BY 4.0). You are free to:\n\nShare — copy and redistribute the material in any medium or format\nAdapt — remix, transform, and build upon the material for any purpose, even commercially.\n\nUnder the following terms:\n\nAttribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\nNo additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits."
  },
  {
    "objectID": "code/02_rstudio.html",
    "href": "code/02_rstudio.html",
    "title": "Working in RStudio",
    "section": "",
    "text": "Work in groups of 2-3\n\nInstall the {papaja} package.\nFind the help page for the apa_num() function from {papaja}. What does it do?\nWhat is the keyboard shortcut for restarting R?\nWhat does the keyboard shortcut Ctrl/Cmd+Enter/Return do?\nType cor() in the console, and place your cursor in the word cor. Now press F1. What happened? Place your cursor back on cor and press F2. What happened?\nChange your theme for RStudio. If you’re feeling adventurous, check out the custom themes at https://github.com/mkearney/rstudiothemes and install one of them."
  },
  {
    "objectID": "code/04_workflows.html",
    "href": "code/04_workflows.html",
    "title": "Workflows",
    "section": "",
    "text": "Think about where would make the most sense to have a project directory for this course. Do you want it in your OneDrive directory? Do you want it in a specific directory?\nCreate the class directory using good naming conventions.\nCreate subdirectories that you might need for the class (e.g., assignments, code, data, notes, etc.).\nCreate an R Project inside that directory.\nOpen the R Project in RStudio. What is the working directory?\nIn the terminal, view all of the subdirectories in your project directory.\nChange to data/ directory. Now change back to the project’s home directory. Can you go up to the parent directory?\nCreate a directory and R Project for a project that you are working on that will require using R. Build the subdirectories that you’ll need, including data/, docs/, and R/."
  },
  {
    "objectID": "materials.html",
    "href": "materials.html",
    "title": "Readings, slides, code, exercises",
    "section": "",
    "text": "Module 1: R basics\n\n\n\n\nTopic\nDate\nReadings\nSlides\nCode\nExercises\n\n\n\n\nGetting started with R\nBefore 2025-01-22\n\nSlides\nNone\nNone\n\n\nIntroduction\n2025-01-22\nSIDS 1  Wickham 2020  R4DS2 Intro\nSlides\nCode\nExercises\n\n\nWorking with RStudio\n2025-01-24\nRYWM 1\nSlides\nCode\nExercises\n\n\nCoding basics\n2025-01-27\nR4DS2 3  R4DS2 4.1 - 4.2\nSlides\nCode\nExercises\n\n\nWorkflows\n2025-01-29\nR4DS2 6\nSlides\nCode\nExercises\n\n\nLiterate programming\n2025-01-31\nR Markdown  Markdown tutorial\nSlides\nCode\nExercises\n\n\n\n\n\n\nModule 2: Working with data\n\n\n\n\nTopic\nDate\nReadings\nSlides\nCode\nExercises\n\n\n\n\nData types\n2025-02-03\nR4DS1 20\nSlides\nCode\nExercises\n\n\nData structures\n2025-02-05\nPWR 13\nSlides\nCode\nExercises\n\n\nImporting data\n2025-02-07\nR4DS2 7  R4DS2 20\nSlides\nCode\nExercises\n\n\nValidating data\n2025-02-10\nWikipedia\nSlides\nCode\nExercises\n\n\n\n\n\n\nModule 3: Cleaning and wrangling data\n\n\n\n\nTopic\nDate\nReadings\nSlides\nCode\nExercises\n\n\n\n\nSelecting columns\n2025-02-12\nR4DS2 3.3.2 - 3.3.4\nSlides\nCode\nExercises\n\n\nMutating columns\n2025-02-14\nR4DS2 3.3.1\nSlides\nCode\nExercises\n\n\nPiping commands\n2025-02-17\nR4DS2 3.4\nSlides\nCode\nExercises\n\n\nFiltering rows\n2025-02-19\nR4DS2 3.2.1\nSlides\nCode\nExercises\n\n\nSummarizing rows\n2025-02-21\nR4DS2 3.5\nSlides\nCode\nExercises\n\n\n\n\n\n\nModule 4: Tidy data\n\n\n\n\nTopic\nDate\nReadings\nSlides\nCode\nExercises\n\n\n\n\nPivoting data\n2023-02-24\nR4DS2 5\nSlides\nCode\nExercises\n\n\nSeparating data\n2025-02-26\nR4DS1 12.4 - 12.5\nSlides\nCode\nExercises\n\n\nMerging columns\n2025-02-28\nR4DS2 19.1 - 19.3.2\nSlides\nCode\nExercises\n\n\nMerging rows\n2025-03-03\nR4DS2 19.3.3 - 19.5\nSlides\nCode\nExercises\n\n\n\n\n\n\nModule 5: Transforming data values\n\n\n\n\nTopic\nDate\nReadings\nSlides\nCode\nExercises\n\n\n\n\nNumbers\n2025-03-05\nR4DS2 13\nSlides\nCode\nNone\n\n\nStrings\n2025-03-07\nR4DS2 14\nSlides\nCode\nExercises\n\n\nMatching patterns\n2025-03-10\nR4DS2 15\nSlides\nCode\nExercises\n\n\nFactors\n2025-03-12\nR4DS2 16\nSlides\nCode\nExercises\n\n\nDates and times\n2025-03-14\nR4DS2 17\nSlides\nCode\nExercises\n\n\n\n\n\n\nModule 6: Programming\n\n\n\n\nTopic\nDate\nReadings\nSlides\nCode\nExercises\n\n\n\n\nFunctions\n2025-03-24\nR4DS1 19\nSlides\nCode\nExercises\n\n\nIteration\n2025-03-26\nR4DS2 26\nSlides\nCode\nExercises\n\n\n\n\n\n\nModule 7: Grammar of graphics\n\n\n\n\nTopic\nDate\nReadings\nSlides\nCode\nExercises\n\n\n\n\nGrammar of graphics I\n2025-03-28\nR4DS2 1  R4DS2 9\nSlides\nCode\nExercises\n\n\nGrammar of graphics II\n2025-03-31\nFDV 1, 2  3\nSlides\nCode\nExercises\n\n\nDesign and themes\n2025-04-02\nFDV 17, 25, 26, 29\nSlides, Script\nCode\nExercises\n\n\nColor\n2025-04-04\nFDV 4, 19  Cookbook for R\nSlides\nCode\nExercises\n\n\n\n\n\n\nModule 8: Plotting data\n\n\n\n\nTopic\nDate\nReadings\nSlides\nCode\nExercises\n\n\n\n\nPlotting distributions: histograms\n2025-04-07\nFDV 7\nScript\nCode\nExercises\n\n\nPlotting distributions: boxplots\n2025-04-09\nFDV 9\nScript\nCode\nExercises\n\n\nPlotting amounts: bar charts\n2025-04-11\nFDV 6\nScript\nCode\nExercises\n\n\nPlotting x-y data: associations\n2025-04-14\nFDV 12\nScript\nCode\nExercises\n\n\nPlotting x-y data: time series\n2025-04-16\nFDV 13, 14\nScript\nCode\nExercises\n\n\nPlotting x-y data: categories\n2025-04-18\nRaincloud Plots\nScript\nCode\nExercises\n\n\n\n\n\n\nModule 9: Customizing plots\n\n\n\n\nTopic\nDate\nReadings\nSlides\nCode\nExercises\n\n\n\n\nAdjusting axes\n2025-04-21\nFDV 21, 24\nScript\nCode\nExercises\n\n\nAnnotating plots\n2025-04-23\nFDV 22.1 - 22.2, R4DS2 11\nScript\nCode\nExercises\n\n\nDealing with overlap\n2025-04-25\nFDV 18, 20\nScript\n\nExercises\n\n\nPlotting challenge\n2023-05-01\n\nCode\n\n\n\n\n\n\n\n\nModule 10: Tables, documents, and presentations\n\n\n\n\nTopic\nDate\nReadings\nSlides\nCode\nExercises\n\n\n\n\nTables\n2025-04-28\nFDV 22.3  RMC 10.1\nSlides\nCode\n\n\n\nPublications\n2025-05-02\npapaja manual 1\nSlides\nCode\n\n\n\nAdvanced R Markdown\n2025-05-05\nR4DS2 30\nSlides\n\n\n\n\n\n\n\n\nModule 11: Statistics\n\n\n\n\nTopic\nDate\nReadings\nSlides\nCode\nExercises\n\n\n\n\nStatistics I\n2025-05-07\n\n\n\n\n\n\nStatistics II\n2025-05-09\n\n\n\n\n\n\n\n\nFDV = Fundamentals of Data Visualization, R4DS1 = R for Data Science 1st edition, R4DS1 = R for Data Science 2nd edition, PWR = Programming with R, RMC = R Markdown Cookbook, RYWM = RYouWithMe, SIDS = Statistical Inference via Data Science"
  },
  {
    "objectID": "posts/00_welcome/index.html",
    "href": "posts/00_welcome/index.html",
    "title": "Getting started with R",
    "section": "",
    "text": "The primary aim of this course is to teach you how to use R. By the end of the course, you should be comfortable working with and visualizing your data such that you can quickly learn how to analyze it.\nLearning how to program involves time, effort, and repetition. Everyone (including me) struggles with learning how to program, and we will all be learning together. Some of the material takes a few times to understand. You will make mistakes. A lot of mistakes. Maybe even the same mistake over and over. I will be doing live coding, and I will make mistakes (probably a lot of mistakes; maybe even the same mistake over and over). As we make mistakes, we learn about how R works and how we interface with R. We will learn from these mistakes, and they will make us better coders.\nThe ‘use it or lose it’ mantra definitely applies to learning R. Plan on working on it a little bit almost every day. Much of what we learn is cumulative, so keep practicing what you’re learning and please keep up with the lessons. Don’t give up! I would rather you talk to me about struggles you’re facing, so we can find a solution than have you bail out of learning R. We can do this together!\nAlso, you’re not alone. I want this course to help build an R community on campus. So ask me questions. Ask your classmates questions. Work in groups. Post questions and answers in the discussion. The global R community is a vibrant, welcoming, inclusive group of people who are interested in helping others learn R. I want to build a similar welcoming community in this course."
  },
  {
    "objectID": "posts/00_welcome/index.html#welcome",
    "href": "posts/00_welcome/index.html#welcome",
    "title": "Getting started with R",
    "section": "",
    "text": "The primary aim of this course is to teach you how to use R. By the end of the course, you should be comfortable working with and visualizing your data such that you can quickly learn how to analyze it.\nLearning how to program involves time, effort, and repetition. Everyone (including me) struggles with learning how to program, and we will all be learning together. Some of the material takes a few times to understand. You will make mistakes. A lot of mistakes. Maybe even the same mistake over and over. I will be doing live coding, and I will make mistakes (probably a lot of mistakes; maybe even the same mistake over and over). As we make mistakes, we learn about how R works and how we interface with R. We will learn from these mistakes, and they will make us better coders.\nThe ‘use it or lose it’ mantra definitely applies to learning R. Plan on working on it a little bit almost every day. Much of what we learn is cumulative, so keep practicing what you’re learning and please keep up with the lessons. Don’t give up! I would rather you talk to me about struggles you’re facing, so we can find a solution than have you bail out of learning R. We can do this together!\nAlso, you’re not alone. I want this course to help build an R community on campus. So ask me questions. Ask your classmates questions. Work in groups. Post questions and answers in the discussion. The global R community is a vibrant, welcoming, inclusive group of people who are interested in helping others learn R. I want to build a similar welcoming community in this course."
  },
  {
    "objectID": "posts/00_welcome/index.html#course-objectives",
    "href": "posts/00_welcome/index.html#course-objectives",
    "title": "Getting started with R",
    "section": "Course objectives",
    "text": "Course objectives\n\nLearn how to import, process, and plot data in R using tidyverse functions\nGain a basic understanding of general programming principles applied to data preparation, analysis, and visualization\nApply principles of good data visualization to plot data in an informative way\nProduce reproducible manuscripts and presentations with R code embedded"
  },
  {
    "objectID": "posts/00_welcome/index.html#course-modules",
    "href": "posts/00_welcome/index.html#course-modules",
    "title": "Getting started with R",
    "section": "Course modules",
    "text": "Course modules\n\nR basics\nWorking with data\nCleaning and wrangling data\nTidy data\nData types\nGrammar of graphics\nPlotting data\nCustomizing plots\nTables, documents, and presentations"
  },
  {
    "objectID": "posts/00_welcome/index.html#things-to-do-before-the-course-begins",
    "href": "posts/00_welcome/index.html#things-to-do-before-the-course-begins",
    "title": "Getting started with R",
    "section": "Things to do before the course begins",
    "text": "Things to do before the course begins\nAs soon as possible, please do the following:\n\nView presentation on Getting Started with R (slides)\nInstall R from https://r-project.org\nInstall RStudio from Posit\nInstall {tidyverse} package\nIf you have any trouble installing these, contact me.\nRead the syllabus\nComplete course introduction form\nRead SIDS 1, Wickham 2020, R4DS2 Intro\n\nIf you have any questions about the course or R in general, do not hesitate to email me in Canvas.\nI’m looking forward to seeing you all in class!"
  },
  {
    "objectID": "posts/02_rstudio/index.html",
    "href": "posts/02_rstudio/index.html",
    "title": "Working in RStudio",
    "section": "",
    "text": "Let’s figure out how to work in RStudio."
  },
  {
    "objectID": "posts/02_rstudio/index.html#learning-objectives",
    "href": "posts/02_rstudio/index.html#learning-objectives",
    "title": "Working in RStudio",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nLearn what the RStudio panels are used for, how to customize RStudio, and where to find keyboard shortcuts\nBuild a mental model of RStudio\nLearn how to get help from R, RStudio, and online forums when you need help\nLearn now to create a reproducible example"
  },
  {
    "objectID": "posts/02_rstudio/index.html#pre-meeting",
    "href": "posts/02_rstudio/index.html#pre-meeting",
    "title": "Working in RStudio",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nTroubleshoot any installation issues (contact me)\nInstall R packages needed for the course\nRead RYWM 1"
  },
  {
    "objectID": "posts/02_rstudio/index.html#class-meeting",
    "href": "posts/02_rstudio/index.html#class-meeting",
    "title": "Working in RStudio",
    "section": "Class meeting",
    "text": "Class meeting\n[Slides]\n\nTour of RStudio\nMental model of RStudio\nOptions\nInstalling packages\nGetting help\nSlides and Code"
  },
  {
    "objectID": "posts/02_rstudio/index.html#homework-after-the-class-meeting",
    "href": "posts/02_rstudio/index.html#homework-after-the-class-meeting",
    "title": "Working in RStudio",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead R4DS2 3 and R4DS2 4.1 - 4.2"
  },
  {
    "objectID": "posts/04_workflows/index.html",
    "href": "posts/04_workflows/index.html",
    "title": "Workflows",
    "section": "",
    "text": "Using R involves working with multiple files in your project folders. To read in data and save figures, you need to be able to navigate the directory structure of your file system."
  },
  {
    "objectID": "posts/04_workflows/index.html#learning-objectives",
    "href": "posts/04_workflows/index.html#learning-objectives",
    "title": "Workflows",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nAccess files in directories with file managers and terminals\nDistinguish between absolute and relative directory paths\nNavigate across subdirectories in a terminal\nSet working directories with RStudio Projects"
  },
  {
    "objectID": "posts/04_workflows/index.html#pre-meeting",
    "href": "posts/04_workflows/index.html#pre-meeting",
    "title": "Workflows",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nRead R4DS2 6"
  },
  {
    "objectID": "posts/04_workflows/index.html#class-meeting",
    "href": "posts/04_workflows/index.html#class-meeting",
    "title": "Workflows",
    "section": "Class meeting",
    "text": "Class meeting\n\nDirectory structure\nPaths\nWorking directories\nRStudio Projects\nRunning commands\nSlides"
  },
  {
    "objectID": "posts/04_workflows/index.html#homework-after-the-class-meeting",
    "href": "posts/04_workflows/index.html#homework-after-the-class-meeting",
    "title": "Workflows",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead R Markdown, complete Markdown tutorial"
  },
  {
    "objectID": "posts/06_datatypes/index.html",
    "href": "posts/06_datatypes/index.html",
    "title": "Data types",
    "section": "",
    "text": "There are four core types of data in R: doubles, integers, character strings, and logicals. Those can be augmented to form other data types such as factors and dates. We’ll explore how to create, check, and convert these data types."
  },
  {
    "objectID": "posts/06_datatypes/index.html#learning-objectives",
    "href": "posts/06_datatypes/index.html#learning-objectives",
    "title": "Data types",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nLearn characteristics of the different data types\nConvert between data types\nWork with special data values"
  },
  {
    "objectID": "posts/06_datatypes/index.html#pre-meeting",
    "href": "posts/06_datatypes/index.html#pre-meeting",
    "title": "Data types",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nRead R4DS1 20"
  },
  {
    "objectID": "posts/06_datatypes/index.html#class-meeting",
    "href": "posts/06_datatypes/index.html#class-meeting",
    "title": "Data types",
    "section": "Class meeting",
    "text": "Class meeting\n\nNumerics\nCharacters\nLogicals\nFactors\nDates\nConverting data types\nSpecial values\nSlides and Code"
  },
  {
    "objectID": "posts/06_datatypes/index.html#homework-after-the-class-meeting",
    "href": "posts/06_datatypes/index.html#homework-after-the-class-meeting",
    "title": "Data types",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead PWR 13"
  },
  {
    "objectID": "posts/08_importing/index.html",
    "href": "posts/08_importing/index.html",
    "title": "Importing data",
    "section": "",
    "text": "Importing data is often the first step in data processing. These data may be saved as CSV, Excel, SPSS, or Qualtrics formats, just to name a few. R allows you to import data from a wide variety of sources. You can also easily save those files locally."
  },
  {
    "objectID": "posts/08_importing/index.html#learning-objectives",
    "href": "posts/08_importing/index.html#learning-objectives",
    "title": "Importing data",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nImport CSV, Excel, and data files from other statistics programs\nImport data from local files, URLs, Qualtrics, and cloud storage systems\nExport CSV files"
  },
  {
    "objectID": "posts/08_importing/index.html#pre-meeting",
    "href": "posts/08_importing/index.html#pre-meeting",
    "title": "Importing data",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nR4DS2 7 and R4DS2 20"
  },
  {
    "objectID": "posts/08_importing/index.html#class-meeting",
    "href": "posts/08_importing/index.html#class-meeting",
    "title": "Importing data",
    "section": "Class meeting",
    "text": "Class meeting\n\nDistinguish file types\nImport CSV data\nExport CSV data\nImport Excel data\nImport SPSS, SAS, and STATA data\nImport Qualtrics data\nImport data from cloud storage\nSlides and Code"
  },
  {
    "objectID": "posts/08_importing/index.html#homework-after-the-class-meeting",
    "href": "posts/08_importing/index.html#homework-after-the-class-meeting",
    "title": "Importing data",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead Wikipedia"
  },
  {
    "objectID": "posts/10_selecting/index.html",
    "href": "posts/10_selecting/index.html",
    "title": "Selecting columns",
    "section": "",
    "text": "We’ll start our data wrangling by cleaning up the columns of our data. We’ll use {dplyr} functions to select, move, and rename columns."
  },
  {
    "objectID": "posts/10_selecting/index.html#learning-objectives",
    "href": "posts/10_selecting/index.html#learning-objectives",
    "title": "Selecting columns",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nSelect a subset of columns\nMove columns within the data set\nRename columns"
  },
  {
    "objectID": "posts/10_selecting/index.html#pre-meeting",
    "href": "posts/10_selecting/index.html#pre-meeting",
    "title": "Selecting columns",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nRead R4DS2 3.3.2 - 3.3.4"
  },
  {
    "objectID": "posts/10_selecting/index.html#class-meeting",
    "href": "posts/10_selecting/index.html#class-meeting",
    "title": "Selecting columns",
    "section": "Class meeting",
    "text": "Class meeting\n\nSubsetting columns\nMoving columns\nRenaming columns\nSlides and Code"
  },
  {
    "objectID": "posts/10_selecting/index.html#homework-after-the-class-meeting",
    "href": "posts/10_selecting/index.html#homework-after-the-class-meeting",
    "title": "Selecting columns",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead R4DS2 3.3.1"
  },
  {
    "objectID": "posts/12_piping/index.html",
    "href": "posts/12_piping/index.html",
    "title": "Piping",
    "section": "",
    "text": "Often we have many steps of data processing to wrangle it appropriately. Rather than having to save every intermediate step, we can use pipes to create chains of steps."
  },
  {
    "objectID": "posts/12_piping/index.html#learning-objectives",
    "href": "posts/12_piping/index.html#learning-objectives",
    "title": "Piping",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nLearn when to use pipes\nCompare base R and tidyverse pipes\nApply pipes to optimize coding"
  },
  {
    "objectID": "posts/12_piping/index.html#pre-meeting",
    "href": "posts/12_piping/index.html#pre-meeting",
    "title": "Piping",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nRead R4DS2 3.3.1"
  },
  {
    "objectID": "posts/12_piping/index.html#class-meeting",
    "href": "posts/12_piping/index.html#class-meeting",
    "title": "Piping",
    "section": "Class meeting",
    "text": "Class meeting\n\nBase R vs. tidyverse pipes\nPiping basics\nAdvanced piping\nSlides and Code"
  },
  {
    "objectID": "posts/12_piping/index.html#homework-after-the-class-meeting",
    "href": "posts/12_piping/index.html#homework-after-the-class-meeting",
    "title": "Piping",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead R4DS2 3.2.1"
  },
  {
    "objectID": "posts/14_summarizing/index.html",
    "href": "posts/14_summarizing/index.html",
    "title": "Summarizing rows",
    "section": "",
    "text": "We’ll use the {dplyr} summarise() functions to apply summary functions to data rows (e.g., mean(), min()). This is most useful when paired with group_by() to calculate summary values for each level in a group."
  },
  {
    "objectID": "posts/14_summarizing/index.html#learning-objectives",
    "href": "posts/14_summarizing/index.html#learning-objectives",
    "title": "Summarizing rows",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nSummarize column values\nStart using summary functions\nApply functions across columns\nSummarize separately for group levels\nGenerate subsets of rows per group"
  },
  {
    "objectID": "posts/14_summarizing/index.html#pre-meeting",
    "href": "posts/14_summarizing/index.html#pre-meeting",
    "title": "Summarizing rows",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nRead R4DS2 3.5"
  },
  {
    "objectID": "posts/14_summarizing/index.html#class-meeting",
    "href": "posts/14_summarizing/index.html#class-meeting",
    "title": "Summarizing rows",
    "section": "Class meeting",
    "text": "Class meeting\n\nCounting rows per column level\nSummarizing column values across rows\nSummarizing multiple columns\nGrouping rows\nSummarizing groups of data\nSummarizing multiple groups\nSlicing rows per group\nReviewing dplyr verbs\nSlides and Code"
  },
  {
    "objectID": "posts/14_summarizing/index.html#homework-after-the-class-meeting",
    "href": "posts/14_summarizing/index.html#homework-after-the-class-meeting",
    "title": "Summarizing rows",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead R4DS2 5"
  },
  {
    "objectID": "posts/16_separating/index.html",
    "href": "posts/16_separating/index.html",
    "title": "Separating data",
    "section": "",
    "text": "One of the key principles of tidy data is that each value has its own cell. To achieve that, you may need to split values in column into multiple columns or combine values across columns."
  },
  {
    "objectID": "posts/16_separating/index.html#learning-objectives",
    "href": "posts/16_separating/index.html#learning-objectives",
    "title": "Separating data",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nSeparate values from single column into multiple columns\nUnite multiple columns into single column\nCoalesce multiple columns with missing data into single column\nFind all possible combinations of factors and all existing combinations\nFill in missing data"
  },
  {
    "objectID": "posts/16_separating/index.html#pre-meeting",
    "href": "posts/16_separating/index.html#pre-meeting",
    "title": "Separating data",
    "section": "Pre-meeting",
    "text": "Pre-meeting\nTo prepare for this class meeting, please do the following:\n\nRead R4DS1 12.4 - 12.5"
  },
  {
    "objectID": "posts/16_separating/index.html#class-meeting",
    "href": "posts/16_separating/index.html#class-meeting",
    "title": "Separating data",
    "section": "Class meeting",
    "text": "Class meeting\n\nSeparating data\nUniting data\nCoalescing data\nCombinations of factors\nFilling missing data\nSlides and Code"
  },
  {
    "objectID": "posts/16_separating/index.html#homework-after-the-class-meeting",
    "href": "posts/16_separating/index.html#homework-after-the-class-meeting",
    "title": "Separating data",
    "section": "Homework after the class meeting",
    "text": "Homework after the class meeting\n\nWrap up this lesson\n\nComplete the exercises\n\n\n\nFor next class meeting\n\nRead R4DS2 19.1 - 19.3.2"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "Resources",
    "section": "",
    "text": "To install all of the course packages:\n\nIf you are using Windows, first install RTools.\nThen copy and paste the following line to install most of the packages needed for the course (click the little clipboard in top right corner to copy everything).\nWarning: it may take a while for these to install, so don’t start this if you need access to your R session (or open another R session to do this).\n\n\ninstall.packages(c(\"here\", \"palmerpenguins\", \"remotes\", \"tidyverse\", \"knitr\", \"rmarkdown\", \"papaja\", \"tinytex\", \"dataReporter\", \"qualtRics\", \"readxl\", \"nycflights13\", \"ggthemes\", \"patchwork\", \"gt\"))\n\nAfter installing tinytex, run tinytex::install_tinytex().\nClick Full package list below to see all packages with links to their websites.\n\nFull package list\n\n\n{here}\n{palmerpenguins}\n{remotes}\n{tidyverse}\n\n\n{knitr}\n{rmarkdown}\n{papaja}\n{tinytex}\n\n\n{dataReporter}\n{qualtRics}\n{readxl}\n\n\n{nycflights13}\n\n\n{ggthemes}\n{patchwork}\n{gt}"
  },
  {
    "objectID": "resources.html#packages",
    "href": "resources.html#packages",
    "title": "Resources",
    "section": "",
    "text": "To install all of the course packages:\n\nIf you are using Windows, first install RTools.\nThen copy and paste the following line to install most of the packages needed for the course (click the little clipboard in top right corner to copy everything).\nWarning: it may take a while for these to install, so don’t start this if you need access to your R session (or open another R session to do this).\n\n\ninstall.packages(c(\"here\", \"palmerpenguins\", \"remotes\", \"tidyverse\", \"knitr\", \"rmarkdown\", \"papaja\", \"tinytex\", \"dataReporter\", \"qualtRics\", \"readxl\", \"nycflights13\", \"ggthemes\", \"patchwork\", \"gt\"))\n\nAfter installing tinytex, run tinytex::install_tinytex().\nClick Full package list below to see all packages with links to their websites.\n\nFull package list\n\n\n{here}\n{palmerpenguins}\n{remotes}\n{tidyverse}\n\n\n{knitr}\n{rmarkdown}\n{papaja}\n{tinytex}\n\n\n{dataReporter}\n{qualtRics}\n{readxl}\n\n\n{nycflights13}\n\n\n{ggthemes}\n{patchwork}\n{gt}"
  },
  {
    "objectID": "resources.html#glossary",
    "href": "resources.html#glossary",
    "title": "Resources",
    "section": "Glossary",
    "text": "Glossary\nIf you want to find definitions of the terms that we use in the course, check out the PsyTeachR Glossary"
  },
  {
    "objectID": "resources.html#function-list",
    "href": "resources.html#function-list",
    "title": "Resources",
    "section": "Function list",
    "text": "Function list\nThis is a list of all of the functions that we will be learning throughout the course. Note these may change as we progress through the course. Click Full function list below to see all functions with links to their websites.\n\nFull function list\nPackages\n\n\ninstall.packages(): install R packages\n\nlibrary(): load R packages\n\n:: export variable from package for use\nData types\n\n\n&gt;, &gt;=, &lt;, &lt;=, ==, !=, %in%: logical operators that output TRUE or FALSE\n\n\ntypeof(), class(), str(): outputs object type, class, and structure\n\nis.numeric(), is.character(), is.factor(): checks whether object is numeric, character, factor\n\nas.numeric(), as.character(), as.factor(): coerces (converts) object to numeric, character, factor\n\nis.na(): checks whether object is NA and outputs logical\nData structures\n\n\n[]: index elements in vector, matrix, data frame, tibble\n\n$: index column by name in data frame, tibble, list\n\n:, seq(), rep(): creates sequences and repetitions of numbers\n\nlength(): outputs length of vector\n\ndim(), nrow(), ncol(): outputs dimensions, number of rows, number of columns of matrices, data frames, tibbles\n\ncolnames(): outputs (and can assign) column names\n\nhead(), tail(), dplyr::glimpse(): outputs compressed views of data frames, tibbles\n\nc(), list(), data.frame(), tibble::tibble(): creates vectors, matrices, data frames, tibbles\nImporting data\n\n\nhere::here(): starts path at project directory\n\nread.csv(), write.csv(), readr::read_csv(), readr::write_csv(): imports and writes CSV files\n\nreadxl::read_excel(): imports Excel files\nValidating data\n\n\nrange(), min(), max(): finds range, minimum, and maximum of vector\n\nunique(): returns vector of unique (not duplicated) elements\n\nduplicated(): returns logical vector of duplicated elements\n\nwhich(): returns indices of which elements of a logical vector are TRUE\n\n\nsummary(): when applied to day, gives summary statistics\n\nskimr::skim(): outputs overview of data\n\ndataReporter::makeCodebook(): creates codebook of data\nCleaning columns\n\n\ndplyr::select(): selects subset of columns from data frame, tibble\n\ndplyr::everything(), dplyr::contains(), dplyr::starts_with(), dplyr::ends_with(): helper functions for select()\n\n\ndplyr::relocate(), dplyr::rename(): moves and renames columns in data frame, tibble\n\ndplyr::mutate(), dplyr::transmute(): applies function to change existing column or create new column\n\ndplyr::across(): applies function across multiple columns inside mutate()\n\n\ndplyr::rowwise(): applies function to each row\n\n%&gt;%: pipe operator that transfers output to the next command\n\ndplyr::pull(): creates a vector from a data frame/tibble column\nWrangling rows\n\n\ndplyr::filter(): filters subset of rows from data frame, tibble\n\ndplyr::if_any(): apply function to columns and return TRUE if any values are TRUE\n\ntidyr::drop_na(): drop rows containing missing values\n\ndplyr::arrange(), dplyr::desc(): sorts rows by column variable, in descending order\n\ndplyr::group_by(): groups data by column levels\n\ndplyr::summarise(): applies function over whole column or group\nTidy data\n\n\ntidyr::pivot_longer(), tidyr::pivot_wider(): reshapes data to be longer or wider\n\ntidyr::separate(), tidyr::unite(): separates or combines column data with separator\n\ndplyr::coalesce(): find the first non-missing element\n\ntidyr::complete(), tidyr::expand(), tidyr::nesting(): finds all unique combinations of levels\nMerging data\n\n\ndplyr::inner_join(), dplyr::left_join(), dplyr::right_join(){target=“_blank”}, dplyr::full_join(): mutating joins that merge data frames\n\ndplyr::semi_join(), dplyr::anti_join(): filtering joins that filter data frame based on another data frame\n\ndplyr::join_by(): join data frames with different names for key columns (requires {dplyer} v. 1.1.0 or higher)\n\ntibble::add_row(): manually add rows of data\n\ndplyr::bind_rows(), dplyr::bind_cols(): binds rows or columns to data frame\n\ndplyr::intersect(), dplyr::setdiff(), dplyr::union(), dplyr::union_all(): set operations to find overlap, differences, and combinations of data sets\nNumbers\n\n\ndplyr::count(), dplyr::n(), dplyr::n_distinct(): count instances of group levels\n\nround(): round digits\n\nformat(): format numbers\n\ncut(): bin numbers into ranges\nStrings\n\n\nstringr::str_length(): finds the number of characters in a string\n\nstringr::str_sub(): extracts parts of strings based on character position\n\nstringr::str_to_lower(), stringr::str_to_upper(): converts all letters to lowercase or uppercase\n\nstringr::str_to_title(), stringr::str_to_sentence(): converts strings to title or sentence case\n\nstringr::str_c(): combine character vectors into single string\n\nstringr::str_glue(): combines strings with R output\n\npaste(), paste0(): combines strings with R output\n\nstringr::str_detect(), stringr::str_subset(), stringr::str_extract(): detects, subsets, and extracts strings\n\nstringr::str_replace(), stringr::str_replace_all(): replaces patterns with strings\n\nstringr::str_split(): splits strings based on separators\nFactors\n\n\nlevels(): prints factor levels\n\nforcats::fct_inorder(), forcats::fct_rev(): orders levels by order in data or in reverse of current order\n\nforcats::fct_relevel(): manually reorders levels\n\nforcats::fct_reorder(): orders levels based on another variable\n\nforcats::fct_recode(): recodes level with new value\n\nforcats::fct_collapse(): recodes multiple levels into single new value\n\nforcats::fct_lump_n(), forcats::fct_lump_prop(),forcats::fct_lump_min(): lumps infrequent levels into level “Other”\nDates and times\n\n\nlubridate::today(), lubridate::now(): print today’s date or time\n\nlubridate::as_date(), lubridate::as_datetime(): create date or date-time object\n\nlubridate::mdy(), lubridate::dmy(), lubridate::ymd(): convert various date formats to YYYY-MM-DD\n\nlubridate::hms(), lubridate::hm(): convert times to HH:MM:SS\n\nlubridate::mdy_hm(), lubridate::mdy_hms(): converts various date-time formats to YYYY-MM-DD HH:MM:SS\n\nlubridate::year(), lubridate::month(), lubridate::day(), lubridate::wday(): extracts year, month, day, or weekday from date\n\nlubridate::hour(), lubridate::minute(), lubridate::second(): extracts hour, minute, second from date\nIteration\n\n\nfor(): create for loops\n\npurrr::map(), purrr::map_dbl(), purrr::map_chr(), purrr::map_df(): map functions to vector, data frame, or list and return list, numeric vector, character vector, or data frame\n\nsplit(): divide data frame into groups in a list\n\ndir(): return files in a directory\nGrammar of graphics\n\n\nggplot2::ggplot(): creates a ggplot\n\n+: pipe operator for ggplots\n\nggplot2::aes(): defines aesthetic properties of plot\n\nalpha, color, fill, linesize, linetype, shape, size arguments: properties for geometric objects\n\nggplot2::theme(): Modify components of a theme\n\nggplot2::ggsave(): saves ggplot to file\nColor\n\n\nggplot2::scale_color_brewer(), ggplot2::scale_fill_brewer(): uses existing qualitative colors scales for color and fill\n\nggplot2::scale_color_manual(), ggplot2::scale_fill_manual(): sets manual colors for color and fill\n\nggplot2::scale_color_gradient(), ggplot2::scale_fill_gradient(): sets sequential color gradient for color and fill\n\nggplot2::scale_color_distiller(), ggplot2::scale_fill_distiller(): sets diverging color scale for color and fill\nVisualizing distributions\n\n\nggplot2::geom_histogram(): plots histograms\n\nggplot2::geom_freqpoly(): plots frequency polygons\n\nggplot2::geom_density(): plots density plot\n\nggplot2::geom_boxplot(): plots boxplot\n\nggplot2::geom_violin(): plots violin plot\n\nggplot2::stat_summary(): plots summaries of data (e.g., means \\(\\pm\\) standard error)\nVisualizing amounts and proportions\n\n\ndplyr::count(): calculates counts of data by variables\n\nggplot2::geom_bar(): plots bar plot with raw data\n\nggplot2::geom_col(): plots bar plot with counts\n\nposition argument: controls whether data are stacked, dodged, jittered, nudged\n\nggplot2::geom_point(): plots scatterplots\n\nggplot2::coord_flip(): flips x and y coordinates\nVisualizing x-y data\n\n\nggplot2::geom_abline(): plots line with slope and intercept\n\npairs(): plots correlation plots\n\nGGally::ggpairs(): plots correlation plots\n\nggplot2::geom_tile(): plots tile plot\n\nggcorrplot::ggcorrplot(): plots correlation heatmaps\n\nggplot2::geom_line(): plots line plot\n\nggplot2::geom_area(): plots area under curve or line plot\n\nggplot2::geom_count(): plots overlapping points as size\n\nggplot2::geom_smooth(): plots fitted lines and curves\n\nggplot2::geom_rug(): plots rug plot\n\nggplot2::geom_pointrange(): plots point and error bar\n\nggplot2::geom_jitter(): plots jittered points\n\nggbeeswarm::geom_beeswarm(): plots beeswarm plots\n\ngghalves::geom_half_violin(), gghalves::geom_half_dotplot(): plots raincloud plots\nFinessing plots\n\n\nggplot2::geom_jitter(): plots jittered scatterplot\n\nggbeeswarm::geom_beeswarm(): plots beeswarm plot\n\nggplot2::scale_x_discrete(), ggplot2::scale_y_discrete(): adjusts discrete scale properties (e.g., limits, ticks)\n\nggplot2::scale_x_continuous(), ggplot2::scale_y_continuous(): adjusts continuous scale properties (e.g., limits, ticks)\n\nggplot2::lims(), ggplot2::xlim(), ggplot2::ylim(): adjusts axis limits\n\nggplot2::facet_wrap(), ggplot2::facet_grid(): creates facets based on discrete variables\nAdorning plots\n\n\nggplot2::labs(), ggplot2::xlab(), ggplot2::ylab(): replaces axis labels\n\nggplot2::annotate(): annotates plot with text, segments, rectangles, etc.\n\nggplot2::geom_text(): plots text as aesthetic property\n\nggplot2::geom_hline(), ggplot2::geom_vline(): plots horizontal and vertical reference lines\n\nggplot2::stat_ellipse(): plots ellipse around data\nTables\n\n\nknitr::kable(): creates table from data frame\n\nkableExtra::kable_styling(): styles table\n\nkableExtra::pack_rows(), kableExtra::add_header_above(): adds grouping variables to rows or columns\n\nkableExtra::footnote(): adds table note\n\nkableExtra::landscape(): rotates table to landscape orientation\n\npapaja::apa_table(): formats data frame to APA style table\n\npapaja::apa_print(): formats statistics to APA style"
  },
  {
    "objectID": "resources.html#flashcards",
    "href": "resources.html#flashcards",
    "title": "Resources",
    "section": "Flashcards",
    "text": "Flashcards\nFlashcards can be a useful way to help learning functions and their descriptions. I created a package called {flashr} that builds decks of HTML flashcards. You’re welcome to build your own decks of flashcards by installing the package and following the instructions for building decks. Or, you can use existing decks built for the course or for each of the chapters of R for Data Science (2nd edition).\n\nDPaViR flashcards\n\nIntroduction (terms first) (definitions first)\nCoding and workflows (terms first) (definitions first)\nData types (terms first) (definitions first)\nData structures (terms first) (definitions first)\nImporting data (terms first) (definitions first)\nValidating data (terms first) (definitions first)\nCleaning columns (terms first) (definitions first)\nWrangling rows (terms first) (definitions first)\nTidy data (terms first) (definitions first)\nMerging data (terms first) (definitions first)\nNumbers (terms first) (definitions first)\nStrings (terms first) (definitions first)\nFactors (terms first) (definitions first)\nDates and times (terms first) (definitions first)\nIteration (terms first) (definitions first)  \n\n\nR4DS2 flashcards\n\nCh. 0 Introduction\nCh. 1 Data visualization\nCh. 3 Data transformation\nCh. 5 Data tidying\nCh. 7 Data import\nCh. 9 Layers\nCh. 10 Exploratory data analysis\nCh. 11 Communication\nCh. 12 Logical vectors\nCh. 13 Numbers\nCh. 14 Strings\nCh. 15 Regular expressions\nCh. 16 Factors\nCh. 18 Dates and times\nCh. 19 Joins\nCh. 20 Spreadsheets\nCh. 21 Databases\nCh. 23 Hierarchical data\nCh. 25 Functions\nCh. 26 Iteration\nCh. 27 Base R\nCh. 28 Quarto\nCh. 29 Quarto formats"
  },
  {
    "objectID": "resources.html#miscellaneous",
    "href": "resources.html#miscellaneous",
    "title": "Resources",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\nCheatsheets\nTidyverse style\nPsyTeachR books"
  },
  {
    "objectID": "slides/00_getting_started.html#what-is-r",
    "href": "slides/00_getting_started.html#what-is-r",
    "title": "Getting started with R",
    "section": "What is R?",
    "text": "What is R?\nR is a statistical programming language."
  },
  {
    "objectID": "slides/00_getting_started.html#what-is-r-1",
    "href": "slides/00_getting_started.html#what-is-r-1",
    "title": "Getting started with R",
    "section": "What is R?",
    "text": "What is R?\nR is a statistical programming language.\n\nSource: Allison Horst"
  },
  {
    "objectID": "slides/00_getting_started.html#what-is-r-2",
    "href": "slides/00_getting_started.html#what-is-r-2",
    "title": "Getting started with R",
    "section": "What is R?",
    "text": "What is R?\nR is a statistical programming language.\n\nSource: Allison Horst"
  },
  {
    "objectID": "slides/00_getting_started.html#what-is-r-3",
    "href": "slides/00_getting_started.html#what-is-r-3",
    "title": "Getting started with R",
    "section": "What is R?",
    "text": "What is R?\nR is a statistical programming language.\n\nSource: Twitter"
  },
  {
    "objectID": "slides/00_getting_started.html#what-is-r-4",
    "href": "slides/00_getting_started.html#what-is-r-4",
    "title": "Getting started with R",
    "section": "What is R?",
    "text": "What is R?\nR is a statistical programming language.\nIt allows you to flexibly\n\nwrangle data\nvisualize data\nanalyze data\ncreate reproducible documents"
  },
  {
    "objectID": "slides/00_getting_started.html#conventions",
    "href": "slides/00_getting_started.html#conventions",
    "title": "Getting started with R",
    "section": "Conventions",
    "text": "Conventions\n\nAll code is in monospace font purple text\nR functions end with parentheses: function()\nDirectory names end with slash: home/\nPackage names are surrounded by curly braces: {tidyverse}\nKeyboard buttons separate keys with a plus: Ctrl+S\nThese are parentheses (), brackets [], and braces {}\nLinks are in light blue text"
  },
  {
    "objectID": "slides/00_getting_started.html#getting-started",
    "href": "slides/00_getting_started.html#getting-started",
    "title": "Getting started with R",
    "section": "Getting started",
    "text": "Getting started\nInstalling R\nDownload at https://r-project.org.\nFor Windows, also install Rtools"
  },
  {
    "objectID": "slides/00_getting_started.html#getting-started-1",
    "href": "slides/00_getting_started.html#getting-started-1",
    "title": "Getting started with R",
    "section": "Getting started",
    "text": "Getting started\nInstalling RStudio\nRStudio is an Integrated Development Environment (IDE). Download from Posit"
  },
  {
    "objectID": "slides/00_getting_started.html#getting-started-2",
    "href": "slides/00_getting_started.html#getting-started-2",
    "title": "Getting started with R",
    "section": "Getting started",
    "text": "Getting started\nInteracting with R\nUsing the R console"
  },
  {
    "objectID": "slides/00_getting_started.html#packages",
    "href": "slides/00_getting_started.html#packages",
    "title": "Getting started with R",
    "section": "Packages",
    "text": "Packages\nPackages are collections of function and data sets"
  },
  {
    "objectID": "slides/00_getting_started.html#packages-1",
    "href": "slides/00_getting_started.html#packages-1",
    "title": "Getting started with R",
    "section": "Packages",
    "text": "Packages\nBase R is a core set of packages for all R installations.\n\nSource: A ModernDive into R and the Tidyverse\n\n\n\n\n\n\nNote\n\n\nUser-contributed packages can be found on the Comprehensive R Archive Network or CRAN.\n\n\n\n\nBase R is the core, default software needed to run R maintained by the R Development Team. It includes a few core packages that underly much of R.\nBut other people can contribute packages, or collections of data and functions.\nThe official repository for R packages is the Comprehensive R Archive Network or CRAN. There are more than 19,000 packages on CRAN!\nPackages can also be stored at other locations such as GitHub especially during development."
  },
  {
    "objectID": "slides/00_getting_started.html#packages-2",
    "href": "slides/00_getting_started.html#packages-2",
    "title": "Getting started with R",
    "section": "Packages",
    "text": "Packages\nInstalling\nIn the console type\ninstall.packages(\"&lt;package_name&gt;\") where &lt;package_name&gt; is the name of the package."
  },
  {
    "objectID": "slides/00_getting_started.html#packages-3",
    "href": "slides/00_getting_started.html#packages-3",
    "title": "Getting started with R",
    "section": "Packages",
    "text": "Packages\nInstalling\nTry installing the {palmerpenguins} package.\n\ninstall.packages(\"palmerpenguins\")\n\n\nYou can install multiple packages simultaneously by wrapping them with c(). For example,\n\ninstall.packages(c(\"remotes\", \"here\"))"
  },
  {
    "objectID": "slides/00_getting_started.html#packages-4",
    "href": "slides/00_getting_started.html#packages-4",
    "title": "Getting started with R",
    "section": "Packages",
    "text": "Packages\nLoading packages\n\n\nSource: Preceptor’s Primer for Bayesian Data Science"
  },
  {
    "objectID": "slides/00_getting_started.html#packages-5",
    "href": "slides/00_getting_started.html#packages-5",
    "title": "Getting started with R",
    "section": "Packages",
    "text": "Packages\nLoading packages\nLoad the {here} package:\n\nlibrary(\"here\")\n\n\n\n\n\n\n\n\nNote\n\n\nEvery time you close your R session, you’ll have to reload the packages you were using.\n\n\n\n\nInstalling packages just means that you have copies of them on your computer. You have to load them for R to have access to their functionality. To load packages, use the library() function.\nNow, all of the functions in the here package are available for us to use."
  },
  {
    "objectID": "slides/00_getting_started.html#packages-6",
    "href": "slides/00_getting_started.html#packages-6",
    "title": "Getting started with R",
    "section": "Packages",
    "text": "Packages\nUsing\nLet’s view the penguins data set from the {palmerpenguins} package.\nTry this:\n\npenguins\n\n\nYou should receive Error: object 'penguins' not found. Why did you receive this error?\n\nOnce you load a package, you have access to all of its functions for that R session. But if it is not loaded, you won’t have access."
  },
  {
    "objectID": "slides/00_getting_started.html#packages-7",
    "href": "slides/00_getting_started.html#packages-7",
    "title": "Getting started with R",
    "section": "Packages",
    "text": "Packages\nBut you can either load the {palmerpenguins} package, or use this trick to call a specific function from a specific package.\n\npalmerpenguins::penguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "slides/00_getting_started.html#tidyverse",
    "href": "slides/00_getting_started.html#tidyverse",
    "title": "Getting started with R",
    "section": "tidyverse",
    "text": "tidyverse"
  },
  {
    "objectID": "slides/00_getting_started.html#core-tidyverse-packages",
    "href": "slides/00_getting_started.html#core-tidyverse-packages",
    "title": "Getting started with R",
    "section": "Core tidyverse packages",
    "text": "Core tidyverse packages\n\n{ggplot2} for data visualisation\n{dplyr} for data manipulation\n{tidyr} for data tidying\n{readr} for data import\n{tibble} for tibbles, a version of data frames\n{stringr} for strings\n{forcats} for factors\n{lubridate} for dates\n{purrr} for functional programming"
  },
  {
    "objectID": "slides/00_getting_started.html#homework",
    "href": "slides/00_getting_started.html#homework",
    "title": "Getting started with R",
    "section": "Homework",
    "text": "Homework\n\n\nBefore the first class period\n\nInstall R from https://r-project.org\nInstall RStudio from https://posit.co\nInstall {tidyverse} package\nComplete course introduction form\nRead the syllabus\nRead readings in syllabus schedule\n\n\n\n\nSource: Allison Horst"
  },
  {
    "objectID": "slides/02_rstudio.html#review-mental-model-of-r",
    "href": "slides/02_rstudio.html#review-mental-model-of-r",
    "title": "Working in RStudio",
    "section": "Review Mental model of R",
    "text": "Review Mental model of R"
  },
  {
    "objectID": "slides/02_rstudio.html#tour-of-rstudio",
    "href": "slides/02_rstudio.html#tour-of-rstudio",
    "title": "Working in RStudio",
    "section": "Tour of RStudio",
    "text": "Tour of RStudio"
  },
  {
    "objectID": "slides/02_rstudio.html#mental-model-of-rstudio",
    "href": "slides/02_rstudio.html#mental-model-of-rstudio",
    "title": "Working in RStudio",
    "section": "Mental model of RStudio",
    "text": "Mental model of RStudio"
  },
  {
    "objectID": "slides/02_rstudio.html#keyboard-shortcuts",
    "href": "slides/02_rstudio.html#keyboard-shortcuts",
    "title": "Working in RStudio",
    "section": "Keyboard shortcuts",
    "text": "Keyboard shortcuts\nHere are some of my favorite things!\nTools &gt; Keyboard Shortcuts Help or Alt/Opt+Shift+K\n\n\n\n\n\n\n\nFunction\nKeyboard shortcut\n\n\n\n\nRun current line\nCtrl/Cmd+Enter/Return\n\n\nSource entire script\nCtrl/Cmd+Shift+S\n\n\nInsert assignment operator\nAlt/Opt+-\n\n\nInsert pipe\nCtrl/Cmd+Shift+M\n\n\nComment lines\nCtrl/Cmd+Shift+C"
  },
  {
    "objectID": "slides/02_rstudio.html#options",
    "href": "slides/02_rstudio.html#options",
    "title": "Working in RStudio",
    "section": "Options",
    "text": "Options\n\nTurn off restore workspace\nTurn off save history\nTurn on soft wrap\nTurn on rainbow parentheses\nUse native pipe operator\nChange your theme"
  },
  {
    "objectID": "slides/02_rstudio.html#installing-packages",
    "href": "slides/02_rstudio.html#installing-packages",
    "title": "Working in RStudio",
    "section": "Installing packages",
    "text": "Installing packages"
  },
  {
    "objectID": "slides/02_rstudio.html#getting-help",
    "href": "slides/02_rstudio.html#getting-help",
    "title": "Working in RStudio",
    "section": "Getting help",
    "text": "Getting help\nOnline forums\n\nPosit Community–Posit-specific forum (e.g., tidyverse, RStudio, Quarto)\nStack Overflow–Coding-related questions\nCross Validated–Statistics questions (not R-specific)\n\nOnline portals\n\nCheatsheets\nTidyverse"
  },
  {
    "objectID": "slides/02_rstudio.html#tips",
    "href": "slides/02_rstudio.html#tips",
    "title": "Working in RStudio",
    "section": "Tips",
    "text": "Tips\n\nLearn to use keyboard shortcuts (not just RStudio shortcuts, but general ones)\nYou can remap RStudio keyboard shortcuts (I’ve remapped Insert assignment operator to Ctrl/Cmd+Shift+,)\nYour cursor can be anywhere in your code to useCtrl/Cmd+Enter to run it\nUse autocomplete\nCopy/paste to avoid misspelling\nRestart R often"
  },
  {
    "objectID": "slides/02_rstudio.html#what-about-positron",
    "href": "slides/02_rstudio.html#what-about-positron",
    "title": "Working in RStudio",
    "section": "What about Positron?",
    "text": "What about Positron?"
  },
  {
    "objectID": "slides/02_rstudio.html#lets-explore",
    "href": "slides/02_rstudio.html#lets-explore",
    "title": "Working in RStudio",
    "section": "Let’s explore!",
    "text": "Let’s explore!\nWorking in RStudio"
  },
  {
    "objectID": "slides/04_workflows.html#review-mental-model-of-coding",
    "href": "slides/04_workflows.html#review-mental-model-of-coding",
    "title": "Workflows",
    "section": "Review: Mental model of coding",
    "text": "Review: Mental model of coding"
  },
  {
    "objectID": "slides/04_workflows.html#mental-model-of-file-directories",
    "href": "slides/04_workflows.html#mental-model-of-file-directories",
    "title": "Workflows",
    "section": "Mental model of file directories",
    "text": "Mental model of file directories"
  },
  {
    "objectID": "slides/04_workflows.html#file-system",
    "href": "slides/04_workflows.html#file-system",
    "title": "Workflows",
    "section": "File system",
    "text": "File system\nStructure of directories and files stored on your computer\n\n\n/home/jstevens/github/dpavir2025/slides\n├── 00_getting_started.html\n├── 00_getting_started.mp4\n├── 00_getting_started.qmd\n├── 01_introduction.html\n├── 01_introduction.qmd\n├── 02_rstudio.html\n├── 02_rstudio.qmd\n├── 03_coding.html\n├── 03_coding.qmd\n├── 04_workflows.qmd\n├── 04_workflows.rmarkdown\n├── 04_workflows_files\n│   ├── execute-results\n│   │   └── html.json\n│   └── libs\n│       ├── clipboard\n│       │   └── clipboard.min.js\n│       ├── quarto-html\n│       │   ├── light-border.css\n│       │   ├── popper.min.js\n│       │   ├── quarto-syntax-highlighting-dark-f8dc6eab18fde03278982b0b35885446.css\n│       │   ├── tabby.min.js\n│       │   ├── tippy.css\n│       │   └── tippy.umd.min.js\n│       └── revealjs\n│           ├── dist\n│           │   ├── reset.css\n│           │   ├── reveal.css\n│           │   ├── reveal.esm.js\n│           │   ├── reveal.esm.js.map\n│           │   ├── reveal.js\n│           │   ├── reveal.js.map\n│           │   └── theme\n│           │       ├── fonts\n│           │       │   ├── league-gothic\n│           │       │   │   ├── LICENSE\n│           │       │   │   ├── league-gothic.css\n│           │       │   │   ├── league-gothic.eot\n│           │       │   │   ├── league-gothic.ttf\n│           │       │   │   └── league-gothic.woff\n│           │       │   └── source-sans-pro\n│           │       │       ├── LICENSE\n│           │       │       ├── source-sans-pro-italic.eot\n│           │       │       ├── source-sans-pro-italic.ttf\n│           │       │       ├── source-sans-pro-italic.woff\n│           │       │       ├── source-sans-pro-regular.eot\n│           │       │       ├── source-sans-pro-regular.ttf\n│           │       │       ├── source-sans-pro-regular.woff\n│           │       │       ├── source-sans-pro-semibold.eot\n│           │       │       ├── source-sans-pro-semibold.ttf\n│           │       │       ├── source-sans-pro-semibold.woff\n│           │       │       ├── source-sans-pro-semibolditalic.eot\n│           │       │       ├── source-sans-pro-semibolditalic.ttf\n│           │       │       ├── source-sans-pro-semibolditalic.woff\n│           │       │       └── source-sans-pro.css\n│           │       └── quarto-a72b68f23337d6c747b4277c226ad139.css\n│           └── plugin\n│               ├── highlight\n│               │   ├── highlight.esm.js\n│               │   ├── highlight.js\n│               │   ├── monokai.css\n│               │   ├── plugin.js\n│               │   └── zenburn.css\n│               ├── markdown\n│               │   ├── markdown.esm.js\n│               │   ├── markdown.js\n│               │   └── plugin.js\n│               ├── math\n│               │   ├── katex.js\n│               │   ├── math.esm.js\n│               │   ├── math.js\n│               │   ├── mathjax2.js\n│               │   ├── mathjax3.js\n│               │   └── plugin.js\n│               ├── notes\n│               │   ├── notes.esm.js\n│               │   ├── notes.js\n│               │   ├── plugin.js\n│               │   └── speaker-view.html\n│               ├── pdf-export\n│               │   ├── pdfexport.js\n│               │   └── plugin.yml\n│               ├── quarto-line-highlight\n│               │   ├── line-highlight.css\n│               │   ├── line-highlight.js\n│               │   └── plugin.yml\n│               ├── quarto-support\n│               │   ├── footer.css\n│               │   ├── plugin.yml\n│               │   └── support.js\n│               ├── reveal-menu\n│               │   ├── menu.css\n│               │   ├── menu.js\n│               │   ├── plugin.yml\n│               │   ├── quarto-menu.css\n│               │   └── quarto-menu.js\n│               ├── search\n│               │   ├── plugin.js\n│               │   ├── search.esm.js\n│               │   └── search.js\n│               └── zoom\n│                   ├── plugin.js\n│                   ├── zoom.esm.js\n│                   └── zoom.js\n├── 05_rmarkdown.qmd\n├── 06_datatypes.qmd\n├── 07_datastructures.qmd\n├── 08_importing.qmd\n├── 09_validating.qmd\n├── 10_selecting.qmd\n├── 11_mutating.qmd\n├── 12_piping.qmd\n├── 13_filtering.qmd\n├── 14_summarizing.qmd\n├── 15_pivoting.qmd\n├── 16_separating.qmd\n├── 17_mergingcolumns.qmd\n├── 18_mergingrows.qmd\n├── 19_numbers.qmd\n├── 20_strings.qmd\n├── 21_patterns.qmd\n├── 22_factors.qmd\n├── 23_dates.qmd\n├── 24_functions.qmd\n├── 25_iteration.qmd\n├── 26_grammar1.qmd\n├── 27_grammar2.qmd\n├── 28_themes.R\n├── 28_themes.qmd\n├── 29_color.qmd\n├── 30_histograms.R\n├── 30_histograms_answers.R\n├── 31_boxplots.R\n├── 31_boxplots_answers.R\n├── 32_barcharts.R\n├── 32_barcharts_answers.R\n├── 33_associations.R\n├── 33_associations_answers.R\n├── 34_timeseries.R\n├── 34_timeseries_answers.R\n├── 35_categories.R\n├── 35_categories_answers.R\n├── 36_axes.R\n├── 36_axes_answers.R\n├── 37_annotating.R\n├── 37_annotating_answers.R\n├── 39_tables.Rmd\n├── 39_tables.pdf\n├── 39_tables.tex\n├── 40_publications.qmd\n├── 41_advrmarkdown.qmd\n├── 42_quarto.qmd\n├── 43_statistics.R\n├── _freeze\n│   └── 04_workflows\n│       ├── execute-results\n│       │   └── html.json\n│       └── libs\n│           ├── clipboard\n│           │   └── clipboard.min.js\n│           ├── quarto-html\n│           │   ├── light-border.css\n│           │   ├── popper.min.js\n│           │   ├── quarto-syntax-highlighting-dark-f8dc6eab18fde03278982b0b35885446.css\n│           │   ├── tabby.min.js\n│           │   ├── tippy.css\n│           │   └── tippy.umd.min.js\n│           └── revealjs\n│               ├── dist\n│               │   ├── reset.css\n│               │   ├── reveal.css\n│               │   ├── reveal.esm.js\n│               │   ├── reveal.esm.js.map\n│               │   ├── reveal.js\n│               │   ├── reveal.js.map\n│               │   └── theme\n│               │       ├── fonts\n│               │       │   ├── league-gothic\n│               │       │   │   ├── LICENSE\n│               │       │   │   ├── league-gothic.css\n│               │       │   │   ├── league-gothic.eot\n│               │       │   │   ├── league-gothic.ttf\n│               │       │   │   └── league-gothic.woff\n│               │       │   └── source-sans-pro\n│               │       │       ├── LICENSE\n│               │       │       ├── source-sans-pro-italic.eot\n│               │       │       ├── source-sans-pro-italic.ttf\n│               │       │       ├── source-sans-pro-italic.woff\n│               │       │       ├── source-sans-pro-regular.eot\n│               │       │       ├── source-sans-pro-regular.ttf\n│               │       │       ├── source-sans-pro-regular.woff\n│               │       │       ├── source-sans-pro-semibold.eot\n│               │       │       ├── source-sans-pro-semibold.ttf\n│               │       │       ├── source-sans-pro-semibold.woff\n│               │       │       ├── source-sans-pro-semibolditalic.eot\n│               │       │       ├── source-sans-pro-semibolditalic.ttf\n│               │       │       ├── source-sans-pro-semibolditalic.woff\n│               │       │       └── source-sans-pro.css\n│               │       └── quarto-a72b68f23337d6c747b4277c226ad139.css\n│               └── plugin\n│                   ├── highlight\n│                   │   ├── highlight.esm.js\n│                   │   ├── highlight.js\n│                   │   ├── monokai.css\n│                   │   ├── plugin.js\n│                   │   └── zenburn.css\n│                   ├── markdown\n│                   │   ├── markdown.esm.js\n│                   │   ├── markdown.js\n│                   │   └── plugin.js\n│                   ├── math\n│                   │   ├── katex.js\n│                   │   ├── math.esm.js\n│                   │   ├── math.js\n│                   │   ├── mathjax2.js\n│                   │   ├── mathjax3.js\n│                   │   └── plugin.js\n│                   ├── notes\n│                   │   ├── notes.esm.js\n│                   │   ├── notes.js\n│                   │   ├── plugin.js\n│                   │   └── speaker-view.html\n│                   ├── pdf-export\n│                   │   ├── pdfexport.js\n│                   │   └── plugin.yml\n│                   ├── quarto-line-highlight\n│                   │   ├── line-highlight.css\n│                   │   ├── line-highlight.js\n│                   │   └── plugin.yml\n│                   ├── quarto-support\n│                   │   ├── footer.css\n│                   │   ├── plugin.yml\n│                   │   └── support.js\n│                   ├── reveal-menu\n│                   │   ├── menu.css\n│                   │   ├── menu.js\n│                   │   ├── plugin.yml\n│                   │   ├── quarto-menu.css\n│                   │   └── quarto-menu.js\n│                   ├── search\n│                   │   ├── plugin.js\n│                   │   ├── search.esm.js\n│                   │   └── search.js\n│                   └── zoom\n│                       ├── plugin.js\n│                       ├── zoom.esm.js\n│                       └── zoom.js\n├── _quarto.yml\n└── custom.scss"
  },
  {
    "objectID": "slides/04_workflows.html#file-managers",
    "href": "slides/04_workflows.html#file-managers",
    "title": "Workflows",
    "section": "File managers",
    "text": "File managers\n\nApps/GUIs to interact with file system\n\nWindows File Explorer\nMacOS Finder"
  },
  {
    "objectID": "slides/04_workflows.html#file-managers-1",
    "href": "slides/04_workflows.html#file-managers-1",
    "title": "Workflows",
    "section": "File managers",
    "text": "File managers\n\nRStudio"
  },
  {
    "objectID": "slides/04_workflows.html#terminals",
    "href": "slides/04_workflows.html#terminals",
    "title": "Workflows",
    "section": "Terminals",
    "text": "Terminals\n\nInteract with file system through prompt/command line\nIf not familiar with terminal, read primer for Windows or MacOS"
  },
  {
    "objectID": "slides/04_workflows.html#mental-model-of-file-directories-1",
    "href": "slides/04_workflows.html#mental-model-of-file-directories-1",
    "title": "Workflows",
    "section": "Mental model of file directories",
    "text": "Mental model of file directories"
  },
  {
    "objectID": "slides/04_workflows.html#paths-1",
    "href": "slides/04_workflows.html#paths-1",
    "title": "Workflows",
    "section": "Paths",
    "text": "Paths\nConvert tree structure to character string\n\n\n\nexercises/01_introduction/rsconnect/documents/01_introduction.Rmd/shinapps.io/jeffreyrstevens/01_introduction.dcf"
  },
  {
    "objectID": "slides/04_workflows.html#absolute-paths",
    "href": "slides/04_workflows.html#absolute-paths",
    "title": "Workflows",
    "section": "Absolute paths",
    "text": "Absolute paths\nFrom root directory\nStarts with drive letter or /\n\n\nWindows: C:\\users\\jeff\\Documents\\projects\\dpavir_2025\\R\\\nLinux and MacOS: /home/jeff/projects/dpavir_2025/R/"
  },
  {
    "objectID": "slides/04_workflows.html#relative-paths",
    "href": "slides/04_workflows.html#relative-paths",
    "title": "Workflows",
    "section": "Relative paths",
    "text": "Relative paths\nFrom current directory\n\n\nStarts with first subdirectory name\n\nIf in projects/, relative path to R/ is dpavir_2025/R\n\n\n\n\n\n\nUse relative paths!\nWhy?"
  },
  {
    "objectID": "slides/04_workflows.html#changing-directories",
    "href": "slides/04_workflows.html#changing-directories",
    "title": "Workflows",
    "section": "Changing directories",
    "text": "Changing directories\nChange directories with cd\n\n\n/home/jeff/projects/dpavir_2025/\n\n\n\nTo move from dpavir_2025/ to rsconnect/, type cd exercises/01_introduction/rsconnect/"
  },
  {
    "objectID": "slides/04_workflows.html#go-backwards",
    "href": "slides/04_workflows.html#go-backwards",
    "title": "Workflows",
    "section": "Go backwards",
    "text": "Go backwards\nMove backwards with cd ..\n\n\n\nOne set of .. for each directory going backwards\nTo move from rsconnect/ to 01_introduction/,  type cd ..\nTo move from 01_introduction/ to code/,  type cd ../../code/"
  },
  {
    "objectID": "slides/04_workflows.html#lets-try-it",
    "href": "slides/04_workflows.html#lets-try-it",
    "title": "Workflows",
    "section": "Let’s try it!",
    "text": "Let’s try it!\n\n\nGo to Files in RStudio\nAdd folder named test and a subfolder named R.\nGo to Terminal.\nType ls or dir.\nHow do we go to test/?\nHow do we go back?\nHow do we go to test/R/?\nHow do we go back up to test/?"
  },
  {
    "objectID": "slides/04_workflows.html#mental-model-of-file-directories-2",
    "href": "slides/04_workflows.html#mental-model-of-file-directories-2",
    "title": "Workflows",
    "section": "Mental model of file directories",
    "text": "Mental model of file directories"
  },
  {
    "objectID": "slides/04_workflows.html#project-directory-structure",
    "href": "slides/04_workflows.html#project-directory-structure",
    "title": "Workflows",
    "section": "Project directory structure",
    "text": "Project directory structure\n\n\n\n\n\n\n\n\n\nBuild a consistent directory structure\nWhy?\nConsistency for you\nAdapt structure to your needs or lab requirements\nConsistency for the lab\nMake a template directory"
  },
  {
    "objectID": "slides/04_workflows.html#working-directories",
    "href": "slides/04_workflows.html#working-directories",
    "title": "Workflows",
    "section": "Working directories",
    "text": "Working directories\nBase directory for R session\n\n\n\nView your working directory\n\nConsole: getwd()\n\nRStudio: top of Console\n\n\n\n\n\n\nWhat is your working directory?"
  },
  {
    "objectID": "slides/04_workflows.html#rstudio-projects",
    "href": "slides/04_workflows.html#rstudio-projects",
    "title": "Workflows",
    "section": "RStudio Projects",
    "text": "RStudio Projects\n\nConvenient system to:\n\nSet working directory\nOpen files you had open before closing RStudio\nFocus on relative paths\nEnable version control\n\nUse them! Always!"
  },
  {
    "objectID": "slides/04_workflows.html#rstudio-projects-1",
    "href": "slides/04_workflows.html#rstudio-projects-1",
    "title": "Workflows",
    "section": "RStudio Projects",
    "text": "RStudio Projects\n\nLet’s create an RStudio Project"
  },
  {
    "objectID": "slides/04_workflows.html#rstudio-projects-2",
    "href": "slides/04_workflows.html#rstudio-projects-2",
    "title": "Workflows",
    "section": "RStudio Projects",
    "text": "RStudio Projects\n\nCreate an RStudio Project in the existing test/ directory\n\n\n\nCreate your typical project structure\nUse the terminal to change directories in your project"
  },
  {
    "objectID": "slides/04_workflows.html#project-working-directories",
    "href": "slides/04_workflows.html#project-working-directories",
    "title": "Workflows",
    "section": "Project working directories",
    "text": "Project working directories\n{here}: The package that sets your working directory to the RStudio Project root directory\n\nread_csv(here(\"data/a.csv\"))\n\n\n\n\nSource: Allison Horst"
  },
  {
    "objectID": "slides/04_workflows.html#mental-model-of-file-directories-3",
    "href": "slides/04_workflows.html#mental-model-of-file-directories-3",
    "title": "Workflows",
    "section": "Mental model of file directories",
    "text": "Mental model of file directories"
  },
  {
    "objectID": "slides/04_workflows.html#lets-code",
    "href": "slides/04_workflows.html#lets-code",
    "title": "Workflows",
    "section": "Let’s code!",
    "text": "Let’s code!\nWorkflows"
  },
  {
    "objectID": "slides/06_datatypes.html#mental-model-of-literate-programming",
    "href": "slides/06_datatypes.html#mental-model-of-literate-programming",
    "title": "Data types",
    "section": "Mental model of literate programming",
    "text": "Mental model of literate programming"
  },
  {
    "objectID": "slides/06_datatypes.html#data-types-1",
    "href": "slides/06_datatypes.html#data-types-1",
    "title": "Data types",
    "section": "Data types",
    "text": "Data types\nFormats of individual elements\n\nDouble\nInteger\nCharacter\nLogical\n\nCheck data types with typeof()"
  },
  {
    "objectID": "slides/06_datatypes.html#mental-model-of-data-types",
    "href": "slides/06_datatypes.html#mental-model-of-data-types",
    "title": "Data types",
    "section": "Mental model of data types",
    "text": "Mental model of data types"
  },
  {
    "objectID": "slides/06_datatypes.html#numeric-data",
    "href": "slides/06_datatypes.html#numeric-data",
    "title": "Data types",
    "section": "Numeric data",
    "text": "Numeric data\nDoubles\nFloating-point numbers with decimals\n\n# assign value 7.2 to object a\n(a &lt;- 7.2) # remember, wrapping in parentheses prints to console\n\n[1] 7.2\n\n\n\n\ntypeof(a)\n\n[1] \"double\""
  },
  {
    "objectID": "slides/06_datatypes.html#numeric-data-1",
    "href": "slides/06_datatypes.html#numeric-data-1",
    "title": "Data types",
    "section": "Numeric data",
    "text": "Numeric data\nIntegers\nNumbers without decimals\n\n(b &lt;- 7)\n\n[1] 7\n\n\n\n\ntypeof(b)\n\n[1] \"double\"\n\n\n\n\n\n\n\n\nDoubles can have 0 as decimal"
  },
  {
    "objectID": "slides/06_datatypes.html#numeric-data-2",
    "href": "slides/06_datatypes.html#numeric-data-2",
    "title": "Data types",
    "section": "Numeric data",
    "text": "Numeric data\nIntegers\nNumbers without decimals (specified with L)\n\n(c &lt;- 7L)\n\n[1] 7\n\n\n\n\ntypeof(c)\n\n[1] \"integer\""
  },
  {
    "objectID": "slides/06_datatypes.html#character-data",
    "href": "slides/06_datatypes.html#character-data",
    "title": "Data types",
    "section": "Character data",
    "text": "Character data\nMust be surrounded by \"\"\n\n\n\n(d &lt;- \"Hello, world\")\n\n[1] \"Hello, world\"\n\n(e &lt;- \"7\")\n\n[1] \"7\"\n\n\n\n\n\ntypeof(e)\n\n[1] \"character\""
  },
  {
    "objectID": "slides/06_datatypes.html#lets-explore",
    "href": "slides/06_datatypes.html#lets-explore",
    "title": "Data types",
    "section": "Let’s explore!",
    "text": "Let’s explore!\n\n\nType b, c, and e into the console separately. What do you see?\nAdd b + c.\nAdd b + e."
  },
  {
    "objectID": "slides/06_datatypes.html#logical",
    "href": "slides/06_datatypes.html#logical",
    "title": "Data types",
    "section": "Logical",
    "text": "Logical\nTests whether conditional statement is TRUE or FALSE (notice always all upper case)\nLogical operators: &gt;, &gt;=, &lt;, &lt;=, ==, !=, %in%\n\n\n\na\n\n[1] 7.2\n\na &gt; 5\n\n[1] TRUE\n\n\n\n\n\nd\n\n[1] \"Hello, world\"\n\n(mytest &lt;- d == \"Good-bye, world\")\n\n[1] FALSE\n\n\n\n\n\ntypeof(mytest)\n\n[1] \"logical\""
  },
  {
    "objectID": "slides/06_datatypes.html#logical-1",
    "href": "slides/06_datatypes.html#logical-1",
    "title": "Data types",
    "section": "Logical",
    "text": "Logical\nThe logical operator for equals is ==\n\n\n\n\n\n\n\nNote\n\n\nWe use\n\n\n== for logical equals\n\n&lt;- for assigning objects\n\n= for assigning function argument values to argument names"
  },
  {
    "objectID": "slides/06_datatypes.html#logical-2",
    "href": "slides/06_datatypes.html#logical-2",
    "title": "Data types",
    "section": "Logical",
    "text": "Logical\n\n%in% matching operator: “is contained in”\n\n\n(subjects &lt;- c(\"01\", \"02\", \"03\", \"04\", \"05\"))\n\n[1] \"01\" \"02\" \"03\" \"04\" \"05\"\n\n\n\n\n\n\"03\" %in% subjects\n\n[1] TRUE\n\n\n\n\n\n\"06\" %in% subjects\n\n[1] FALSE\n\n\n\n\nTest “is NOT contained in” with ! before test string\n\n!\"06\" %in% subjects\n\n[1] TRUE"
  },
  {
    "objectID": "slides/06_datatypes.html#augmented-data-types",
    "href": "slides/06_datatypes.html#augmented-data-types",
    "title": "Data types",
    "section": "Augmented data types",
    "text": "Augmented data types\nCore data types with special attributes\n\nFactors\nDates"
  },
  {
    "objectID": "slides/06_datatypes.html#factors",
    "href": "slides/06_datatypes.html#factors",
    "title": "Data types",
    "section": "Factors",
    "text": "Factors\nAugmented integers with ‘levels’\n\n\n(i &lt;- factor(\"married\", levels = c(\"single\", \"married\", \"widowed\")))\n\n[1] married\nLevels: single married widowed\n\n\n\n\n\ntypeof(i)\n\n[1] \"integer\"\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nUse class() to view augmented data type\n\nclass(i)\n\n[1] \"factor\""
  },
  {
    "objectID": "slides/06_datatypes.html#dates",
    "href": "slides/06_datatypes.html#dates",
    "title": "Data types",
    "section": "Dates",
    "text": "Dates\nAugmented numerics based on number of days since 1970-01-01\n\n\n(j &lt;- as.Date(\"1970-01-01\"))\n\n[1] \"1970-01-01\"\n\ntypeof(j)\n\n[1] \"double\"\n\nclass(j)\n\n[1] \"Date\"\n\n\n\n\n\n\n\n\nNote\n\n\nMake sure to wrap dates in \"\""
  },
  {
    "objectID": "slides/06_datatypes.html#dates-1",
    "href": "slides/06_datatypes.html#dates-1",
    "title": "Data types",
    "section": "Dates",
    "text": "Dates\nYou can do math on dates\n\n\n(k &lt;- as.Date(\"2023-02-03\"))\n\n[1] \"2023-02-03\"\n\nk-j\n\nTime difference of 19391 days"
  },
  {
    "objectID": "slides/06_datatypes.html#checking-data-types",
    "href": "slides/06_datatypes.html#checking-data-types",
    "title": "Data types",
    "section": "Checking data types",
    "text": "Checking data types\n\nCheck with typeof()/class()\n\n\n\n\nCheck in RStudio\n\n\n\n\nUse is.&lt;type&gt;() functions: is.logical(), is.numeric(), is.character()\n\n\n\nis.character(7)\n\n[1] FALSE\n\nis.character(\"7\")\n\n[1] TRUE"
  },
  {
    "objectID": "slides/06_datatypes.html#converting-between-data-types-coercion",
    "href": "slides/06_datatypes.html#converting-between-data-types-coercion",
    "title": "Data types",
    "section": "Converting between data types (coercion)",
    "text": "Converting between data types (coercion)\n\nUse as.&lt;type&gt;() functions:\nas.logical(), as.numeric(), as.character()\n\n\n\ne\n\n[1] \"7\"\n\ntypeof(e)\n\n[1] \"character\"\n\n(l &lt;- as.numeric(e))\n\n[1] 7\n\ntypeof(l)\n\n[1] \"double\""
  },
  {
    "objectID": "slides/06_datatypes.html#converting-between-data-types-coercion-1",
    "href": "slides/06_datatypes.html#converting-between-data-types-coercion-1",
    "title": "Data types",
    "section": "Converting between data types (coercion)",
    "text": "Converting between data types (coercion)\n\n(m &lt;- \"TRUE\")\n\n[1] \"TRUE\"\n\ntypeof(m)\n\n[1] \"character\"\n\n(n &lt;- as.logical(m))\n\n[1] TRUE\n\ntypeof(n)\n\n[1] \"logical\""
  },
  {
    "objectID": "slides/06_datatypes.html#converting-between-data-types-coercion-2",
    "href": "slides/06_datatypes.html#converting-between-data-types-coercion-2",
    "title": "Data types",
    "section": "Converting between data types (coercion)",
    "text": "Converting between data types (coercion)\nFactors to numerics is tricky\n\n(o &lt;- factor(0, levels = c(\"1\", \"0\")))\n\n[1] 0\nLevels: 1 0\n\nas.numeric(o)\n\n[1] 2\n\n\n\nFirst coerce to character\n\nas.character(o)\n\n[1] \"0\"\n\nas.numeric(as.character(o))\n\n[1] 0"
  },
  {
    "objectID": "slides/06_datatypes.html#special-values",
    "href": "slides/06_datatypes.html#special-values",
    "title": "Data types",
    "section": "Special values",
    "text": "Special values\n\nNA represents missing values\n\nEach data type has its own type of NA\nCheck with is.na()\n\n\n\nNaN means “not a number” (undefined)\n\n0 / 0 = NaN\n\n\n\n\nInf and -Inf represent infinity and negative infinity\n\n1 / 0 = Inf\n-1 / 0 = -Inf"
  },
  {
    "objectID": "slides/06_datatypes.html#mental-model-of-data-types-1",
    "href": "slides/06_datatypes.html#mental-model-of-data-types-1",
    "title": "Data types",
    "section": "Mental model of data types",
    "text": "Mental model of data types"
  },
  {
    "objectID": "slides/06_datatypes.html#lets-code",
    "href": "slides/06_datatypes.html#lets-code",
    "title": "Data types",
    "section": "Let’s code!",
    "text": "Let’s code!\nData types coding"
  },
  {
    "objectID": "slides/08_importing.html#mental-model-of-data-in-r",
    "href": "slides/08_importing.html#mental-model-of-data-in-r",
    "title": "Importing data",
    "section": "Mental model of data in R",
    "text": "Mental model of data in R"
  },
  {
    "objectID": "slides/08_importing.html#mental-model-of-data-analysis",
    "href": "slides/08_importing.html#mental-model-of-data-analysis",
    "title": "Importing data",
    "section": "Mental model of data analysis",
    "text": "Mental model of data analysis"
  },
  {
    "objectID": "slides/08_importing.html#mental-model-of-importing-data",
    "href": "slides/08_importing.html#mental-model-of-importing-data",
    "title": "Importing data",
    "section": "Mental model of importing data",
    "text": "Mental model of importing data"
  },
  {
    "objectID": "slides/08_importing.html#file-types",
    "href": "slides/08_importing.html#file-types",
    "title": "Importing data",
    "section": "File types",
    "text": "File types\n\n\nExcel (.xls/.xlsx): Binary matrix file with formatting, formulas, multiple sheets\nComma-separated values (.csv): Plain text matrix file without formatting, etc. (also TSV)\nOther program-specific files: SPSS, SAS, etc.\nText files (.txt): Plain text file of raw text\nStart saving CSVs and convert other formats to CSVs"
  },
  {
    "objectID": "slides/08_importing.html#dog-data",
    "href": "slides/08_importing.html#dog-data",
    "title": "Importing data",
    "section": "Dog data",
    "text": "Dog data\n\n\nDownload data for dog breed popularity.\nCreate data/ directory in your dpavir2025 course directory.\nMove/copy dog_breed_popularity.csv into the data/ directory.\nView file in RStudio file manager"
  },
  {
    "objectID": "slides/08_importing.html#base-r-data-import",
    "href": "slides/08_importing.html#base-r-data-import",
    "title": "Importing data",
    "section": "Base R data import",
    "text": "Base R data import\nread.csv()\n\nWrapper around read.table() to import rectangular data\n\n\nDefaults\n\nHeader row (turn off with header = FALSE)\nComma separated (change with sep = \";\" or use read.csv2())\nOutputs data frame"
  },
  {
    "objectID": "slides/08_importing.html#base-r-data-import-1",
    "href": "slides/08_importing.html#base-r-data-import-1",
    "title": "Importing data",
    "section": "Base R data import",
    "text": "Base R data import\nread.csv()\nUsage:\nread.csv(file = \"path/to/file.csv\")\n\nlibrary(here)\nmydf &lt;- read.csv(here(\"data/dog_breed_popularity.csv\"))"
  },
  {
    "objectID": "slides/08_importing.html#tidyverse-data-import",
    "href": "slides/08_importing.html#tidyverse-data-import",
    "title": "Importing data",
    "section": "{tidyverse} data import",
    "text": "{tidyverse} data import\n{readr}\nreadr::read_csv()\n\n\n\nControl column names with col_names (including renaming)\nControl column types with col_types\nControl missing values with na and quoted_na\nCan skip rows before reading data with skip or cut off with n_max\nOutputs tibble"
  },
  {
    "objectID": "slides/08_importing.html#tidyverse-data-import-1",
    "href": "slides/08_importing.html#tidyverse-data-import-1",
    "title": "Importing data",
    "section": "{tidyverse} data import",
    "text": "{tidyverse} data import\nreadr::read_csv()\nUsage:\nread_csv(file = \"path/to/file.csv\")\n\nlibrary(readr)\nmydf2 &lt;- read_csv(here(\"data/dog_breed_popularity.csv\"))"
  },
  {
    "objectID": "slides/08_importing.html#comparing-functions",
    "href": "slides/08_importing.html#comparing-functions",
    "title": "Importing data",
    "section": "Comparing functions",
    "text": "Comparing functions\nExplore both mydf and mydf2 using str(). How are they different?\n\nreadr::read_csv()\n\nFaster\nOutputs tibbles\nDefaults to numerics instead of integers\nKeeps column names starting with numbers"
  },
  {
    "objectID": "slides/08_importing.html#importing-from-urls",
    "href": "slides/08_importing.html#importing-from-urls",
    "title": "Importing data",
    "section": "Importing from URLs",
    "text": "Importing from URLs\nBoth read.csv() and read_csv() import CSV files available online by using the URL as the path.\nhttps://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits.csv\n\nmydf3 &lt;- read.csv(\"https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits.csv\")\nmydf4 &lt;- read_csv(\"https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits.csv\")"
  },
  {
    "objectID": "slides/08_importing.html#exporting-csvs",
    "href": "slides/08_importing.html#exporting-csvs",
    "title": "Importing data",
    "section": "Exporting CSVs",
    "text": "Exporting CSVs\nwrite.csv()\n\nCharacter/factor columns in quotes with quote = TRUE\nRemove row/column names with row.names = FALSE or col.names = FALSE\n\n\nreadr::write_csv()\n\nCharacters are only quoted if they contain a comma, quote, or new line"
  },
  {
    "objectID": "slides/08_importing.html#exporting-csvs-1",
    "href": "slides/08_importing.html#exporting-csvs-1",
    "title": "Importing data",
    "section": "Exporting CSVs",
    "text": "Exporting CSVs\nUsage\nwrite.csv(df, file = \"path/to/file.csv\")\nwrite_csv(df, file = \"path/to/file.csv\")\n\nwrite.csv(mydf, here(\"data/newdata.csv\"))\nwrite_csv(mydf, here(\"data/newdata2.csv\"))"
  },
  {
    "objectID": "slides/08_importing.html#excel-data",
    "href": "slides/08_importing.html#excel-data",
    "title": "Importing data",
    "section": "Excel data",
    "text": "Excel data\nImport Excel data with {readxl}\n\n\n\n\nFunctions: read_xls(), read_xlsx(), read_excel()\nSpecify sheets with sheets argument\nSpecify subset of cells with range argument\nLike read_csv(), has col_names, col_types, na, skip, n_max"
  },
  {
    "objectID": "slides/08_importing.html#excel-data-1",
    "href": "slides/08_importing.html#excel-data-1",
    "title": "Importing data",
    "section": "Excel data",
    "text": "Excel data\nImport Excel data with {readxl}\n\nUsage:\nread_excel(path = \"path/to/file.csv\")*\n\n\nlibrary(readxl)\nmydf5 &lt;- read_excel(here(\"data/dog_breed_data.xlsx\"), sheet = \"Sheet2\")\n\n\n\n\n*Currently, read_excel() cannot download from URLs. So first download https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_data.xlsx and save it in the data/ directory."
  },
  {
    "objectID": "slides/08_importing.html#other-stats-packages",
    "href": "slides/08_importing.html#other-stats-packages",
    "title": "Importing data",
    "section": "Other stats packages",
    "text": "Other stats packages\nImport SPSS, SAS, & Stata data with {haven}\n\n\n\nSPSS\nhaven::read_sav(\"mtcars.sav\")\nSAS\nhaven::read_sas(\"mtcars.sas7bdat\")\nStata\nhaven::read_dta(\"mtcars.dta\")"
  },
  {
    "objectID": "slides/08_importing.html#qualtrics-data",
    "href": "slides/08_importing.html#qualtrics-data",
    "title": "Importing data",
    "section": "Qualtrics data",
    "text": "Qualtrics data\nImport Qualtrics data directly with {qualtRics}\n\n\n\nRegister your Qualtrics credentials with qualtRics::qualtrics_api_credentials()*\nGet survey ID by viewing qualtRics::all_surveys()\nImport data with qualtRics::fetch_survey()\nNever have to download Qualtrics data again!\n\n\n\n\n\n\n\n\n\n\n*Be cautious with using API credentials! I’m not responsible for the security of packages that I describe."
  },
  {
    "objectID": "slides/08_importing.html#qualtrics-data-1",
    "href": "slides/08_importing.html#qualtrics-data-1",
    "title": "Importing data",
    "section": "Qualtrics data",
    "text": "Qualtrics data\nUsage\n\nmydf6 &lt;- qualtRics::fetch_survey(\"SV_xxxxxxxxxxxxx\", save_dir = \"data\", label = FALSE, convert = FALSE, \n             force_request = TRUE, time_zone = \"America/Chicago\")"
  },
  {
    "objectID": "slides/08_importing.html#redcap-data",
    "href": "slides/08_importing.html#redcap-data",
    "title": "Importing data",
    "section": "REDCap data",
    "text": "REDCap data\nImport REDCap data directly with {REDCapR}*\n\n\n\n\n*Be cautious with using API credentials! I’m not responsible for the security of packages that I describe."
  },
  {
    "objectID": "slides/08_importing.html#cloud-storage",
    "href": "slides/08_importing.html#cloud-storage",
    "title": "Importing data",
    "section": "Cloud storage",
    "text": "Cloud storage\nImport data directly from cloud storage\n\nOneDrive {Microsoft365R}*\nGoogle sheets {googlesheets4}*\nBox {boxr}*\n\n\n\n\n*Be cautious with using API credentials! I’m not responsible for the security of packages that I describe."
  },
  {
    "objectID": "slides/08_importing.html#mental-model-of-importing-data-1",
    "href": "slides/08_importing.html#mental-model-of-importing-data-1",
    "title": "Importing data",
    "section": "Mental model of importing data",
    "text": "Mental model of importing data"
  },
  {
    "objectID": "slides/08_importing.html#lets-code",
    "href": "slides/08_importing.html#lets-code",
    "title": "Importing data",
    "section": "Let’s code!",
    "text": "Let’s code!\nImporting data"
  },
  {
    "objectID": "slides/10_selecting.html#mental-model-of-data-analysis",
    "href": "slides/10_selecting.html#mental-model-of-data-analysis",
    "title": "Selecting columns",
    "section": "Mental model of data analysis",
    "text": "Mental model of data analysis"
  },
  {
    "objectID": "slides/10_selecting.html#data-wrangling",
    "href": "slides/10_selecting.html#data-wrangling",
    "title": "Selecting columns",
    "section": "Data wrangling",
    "text": "Data wrangling\n{dplyr}\n\n\n\n\n\n\n\nSource: Allison Horst"
  },
  {
    "objectID": "slides/10_selecting.html#data-wrangling-1",
    "href": "slides/10_selecting.html#data-wrangling-1",
    "title": "Selecting columns",
    "section": "Data wrangling",
    "text": "Data wrangling\n\nlibrary(dplyr)"
  },
  {
    "objectID": "slides/10_selecting.html#mental-model-of-selecting-columns",
    "href": "slides/10_selecting.html#mental-model-of-selecting-columns",
    "title": "Selecting columns",
    "section": "Mental model of selecting columns",
    "text": "Mental model of selecting columns"
  },
  {
    "objectID": "slides/10_selecting.html#data-set",
    "href": "slides/10_selecting.html#data-set",
    "title": "Selecting columns",
    "section": "Data set",
    "text": "Data set\n\nlibrary(nycflights13)\nglimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…"
  },
  {
    "objectID": "slides/10_selecting.html#selecting-columns-1",
    "href": "slides/10_selecting.html#selecting-columns-1",
    "title": "Selecting columns",
    "section": "Selecting columns",
    "text": "Selecting columns\nselect()\n\n\n\n\n\n\n\n\nNote\n\n\nNotice that column names are not in quotes in the tidyverse"
  },
  {
    "objectID": "slides/10_selecting.html#selecting-columns-2",
    "href": "slides/10_selecting.html#selecting-columns-2",
    "title": "Selecting columns",
    "section": "Selecting columns",
    "text": "Selecting columns\n\nselect() by inclusion\n\nselect(flights, year, month, day, sched_dep_time, sched_arr_time)\n\n# A tibble: 336,776 × 5\n    year month   day sched_dep_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;          &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1            515            819\n 2  2013     1     1            529            830\n 3  2013     1     1            540            850\n 4  2013     1     1            545           1022\n 5  2013     1     1            600            837\n 6  2013     1     1            558            728\n 7  2013     1     1            600            854\n 8  2013     1     1            600            723\n 9  2013     1     1            600            846\n10  2013     1     1            600            745\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/10_selecting.html#selecting-columns-3",
    "href": "slides/10_selecting.html#selecting-columns-3",
    "title": "Selecting columns",
    "section": "Selecting columns",
    "text": "Selecting columns\n\nselect() by exclusion\n\nselect(flights, !c(dep_time, dep_delay, arr_time, arr_delay, carrier, flight, tailnum,\n       origin, dest, air_time, distance, hour, minute, time_hour))\n\n# A tibble: 336,776 × 5\n    year month   day sched_dep_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;          &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1            515            819\n 2  2013     1     1            529            830\n 3  2013     1     1            540            850\n 4  2013     1     1            545           1022\n 5  2013     1     1            600            837\n 6  2013     1     1            558            728\n 7  2013     1     1            600            854\n 8  2013     1     1            600            723\n 9  2013     1     1            600            846\n10  2013     1     1            600            745\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/10_selecting.html#helper-functions",
    "href": "slides/10_selecting.html#helper-functions",
    "title": "Selecting columns",
    "section": "Helper functions",
    "text": "Helper functions\nCollections of functions to facilitate selecting columns\n\n\n\n\n\n\nWarning\n\n\nThese helper functions only apply inside {dplyr} or other tidyverse functions that use select()."
  },
  {
    "objectID": "slides/10_selecting.html#helper-functions-1",
    "href": "slides/10_selecting.html#helper-functions-1",
    "title": "Selecting columns",
    "section": "Helper functions",
    "text": "Helper functions\nSelect consecutive columns with :\n\n\nselect(flights, year:day, hour, time_hour)\n\n# A tibble: 336,776 × 5\n    year month   day  hour time_hour          \n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dttm&gt;             \n 1  2013     1     1     5 2013-01-01 05:00:00\n 2  2013     1     1     5 2013-01-01 05:00:00\n 3  2013     1     1     5 2013-01-01 05:00:00\n 4  2013     1     1     5 2013-01-01 05:00:00\n 5  2013     1     1     6 2013-01-01 06:00:00\n 6  2013     1     1     5 2013-01-01 05:00:00\n 7  2013     1     1     6 2013-01-01 06:00:00\n 8  2013     1     1     6 2013-01-01 06:00:00\n 9  2013     1     1     6 2013-01-01 06:00:00\n10  2013     1     1     6 2013-01-01 06:00:00\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/10_selecting.html#helper-functions-2",
    "href": "slides/10_selecting.html#helper-functions-2",
    "title": "Selecting columns",
    "section": "Helper functions",
    "text": "Helper functions\nSelect everything else with everything()\n\n\nselect(flights, time_hour, air_time, everything())\n\n# A tibble: 336,776 × 19\n   time_hour           air_time  year month   day dep_time sched_dep_time\n   &lt;dttm&gt;                 &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;\n 1 2013-01-01 05:00:00      227  2013     1     1      517            515\n 2 2013-01-01 05:00:00      227  2013     1     1      533            529\n 3 2013-01-01 05:00:00      160  2013     1     1      542            540\n 4 2013-01-01 05:00:00      183  2013     1     1      544            545\n 5 2013-01-01 06:00:00      116  2013     1     1      554            600\n 6 2013-01-01 05:00:00      150  2013     1     1      554            558\n 7 2013-01-01 06:00:00      158  2013     1     1      555            600\n 8 2013-01-01 06:00:00       53  2013     1     1      557            600\n 9 2013-01-01 06:00:00      140  2013     1     1      557            600\n10 2013-01-01 06:00:00      138  2013     1     1      558            600\n# ℹ 336,766 more rows\n# ℹ 12 more variables: dep_delay &lt;dbl&gt;, arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;,\n#   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;,\n#   dest &lt;chr&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;"
  },
  {
    "objectID": "slides/10_selecting.html#helper-functions-3",
    "href": "slides/10_selecting.html#helper-functions-3",
    "title": "Selecting columns",
    "section": "Helper functions",
    "text": "Helper functions\nSelect columns containing specific text with contains()\n\n\nselect(flights, contains(\"_time\"))\n\n# A tibble: 336,776 × 5\n   dep_time sched_dep_time arr_time sched_arr_time air_time\n      &lt;int&gt;          &lt;int&gt;    &lt;int&gt;          &lt;int&gt;    &lt;dbl&gt;\n 1      517            515      830            819      227\n 2      533            529      850            830      227\n 3      542            540      923            850      160\n 4      544            545     1004           1022      183\n 5      554            600      812            837      116\n 6      554            558      740            728      150\n 7      555            600      913            854      158\n 8      557            600      709            723       53\n 9      557            600      838            846      140\n10      558            600      753            745      138\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/10_selecting.html#helper-functions-4",
    "href": "slides/10_selecting.html#helper-functions-4",
    "title": "Selecting columns",
    "section": "Helper functions",
    "text": "Helper functions\nSelect columns starting or ending with text with starts_with() or ends_with()\n\n\nselect(flights, starts_with(\"dep_\"))\n\n# A tibble: 336,776 × 2\n   dep_time dep_delay\n      &lt;int&gt;     &lt;dbl&gt;\n 1      517         2\n 2      533         4\n 3      542         2\n 4      544        -1\n 5      554        -6\n 6      554        -4\n 7      555        -5\n 8      557        -3\n 9      557        -3\n10      558        -2\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/10_selecting.html#move-with-select",
    "href": "slides/10_selecting.html#move-with-select",
    "title": "Selecting columns",
    "section": "Move with select()\n",
    "text": "Move with select()"
  },
  {
    "objectID": "slides/10_selecting.html#move-with-select-1",
    "href": "slides/10_selecting.html#move-with-select-1",
    "title": "Selecting columns",
    "section": "Move with select()\n",
    "text": "Move with select()\n\n\nselect(flights, carrier, flight, year:day)\n\n# A tibble: 336,776 × 5\n   carrier flight  year month   day\n   &lt;chr&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1 UA        1545  2013     1     1\n 2 UA        1714  2013     1     1\n 3 AA        1141  2013     1     1\n 4 B6         725  2013     1     1\n 5 DL         461  2013     1     1\n 6 UA        1696  2013     1     1\n 7 B6         507  2013     1     1\n 8 EV        5708  2013     1     1\n 9 B6          79  2013     1     1\n10 AA         301  2013     1     1\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/10_selecting.html#move-with-relocate",
    "href": "slides/10_selecting.html#move-with-relocate",
    "title": "Selecting columns",
    "section": "Move with relocate()\n",
    "text": "Move with relocate()"
  },
  {
    "objectID": "slides/10_selecting.html#move-with-relocate-1",
    "href": "slides/10_selecting.html#move-with-relocate-1",
    "title": "Selecting columns",
    "section": "Move with relocate()\n",
    "text": "Move with relocate()\n\n\nrelocate(flights, carrier, flight, .before = year)\n\n# A tibble: 336,776 × 19\n   carrier flight  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;chr&gt;    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1 UA        1545  2013     1     1      517            515         2      830\n 2 UA        1714  2013     1     1      533            529         4      850\n 3 AA        1141  2013     1     1      542            540         2      923\n 4 B6         725  2013     1     1      544            545        -1     1004\n 5 DL         461  2013     1     1      554            600        -6      812\n 6 UA        1696  2013     1     1      554            558        -4      740\n 7 B6         507  2013     1     1      555            600        -5      913\n 8 EV        5708  2013     1     1      557            600        -3      709\n 9 B6          79  2013     1     1      557            600        -3      838\n10 AA         301  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 10 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, tailnum &lt;chr&gt;,\n#   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,\n#   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/10_selecting.html#rename-with-select",
    "href": "slides/10_selecting.html#rename-with-select",
    "title": "Selecting columns",
    "section": "Rename with select()\n",
    "text": "Rename with select()\n\n\nselect(flights, airline = carrier, flight_num = flight, everything())\n\n# A tibble: 336,776 × 19\n   airline flight_num  year month   day dep_time sched_dep_time dep_delay\n   &lt;chr&gt;        &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;\n 1 UA            1545  2013     1     1      517            515         2\n 2 UA            1714  2013     1     1      533            529         4\n 3 AA            1141  2013     1     1      542            540         2\n 4 B6             725  2013     1     1      544            545        -1\n 5 DL             461  2013     1     1      554            600        -6\n 6 UA            1696  2013     1     1      554            558        -4\n 7 B6             507  2013     1     1      555            600        -5\n 8 EV            5708  2013     1     1      557            600        -3\n 9 B6              79  2013     1     1      557            600        -3\n10 AA             301  2013     1     1      558            600        -2\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/10_selecting.html#rename-with-rename",
    "href": "slides/10_selecting.html#rename-with-rename",
    "title": "Selecting columns",
    "section": "Rename with rename()\n",
    "text": "Rename with rename()"
  },
  {
    "objectID": "slides/10_selecting.html#rename-with-rename-1",
    "href": "slides/10_selecting.html#rename-with-rename-1",
    "title": "Selecting columns",
    "section": "Rename with rename()\n",
    "text": "Rename with rename()\n\n\nrename(flights, departure = dep_time, arrival = arr_time)\n\n# A tibble: 336,776 × 19\n    year month   day departure sched_dep_time dep_delay arrival sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;   &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1       517            515         2     830            819\n 2  2013     1     1       533            529         4     850            830\n 3  2013     1     1       542            540         2     923            850\n 4  2013     1     1       544            545        -1    1004           1022\n 5  2013     1     1       554            600        -6     812            837\n 6  2013     1     1       554            558        -4     740            728\n 7  2013     1     1       555            600        -5     913            854\n 8  2013     1     1       557            600        -3     709            723\n 9  2013     1     1       557            600        -3     838            846\n10  2013     1     1       558            600        -2     753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "slides/10_selecting.html#mental-model-of-selecting-columns-1",
    "href": "slides/10_selecting.html#mental-model-of-selecting-columns-1",
    "title": "Selecting columns",
    "section": "Mental model of selecting columns",
    "text": "Mental model of selecting columns"
  },
  {
    "objectID": "slides/10_selecting.html#lets-code",
    "href": "slides/10_selecting.html#lets-code",
    "title": "Selecting columns",
    "section": "Let’s code!",
    "text": "Let’s code!\nSelecting data"
  },
  {
    "objectID": "slides/12_piping.html#data-wrangling",
    "href": "slides/12_piping.html#data-wrangling",
    "title": "Piping",
    "section": "Data wrangling",
    "text": "Data wrangling"
  },
  {
    "objectID": "slides/12_piping.html#set-up",
    "href": "slides/12_piping.html#set-up",
    "title": "Piping",
    "section": "Set-up",
    "text": "Set-up\n\nlibrary(dplyr)\nlibrary(nycflights13)\nglimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…"
  },
  {
    "objectID": "slides/12_piping.html#without-pipes",
    "href": "slides/12_piping.html#without-pipes",
    "title": "Piping",
    "section": "Without pipes",
    "text": "Without pipes\n\nmyflights &lt;- flights[c(\"year\", \"month\", \"day\", \"air_time\", \"distance\", \n                       \"hour\", \"minute\")]\nmyflights$month &lt;- as.character(myflights$month)\nmyflights$month &lt;- ifelse(myflights$month &lt; 10, \n                          paste0(\"0\", myflights$month), myflights$month)\nmyflights$day &lt;- ifelse(myflights$day &lt; 10, \n                        paste0(\"0\", myflights$day), myflights$day)\nmyflights$date &lt;- paste(myflights$year, myflights$month, myflights$day, \n                        sep = \"-\")\nmyflights$speed &lt;- myflights$distance / myflights$air_time * 60\nmyflights &lt;- myflights[c(\"year\", \"month\", \"day\", \"date\", \"air_time\", \n                         \"distance\", \"speed\", \"hour\", \"minute\")]\n\n\nWhat do you like and dislike about this?"
  },
  {
    "objectID": "slides/12_piping.html#pipelines",
    "href": "slides/12_piping.html#pipelines",
    "title": "Piping",
    "section": "Pipelines",
    "text": "Pipelines\n\nmyflights2 &lt;- flights |&gt; \n  select(year:day, air_time, distance, hour, minute) |&gt; \n  mutate(month = as.character(month),\n         month = if_else(month &lt; 10, paste0(\"0\", month), as.character(month)),\n         day = if_else(day &lt; 10, paste0(\"0\", day), as.character(day)),\n         date = paste(year, month, day, sep = \"-\"),\n         speed = distance / air_time * 60) |&gt; \n  select(year:day, date, air_time, distance, speed, everything())\n\n\nWhat do you like and dislike about this?"
  },
  {
    "objectID": "slides/12_piping.html#pipelines-1",
    "href": "slides/12_piping.html#pipelines-1",
    "title": "Piping",
    "section": "Pipelines",
    "text": "Pipelines\n\nmyflights3 &lt;- flights |&gt; \n  select(year:day, air_time, distance, hour, minute) |&gt; \n  mutate(month = as.character(month),\n         month = if_else(month &lt; 10, paste0(\"0\", month), as.character(month)),\n         day = if_else(day &lt; 10, paste0(\"0\", day), as.character(day)),\n         date = paste(year, month, day, sep = \"-\"),\n         .after = day) |&gt; \n  mutate(speed = distance / air_time * 60,\n         .after = distance)\n\nWhat do you like and dislike about this?"
  },
  {
    "objectID": "slides/12_piping.html#pipeline-comparison",
    "href": "slides/12_piping.html#pipeline-comparison",
    "title": "Piping",
    "section": "Pipeline comparison",
    "text": "Pipeline comparison\n\nidentical(myflights, myflights2)\n\n[1] TRUE\n\nidentical(myflights, myflights3)\n\n[1] TRUE\n\nidentical(myflights2, myflights3)\n\n[1] TRUE\n\n\n\nCharacter counts\n\n\n\n\nPipeline\nCharacters\n\n\n\nmyflights\n566\n\n\nmyflights2\n423\n\n\nmyflights3\n406"
  },
  {
    "objectID": "slides/12_piping.html#pipes",
    "href": "slides/12_piping.html#pipes",
    "title": "Piping",
    "section": "Pipes",
    "text": "Pipes\nBase R pipe\n|&gt;\n\nadded in R 4.1.0 but key functionality started in 4.2.0\nloaded in any R session\nworks following most base R and tidyverse functions"
  },
  {
    "objectID": "slides/12_piping.html#pipes-1",
    "href": "slides/12_piping.html#pipes-1",
    "title": "Piping",
    "section": "Pipes",
    "text": "Pipes\nBase R pipe\nTidyverse pipe %&gt;%\n\nfrom {magrittr} package\nloaded with any tidyverse package\nworks following tidyverse verbs\n\n\n\nHadley Wickham recommends using the base R pipe |&gt;, so we’ll use that here."
  },
  {
    "objectID": "slides/12_piping.html#piping-basics",
    "href": "slides/12_piping.html#piping-basics",
    "title": "Piping",
    "section": "Piping basics",
    "text": "Piping basics\nStart with the data object…\n\nflights |&gt; \n  select(year:dep_delay, origin) |&gt; # include these columns\n  select(!sched_dep_time) # exclude this column\n\n\nOr use data object as the first argument…\n\nselect(flights, year:dep_delay, origin) |&gt; # include these columns\n  select(!sched_dep_time) # exclude this column\n\n\n\nBut don’t use data object after first pipe\n\nselect(flights, year:dep_delay, origin) |&gt; # include these columns\n  select(flights, !sched_dep_time) # exclude this column\n\nError in `select()`:\n! Can't select columns with `flights`.\n✖ `flights` must be numeric or character, not a &lt;tbl_df/tbl/data.frame&gt; object."
  },
  {
    "objectID": "slides/12_piping.html#piping-basics-1",
    "href": "slides/12_piping.html#piping-basics-1",
    "title": "Piping",
    "section": "Piping basics",
    "text": "Piping basics\nLike any object, assigning it does not output to console\n\nmyflights &lt;- flights |&gt; \n  select(year:dep_delay, origin) |&gt;\n  select(!sched_dep_time)\n\n\nBut omitting assignment does\n\nflights |&gt; \n  select(year:dep_delay, origin) |&gt;\n  select(!sched_dep_time)\n\n# A tibble: 336,776 × 6\n    year month   day dep_time dep_delay origin\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt; \n 1  2013     1     1      517         2 EWR   \n 2  2013     1     1      533         4 LGA   \n 3  2013     1     1      542         2 JFK   \n 4  2013     1     1      544        -1 JFK   \n 5  2013     1     1      554        -6 LGA   \n 6  2013     1     1      554        -4 EWR   \n 7  2013     1     1      555        -5 EWR   \n 8  2013     1     1      557        -3 LGA   \n 9  2013     1     1      557        -3 JFK   \n10  2013     1     1      558        -2 LGA   \n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/12_piping.html#piping-basics-2",
    "href": "slides/12_piping.html#piping-basics-2",
    "title": "Piping",
    "section": "Piping basics",
    "text": "Piping basics\nAs does wrapping whole pipeline in parentheses\n\n(myflights &lt;- flights |&gt; \n  select(year:dep_delay, origin) |&gt;\n  select(!sched_dep_time))\n\n# A tibble: 336,776 × 6\n    year month   day dep_time dep_delay origin\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt; \n 1  2013     1     1      517         2 EWR   \n 2  2013     1     1      533         4 LGA   \n 3  2013     1     1      542         2 JFK   \n 4  2013     1     1      544        -1 JFK   \n 5  2013     1     1      554        -6 LGA   \n 6  2013     1     1      554        -4 EWR   \n 7  2013     1     1      555        -5 EWR   \n 8  2013     1     1      557        -3 LGA   \n 9  2013     1     1      557        -3 JFK   \n10  2013     1     1      558        -2 LGA   \n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/12_piping.html#piping-function-order",
    "href": "slides/12_piping.html#piping-function-order",
    "title": "Piping",
    "section": "Piping function order",
    "text": "Piping function order\n\nflights |&gt; \n  select(month:day, contains(\"_time\")) |&gt; \n  mutate(across(contains(\"_time\"), as.character)) |&gt; \n  head(n = 2)\n\n# A tibble: 2 × 7\n  month   day dep_time sched_dep_time arr_time sched_arr_time air_time\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;   \n1     1     1 517      515            830      819            227     \n2     1     1 533      529            850      830            227     \n\n\n\nOR\n\nflights |&gt; \n  mutate(across(contains(\"_time\"), as.character)) |&gt; \n  select(month:day, contains(\"_time\")) |&gt; \n  head(n = 2)\n\n# A tibble: 2 × 7\n  month   day dep_time sched_dep_time arr_time sched_arr_time air_time\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;   \n1     1     1 517      515            830      819            227     \n2     1     1 533      529            850      830            227"
  },
  {
    "objectID": "slides/12_piping.html#what-is-a-pipe-doing",
    "href": "slides/12_piping.html#what-is-a-pipe-doing",
    "title": "Piping",
    "section": "What is a pipe doing?",
    "text": "What is a pipe doing?\n\nflights |&gt; \n  select(month:day, contains(\"_time\")) |&gt; \n  mutate(across(contains(\"_time\"), as.character)) |&gt; \n  head(n = 2)\n\n# A tibble: 2 × 7\n  month   day dep_time sched_dep_time arr_time sched_arr_time air_time\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;   \n1     1     1 517      515            830      819            227     \n2     1     1 533      529            850      830            227     \n\n\n\nis equivalent to\n\n  head(mutate(select(flights, month:day, contains(\"_time\")), across(contains(\"_time\"), as.character)), n = 2)\n\n# A tibble: 2 × 7\n  month   day dep_time sched_dep_time arr_time sched_arr_time air_time\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;   \n1     1     1 517      515            830      819            227     \n2     1     1 533      529            850      830            227     \n\n\nAdvanced piping\n\nSometimes, non-tidyverse functions don’t take the data object as the first argument\nThis requires a “placeholder” signaling where the data object goes\n\n\n\nThe placeholder for the |&gt; pipe is _\nThe placeholder for the %&gt;% pipe is .\n\n\nAdvanced piping\nBase R pipe\n\nmtcars |&gt; \n  select(mpg, cyl) |&gt; \n  lm(mpg ~ cyl)\n\nError in as.data.frame.default(data): cannot coerce class '\"formula\"' to a data.frame\n\n\n\n\nmtcars |&gt; \n  select(mpg, cyl) |&gt; \n  lm(mpg ~ cyl, data = _)\n\n\nCall:\nlm(formula = mpg ~ cyl, data = select(mtcars, mpg, cyl))\n\nCoefficients:\n(Intercept)          cyl  \n     37.885       -2.876  \n\n\n\nYou must specify the argument name to use placeholder\n\n\nAdvanced piping\ntidyverse pipe\n\nmtcars %&gt;% \n  select(mpg, cyl) %&gt;% \n  lm(mpg ~ cyl, data = .)\n\n\nCall:\nlm(formula = mpg ~ cyl, data = .)\n\nCoefficients:\n(Intercept)          cyl  \n     37.885       -2.876  \n\n\nRename with a vector\nBase R\n\nnew_names &lt;- letters[1:ncol(flights)]\nflights2 &lt;- flights\ncolnames(flights2) &lt;- new_names\nhead(flights2)\n\n# A tibble: 6 × 19\n      a     b     c     d     e     f     g     h     i j         k l      m    \n  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n1  2013     1     1   517   515     2   830   819    11 UA     1545 N14228 EWR  \n2  2013     1     1   533   529     4   850   830    20 UA     1714 N24211 LGA  \n3  2013     1     1   542   540     2   923   850    33 AA     1141 N619AA JFK  \n4  2013     1     1   544   545    -1  1004  1022   -18 B6      725 N804JB JFK  \n5  2013     1     1   554   600    -6   812   837   -25 DL      461 N668DN LGA  \n6  2013     1     1   554   558    -4   740   728    12 UA     1696 N39463 EWR  \n# ℹ 6 more variables: n &lt;chr&gt;, o &lt;dbl&gt;, p &lt;dbl&gt;, q &lt;dbl&gt;, r &lt;dbl&gt;, s &lt;dttm&gt;\n\n\nRename with a vector\nTidyverse\n\nrename_with(flights2, ~ new_names)\n\n# A tibble: 336,776 × 19\n       a     b     c     d     e     f     g     h     i j         k l     m    \n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1  2013     1     1   517   515     2   830   819    11 UA     1545 N142… EWR  \n 2  2013     1     1   533   529     4   850   830    20 UA     1714 N242… LGA  \n 3  2013     1     1   542   540     2   923   850    33 AA     1141 N619… JFK  \n 4  2013     1     1   544   545    -1  1004  1022   -18 B6      725 N804… JFK  \n 5  2013     1     1   554   600    -6   812   837   -25 DL      461 N668… LGA  \n 6  2013     1     1   554   558    -4   740   728    12 UA     1696 N394… EWR  \n 7  2013     1     1   555   600    -5   913   854    19 B6      507 N516… EWR  \n 8  2013     1     1   557   600    -3   709   723   -14 EV     5708 N829… LGA  \n 9  2013     1     1   557   600    -3   838   846    -8 B6       79 N593… JFK  \n10  2013     1     1   558   600    -2   753   745     8 AA      301 N3AL… LGA  \n# ℹ 336,766 more rows\n# ℹ 6 more variables: n &lt;chr&gt;, o &lt;dbl&gt;, p &lt;dbl&gt;, q &lt;dbl&gt;, r &lt;dbl&gt;, s &lt;dttm&gt;\n\n\nRename with a function\n\nrename_with(flights2, toupper)\n\n# A tibble: 336,776 × 19\n       A     B     C     D     E     F     G     H     I J         K L     M    \n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1  2013     1     1   517   515     2   830   819    11 UA     1545 N142… EWR  \n 2  2013     1     1   533   529     4   850   830    20 UA     1714 N242… LGA  \n 3  2013     1     1   542   540     2   923   850    33 AA     1141 N619… JFK  \n 4  2013     1     1   544   545    -1  1004  1022   -18 B6      725 N804… JFK  \n 5  2013     1     1   554   600    -6   812   837   -25 DL      461 N668… LGA  \n 6  2013     1     1   554   558    -4   740   728    12 UA     1696 N394… EWR  \n 7  2013     1     1   555   600    -5   913   854    19 B6      507 N516… EWR  \n 8  2013     1     1   557   600    -3   709   723   -14 EV     5708 N829… LGA  \n 9  2013     1     1   557   600    -3   838   846    -8 B6       79 N593… JFK  \n10  2013     1     1   558   600    -2   753   745     8 AA      301 N3AL… LGA  \n# ℹ 336,766 more rows\n# ℹ 6 more variables: N &lt;chr&gt;, O &lt;dbl&gt;, P &lt;dbl&gt;, Q &lt;dbl&gt;, R &lt;dbl&gt;, S &lt;dttm&gt;\n\n\nLet’s code!\nPiping"
  },
  {
    "objectID": "slides/12_piping.html#advanced-piping",
    "href": "slides/12_piping.html#advanced-piping",
    "title": "Piping",
    "section": "Advanced piping",
    "text": "Advanced piping\n\nSometimes, non-tidyverse functions don’t take the data object as the first argument\nThis requires a “placeholder” signaling where the data object goes\n\n\n\nThe placeholder for the |&gt; pipe is _\nThe placeholder for the %&gt;% pipe is ."
  },
  {
    "objectID": "slides/12_piping.html#advanced-piping-1",
    "href": "slides/12_piping.html#advanced-piping-1",
    "title": "Piping",
    "section": "Advanced piping",
    "text": "Advanced piping\nBase R pipe\n\nmtcars |&gt; \n  select(mpg, cyl) |&gt; \n  lm(mpg ~ cyl)\n\nError in as.data.frame.default(data): cannot coerce class '\"formula\"' to a data.frame\n\n\n\n\nmtcars |&gt; \n  select(mpg, cyl) |&gt; \n  lm(mpg ~ cyl, data = _)\n\n\nCall:\nlm(formula = mpg ~ cyl, data = select(mtcars, mpg, cyl))\n\nCoefficients:\n(Intercept)          cyl  \n     37.885       -2.876  \n\n\n\nYou must specify the argument name to use placeholder"
  },
  {
    "objectID": "slides/12_piping.html#advanced-piping-2",
    "href": "slides/12_piping.html#advanced-piping-2",
    "title": "Piping",
    "section": "Advanced piping",
    "text": "Advanced piping\ntidyverse pipe\n\nmtcars %&gt;% \n  select(mpg, cyl) %&gt;% \n  lm(mpg ~ cyl, data = .)\n\n\nCall:\nlm(formula = mpg ~ cyl, data = .)\n\nCoefficients:\n(Intercept)          cyl  \n     37.885       -2.876"
  },
  {
    "objectID": "slides/12_piping.html#rename-with-a-vector",
    "href": "slides/12_piping.html#rename-with-a-vector",
    "title": "Piping",
    "section": "Rename with a vector",
    "text": "Rename with a vector\nBase R\n\nnew_names &lt;- letters[1:ncol(flights)]\nflights2 &lt;- flights\ncolnames(flights2) &lt;- new_names\nhead(flights2)\n\n# A tibble: 6 × 19\n      a     b     c     d     e     f     g     h     i j         k l      m    \n  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n1  2013     1     1   517   515     2   830   819    11 UA     1545 N14228 EWR  \n2  2013     1     1   533   529     4   850   830    20 UA     1714 N24211 LGA  \n3  2013     1     1   542   540     2   923   850    33 AA     1141 N619AA JFK  \n4  2013     1     1   544   545    -1  1004  1022   -18 B6      725 N804JB JFK  \n5  2013     1     1   554   600    -6   812   837   -25 DL      461 N668DN LGA  \n6  2013     1     1   554   558    -4   740   728    12 UA     1696 N39463 EWR  \n# ℹ 6 more variables: n &lt;chr&gt;, o &lt;dbl&gt;, p &lt;dbl&gt;, q &lt;dbl&gt;, r &lt;dbl&gt;, s &lt;dttm&gt;"
  },
  {
    "objectID": "slides/12_piping.html#rename-with-a-vector-1",
    "href": "slides/12_piping.html#rename-with-a-vector-1",
    "title": "Piping",
    "section": "Rename with a vector",
    "text": "Rename with a vector\nTidyverse\n\nrename_with(flights2, ~ new_names)\n\n# A tibble: 336,776 × 19\n       a     b     c     d     e     f     g     h     i j         k l     m    \n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1  2013     1     1   517   515     2   830   819    11 UA     1545 N142… EWR  \n 2  2013     1     1   533   529     4   850   830    20 UA     1714 N242… LGA  \n 3  2013     1     1   542   540     2   923   850    33 AA     1141 N619… JFK  \n 4  2013     1     1   544   545    -1  1004  1022   -18 B6      725 N804… JFK  \n 5  2013     1     1   554   600    -6   812   837   -25 DL      461 N668… LGA  \n 6  2013     1     1   554   558    -4   740   728    12 UA     1696 N394… EWR  \n 7  2013     1     1   555   600    -5   913   854    19 B6      507 N516… EWR  \n 8  2013     1     1   557   600    -3   709   723   -14 EV     5708 N829… LGA  \n 9  2013     1     1   557   600    -3   838   846    -8 B6       79 N593… JFK  \n10  2013     1     1   558   600    -2   753   745     8 AA      301 N3AL… LGA  \n# ℹ 336,766 more rows\n# ℹ 6 more variables: n &lt;chr&gt;, o &lt;dbl&gt;, p &lt;dbl&gt;, q &lt;dbl&gt;, r &lt;dbl&gt;, s &lt;dttm&gt;"
  },
  {
    "objectID": "slides/12_piping.html#rename-with-a-function",
    "href": "slides/12_piping.html#rename-with-a-function",
    "title": "Piping",
    "section": "Rename with a function",
    "text": "Rename with a function\n\nrename_with(flights2, toupper)\n\n# A tibble: 336,776 × 19\n       A     B     C     D     E     F     G     H     I J         K L     M    \n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1  2013     1     1   517   515     2   830   819    11 UA     1545 N142… EWR  \n 2  2013     1     1   533   529     4   850   830    20 UA     1714 N242… LGA  \n 3  2013     1     1   542   540     2   923   850    33 AA     1141 N619… JFK  \n 4  2013     1     1   544   545    -1  1004  1022   -18 B6      725 N804… JFK  \n 5  2013     1     1   554   600    -6   812   837   -25 DL      461 N668… LGA  \n 6  2013     1     1   554   558    -4   740   728    12 UA     1696 N394… EWR  \n 7  2013     1     1   555   600    -5   913   854    19 B6      507 N516… EWR  \n 8  2013     1     1   557   600    -3   709   723   -14 EV     5708 N829… LGA  \n 9  2013     1     1   557   600    -3   838   846    -8 B6       79 N593… JFK  \n10  2013     1     1   558   600    -2   753   745     8 AA      301 N3AL… LGA  \n# ℹ 336,766 more rows\n# ℹ 6 more variables: N &lt;chr&gt;, O &lt;dbl&gt;, P &lt;dbl&gt;, Q &lt;dbl&gt;, R &lt;dbl&gt;, S &lt;dttm&gt;"
  },
  {
    "objectID": "slides/12_piping.html#lets-code",
    "href": "slides/12_piping.html#lets-code",
    "title": "Piping",
    "section": "Let’s code!",
    "text": "Let’s code!\nPiping"
  },
  {
    "objectID": "slides/14_summarizing.html#the-problem",
    "href": "slides/14_summarizing.html#the-problem",
    "title": "Summarizing rows",
    "section": "The problem",
    "text": "The problem\nWhat’s different between these data sets? What needs to happen to create data2 from data1?\n\n\n\ndata1\n\n   cond id       date    response\n1     1  1 2022-01-06 0.186435928\n2     2  2 2022-02-27 0.570824456\n3     3  3 2022-02-21 0.185012303\n4     1  4 2022-02-07 0.314863177\n5     2  5 2022-01-12 0.001347631\n6     1  6 2022-02-03 0.450795800\n7     1  7 2022-01-07 0.146024002\n8     1  8 2022-02-08 0.987602587\n9     2  9 2022-01-04 0.944210393\n10    3 10 2022-02-05 0.416260159\n11    2 11 2022-02-01 0.064055518\n12    2 12 2022-01-20 0.355653727\n\n\n\n\ndata2\n\n# A tibble: 3 × 4\n   cond cond_n cond_mean cond_sd\n  &lt;int&gt;  &lt;int&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1     1      5     0.417   0.340\n2     2      5     0.387   0.387\n3     3      2     0.301   0.164"
  },
  {
    "objectID": "slides/14_summarizing.html#data-wrangling",
    "href": "slides/14_summarizing.html#data-wrangling",
    "title": "Summarizing rows",
    "section": "Data wrangling",
    "text": "Data wrangling"
  },
  {
    "objectID": "slides/14_summarizing.html#set-up",
    "href": "slides/14_summarizing.html#set-up",
    "title": "Summarizing rows",
    "section": "Set-up",
    "text": "Set-up\n\nlibrary(dplyr)\nlibrary(nycflights13)\n(flights2 &lt;- select(flights, year:dep_delay, carrier))\n\n# A tibble: 336,776 × 7\n    year month   day dep_time sched_dep_time dep_delay carrier\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1  2013     1     1      517            515         2 UA     \n 2  2013     1     1      533            529         4 UA     \n 3  2013     1     1      542            540         2 AA     \n 4  2013     1     1      544            545        -1 B6     \n 5  2013     1     1      554            600        -6 DL     \n 6  2013     1     1      554            558        -4 UA     \n 7  2013     1     1      555            600        -5 B6     \n 8  2013     1     1      557            600        -3 EV     \n 9  2013     1     1      557            600        -3 B6     \n10  2013     1     1      558            600        -2 AA     \n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/14_summarizing.html#count",
    "href": "slides/14_summarizing.html#count",
    "title": "Summarizing rows",
    "section": "count()",
    "text": "count()\n\nflights2 |&gt; \n  count(carrier)\n\n# A tibble: 16 × 2\n   carrier     n\n   &lt;chr&gt;   &lt;int&gt;\n 1 9E      18460\n 2 AA      32729\n 3 AS        714\n 4 B6      54635\n 5 DL      48110\n 6 EV      54173\n 7 F9        685\n 8 FL       3260\n 9 HA        342\n10 MQ      26397\n11 OO         32\n12 UA      58665\n13 US      20536\n14 VX       5162\n15 WN      12275\n16 YV        601"
  },
  {
    "objectID": "slides/14_summarizing.html#count-1",
    "href": "slides/14_summarizing.html#count-1",
    "title": "Summarizing rows",
    "section": "count()",
    "text": "count()\n\nflights2 |&gt; \n  count(carrier, month)\n\n# A tibble: 185 × 3\n   carrier month     n\n   &lt;chr&gt;   &lt;int&gt; &lt;int&gt;\n 1 9E          1  1573\n 2 9E          2  1459\n 3 9E          3  1627\n 4 9E          4  1511\n 5 9E          5  1462\n 6 9E          6  1437\n 7 9E          7  1494\n 8 9E          8  1456\n 9 9E          9  1540\n10 9E         10  1673\n# ℹ 175 more rows"
  },
  {
    "objectID": "slides/14_summarizing.html#summarise",
    "href": "slides/14_summarizing.html#summarise",
    "title": "Summarizing rows",
    "section": "summarise()",
    "text": "summarise()"
  },
  {
    "objectID": "slides/14_summarizing.html#summarise-1",
    "href": "slides/14_summarizing.html#summarise-1",
    "title": "Summarizing rows",
    "section": "summarise()",
    "text": "summarise()\n\nflights2 |&gt; \n  summarise(n())\n\n# A tibble: 1 × 1\n   `n()`\n   &lt;int&gt;\n1 336776"
  },
  {
    "objectID": "slides/14_summarizing.html#summary-functions",
    "href": "slides/14_summarizing.html#summary-functions",
    "title": "Summarizing rows",
    "section": "Summary functions",
    "text": "Summary functions\n\nn()\nmean()\nmedian()\nmin()\nmax()\nsd()"
  },
  {
    "objectID": "slides/14_summarizing.html#summarise-2",
    "href": "slides/14_summarizing.html#summarise-2",
    "title": "Summarizing rows",
    "section": "summarise()",
    "text": "summarise()\nWhy does this return NA?\n\nflights2 |&gt; \n  summarise(mean_dep_delay = mean(dep_delay), \n            sd_dep_delay = sd(dep_delay),\n            n_dep_delay = n())\n\n# A tibble: 1 × 3\n  mean_dep_delay sd_dep_delay n_dep_delay\n           &lt;dbl&gt;        &lt;dbl&gt;       &lt;int&gt;\n1             NA           NA      336776\n\n\n\n\nflights2 |&gt; \n  summarise(mean_dep_delay = mean(dep_delay, na.rm = TRUE),\n          sd_dep_delay = sd(dep_delay, na.rm = TRUE),\n          n_dep_delay = n())\n\n# A tibble: 1 × 3\n  mean_dep_delay sd_dep_delay n_dep_delay\n           &lt;dbl&gt;        &lt;dbl&gt;       &lt;int&gt;\n1           12.6         40.2      336776"
  },
  {
    "objectID": "slides/14_summarizing.html#summarizing-multiple-columns",
    "href": "slides/14_summarizing.html#summarizing-multiple-columns",
    "title": "Summarizing rows",
    "section": "Summarizing multiple columns",
    "text": "Summarizing multiple columns\nHow do we apply a function across multiple columns?\n\nsummarise() + across()\n\nflights2 |&gt; \n  summarise(across(contains(\"_time\"), mean))\n\n# A tibble: 1 × 2\n  dep_time sched_dep_time\n     &lt;dbl&gt;          &lt;dbl&gt;\n1       NA          1344.\n\n\n\n\n\nflights2 |&gt; \n  summarise(across(contains(\"_time\"), ~ mean(.x, na.rm = TRUE)))\n\n# A tibble: 1 × 2\n  dep_time sched_dep_time\n     &lt;dbl&gt;          &lt;dbl&gt;\n1    1349.          1344."
  },
  {
    "objectID": "slides/14_summarizing.html#summarizing-multiple-columns-1",
    "href": "slides/14_summarizing.html#summarizing-multiple-columns-1",
    "title": "Summarizing rows",
    "section": "Summarizing multiple columns",
    "text": "Summarizing multiple columns\nsummarise() + across()\nMultiple functions (add list())\n\nflights2 |&gt; \n  summarise(across(contains(\"_time\"), # for all columns containing \"_time\"\n                   list(mean = ~ mean(.x, na.rm = TRUE), # calculate the mean\n                        sd = ~ sd(.x, na.rm = TRUE)))) # and standard deviation\n\n# A tibble: 1 × 4\n  dep_time_mean dep_time_sd sched_dep_time_mean sched_dep_time_sd\n          &lt;dbl&gt;       &lt;dbl&gt;               &lt;dbl&gt;             &lt;dbl&gt;\n1         1349.        488.               1344.              467."
  },
  {
    "objectID": "slides/14_summarizing.html#group_by",
    "href": "slides/14_summarizing.html#group_by",
    "title": "Summarizing rows",
    "section": "group_by()",
    "text": "group_by()\n\nflights2 |&gt; \n  group_by(month)\n\n# A tibble: 336,776 × 7\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay carrier\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1  2013     1     1      517            515         2 UA     \n 2  2013     1     1      533            529         4 UA     \n 3  2013     1     1      542            540         2 AA     \n 4  2013     1     1      544            545        -1 B6     \n 5  2013     1     1      554            600        -6 DL     \n 6  2013     1     1      554            558        -4 UA     \n 7  2013     1     1      555            600        -5 B6     \n 8  2013     1     1      557            600        -3 EV     \n 9  2013     1     1      557            600        -3 B6     \n10  2013     1     1      558            600        -2 AA     \n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/14_summarizing.html#summarizing-groups-of-data",
    "href": "slides/14_summarizing.html#summarizing-groups-of-data",
    "title": "Summarizing rows",
    "section": "Summarizing groups of data",
    "text": "Summarizing groups of data\ngroup_by() + summarise()\n\nflights2 |&gt; \n  group_by(carrier) |&gt; \n  summarise(carrier_n = n(),\n            mean_carrier_delay = mean(dep_delay, na.rm = TRUE), \n            sd_carrier_delay = sd(dep_delay, na.rm = TRUE))\n\n# A tibble: 16 × 4\n   carrier carrier_n mean_carrier_delay sd_carrier_delay\n   &lt;chr&gt;       &lt;int&gt;              &lt;dbl&gt;            &lt;dbl&gt;\n 1 9E          18460              16.7              45.9\n 2 AA          32729               8.59             37.4\n 3 AS            714               5.80             31.4\n 4 B6          54635              13.0              38.5\n 5 DL          48110               9.26             39.7\n 6 EV          54173              20.0              46.6\n 7 F9            685              20.2              58.4\n 8 FL           3260              18.7              52.7\n 9 HA            342               4.90             74.1\n10 MQ          26397              10.6              39.2\n11 OO             32              12.6              43.1\n12 UA          58665              12.1              35.7\n13 US          20536               3.78             28.1\n14 VX           5162              12.9              44.8\n15 WN          12275              17.7              43.3\n16 YV            601              19.0              49.2"
  },
  {
    "objectID": "slides/14_summarizing.html#summarizing-multiple-groups",
    "href": "slides/14_summarizing.html#summarizing-multiple-groups",
    "title": "Summarizing rows",
    "section": "Summarizing multiple groups",
    "text": "Summarizing multiple groups\ngroup_by() + summarise()\n\nflights2 |&gt; \n  group_by(carrier, month) |&gt; \n  summarise(carrier_n = n(),\n            mean_carrier_delay = mean(dep_delay, na.rm = TRUE), \n            sd_carrier_delay = sd(dep_delay, na.rm = TRUE))\n\n# A tibble: 185 × 5\n# Groups:   carrier [16]\n   carrier month carrier_n mean_carrier_delay sd_carrier_delay\n   &lt;chr&gt;   &lt;int&gt;     &lt;int&gt;              &lt;dbl&gt;            &lt;dbl&gt;\n 1 9E          1      1573              16.9              47.6\n 2 9E          2      1459              16.5              50.5\n 3 9E          3      1627              13.4              43.0\n 4 9E          4      1511              13.6              43.8\n 5 9E          5      1462              22.7              50.6\n 6 9E          6      1437              29.0              55.4\n 7 9E          7      1494              31.4              60.4\n 8 9E          8      1456              17.3              42.8\n 9 9E          9      1540               7.75             34.3\n10 9E         10      1673               9.33             33.8\n# ℹ 175 more rows"
  },
  {
    "objectID": "slides/14_summarizing.html#summarizing-groups-for-multiple-columns",
    "href": "slides/14_summarizing.html#summarizing-groups-for-multiple-columns",
    "title": "Summarizing rows",
    "section": "Summarizing groups for multiple columns",
    "text": "Summarizing groups for multiple columns\ngroup_by() + summarise() + across()\n\nflights2 |&gt; \n  group_by(carrier) |&gt; # separately for each carrier\n  summarise(across(contains(\"_time\"), # for all columns containing \"_time\"\n                   list(mean = ~ mean(.x, na.rm = TRUE), # calculate the mean\n                        sd = ~ sd(.x, na.rm = TRUE)))) # and standard deviation\n\n# A tibble: 16 × 5\n   carrier dep_time_mean dep_time_sd sched_dep_time_mean sched_dep_time_sd\n   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;               &lt;dbl&gt;             &lt;dbl&gt;\n 1 9E              1487.       450.                1472.             430. \n 2 AA              1297.       458.                1290.             442. \n 3 AS              1295.       566.                1285.             552. \n 4 B6              1381.       555.                1397.             525. \n 5 DL              1351.       463.                1346.             445. \n 6 EV              1369.       497.                1354.             471. \n 7 F9              1438.       405.                1408.             376. \n 8 FL              1387.       480.                1372.             446. \n 9 HA               949.        53.6                974.              41.7\n10 MQ              1393.       442.                1387.             428. \n11 OO              1725.       163.                1731.             162. \n12 UA              1327.       484.                1313.             467. \n13 US              1231.       456.                1246.             447. \n14 VX              1280.       460.                1265.             435. \n15 WN              1281.       468.                1260.             440. \n16 YV              1601.       245.                1575.             223."
  },
  {
    "objectID": "slides/14_summarizing.html#summarizing-multiple-groups-1",
    "href": "slides/14_summarizing.html#summarizing-multiple-groups-1",
    "title": "Summarizing rows",
    "section": "Summarizing multiple groups",
    "text": "Summarizing multiple groups\nsummarise() with .by argument\n\nflights2 |&gt; \n  summarise(.by = c(carrier, month),\n            carrier_n = n(),\n            mean_carrier_delay = mean(dep_delay, na.rm = TRUE), \n            sd_carrier_delay = sd(dep_delay, na.rm = TRUE))\n\n# A tibble: 185 × 5\n   carrier month carrier_n mean_carrier_delay sd_carrier_delay\n   &lt;chr&gt;   &lt;int&gt;     &lt;int&gt;              &lt;dbl&gt;            &lt;dbl&gt;\n 1 UA          1      4637               8.33             29.0\n 2 AA          1      2794               6.93             29.1\n 3 B6          1      4427               9.49             31.6\n 4 DL          1      3690               3.85             28.9\n 5 EV          1      4171              24.2              47.7\n 6 MQ          1      2271               6.49             41.2\n 7 US          1      1602               1.82             22.0\n 8 WN          1       996               9.14             31.0\n 9 VX          1       316               1.06             18.5\n10 FL          1       328               1.97             23.8\n# ℹ 175 more rows"
  },
  {
    "objectID": "slides/14_summarizing.html#ungrouping",
    "href": "slides/14_summarizing.html#ungrouping",
    "title": "Summarizing rows",
    "section": "Ungrouping",
    "text": "Ungrouping\nUsing group_by() adds a group attribute to the tibble\n\nflights2 |&gt; \n  group_by(month)\n\n# A tibble: 336,776 × 7\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay carrier\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1  2013     1     1      517            515         2 UA     \n 2  2013     1     1      533            529         4 UA     \n 3  2013     1     1      542            540         2 AA     \n 4  2013     1     1      544            545        -1 B6     \n 5  2013     1     1      554            600        -6 DL     \n 6  2013     1     1      554            558        -4 UA     \n 7  2013     1     1      555            600        -5 B6     \n 8  2013     1     1      557            600        -3 EV     \n 9  2013     1     1      557            600        -3 B6     \n10  2013     1     1      558            600        -2 AA     \n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/14_summarizing.html#ungrouping-1",
    "href": "slides/14_summarizing.html#ungrouping-1",
    "title": "Summarizing rows",
    "section": "Ungrouping",
    "text": "Ungrouping\nRemove groups with ungroup()\n\nflights2 |&gt; \n  group_by(month) |&gt; \n  ungroup()\n\n# A tibble: 336,776 × 7\n    year month   day dep_time sched_dep_time dep_delay carrier\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1  2013     1     1      517            515         2 UA     \n 2  2013     1     1      533            529         4 UA     \n 3  2013     1     1      542            540         2 AA     \n 4  2013     1     1      544            545        -1 B6     \n 5  2013     1     1      554            600        -6 DL     \n 6  2013     1     1      554            558        -4 UA     \n 7  2013     1     1      555            600        -5 B6     \n 8  2013     1     1      557            600        -3 EV     \n 9  2013     1     1      557            600        -3 B6     \n10  2013     1     1      558            600        -2 AA     \n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/14_summarizing.html#ungrouping-2",
    "href": "slides/14_summarizing.html#ungrouping-2",
    "title": "Summarizing rows",
    "section": "Ungrouping",
    "text": "Ungrouping\nrowwise() creates groups that can cause problems\n\nflights2 |&gt; \n  rowwise() |&gt; \n  mutate(min_dep_time = min(dep_time, sched_dep_time)) |&gt; \n  summarise(mean_min_dep_time = mean(min_dep_time, na.rm = TRUE))\n\n# A tibble: 336,776 × 1\n   mean_min_dep_time\n               &lt;dbl&gt;\n 1               515\n 2               529\n 3               540\n 4               544\n 5               554\n 6               554\n 7               555\n 8               557\n 9               557\n10               558\n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/14_summarizing.html#ungrouping-3",
    "href": "slides/14_summarizing.html#ungrouping-3",
    "title": "Summarizing rows",
    "section": "Ungrouping",
    "text": "Ungrouping\nUngrouping also works for rowwise()\n\nflights2 |&gt; \n  rowwise() |&gt; \n  mutate(min_dep_time = min(dep_time, sched_dep_time)) |&gt; \n  ungroup() |&gt; \n  summarise(mean_min_dep_time = mean(min_dep_time, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  mean_min_dep_time\n              &lt;dbl&gt;\n1             1325."
  },
  {
    "objectID": "slides/14_summarizing.html#solving-the-problem",
    "href": "slides/14_summarizing.html#solving-the-problem",
    "title": "Summarizing rows",
    "section": "Solving the problem",
    "text": "Solving the problem\nWhat code turns data1 into data2?\n\n\n\ndata1\n\n   cond id       date    response\n1     1  1 2022-01-06 0.186435928\n2     2  2 2022-02-27 0.570824456\n3     3  3 2022-02-21 0.185012303\n4     1  4 2022-02-07 0.314863177\n5     2  5 2022-01-12 0.001347631\n6     1  6 2022-02-03 0.450795800\n7     1  7 2022-01-07 0.146024002\n8     1  8 2022-02-08 0.987602587\n9     2  9 2022-01-04 0.944210393\n10    3 10 2022-02-05 0.416260159\n11    2 11 2022-02-01 0.064055518\n12    2 12 2022-01-20 0.355653727\n\n\n\n\ndata2\n\n# A tibble: 3 × 4\n   cond cond_n cond_mean cond_sd\n  &lt;int&gt;  &lt;int&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1     1      5     0.417   0.340\n2     2      5     0.387   0.387\n3     3      2     0.301   0.164"
  },
  {
    "objectID": "slides/14_summarizing.html#slicing-rows",
    "href": "slides/14_summarizing.html#slicing-rows",
    "title": "Summarizing rows",
    "section": "Slicing rows",
    "text": "Slicing rows\nWhat if you want to grab a subset of rows per group?\ndplyr::slice_() functions\n\n\nslice_head() first row(s) from each group\n\nslice_tail() last row(s) in each group\n\nslice_min() row(s) with smallest value in column x\n\nslice_max() row(s) with largest value in column x\n\nslice_sample() random row(s)"
  },
  {
    "objectID": "slides/14_summarizing.html#slicing-rows-1",
    "href": "slides/14_summarizing.html#slicing-rows-1",
    "title": "Summarizing rows",
    "section": "Slicing rows",
    "text": "Slicing rows\nLet’s say we want the first flight for each carrier on 2013-02-22.\n\nflights2 |&gt; \n  filter(month == 2 & day == 22 & dep_time &gt; 10)\n\n# A tibble: 938 × 7\n    year month   day dep_time sched_dep_time dep_delay carrier\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1  2013     2    22      455            500        -5 US     \n 2  2013     2    22      512            515        -3 UA     \n 3  2013     2    22      530            530         0 UA     \n 4  2013     2    22      536            545        -9 B6     \n 5  2013     2    22      539            540        -1 AA     \n 6  2013     2    22      551            600        -9 B6     \n 7  2013     2    22      553            600        -7 DL     \n 8  2013     2    22      553            600        -7 EV     \n 9  2013     2    22      553            600        -7 B6     \n10  2013     2    22      553            600        -7 US     \n# ℹ 928 more rows"
  },
  {
    "objectID": "slides/14_summarizing.html#slicing-rows-2",
    "href": "slides/14_summarizing.html#slicing-rows-2",
    "title": "Summarizing rows",
    "section": "Slicing rows",
    "text": "Slicing rows\nLet’s say we want the first flight for each carrier on 2013-02-22.\n\nflights2 |&gt; \n  filter(month == 2 & day == 22 & dep_time &gt; 10) |&gt; \n  group_by(carrier) |&gt; \n  slice_min(dep_time)\n\n# A tibble: 15 × 7\n# Groups:   carrier [15]\n    year month   day dep_time sched_dep_time dep_delay carrier\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1  2013     2    22      558            605        -7 9E     \n 2  2013     2    22      539            540        -1 AA     \n 3  2013     2    22      731            725         6 AS     \n 4  2013     2    22      536            545        -9 B6     \n 5  2013     2    22      553            600        -7 DL     \n 6  2013     2    22      553            600        -7 EV     \n 7  2013     2    22      827            830        -3 F9     \n 8  2013     2    22      602            600         2 FL     \n 9  2013     2    22      857            900        -3 HA     \n10  2013     2    22      553            600        -7 MQ     \n11  2013     2    22      512            515        -3 UA     \n12  2013     2    22      455            500        -5 US     \n13  2013     2    22      702            705        -3 VX     \n14  2013     2    22      601            600         1 WN     \n15  2013     2    22     1601           1606        -5 YV"
  },
  {
    "objectID": "slides/14_summarizing.html#slicing-rows-3",
    "href": "slides/14_summarizing.html#slicing-rows-3",
    "title": "Summarizing rows",
    "section": "Slicing rows",
    "text": "Slicing rows\nWhat if we want the three most delayed flight for each carrier on 2013-02-22.\n\nflights2 |&gt; \n  filter(month == 2 & day == 22 & dep_time &gt; 10) |&gt; \n  group_by(carrier) |&gt; \n  slice_max(dep_delay, n = 3) |&gt; \n  arrange(carrier, dep_delay)\n\n# A tibble: 43 × 7\n# Groups:   carrier [15]\n    year month   day dep_time sched_dep_time dep_delay carrier\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1  2013     2    22     1723           1540       103 9E     \n 2  2013     2    22     2301           1945       196 9E     \n 3  2013     2    22     2010           1550       260 9E     \n 4  2013     2    22     2134           2015        79 AA     \n 5  2013     2    22     2240           2045       115 AA     \n 6  2013     2    22     2000           1700       180 AA     \n 7  2013     2    22     1811           1815        -4 AS     \n 8  2013     2    22      731            725         6 AS     \n 9  2013     2    22     1955           1805       110 B6     \n10  2013     2    22     1829           1600       149 B6     \n# ℹ 33 more rows"
  },
  {
    "objectID": "slides/14_summarizing.html#slicing-rows-4",
    "href": "slides/14_summarizing.html#slicing-rows-4",
    "title": "Summarizing rows",
    "section": "Slicing rows",
    "text": "Slicing rows\nWe can replace group_by() with by argument (not .by)\n\nflights2 |&gt; \n  filter(month == 2 & day == 22 & dep_time &gt; 10) |&gt; \n  slice_max(by = carrier,\n            dep_delay, n = 3) |&gt; \n  arrange(carrier, dep_delay)\n\n# A tibble: 43 × 7\n    year month   day dep_time sched_dep_time dep_delay carrier\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1  2013     2    22     1723           1540       103 9E     \n 2  2013     2    22     2301           1945       196 9E     \n 3  2013     2    22     2010           1550       260 9E     \n 4  2013     2    22     2134           2015        79 AA     \n 5  2013     2    22     2240           2045       115 AA     \n 6  2013     2    22     2000           1700       180 AA     \n 7  2013     2    22     1811           1815        -4 AS     \n 8  2013     2    22      731            725         6 AS     \n 9  2013     2    22     1955           1805       110 B6     \n10  2013     2    22     1829           1600       149 B6     \n# ℹ 33 more rows"
  },
  {
    "objectID": "slides/14_summarizing.html#dplyr-verbs",
    "href": "slides/14_summarizing.html#dplyr-verbs",
    "title": "Summarizing rows",
    "section": "{dplyr} verbs",
    "text": "{dplyr} verbs\n\n\n\nselect()\nrename()\nrelocate()\nmutate()\nif_else()\ncase_when()\nrowwise()\nacross()\n\n\n\n\nfilter()\nif_any()\ndrop_na()\narrange()\ndesc()\n\n\n\n\n\nsummarise()\n\ncount(), n()\n\ngroup_by()\nslice_()"
  },
  {
    "objectID": "slides/14_summarizing.html#solving-the-problem-1",
    "href": "slides/14_summarizing.html#solving-the-problem-1",
    "title": "Summarizing rows",
    "section": "Solving the problem",
    "text": "Solving the problem\nWhat code turns data1 into data3?\n\n\n\ndata1\n\n   cond id       date    response\n1     1  1 2022-01-06 0.186435928\n2     2  2 2022-02-27 0.570824456\n3     3  3 2022-02-21 0.185012303\n4     1  4 2022-02-07 0.314863177\n5     2  5 2022-01-12 0.001347631\n6     1  6 2022-02-03 0.450795800\n7     1  7 2022-01-07 0.146024002\n8     1  8 2022-02-08 0.987602587\n9     2  9 2022-01-04 0.944210393\n10    3 10 2022-02-05 0.416260159\n11    2 11 2022-02-01 0.064055518\n12    2 12 2022-01-20 0.355653727\n\n\n\n\ndata3\n\n# A tibble: 2 × 2\n  condition   earliest_date\n  &lt;chr&gt;       &lt;date&gt;       \n1 Condition 2 2022-01-04   \n2 Condition 3 2022-02-05"
  },
  {
    "objectID": "slides/14_summarizing.html#lets-code",
    "href": "slides/14_summarizing.html#lets-code",
    "title": "Summarizing rows",
    "section": "Let’s code!",
    "text": "Let’s code!\nSummarizing rows"
  },
  {
    "objectID": "slides/16_separating.html#the-problem",
    "href": "slides/16_separating.html#the-problem",
    "title": "Separating and uniting data",
    "section": "The problem",
    "text": "The problem\nWhat’s different between these data sets?\nWhat needs to happen to create data2 from data1?\n\n\n\ndata1\n\n# A tibble: 11 × 4\n      id cond1 cond2 date      \n   &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;date&gt;    \n 1     1     1 A     2022-02-24\n 2     1     2 A     2022-01-21\n 3     1     3 A     2022-01-23\n 4     2     1 B     2022-01-27\n 5     2     3 B     2022-01-02\n 6     3     1 A     2022-02-03\n 7     3     2 A     2022-02-10\n 8     3     3 A     2022-02-21\n 9     4     1 B     2022-01-31\n10     4     2 B     2022-01-30\n11     4     3 B     2022-02-13\n\n\n\n\ndata2\n\n# A tibble: 12 × 5\n      id condition year  month day  \n   &lt;int&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1     1 1A        2022  02    24   \n 2     1 2A        2022  01    21   \n 3     1 3A        2022  01    23   \n 4     2 1B        2022  01    27   \n 5     2 2B        &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 6     2 3B        2022  01    02   \n 7     3 1A        2022  02    03   \n 8     3 2A        2022  02    10   \n 9     3 3A        2022  02    21   \n10     4 1B        2022  01    31   \n11     4 2B        2022  01    30   \n12     4 3B        2022  02    13"
  },
  {
    "objectID": "slides/16_separating.html#mental-model-of-tidy-data",
    "href": "slides/16_separating.html#mental-model-of-tidy-data",
    "title": "Separating and uniting data",
    "section": "Mental model of tidy data",
    "text": "Mental model of tidy data\n\n\nEach variable has its own column\nEach observation has its own row\nEach value has its own cell"
  },
  {
    "objectID": "slides/16_separating.html#separating-data-1",
    "href": "slides/16_separating.html#separating-data-1",
    "title": "Separating and uniting data",
    "section": "Separating data",
    "text": "Separating data\n\n\n\ntable3\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n\n\n\nWhy is table3 not tidy?"
  },
  {
    "objectID": "slides/16_separating.html#separating-data-2",
    "href": "slides/16_separating.html#separating-data-2",
    "title": "Separating and uniting data",
    "section": "Separating data",
    "text": "Separating data\n\nseparate(table3, rate, into = c(\"cases\", \"population\"))\n\n# A tibble: 6 × 4\n  country      year cases  population\n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     \n1 Afghanistan  1999 745    19987071  \n2 Afghanistan  2000 2666   20595360  \n3 Brazil       1999 37737  172006362 \n4 Brazil       2000 80488  174504898 \n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\n\n\nseparate(table3, rate, into = c(\"cases\", \"population\"), convert = TRUE)\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;int&gt;      &lt;int&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583"
  },
  {
    "objectID": "slides/16_separating.html#separating-data-3",
    "href": "slides/16_separating.html#separating-data-3",
    "title": "Separating and uniting data",
    "section": "Separating data",
    "text": "Separating data\n\nseparate(table3, year, into = c(\"century\", \"year2\"), sep = 2)\n\n# A tibble: 6 × 4\n  country     century year2 rate             \n  &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan 19      99    745/19987071     \n2 Afghanistan 20      00    2666/20595360    \n3 Brazil      19      99    37737/172006362  \n4 Brazil      20      00    80488/174504898  \n5 China       19      99    212258/1272915272\n6 China       20      00    213766/1280428583\n\n\n\n\nseparate(table3, year, into = c(\"century\", \"year2\"), sep = 2, remove = FALSE)\n\n# A tibble: 6 × 5\n  country      year century year2 rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan  1999 19      99    745/19987071     \n2 Afghanistan  2000 20      00    2666/20595360    \n3 Brazil       1999 19      99    37737/172006362  \n4 Brazil       2000 20      00    80488/174504898  \n5 China        1999 19      99    212258/1272915272\n6 China        2000 20      00    213766/1280428583"
  },
  {
    "objectID": "slides/16_separating.html#code-lifecycle",
    "href": "slides/16_separating.html#code-lifecycle",
    "title": "Separating and uniting data",
    "section": "Code lifecycle",
    "text": "Code lifecycle\nCode is constantly being updated—added and removed\nPosit’s {lifecycle} package tracks code stages"
  },
  {
    "objectID": "slides/16_separating.html#code-versioning",
    "href": "slides/16_separating.html#code-versioning",
    "title": "Separating and uniting data",
    "section": "Code versioning",
    "text": "Code versioning\ntidyverse 2.0.0\nhere 1.0.1\npapaja 0.1.3\n[major].[minor].[patch]\n\nIn the tidyverse…\n\n[Y]ou can assume any package with version number less than 1.0.0 is at least somewhat experimental… The most experimental packages only exist on GitHub."
  },
  {
    "objectID": "slides/16_separating.html#separating-data-4",
    "href": "slides/16_separating.html#separating-data-4",
    "title": "Separating and uniting data",
    "section": "Separating data",
    "text": "Separating data\n\n\n\n\n\n\nThe separate() function is being superseded by separate_wider_delim() and separate_wider_position() for the two use cases described before. But these are both listed as experimental, so we’re sticking with separate().\n\n\n\n\nseparate(table3, rate, into = c(\"cases\", \"population\"), sep = \"/\")\n\n==\n\nseparate_wider_delim(table3, rate, names = c(\"cases\", \"population\"), delim = \"/\")"
  },
  {
    "objectID": "slides/16_separating.html#separating-data-5",
    "href": "slides/16_separating.html#separating-data-5",
    "title": "Separating and uniting data",
    "section": "Separating data",
    "text": "Separating data\n\n\n\n\n\n\nThe separate() function is being superseded by separate_wider_delim() and separate_wider_position() for the two use cases described before. But these are both listed as experimental, so we’re sticking with separate().\n\n\n\nseparate(table3, year, into = c(\"century\", \"year2\"), sep = 2)\n\n==\n\nseparate_wider_position(table3, year, widths = c(century = 2, year2 = 2))"
  },
  {
    "objectID": "slides/16_separating.html#uniting-data-1",
    "href": "slides/16_separating.html#uniting-data-1",
    "title": "Separating and uniting data",
    "section": "Uniting data",
    "text": "Uniting data\n\n\n\n\ntable5\n\n# A tibble: 6 × 4\n  country     century year  rate             \n  &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan 19      99    745/19987071     \n2 Afghanistan 20      00    2666/20595360    \n3 Brazil      19      99    37737/172006362  \n4 Brazil      20      00    80488/174504898  \n5 China       19      99    212258/1272915272\n6 China       20      00    213766/1280428583\n\n\n\n\nWhy is table5 not tidy?"
  },
  {
    "objectID": "slides/16_separating.html#uniting-data-2",
    "href": "slides/16_separating.html#uniting-data-2",
    "title": "Separating and uniting data",
    "section": "Uniting data",
    "text": "Uniting data\n\nunite(table5, new, century:year)\n\n# A tibble: 6 × 3\n  country     new   rate             \n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan 19_99 745/19987071     \n2 Afghanistan 20_00 2666/20595360    \n3 Brazil      19_99 37737/172006362  \n4 Brazil      20_00 80488/174504898  \n5 China       19_99 212258/1272915272\n6 China       20_00 213766/1280428583\n\n\n\n\nunite(table5, new, century:year, sep = \"\")\n\n# A tibble: 6 × 3\n  country     new   rate             \n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan 1999  745/19987071     \n2 Afghanistan 2000  2666/20595360    \n3 Brazil      1999  37737/172006362  \n4 Brazil      2000  80488/174504898  \n5 China       1999  212258/1272915272\n6 China       2000  213766/1280428583"
  },
  {
    "objectID": "slides/16_separating.html#uniting-data-3",
    "href": "slides/16_separating.html#uniting-data-3",
    "title": "Separating and uniting data",
    "section": "Uniting data",
    "text": "Uniting data\n\nunite(table5, new, century:year, sep = \"\", remove = FALSE)\n\n# A tibble: 6 × 5\n  country     new   century year  rate             \n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan 1999  19      99    745/19987071     \n2 Afghanistan 2000  20      00    2666/20595360    \n3 Brazil      1999  19      99    37737/172006362  \n4 Brazil      2000  20      00    80488/174504898  \n5 China       1999  19      99    212258/1272915272\n6 China       2000  20      00    213766/1280428583\n\n\n\n\nunite(table5, new, century:year, sep = \"\", remove = FALSE, convert = TRUE)\n\nError in `unite()`:\n! Arguments in `...` must be passed by position, not name.\n✖ Problematic argument:\n• convert = TRUE"
  },
  {
    "objectID": "slides/16_separating.html#coalescing-data",
    "href": "slides/16_separating.html#coalescing-data",
    "title": "Separating and uniting data",
    "section": "Coalescing data",
    "text": "Coalescing data\nCombining data across columns with NAs\n\ncoal_data\n\n# A tibble: 4 × 3\n    a_1   a_2   a_3\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1    NA    NA\n2    NA     4    NA\n3    NA    NA     7\n4    NA    NA    NA\n\n\n\n\ncoal_data |&gt; \n  mutate(a_all = coalesce(a_1, a_2, a_3))\n\n# A tibble: 4 × 4\n    a_1   a_2   a_3 a_all\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1    NA    NA     1\n2    NA     4    NA     4\n3    NA    NA     7     7\n4    NA    NA    NA    NA"
  },
  {
    "objectID": "slides/16_separating.html#coalescing-data-1",
    "href": "slides/16_separating.html#coalescing-data-1",
    "title": "Separating and uniting data",
    "section": "Coalescing data",
    "text": "Coalescing data\nCombining data across columns with NAs using select helpers\n\ncoal_data\n\n# A tibble: 4 × 3\n    a_1   a_2   a_3\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1    NA    NA\n2    NA     4    NA\n3    NA    NA     7\n4    NA    NA    NA\n\n\n\n\ncoal_data |&gt; \n  mutate(a_all = coalesce(!!quote(!!!across(contains(\"a_\")))))\n\n# A tibble: 4 × 4\n    a_1   a_2   a_3 a_all\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1    NA    NA     1\n2    NA     4    NA     4\n3    NA    NA     7     7\n4    NA    NA    NA    NA"
  },
  {
    "objectID": "slides/16_separating.html#missing-data",
    "href": "slides/16_separating.html#missing-data",
    "title": "Separating and uniting data",
    "section": "Missing data",
    "text": "Missing data\n\n\n\nstocks\n\n# A tibble: 7 × 3\n   year   qtr return\n  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1  2015     1   1.88\n2  2015     2   0.59\n3  2015     3   0.35\n4  2015     4  NA   \n5  2016     2   0.92\n6  2016     3   0.17\n7  2016     4   2.66\n\n\nWhat is missing?\n\n\nExplicitly missing (Q4 2015 is NA)\nImplicitly missing (Q1 2016 absent)\n\n\n\n\n\nstocks |&gt; \n  complete(year, qtr)\n\n# A tibble: 8 × 3\n   year   qtr return\n  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1  2015     1   1.88\n2  2015     2   0.59\n3  2015     3   0.35\n4  2015     4  NA   \n5  2016     1  NA   \n6  2016     2   0.92\n7  2016     3   0.17\n8  2016     4   2.66"
  },
  {
    "objectID": "slides/16_separating.html#missing-data-1",
    "href": "slides/16_separating.html#missing-data-1",
    "title": "Separating and uniting data",
    "section": "Missing data",
    "text": "Missing data\n\n\n\nstocks\n\n# A tibble: 7 × 3\n   year   qtr return\n  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1  2015     1   1.88\n2  2015     2   0.59\n3  2015     3   0.35\n4  2015     4  NA   \n5  2016     2   0.92\n6  2016     3   0.17\n7  2016     4   2.66\n\n\nWhat is missing?\n\n\nstocks |&gt; \n  complete(year, qtr)\n\n# A tibble: 8 × 3\n   year   qtr return\n  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1  2015     1   1.88\n2  2015     2   0.59\n3  2015     3   0.35\n4  2015     4  NA   \n5  2016     1  NA   \n6  2016     2   0.92\n7  2016     3   0.17\n8  2016     4   2.66\n\n\n\n\n\n\n\n\n\nImportant for factorial designs and for data validation"
  },
  {
    "objectID": "slides/16_separating.html#combinations-of-factors",
    "href": "slides/16_separating.html#combinations-of-factors",
    "title": "Separating and uniting data",
    "section": "Combinations of factors",
    "text": "Combinations of factors\n\n\n\nfruits\n\n# A tibble: 6 × 4\n  type    year size  weights\n  &lt;chr&gt;  &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt;\n1 apple   2010 XS       2.94\n2 orange  2010 S        2.91\n3 apple   2012 M        5.74\n4 orange  2010 S        5.12\n5 orange  2010 S        4.17\n6 orange  2012 M        2.99\n\n\n\n\n\nfruits |&gt; expand(type, size)\n\n# A tibble: 8 × 2\n  type   size \n  &lt;chr&gt;  &lt;fct&gt;\n1 apple  XS   \n2 apple  S    \n3 apple  M    \n4 apple  L    \n5 orange XS   \n6 orange S    \n7 orange M    \n8 orange L    \n\n\nreturn all possible combinations"
  },
  {
    "objectID": "slides/16_separating.html#combinations-of-factors-1",
    "href": "slides/16_separating.html#combinations-of-factors-1",
    "title": "Separating and uniting data",
    "section": "Combinations of factors",
    "text": "Combinations of factors\n\n\n\nfruits\n\n# A tibble: 6 × 4\n  type    year size  weights\n  &lt;chr&gt;  &lt;dbl&gt; &lt;fct&gt;   &lt;dbl&gt;\n1 apple   2010 XS       2.94\n2 orange  2010 S        2.91\n3 apple   2012 M        5.74\n4 orange  2010 S        5.12\n5 orange  2010 S        4.17\n6 orange  2012 M        2.99\n\n\n\n\n\nfruits |&gt; expand(nesting(type, size))\n\n# A tibble: 4 × 2\n  type   size \n  &lt;chr&gt;  &lt;fct&gt;\n1 apple  XS   \n2 apple  M    \n3 orange S    \n4 orange M    \n\n\nreturn all existing combinations"
  },
  {
    "objectID": "slides/16_separating.html#filling-data",
    "href": "slides/16_separating.html#filling-data",
    "title": "Separating and uniting data",
    "section": "Filling data",
    "text": "Filling data\n\n\n\n\ntreatment\n\n# A tibble: 4 × 3\n  person           treatment response\n  &lt;chr&gt;                &lt;dbl&gt;    &lt;dbl&gt;\n1 Derrick Whitmore         1        7\n2 &lt;NA&gt;                     2       10\n3 &lt;NA&gt;                     3        9\n4 Katherine Burke          1        4\n\n\n\n\n\n\ntreatment |&gt; \n  fill(person)\n\n# A tibble: 4 × 3\n  person           treatment response\n  &lt;chr&gt;                &lt;dbl&gt;    &lt;dbl&gt;\n1 Derrick Whitmore         1        7\n2 Derrick Whitmore         2       10\n3 Derrick Whitmore         3        9\n4 Katherine Burke          1        4"
  },
  {
    "objectID": "slides/16_separating.html#solving-the-problem",
    "href": "slides/16_separating.html#solving-the-problem",
    "title": "Separating and uniting data",
    "section": "Solving the problem",
    "text": "Solving the problem\nWhat code turns data1 into data2?\n\nlibrary(tidyverse)\nnrows &lt;- 12\ndata1 &lt;- tibble(id = rep(1:4, each = 3), \n                cond1 = rep(1:3, times = 4), \n                cond2 = rep(c(\"A\", \"B\", \"A\", \"B\"), each = 3), \n                date = sample(seq(as.Date('2022-01-01'), \n                                  as.Date('2022-02-28'), by=\"day\"), nrows)) |&gt; \n  filter(id != 2 | cond1 != 2)"
  },
  {
    "objectID": "slides/16_separating.html#solving-the-problem-1",
    "href": "slides/16_separating.html#solving-the-problem-1",
    "title": "Separating and uniting data",
    "section": "Solving the problem",
    "text": "Solving the problem\nWhat code turns data1 into data2?\n\n\n\ndata1\n\n# A tibble: 11 × 4\n      id cond1 cond2 date      \n   &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;date&gt;    \n 1     1     1 A     2022-02-24\n 2     1     2 A     2022-01-21\n 3     1     3 A     2022-01-23\n 4     2     1 B     2022-01-27\n 5     2     3 B     2022-01-02\n 6     3     1 A     2022-02-03\n 7     3     2 A     2022-02-10\n 8     3     3 A     2022-02-21\n 9     4     1 B     2022-01-31\n10     4     2 B     2022-01-30\n11     4     3 B     2022-02-13\n\n\n\n\ndata2\n\n# A tibble: 12 × 5\n      id condition year  month day  \n   &lt;int&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1     1 1A        2022  02    24   \n 2     1 2A        2022  01    21   \n 3     1 3A        2022  01    23   \n 4     2 1B        2022  01    27   \n 5     2 2B        &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; \n 6     2 3B        2022  01    02   \n 7     3 1A        2022  02    03   \n 8     3 2A        2022  02    10   \n 9     3 3A        2022  02    21   \n10     4 1B        2022  01    31   \n11     4 2B        2022  01    30   \n12     4 3B        2022  02    13"
  },
  {
    "objectID": "slides/16_separating.html#lets-code",
    "href": "slides/16_separating.html#lets-code",
    "title": "Separating and uniting data",
    "section": "Let’s code!",
    "text": "Let’s code!\nSeparating data"
  },
  {
    "objectID": "slides/18_mergingrows.html#the-problem",
    "href": "slides/18_mergingrows.html#the-problem",
    "title": "Merging rows",
    "section": "The problem",
    "text": "The problem\nWhat’s different between these data sets?\nWhat is needed to create data3 from data1 and data2?\n\n\n\ndata1\n\n# A tibble: 12 × 2\n      id    resp\n   &lt;int&gt;   &lt;dbl&gt;\n 1     1 0.489  \n 2     2 0.00965\n 3     3 0.214  \n 4     4 0.148  \n 5     5 0.535  \n 6     6 0.528  \n 7     7 0.952  \n 8     8 0.0381 \n 9     9 0.561  \n10    10 0.462  \n11    11 0.253  \n12    12 0.268  \n\n\n\n\ndata2\n\n# A tibble: 12 × 2\n      id  cond\n   &lt;int&gt; &lt;int&gt;\n 1     1     1\n 2     2     2\n 3     3     3\n 4     4     1\n 5     5     2\n 6     6     3\n 7     7     1\n 8     8     2\n 9     9     3\n10    10     1\n11    11     2\n12    12     3\n\n\n\n\ndata3\n\n# A tibble: 4 × 2\n     id  resp\n  &lt;int&gt; &lt;dbl&gt;\n1     1 0.489\n2     4 0.148\n3     7 0.952\n4    10 0.462"
  },
  {
    "objectID": "slides/18_mergingrows.html#set-up",
    "href": "slides/18_mergingrows.html#set-up",
    "title": "Merging rows",
    "section": "Set-up",
    "text": "Set-up\n\nlibrary(dplyr)\nlibrary(nycflights13)\n(flights2 &lt;- select(flights, year:dep_time, carrier, tailnum))\n\n# A tibble: 336,776 × 6\n    year month   day dep_time carrier tailnum\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;  \n 1  2013     1     1      517 UA      N14228 \n 2  2013     1     1      533 UA      N24211 \n 3  2013     1     1      542 AA      N619AA \n 4  2013     1     1      544 B6      N804JB \n 5  2013     1     1      554 DL      N668DN \n 6  2013     1     1      554 UA      N39463 \n 7  2013     1     1      555 B6      N516JB \n 8  2013     1     1      557 EV      N829AS \n 9  2013     1     1      557 B6      N593JB \n10  2013     1     1      558 AA      N3ALAA \n# ℹ 336,766 more rows"
  },
  {
    "objectID": "slides/18_mergingrows.html#set-up-1",
    "href": "slides/18_mergingrows.html#set-up-1",
    "title": "Merging rows",
    "section": "Set-up",
    "text": "Set-up\n\nset.seed(1)\n(airlines2 &lt;- slice_sample(airlines, prop = 0.5))\n\n# A tibble: 8 × 2\n  carrier name                  \n  &lt;chr&gt;   &lt;chr&gt;                 \n1 HA      Hawaiian Airlines Inc.\n2 B6      JetBlue Airways       \n3 F9      Frontier Airlines Inc.\n4 9E      Endeavor Air Inc.     \n5 AA      American Airlines Inc.\n6 VX      Virgin America        \n7 UA      United Air Lines Inc. \n8 AS      Alaska Airlines Inc.  \n\n(airlines3 &lt;- rename(airlines2, airline = carrier))\n\n# A tibble: 8 × 2\n  airline name                  \n  &lt;chr&gt;   &lt;chr&gt;                 \n1 HA      Hawaiian Airlines Inc.\n2 B6      JetBlue Airways       \n3 F9      Frontier Airlines Inc.\n4 9E      Endeavor Air Inc.     \n5 AA      American Airlines Inc.\n6 VX      Virgin America        \n7 UA      United Air Lines Inc. \n8 AS      Alaska Airlines Inc."
  },
  {
    "objectID": "slides/18_mergingrows.html#joining-with-dplyr",
    "href": "slides/18_mergingrows.html#joining-with-dplyr",
    "title": "Merging rows",
    "section": "Joining with {dplyr}",
    "text": "Joining with {dplyr}\n\nlibrary(dplyr)\n\n\n\n\n\n\n\n\n\n\nSource: Garrick Aden-Buie"
  },
  {
    "objectID": "slides/18_mergingrows.html#filtering-joins-1",
    "href": "slides/18_mergingrows.html#filtering-joins-1",
    "title": "Merging rows",
    "section": "Filtering joins",
    "text": "Filtering joins\nAffect rows"
  },
  {
    "objectID": "slides/18_mergingrows.html#semi-joins",
    "href": "slides/18_mergingrows.html#semi-joins",
    "title": "Merging rows",
    "section": "Semi joins",
    "text": "Semi joins\nKeep only matching observations\n\n\n\nWhen is this useful?"
  },
  {
    "objectID": "slides/18_mergingrows.html#semi-joins-1",
    "href": "slides/18_mergingrows.html#semi-joins-1",
    "title": "Merging rows",
    "section": "Semi joins",
    "text": "Semi joins\n\n\n\n\nx\n\n# A tibble: 3 × 2\n    key val_x\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2   \n3     3 x3   \n\ny\n\n# A tibble: 3 × 2\n    key val_y\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 y1   \n2     2 y2   \n3     4 y3   \n\n\n\n\nsemi_join(x, y, by = \"key\")\n\n# A tibble: 2 × 2\n    key val_x\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2"
  },
  {
    "objectID": "slides/18_mergingrows.html#semi-joins-2",
    "href": "slides/18_mergingrows.html#semi-joins-2",
    "title": "Merging rows",
    "section": "Semi joins",
    "text": "Semi joins\n\nairlines2\n\n# A tibble: 8 × 2\n  carrier name                  \n  &lt;chr&gt;   &lt;chr&gt;                 \n1 HA      Hawaiian Airlines Inc.\n2 B6      JetBlue Airways       \n3 F9      Frontier Airlines Inc.\n4 9E      Endeavor Air Inc.     \n5 AA      American Airlines Inc.\n6 VX      Virgin America        \n7 UA      United Air Lines Inc. \n8 AS      Alaska Airlines Inc."
  },
  {
    "objectID": "slides/18_mergingrows.html#semi-joins-3",
    "href": "slides/18_mergingrows.html#semi-joins-3",
    "title": "Merging rows",
    "section": "Semi joins",
    "text": "Semi joins\n\nflights2 |&gt;\n  semi_join(airlines2, by = \"carrier\")\n\n# A tibble: 171,392 × 6\n    year month   day dep_time carrier tailnum\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;  \n 1  2013     1     1      517 UA      N14228 \n 2  2013     1     1      533 UA      N24211 \n 3  2013     1     1      542 AA      N619AA \n 4  2013     1     1      544 B6      N804JB \n 5  2013     1     1      554 UA      N39463 \n 6  2013     1     1      555 B6      N516JB \n 7  2013     1     1      557 B6      N593JB \n 8  2013     1     1      558 AA      N3ALAA \n 9  2013     1     1      558 B6      N793JB \n10  2013     1     1      558 B6      N657JB \n# ℹ 171,382 more rows"
  },
  {
    "objectID": "slides/18_mergingrows.html#anti-joins",
    "href": "slides/18_mergingrows.html#anti-joins",
    "title": "Merging rows",
    "section": "Anti joins",
    "text": "Anti joins\nKeep only non-matching observations\n\n\n\nWhen is this useful?"
  },
  {
    "objectID": "slides/18_mergingrows.html#anti-joins-1",
    "href": "slides/18_mergingrows.html#anti-joins-1",
    "title": "Merging rows",
    "section": "Anti joins",
    "text": "Anti joins\n\n\n\n\nx\n\n# A tibble: 3 × 2\n    key val_x\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2   \n3     3 x3   \n\ny\n\n# A tibble: 3 × 2\n    key val_y\n  &lt;dbl&gt; &lt;chr&gt;\n1     1 y1   \n2     2 y2   \n3     4 y3   \n\n\n\n\nanti_join(x, y, by = \"key\")\n\n# A tibble: 1 × 2\n    key val_x\n  &lt;dbl&gt; &lt;chr&gt;\n1     3 x3"
  },
  {
    "objectID": "slides/18_mergingrows.html#anti-joins-2",
    "href": "slides/18_mergingrows.html#anti-joins-2",
    "title": "Merging rows",
    "section": "Anti joins",
    "text": "Anti joins\n\nflights2 |&gt;\n  anti_join(airlines2, by = \"carrier\")\n\n# A tibble: 165,384 × 6\n    year month   day dep_time carrier tailnum\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;  \n 1  2013     1     1      554 DL      N668DN \n 2  2013     1     1      557 EV      N829AS \n 3  2013     1     1      600 MQ      N542MQ \n 4  2013     1     1      602 DL      N971DL \n 5  2013     1     1      602 MQ      N730MQ \n 6  2013     1     1      606 DL      N3739P \n 7  2013     1     1      608 MQ      N9EAMQ \n 8  2013     1     1      615 DL      N326NB \n 9  2013     1     1      622 US      N807AW \n10  2013     1     1      624 EV      N11107 \n# ℹ 165,374 more rows"
  },
  {
    "objectID": "slides/18_mergingrows.html#joining-with-different-key-names",
    "href": "slides/18_mergingrows.html#joining-with-different-key-names",
    "title": "Merging rows",
    "section": "Joining with different key names",
    "text": "Joining with different key names\n\n\n\n\nflights2\n\n# A tibble: 336,776 × 6\n    year month   day dep_time carrier tailnum\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;  \n 1  2013     1     1      517 UA      N14228 \n 2  2013     1     1      533 UA      N24211 \n 3  2013     1     1      542 AA      N619AA \n 4  2013     1     1      544 B6      N804JB \n 5  2013     1     1      554 DL      N668DN \n 6  2013     1     1      554 UA      N39463 \n 7  2013     1     1      555 B6      N516JB \n 8  2013     1     1      557 EV      N829AS \n 9  2013     1     1      557 B6      N593JB \n10  2013     1     1      558 AA      N3ALAA \n# ℹ 336,766 more rows\n\n\n\n\n\n\nairlines3\n\n# A tibble: 8 × 2\n  airline name                  \n  &lt;chr&gt;   &lt;chr&gt;                 \n1 HA      Hawaiian Airlines Inc.\n2 B6      JetBlue Airways       \n3 F9      Frontier Airlines Inc.\n4 9E      Endeavor Air Inc.     \n5 AA      American Airlines Inc.\n6 VX      Virgin America        \n7 UA      United Air Lines Inc. \n8 AS      Alaska Airlines Inc."
  },
  {
    "objectID": "slides/18_mergingrows.html#joining-with-different-key-names-1",
    "href": "slides/18_mergingrows.html#joining-with-different-key-names-1",
    "title": "Merging rows",
    "section": "Joining with different key names",
    "text": "Joining with different key names\n\nflights2 |&gt;\n  anti_join(airlines3, by = join_by(carrier == airline))\n\n# A tibble: 165,384 × 6\n    year month   day dep_time carrier tailnum\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;  \n 1  2013     1     1      554 DL      N668DN \n 2  2013     1     1      557 EV      N829AS \n 3  2013     1     1      600 MQ      N542MQ \n 4  2013     1     1      602 DL      N971DL \n 5  2013     1     1      602 MQ      N730MQ \n 6  2013     1     1      606 DL      N3739P \n 7  2013     1     1      608 MQ      N9EAMQ \n 8  2013     1     1      615 DL      N326NB \n 9  2013     1     1      622 US      N807AW \n10  2013     1     1      624 EV      N11107 \n# ℹ 165,374 more rows"
  },
  {
    "objectID": "slides/18_mergingrows.html#adding-rows",
    "href": "slides/18_mergingrows.html#adding-rows",
    "title": "Merging rows",
    "section": "Adding rows",
    "text": "Adding rows\ntibble::add_row()\n\n\n\n(df &lt;- tibble(x = 1:3, y = 3:1))\n\n# A tibble: 3 × 2\n      x     y\n  &lt;int&gt; &lt;int&gt;\n1     1     3\n2     2     2\n3     3     1\n\n\n\ndf %&gt;% add_row(x = 4, y = 0)\n\n# A tibble: 4 × 2\n      x     y\n  &lt;dbl&gt; &lt;dbl&gt;\n1     1     3\n2     2     2\n3     3     1\n4     4     0\n\n\n\n\n\ndf %&gt;% add_row(x = 4, y = 0, \n               .before = 2)\n\n# A tibble: 4 × 2\n      x     y\n  &lt;dbl&gt; &lt;dbl&gt;\n1     1     3\n2     4     0\n3     2     2\n4     3     1\n\n\n\ndf %&gt;% add_row(x = 4:5, y = 0:-1)\n\n# A tibble: 5 × 2\n      x     y\n  &lt;int&gt; &lt;int&gt;\n1     1     3\n2     2     2\n3     3     1\n4     4     0\n5     5    -1"
  },
  {
    "objectID": "slides/18_mergingrows.html#adding-columns",
    "href": "slides/18_mergingrows.html#adding-columns",
    "title": "Merging rows",
    "section": "Adding columns",
    "text": "Adding columns\ntibble::add_column()\n\n\n\n(df &lt;- tibble(x = 1:3, y = 3:1))\n\n# A tibble: 3 × 2\n      x     y\n  &lt;int&gt; &lt;int&gt;\n1     1     3\n2     2     2\n3     3     1\n\n\n\ndf %&gt;% add_column(z = 4:6)\n\n# A tibble: 3 × 3\n      x     y     z\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     1     3     4\n2     2     2     5\n3     3     1     6\n\n\n\n\n\ndf %&gt;% add_column(w = 4:6, \n               .before = 1)\n\n# A tibble: 3 × 3\n      w     x     y\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1     4     1     3\n2     5     2     2\n3     6     3     1\n\n\n\ndf %&gt;% add_column(z = 4:6, alpha = 0)\n\n# A tibble: 3 × 4\n      x     y     z alpha\n  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n1     1     3     4     0\n2     2     2     5     0\n3     3     1     6     0"
  },
  {
    "objectID": "slides/18_mergingrows.html#combine-data-frames-by-rows",
    "href": "slides/18_mergingrows.html#combine-data-frames-by-rows",
    "title": "Merging rows",
    "section": "Combine data frames by rows",
    "text": "Combine data frames by rows\ndplyr::bind_rows()\n\n\n\n(df2 &lt;- tibble(x = 4:5, y = 5:4))\n\n# A tibble: 2 × 2\n      x     y\n  &lt;int&gt; &lt;int&gt;\n1     4     5\n2     5     4\n\n\n\nbind_rows(df, df2)\n\n# A tibble: 5 × 2\n      x     y\n  &lt;int&gt; &lt;int&gt;\n1     1     3\n2     2     2\n3     3     1\n4     4     5\n5     5     4\n\n\n\n\n\n(df3 &lt;- tibble(x = 6:7, y = 7:6, \n              z = c(\"A\", \"B\")))\n\n# A tibble: 2 × 3\n      x     y z    \n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;\n1     6     7 A    \n2     7     6 B    \n\n\n\nbind_rows(df, df3)\n\n# A tibble: 5 × 3\n      x     y z    \n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;\n1     1     3 &lt;NA&gt; \n2     2     2 &lt;NA&gt; \n3     3     1 &lt;NA&gt; \n4     6     7 A    \n5     7     6 B"
  },
  {
    "objectID": "slides/18_mergingrows.html#combine-data-frames-by-columns",
    "href": "slides/18_mergingrows.html#combine-data-frames-by-columns",
    "title": "Merging rows",
    "section": "Combine data frames by columns",
    "text": "Combine data frames by columns\ndplyr::bind_cols()\n\n\n\n(df4 &lt;- tibble(z = c(\"A\", \"B\" , \"C\"), \n              zz = c(\"Z\", \"Y\", \"X\")))\n\n# A tibble: 3 × 2\n  z     zz   \n  &lt;chr&gt; &lt;chr&gt;\n1 A     Z    \n2 B     Y    \n3 C     X    \n\n\n\nbind_cols(df, df4)\n\n# A tibble: 3 × 4\n      x     y z     zz   \n  &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n1     1     3 A     Z    \n2     2     2 B     Y    \n3     3     1 C     X    \n\n\n\n\nbind_cols(df, new_col = df4$z)\n\n# A tibble: 3 × 3\n      x     y new_col\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;  \n1     1     3 A      \n2     2     2 B      \n3     3     1 C      \n\n\n\n\nBut why is this dangerous? What is a better solution?"
  },
  {
    "objectID": "slides/18_mergingrows.html#set-operations-1",
    "href": "slides/18_mergingrows.html#set-operations-1",
    "title": "Merging rows",
    "section": "Set operations",
    "text": "Set operations\nFor finding overlap, differences, and combinations of datasets"
  },
  {
    "objectID": "slides/18_mergingrows.html#intersect",
    "href": "slides/18_mergingrows.html#intersect",
    "title": "Merging rows",
    "section": "Intersect",
    "text": "Intersect\nCommon rows in both x and y, keeping just unique rows"
  },
  {
    "objectID": "slides/18_mergingrows.html#set-difference",
    "href": "slides/18_mergingrows.html#set-difference",
    "title": "Merging rows",
    "section": "Set difference",
    "text": "Set difference\nAll rows from x which are not also rows in y, keeping just unique rows"
  },
  {
    "objectID": "slides/18_mergingrows.html#union",
    "href": "slides/18_mergingrows.html#union",
    "title": "Merging rows",
    "section": "Union",
    "text": "Union\nAll unique rows from x and y"
  },
  {
    "objectID": "slides/18_mergingrows.html#union-all",
    "href": "slides/18_mergingrows.html#union-all",
    "title": "Merging rows",
    "section": "Union all",
    "text": "Union all\nAll rows from x and y, keeping duplicates"
  },
  {
    "objectID": "slides/18_mergingrows.html#sql",
    "href": "slides/18_mergingrows.html#sql",
    "title": "Merging rows",
    "section": "SQL",
    "text": "SQL\nCongratulations—you just learned SQL databases!"
  },
  {
    "objectID": "slides/18_mergingrows.html#solving-the-problem",
    "href": "slides/18_mergingrows.html#solving-the-problem",
    "title": "Merging rows",
    "section": "Solving the problem",
    "text": "Solving the problem\nWhat code combines data1 and data2 into data3?\n\n\n\ndata1\n\n# A tibble: 12 × 2\n      id    resp\n   &lt;int&gt;   &lt;dbl&gt;\n 1     1 0.489  \n 2     2 0.00965\n 3     3 0.214  \n 4     4 0.148  \n 5     5 0.535  \n 6     6 0.528  \n 7     7 0.952  \n 8     8 0.0381 \n 9     9 0.561  \n10    10 0.462  \n11    11 0.253  \n12    12 0.268  \n\n\n\n\ndata2\n\n# A tibble: 12 × 2\n      id  cond\n   &lt;int&gt; &lt;int&gt;\n 1     1     1\n 2     2     2\n 3     3     3\n 4     4     1\n 5     5     2\n 6     6     3\n 7     7     1\n 8     8     2\n 9     9     3\n10    10     1\n11    11     2\n12    12     3\n\n\n\n\ndata3\n\n# A tibble: 4 × 2\n     id  resp\n  &lt;int&gt; &lt;dbl&gt;\n1     1 0.489\n2     4 0.148\n3     7 0.952\n4    10 0.462"
  },
  {
    "objectID": "slides/18_mergingrows.html#lets-code",
    "href": "slides/18_mergingrows.html#lets-code",
    "title": "Merging rows",
    "section": "Let’s code!",
    "text": "Let’s code!\nMerging rows [Rmd]"
  },
  {
    "objectID": "slides/20_strings.html#the-problem",
    "href": "slides/20_strings.html#the-problem",
    "title": "Strings",
    "section": "The problem",
    "text": "The problem\nWhat’s different between these data sets?\nWhat is needed to create data2 from data1?\n\n\n\ndata1\n\n# A tibble: 12 × 3\n      id cond  resp \n   &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1     1 cond1 yes  \n 2     2 cond2 no   \n 3     3 cond1 yes  \n 4     4 cond2 yes  \n 5     5 cond1 no   \n 6     6 cond2 yes  \n 7     7 cond1 yes  \n 8     8 cond2 no   \n 9     9 cond1 no   \n10    10 cond2 no   \n11    11 cond1 yes  \n12    12 cond2 yes  \n\n\n\n\ndata2\n\n# A tibble: 12 × 4\n      id cond  resp  output                           \n   &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;glue&gt;                           \n 1     1 1     Yes   1 had condition 1 and said \"Yes\" \n 2     2 2     No    2 had condition 2 and said \"No\"  \n 3     3 1     Yes   3 had condition 1 and said \"Yes\" \n 4     4 2     Yes   4 had condition 2 and said \"Yes\" \n 5     5 1     No    5 had condition 1 and said \"No\"  \n 6     6 2     Yes   6 had condition 2 and said \"Yes\" \n 7     7 1     Yes   7 had condition 1 and said \"Yes\" \n 8     8 2     No    8 had condition 2 and said \"No\"  \n 9     9 1     No    9 had condition 1 and said \"No\"  \n10    10 2     No    10 had condition 2 and said \"No\" \n11    11 1     Yes   11 had condition 1 and said \"Yes\"\n12    12 2     Yes   12 had condition 2 and said \"Yes\""
  },
  {
    "objectID": "slides/20_strings.html#set-up",
    "href": "slides/20_strings.html#set-up",
    "title": "Strings",
    "section": "Set-up",
    "text": "Set-up\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "slides/20_strings.html#mental-model",
    "href": "slides/20_strings.html#mental-model",
    "title": "Strings",
    "section": "Mental model",
    "text": "Mental model"
  },
  {
    "objectID": "slides/20_strings.html#useful-character-vectors",
    "href": "slides/20_strings.html#useful-character-vectors",
    "title": "Strings",
    "section": "Useful character vectors",
    "text": "Useful character vectors\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nLETTERS\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n\nmonth.name\n\n [1] \"January\"   \"February\"  \"March\"     \"April\"     \"May\"       \"June\"     \n [7] \"July\"      \"August\"    \"September\" \"October\"   \"November\"  \"December\" \n\nmonth.abb\n\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\""
  },
  {
    "objectID": "slides/20_strings.html#quotes",
    "href": "slides/20_strings.html#quotes",
    "title": "Strings",
    "section": "Quotes",
    "text": "Quotes\nCreate strings with either single quotes or double quotes\n\n(string1 &lt;- \"This is a string\")\n\n[1] \"This is a string\"\n\nwriteLines(string1)\n\nThis is a string\n\n(string2 &lt;- 'So is this.')\n\n[1] \"So is this.\"\n\nwriteLines(string2)\n\nSo is this."
  },
  {
    "objectID": "slides/20_strings.html#quotes-1",
    "href": "slides/20_strings.html#quotes-1",
    "title": "Strings",
    "section": "Quotes",
    "text": "Quotes\nIncluding quotes in strings\n\n(string3 &lt;- 'If I want to include a \"double quote\" inside a string, I use single quotes')\n\n[1] \"If I want to include a \\\"double quote\\\" inside a string, I use single quotes\"\n\nwriteLines(string3)\n\nIf I want to include a \"double quote\" inside a string, I use single quotes\n\n(string4 &lt;- \"And 'vice versa'\")\n\n[1] \"And 'vice versa'\"\n\nwriteLines(string4)\n\nAnd 'vice versa'"
  },
  {
    "objectID": "slides/20_strings.html#escaping-quotes",
    "href": "slides/20_strings.html#escaping-quotes",
    "title": "Strings",
    "section": "Escaping quotes",
    "text": "Escaping quotes\nOr use \\ to “escape” it\n\ndouble_quote &lt;- \"\\\"\"\nwriteLines(double_quote)\n\n\"\n\nsingle_quote &lt;- '\\''\nwriteLines(single_quote)\n\n'"
  },
  {
    "objectID": "slides/20_strings.html#escaping-quotes-1",
    "href": "slides/20_strings.html#escaping-quotes-1",
    "title": "Strings",
    "section": "Escaping quotes",
    "text": "Escaping quotes\nBecause \\ escapes, you can’t just wrap it in quotes\nIf you want an actual backslash printed, you need two \\\\\n\nbackslash &lt;- \"\\\\\"\nwriteLines(backslash)\n\n\\"
  },
  {
    "objectID": "slides/20_strings.html#strings-with-stringr",
    "href": "slides/20_strings.html#strings-with-stringr",
    "title": "Strings",
    "section": "Strings with {stringr}",
    "text": "Strings with {stringr}\n\nlibrary(stringr)\n\n\n\n\n\n\n\n\nSource: Allison Horst"
  },
  {
    "objectID": "slides/20_strings.html#string-length",
    "href": "slides/20_strings.html#string-length",
    "title": "Strings",
    "section": "String length",
    "text": "String length\nReturn number of characters in a string with stringr::str_length()\n\n(r4ds_string &lt;- c(\"a\", \"R for data science\", NA))\n\n[1] \"a\"                  \"R for data science\" NA                  \n\nstr_length(r4ds_string)  # nchar() in base R\n\n[1]  1 18 NA\n\n# This differs from length...\nlength(r4ds_string)\n\n[1] 3"
  },
  {
    "objectID": "slides/20_strings.html#extracting-strings",
    "href": "slides/20_strings.html#extracting-strings",
    "title": "Strings",
    "section": "Extracting strings",
    "text": "Extracting strings\nExtract parts of a string based on position with stringr::str_sub()\n\nx &lt;- c(\"apple\", \"banana\", \"pear\")\nstr_sub(x, 1, 3)  # substr() in base R\n\n[1] \"app\" \"ban\" \"pea\"\n\n# Negative numbers count backwards from end\nstr_sub(x, -3, -1)\n\n[1] \"ple\" \"ana\" \"ear\""
  },
  {
    "objectID": "slides/20_strings.html#extracting-strings-1",
    "href": "slides/20_strings.html#extracting-strings-1",
    "title": "Strings",
    "section": "Extracting strings",
    "text": "Extracting strings\nUseful when you don’t have delimiters. But use delimiters!\n\npenguins |&gt;\n  mutate(species = str_sub(species, 1, 1),\n         island = str_sub(island, 1, 3),\n         year = str_sub(year, -2, -1), .keep = \"used\")\n\n# A tibble: 344 × 3\n   species island year \n   &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;\n 1 A       Tor    07   \n 2 A       Tor    07   \n 3 A       Tor    07   \n 4 A       Tor    07   \n 5 A       Tor    07   \n 6 A       Tor    07   \n 7 A       Tor    07   \n 8 A       Tor    07   \n 9 A       Tor    07   \n10 A       Tor    07   \n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/20_strings.html#extracting-strings-2",
    "href": "slides/20_strings.html#extracting-strings-2",
    "title": "Strings",
    "section": "Extracting strings",
    "text": "Extracting strings\nAlso can substitute characters based on position\n\nx\n\n[1] \"apple\"  \"banana\" \"pear\"  \n\nstr_sub(x, 1, 1) &lt;- \"#\"  # replace first character\nx\n\n[1] \"#pple\"  \"#anana\" \"#ear\"  \n\nstr_sub(x, -1, -1) &lt;- \"*\"  # replace last character\nx\n\n[1] \"#ppl*\"  \"#anan*\" \"#ea*\"  \n\nstr_sub(x, 0, 0) &lt;- \"~\"  # add before first character\nx\n\n[1] \"~#ppl*\"  \"~#anan*\" \"~#ea*\""
  },
  {
    "objectID": "slides/20_strings.html#changing-case",
    "href": "slides/20_strings.html#changing-case",
    "title": "Strings",
    "section": "Changing case",
    "text": "Changing case\nControl capitalization with stringr::str_to_lower() and stringr::str_to_upper()\n\n(y &lt;- \"hello, World\")\n\n[1] \"hello, World\"\n\nstr_to_lower(y)  # tolower() in base R\n\n[1] \"hello, world\"\n\nstr_to_upper(y)  # toupper() in base R\n\n[1] \"HELLO, WORLD\""
  },
  {
    "objectID": "slides/20_strings.html#changing-case-1",
    "href": "slides/20_strings.html#changing-case-1",
    "title": "Strings",
    "section": "Changing case",
    "text": "Changing case\nPlus super useful stringr::str_to_title() and stringr::str_to_sentence()\n\nstr_to_title(y)\n\n[1] \"Hello, World\"\n\nstr_to_sentence(y)\n\n[1] \"Hello, world\""
  },
  {
    "objectID": "slides/20_strings.html#changing-case-2",
    "href": "slides/20_strings.html#changing-case-2",
    "title": "Strings",
    "section": "Changing case",
    "text": "Changing case\nUseful for column names\n\nnames(iris)\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\nstr_to_lower(names(iris))\n\n[1] \"sepal.length\" \"sepal.width\"  \"petal.length\" \"petal.width\"  \"species\""
  },
  {
    "objectID": "slides/20_strings.html#changing-case-3",
    "href": "slides/20_strings.html#changing-case-3",
    "title": "Strings",
    "section": "Changing case",
    "text": "Changing case\nOr to change case of column entries\n\npenguins |&gt;\n  mutate(sex_upper = str_to_sentence(sex), .keep = \"used\")\n\n# A tibble: 344 × 2\n   sex    sex_upper\n   &lt;fct&gt;  &lt;chr&gt;    \n 1 male   Male     \n 2 female Female   \n 3 female Female   \n 4 &lt;NA&gt;   &lt;NA&gt;     \n 5 female Female   \n 6 male   Male     \n 7 female Female   \n 8 male   Male     \n 9 &lt;NA&gt;   &lt;NA&gt;     \n10 &lt;NA&gt;   &lt;NA&gt;     \n# ℹ 334 more rows\n\n\nBut notice what happened to data type"
  },
  {
    "objectID": "slides/20_strings.html#combining-strings-1",
    "href": "slides/20_strings.html#combining-strings-1",
    "title": "Strings",
    "section": "Combining strings",
    "text": "Combining strings\nCombine multiple strings into a single string with stringr::str_c():\n\nc(\"x\", \"y\", \"z\")\n\n[1] \"x\" \"y\" \"z\"\n\nstr_c(\"x\", \"y\", \"z\")\n\n[1] \"xyz\"\n\nstr_c(\"x\", \"y\", \"z\", sep = \", \")\n\n[1] \"x, y, z\""
  },
  {
    "objectID": "slides/20_strings.html#collapsing-strings",
    "href": "slides/20_strings.html#collapsing-strings",
    "title": "Strings",
    "section": "Collapsing strings",
    "text": "Collapsing strings\nCollapse a vector of strings into a single string with collapse argument\n\nstr_c(c(\"x\", \"y\", \"z\"), collapse = \", \")\n\n[1] \"x, y, z\"\n\n\n\nHow is this different from using sep argument?\n\nstr_c(\"x\", \"y\", \"z\", sep = \", \")\n\n[1] \"x, y, z\""
  },
  {
    "objectID": "slides/20_strings.html#collapsing-strings-1",
    "href": "slides/20_strings.html#collapsing-strings-1",
    "title": "Strings",
    "section": "Collapsing strings",
    "text": "Collapsing strings\nWhen would this be useful?\n\nstr_c(month.name, collapse = \", \")\n\n[1] \"January, February, March, April, May, June, July, August, September, October, November, December\"\n\nunique(penguins$species)\n\n[1] Adelie    Gentoo    Chinstrap\nLevels: Adelie Chinstrap Gentoo\n\nstr_c(sort(unique(penguins$species)), collapse = \", \")\n\n[1] \"Adelie, Chinstrap, Gentoo\""
  },
  {
    "objectID": "slides/20_strings.html#combining-strings-with-output",
    "href": "slides/20_strings.html#combining-strings-with-output",
    "title": "Strings",
    "section": "Combining strings with output",
    "text": "Combining strings with output\nPasting character vectors with base R paste()\n\nname &lt;- \"Fred\"\nage &lt;- 50\npaste(\"My name is\", name, \", and my age next year is\", age + 1, \".\")\n\n[1] \"My name is Fred , and my age next year is 51 .\"\n\npaste0(\"My name is\", name, \", and my age next year is\", age + 1, \".\")\n\n[1] \"My name isFred, and my age next year is51.\"\n\npaste0(\"My name is \", name, \", and my age next year is \", age + 1, \".\")\n\n[1] \"My name is Fred, and my age next year is 51.\"\n\npaste(\"My name is \", name, \", and my age next year is \", age + 1, \".\", sep = \"\")\n\n[1] \"My name is Fred, and my age next year is 51.\""
  },
  {
    "objectID": "slides/20_strings.html#combining-strings-with-output-1",
    "href": "slides/20_strings.html#combining-strings-with-output-1",
    "title": "Strings",
    "section": "Combining strings with output",
    "text": "Combining strings with output\nGluing character vectors with stringr::str_glue()\n\nstr_glue(\"My name is {name}, and my age next year is {age + 1}.\")\n\nMy name is Fred, and my age next year is 51.\n\nstr_glue(\"My name is {name}, and my age next year is {age + 1}.\", \n         name = \"Jane\", age = 40)\n\nMy name is Jane, and my age next year is 41."
  },
  {
    "objectID": "slides/20_strings.html#combining-strings-with-output-2",
    "href": "slides/20_strings.html#combining-strings-with-output-2",
    "title": "Strings",
    "section": "Combining strings with output",
    "text": "Combining strings with output\nApply to each row of a data frame\n\npenguins |&gt;\n  mutate(full_island = str_glue(\"{island} Island\")) |&gt; \n  arrange(bill_length_mm) |&gt; \n  select(species, island, full_island)\n\n# A tibble: 344 × 3\n   species island    full_island     \n   &lt;fct&gt;   &lt;fct&gt;     &lt;glue&gt;          \n 1 Adelie  Dream     Dream Island    \n 2 Adelie  Dream     Dream Island    \n 3 Adelie  Torgersen Torgersen Island\n 4 Adelie  Dream     Dream Island    \n 5 Adelie  Torgersen Torgersen Island\n 6 Adelie  Torgersen Torgersen Island\n 7 Adelie  Biscoe    Biscoe Island   \n 8 Adelie  Torgersen Torgersen Island\n 9 Adelie  Torgersen Torgersen Island\n10 Adelie  Biscoe    Biscoe Island   \n# ℹ 334 more rows"
  },
  {
    "objectID": "slides/20_strings.html#cheatsheet",
    "href": "slides/20_strings.html#cheatsheet",
    "title": "Strings",
    "section": "Cheatsheet",
    "text": "Cheatsheet"
  },
  {
    "objectID": "slides/20_strings.html#solving-the-problem",
    "href": "slides/20_strings.html#solving-the-problem",
    "title": "Strings",
    "section": "Solving the problem",
    "text": "Solving the problem\n\n\n\ndata1\n\n# A tibble: 12 × 3\n      id cond  resp \n   &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1     1 cond1 yes  \n 2     2 cond2 no   \n 3     3 cond1 yes  \n 4     4 cond2 yes  \n 5     5 cond1 no   \n 6     6 cond2 yes  \n 7     7 cond1 yes  \n 8     8 cond2 no   \n 9     9 cond1 no   \n10    10 cond2 no   \n11    11 cond1 yes  \n12    12 cond2 yes  \n\n\n\n\ndata2\n\n# A tibble: 12 × 4\n      id cond  resp  output                           \n   &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;glue&gt;                           \n 1     1 1     Yes   1 had condition 1 and said \"Yes\" \n 2     2 2     No    2 had condition 2 and said \"No\"  \n 3     3 1     Yes   3 had condition 1 and said \"Yes\" \n 4     4 2     Yes   4 had condition 2 and said \"Yes\" \n 5     5 1     No    5 had condition 1 and said \"No\"  \n 6     6 2     Yes   6 had condition 2 and said \"Yes\" \n 7     7 1     Yes   7 had condition 1 and said \"Yes\" \n 8     8 2     No    8 had condition 2 and said \"No\"  \n 9     9 1     No    9 had condition 1 and said \"No\"  \n10    10 2     No    10 had condition 2 and said \"No\" \n11    11 1     Yes   11 had condition 1 and said \"Yes\"\n12    12 2     Yes   12 had condition 2 and said \"Yes\""
  },
  {
    "objectID": "slides/20_strings.html#lets-code",
    "href": "slides/20_strings.html#lets-code",
    "title": "Strings",
    "section": "Let’s code!",
    "text": "Let’s code!\nStrings [Rmd]"
  },
  {
    "objectID": "slides/22_factors.html#the-problem",
    "href": "slides/22_factors.html#the-problem",
    "title": "Factors",
    "section": "The problem",
    "text": "The problem\nWhat is needed to create data2 from data1?\n\n\n\ndata1\n\n# A tibble: 8 × 2\n  species      n\n  &lt;chr&gt;    &lt;int&gt;\n1 Droid        6\n2 Gungan       3\n3 Human       35\n4 Kaminoan     2\n5 Mirialan     2\n6 Twi'lek      2\n7 Wookiee      2\n8 Zabrak       2\n\n\n\n\ndata2\n\n# A tibble: 4 × 2\n  species     n\n  &lt;fct&gt;   &lt;int&gt;\n1 Human      35\n2 Other      10\n3 Android     6\n4 Gungan      3"
  },
  {
    "objectID": "slides/22_factors.html#factors",
    "href": "slides/22_factors.html#factors",
    "title": "Factors",
    "section": "Factors",
    "text": "Factors\nCategorical variables represented by augmented integers\n\n(x1 &lt;- c(\"Apr\", \"Jun\", \"Oct\", \"Jan\"))\n\n[1] \"Apr\" \"Jun\" \"Oct\" \"Jan\"\n\nmonth.abb\n\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n\n(y1 &lt;- factor(x1))\n\n[1] Apr Jun Oct Jan\nLevels: Apr Jan Jun Oct\n\n\n\n\nclass(y1)\n\n[1] \"factor\"\n\ntypeof(y1)\n\n[1] \"integer\""
  },
  {
    "objectID": "slides/22_factors.html#mental-model",
    "href": "slides/22_factors.html#mental-model",
    "title": "Factors",
    "section": "Mental model",
    "text": "Mental model"
  },
  {
    "objectID": "slides/22_factors.html#viewset-factor-levels",
    "href": "slides/22_factors.html#viewset-factor-levels",
    "title": "Factors",
    "section": "View/set factor levels",
    "text": "View/set factor levels\nlevels()\n\ny1\n\n[1] Apr Jun Oct Jan\nLevels: Apr Jan Jun Oct\n\nlevels(y1)\n\n[1] \"Apr\" \"Jan\" \"Jun\" \"Oct\"\n\n\n\n\n(y2 &lt;- factor(x1, levels = month.abb))\n\n[1] Apr Jun Oct Jan\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\nlevels(y2)\n\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\""
  },
  {
    "objectID": "slides/22_factors.html#label-factors",
    "href": "slides/22_factors.html#label-factors",
    "title": "Factors",
    "section": "Label factors",
    "text": "Label factors\nlabels argument\n\n(y3 &lt;- factor(y1, labels = c(\"April\", \"January\", \"June\", \"October\")))\n\n[1] April   June    October January\nLevels: April January June October\n\n\n\n\n\n\n\n\nNote\n\n\nNote you have to label them in the order they appear as levels."
  },
  {
    "objectID": "slides/22_factors.html#factors-with-forcats",
    "href": "slides/22_factors.html#factors-with-forcats",
    "title": "Factors",
    "section": "Factors with {forcats}",
    "text": "Factors with {forcats}\n\nlibrary(forcats)"
  },
  {
    "objectID": "slides/22_factors.html#data-set",
    "href": "slides/22_factors.html#data-set",
    "title": "Factors",
    "section": "Data set",
    "text": "Data set\n\n\ngss_cat\n\n# A tibble: 21,483 × 9\n    year marital         age race  rincome        partyid    relig denom tvhours\n   &lt;int&gt; &lt;fct&gt;         &lt;int&gt; &lt;fct&gt; &lt;fct&gt;          &lt;fct&gt;      &lt;fct&gt; &lt;fct&gt;   &lt;int&gt;\n 1  2000 Never married    26 White $8000 to 9999  Ind,near … Prot… Sout…      12\n 2  2000 Divorced         48 White $8000 to 9999  Not str r… Prot… Bapt…      NA\n 3  2000 Widowed          67 White Not applicable Independe… Prot… No d…       2\n 4  2000 Never married    39 White Not applicable Ind,near … Orth… Not …       4\n 5  2000 Divorced         25 White Not applicable Not str d… None  Not …       1\n 6  2000 Married          25 White $20000 - 24999 Strong de… Prot… Sout…      NA\n 7  2000 Never married    36 White $25000 or more Not str r… Chri… Not …       3\n 8  2000 Divorced         44 White $7000 to 7999  Ind,near … Prot… Luth…      NA\n 9  2000 Married          44 White $25000 or more Not str d… Prot… Other       0\n10  2000 Married          47 White $25000 or more Strong re… Prot… Sout…       3\n# ℹ 21,473 more rows"
  },
  {
    "objectID": "slides/22_factors.html#check-level-order",
    "href": "slides/22_factors.html#check-level-order",
    "title": "Factors",
    "section": "Check level order",
    "text": "Check level order\n\nlevels(y1)\n\n[1] \"Apr\" \"Jan\" \"Jun\" \"Oct\"\n\n\n\n\n\n\n\n\nNote\n\n\nBy default, level elements are sorted alphabetically."
  },
  {
    "objectID": "slides/22_factors.html#check-level-order-with-pipes",
    "href": "slides/22_factors.html#check-level-order-with-pipes",
    "title": "Factors",
    "section": "Check level order with pipes",
    "text": "Check level order with pipes\n\nmarital &lt;- gss_cat |&gt;\n  pull(marital)\nmarital |&gt; levels()\n\n[1] \"No answer\"     \"Never married\" \"Separated\"     \"Divorced\"     \n[5] \"Widowed\"       \"Married\"      \n\n\n\n\n\n\n\n\nNote\n\n\nHere, order was determined already."
  },
  {
    "objectID": "slides/22_factors.html#reordering-levels",
    "href": "slides/22_factors.html#reordering-levels",
    "title": "Factors",
    "section": "Reordering levels",
    "text": "Reordering levels\nIn the order present in the data with fct_inorder()\n\nhead(marital, 20)\n\n [1] Never married Divorced      Widowed       Never married Divorced     \n [6] Married       Never married Divorced      Married       Married      \n[11] Married       Married       Married       Married       Divorced     \n[16] Married       Widowed       Never married Married       Married      \nLevels: No answer Never married Separated Divorced Widowed Married\n\n\n\n\nmarital |&gt; fct_inorder() |&gt;\n  levels()\n\n[1] \"Never married\" \"Divorced\"      \"Widowed\"       \"Married\"      \n[5] \"Separated\"     \"No answer\""
  },
  {
    "objectID": "slides/22_factors.html#reordering-levels-1",
    "href": "slides/22_factors.html#reordering-levels-1",
    "title": "Factors",
    "section": "Reordering levels",
    "text": "Reordering levels\nIn the order based on number of observations of each level with fct_infreq()\n\ngss_cat |&gt;\n  count(marital, sort = TRUE)\n\n# A tibble: 6 × 2\n  marital           n\n  &lt;fct&gt;         &lt;int&gt;\n1 Married       10117\n2 Never married  5416\n3 Divorced       3383\n4 Widowed        1807\n5 Separated       743\n6 No answer        17\n\n\n\n\nmarital |&gt; fct_infreq() |&gt;\n  levels()\n\n[1] \"Married\"       \"Never married\" \"Divorced\"      \"Widowed\"      \n[5] \"Separated\"     \"No answer\""
  },
  {
    "objectID": "slides/22_factors.html#reordering-levels-2",
    "href": "slides/22_factors.html#reordering-levels-2",
    "title": "Factors",
    "section": "Reordering levels",
    "text": "Reordering levels\nIn reverse order of factor levels with fct_rev()\n\nlevels(marital)\n\n[1] \"No answer\"     \"Never married\" \"Separated\"     \"Divorced\"     \n[5] \"Widowed\"       \"Married\"      \n\nmarital |&gt; fct_rev() |&gt;\n  levels()\n\n[1] \"Married\"       \"Widowed\"       \"Divorced\"      \"Separated\"    \n[5] \"Never married\" \"No answer\""
  },
  {
    "objectID": "slides/22_factors.html#manually-reorder-factor-levels",
    "href": "slides/22_factors.html#manually-reorder-factor-levels",
    "title": "Factors",
    "section": "Manually reorder factor levels",
    "text": "Manually reorder factor levels\nfct_relevel()\n\n(relig_summary &lt;- gss_cat |&gt;\n    group_by(relig) |&gt;\n    summarise(\n      tvhours = mean(tvhours, na.rm = TRUE),\n      n = n()))\n\n# A tibble: 15 × 3\n   relig                   tvhours     n\n   &lt;fct&gt;                     &lt;dbl&gt; &lt;int&gt;\n 1 No answer                  2.72    93\n 2 Don't know                 4.62    15\n 3 Inter-nondenominational    2.87   109\n 4 Native american            3.46    23\n 5 Christian                  2.79   689\n 6 Orthodox-christian         2.42    95\n 7 Moslem/islam               2.44   104\n 8 Other eastern              1.67    32\n 9 Hinduism                   1.89    71\n10 Buddhism                   2.38   147\n11 Other                      2.73   224\n12 None                       2.71  3523\n13 Jewish                     2.52   388\n14 Catholic                   2.96  5124\n15 Protestant                 3.15 10846"
  },
  {
    "objectID": "slides/22_factors.html#manually-reorder-factor-levels-1",
    "href": "slides/22_factors.html#manually-reorder-factor-levels-1",
    "title": "Factors",
    "section": "Manually reorder factor levels",
    "text": "Manually reorder factor levels\nfct_relevel()\n\nrelig_summary |&gt; ggplot(aes(x = tvhours, y = relig)) +\n  geom_point()"
  },
  {
    "objectID": "slides/22_factors.html#manually-reorder-factor-levels-2",
    "href": "slides/22_factors.html#manually-reorder-factor-levels-2",
    "title": "Factors",
    "section": "Manually reorder factor levels",
    "text": "Manually reorder factor levels\nfct_relevel()\n\nrelig_summary_releveled &lt;- relig_summary |&gt;\n  mutate(relig = fct_relevel(relig, c(\"None\", \"Other\"), after = 2))\nlevels(relig_summary_releveled$relig)\n\n [1] \"No answer\"               \"Don't know\"             \n [3] \"None\"                    \"Other\"                  \n [5] \"Inter-nondenominational\" \"Native american\"        \n [7] \"Christian\"               \"Orthodox-christian\"     \n [9] \"Moslem/islam\"            \"Other eastern\"          \n[11] \"Hinduism\"                \"Buddhism\"               \n[13] \"Jewish\"                  \"Catholic\"               \n[15] \"Protestant\"              \"Not applicable\""
  },
  {
    "objectID": "slides/22_factors.html#manually-reorder-factor-levels-3",
    "href": "slides/22_factors.html#manually-reorder-factor-levels-3",
    "title": "Factors",
    "section": "Manually reorder factor levels",
    "text": "Manually reorder factor levels\nfct_relevel()\n\nrelig_summary_releveled |&gt; ggplot(aes(x = tvhours, y = relig)) +\n  geom_point()"
  },
  {
    "objectID": "slides/22_factors.html#order-factors-by-another-variable",
    "href": "slides/22_factors.html#order-factors-by-another-variable",
    "title": "Factors",
    "section": "Order factors by another variable",
    "text": "Order factors by another variable\nfct_reorder()\n\nrelig_summary |&gt; mutate(relig = fct_reorder(relig, tvhours)) |&gt;\n  ggplot(aes(x = tvhours, y = relig)) +\n  geom_point()"
  },
  {
    "objectID": "slides/22_factors.html#order-factors-by-another-variable-1",
    "href": "slides/22_factors.html#order-factors-by-another-variable-1",
    "title": "Factors",
    "section": "Order factors by another variable",
    "text": "Order factors by another variable\nfct_reorder()\n\nggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) +\n  geom_point()"
  },
  {
    "objectID": "slides/22_factors.html#recode-factor-levels",
    "href": "slides/22_factors.html#recode-factor-levels",
    "title": "Factors",
    "section": "Recode factor levels",
    "text": "Recode factor levels\nfct_recode()\n\ngss_cat |&gt;\n  count(partyid)\n\n# A tibble: 10 × 2\n   partyid                n\n   &lt;fct&gt;              &lt;int&gt;\n 1 No answer            154\n 2 Don't know             1\n 3 Other party          393\n 4 Strong republican   2314\n 5 Not str republican  3032\n 6 Ind,near rep        1791\n 7 Independent         4119\n 8 Ind,near dem        2499\n 9 Not str democrat    3690\n10 Strong democrat     3490"
  },
  {
    "objectID": "slides/22_factors.html#recode-factor-levels-1",
    "href": "slides/22_factors.html#recode-factor-levels-1",
    "title": "Factors",
    "section": "Recode factor levels",
    "text": "Recode factor levels\nfct_recode()\n\n\ngss_cat |&gt;\n  mutate(partyid = fct_recode(partyid,\n                              \"Republican, strong\"    = \"Strong republican\",\n                              \"Republican, weak\"      = \"Not str republican\",\n                              \"Independent, near rep\" = \"Ind,near rep\",\n                              \"Independent, near dem\" = \"Ind,near dem\",\n                              \"Democrat, weak\"        = \"Not str democrat\",\n                              \"Democrat, strong\"      = \"Strong democrat\"\n  )) |&gt;\n  count(partyid)\n\n# A tibble: 10 × 2\n   partyid                   n\n   &lt;fct&gt;                 &lt;int&gt;\n 1 No answer               154\n 2 Don't know                1\n 3 Other party             393\n 4 Republican, strong     2314\n 5 Republican, weak       3032\n 6 Independent, near rep  1791\n 7 Independent            4119\n 8 Independent, near dem  2499\n 9 Democrat, weak         3690\n10 Democrat, strong       3490"
  },
  {
    "objectID": "slides/22_factors.html#recode-factor-levels-2",
    "href": "slides/22_factors.html#recode-factor-levels-2",
    "title": "Factors",
    "section": "Recode factor levels",
    "text": "Recode factor levels\nfct_recode()\n\n\ngss_cat |&gt;\n  mutate(partyid = fct_recode(partyid,\n                              \"Independent, near rep\" = \"Ind,near rep\",\n                              \"Independent, near dem\" = \"Ind,near dem\",\n  )) |&gt;\n  count(partyid)\n\n# A tibble: 10 × 2\n   partyid                   n\n   &lt;fct&gt;                 &lt;int&gt;\n 1 No answer               154\n 2 Don't know                1\n 3 Other party             393\n 4 Strong republican      2314\n 5 Not str republican     3032\n 6 Independent, near rep  1791\n 7 Independent            4119\n 8 Independent, near dem  2499\n 9 Not str democrat       3690\n10 Strong democrat        3490"
  },
  {
    "objectID": "slides/22_factors.html#collapse-multiple-levels",
    "href": "slides/22_factors.html#collapse-multiple-levels",
    "title": "Factors",
    "section": "Collapse multiple levels",
    "text": "Collapse multiple levels\nfct_collapse()\n\n\ngss_cat |&gt;\n  mutate(partyid = fct_collapse(partyid,\n                                \"other\" = c(\"No answer\", \"Don't know\", \"Other party\"),\n                                \"rep\" = c(\"Strong republican\", \"Not str republican\"),\n                                \"ind\" = c(\"Ind,near rep\", \"Independent\", \"Ind,near dem\"),\n                                \"dem\" = c(\"Not str democrat\", \"Strong democrat\")\n  )) |&gt;\n  count(partyid)\n\n# A tibble: 4 × 2\n  partyid     n\n  &lt;fct&gt;   &lt;int&gt;\n1 other     548\n2 rep      5346\n3 ind      8409\n4 dem      7180"
  },
  {
    "objectID": "slides/22_factors.html#combine-factor-levels",
    "href": "slides/22_factors.html#combine-factor-levels",
    "title": "Factors",
    "section": "Combine factor levels",
    "text": "Combine factor levels\nBased on number of groups: fct_lump_n()\n\ngss_cat |&gt;\n  mutate(relig = fct_lump_n(relig, n = 5)) |&gt;\n  count(relig, sort = TRUE)\n\n# A tibble: 6 × 2\n  relig          n\n  &lt;fct&gt;      &lt;int&gt;\n1 Protestant 10846\n2 Catholic    5124\n3 None        3523\n4 Other        913\n5 Christian    689\n6 Jewish       388"
  },
  {
    "objectID": "slides/22_factors.html#combine-factor-levels-1",
    "href": "slides/22_factors.html#combine-factor-levels-1",
    "title": "Factors",
    "section": "Combine factor levels",
    "text": "Combine factor levels\nBased on proportion of total: fct_lump_prop()\n\ngss_cat |&gt;\n  mutate(relig = fct_lump_prop(relig, prop = 0.1, \n                               other_level = \"Something else\")) |&gt;\n  count(relig, sort = TRUE)\n\n# A tibble: 4 × 2\n  relig              n\n  &lt;fct&gt;          &lt;int&gt;\n1 Protestant     10846\n2 Catholic        5124\n3 None            3523\n4 Something else  1990"
  },
  {
    "objectID": "slides/22_factors.html#combine-factor-levels-2",
    "href": "slides/22_factors.html#combine-factor-levels-2",
    "title": "Factors",
    "section": "Combine factor levels",
    "text": "Combine factor levels\nBased on minimum number: fct_lump_min()\n\ngss_cat |&gt;\n  mutate(relig = fct_lump_min(relig, min = 200)) |&gt;\n  count(relig, sort = TRUE)\n\n# A tibble: 6 × 2\n  relig          n\n  &lt;fct&gt;      &lt;int&gt;\n1 Protestant 10846\n2 Catholic    5124\n3 None        3523\n4 Other        913\n5 Christian    689\n6 Jewish       388"
  },
  {
    "objectID": "slides/22_factors.html#solving-the-problem",
    "href": "slides/22_factors.html#solving-the-problem",
    "title": "Factors",
    "section": "Solving the problem",
    "text": "Solving the problem\nWhat code generates data2 from data1?\n\n\n\ndata1\n\n# A tibble: 8 × 2\n  species      n\n  &lt;chr&gt;    &lt;int&gt;\n1 Droid        6\n2 Gungan       3\n3 Human       35\n4 Kaminoan     2\n5 Mirialan     2\n6 Twi'lek      2\n7 Wookiee      2\n8 Zabrak       2\n\n\n\n\ndata2\n\n# A tibble: 4 × 2\n  species     n\n  &lt;fct&gt;   &lt;int&gt;\n1 Human      35\n2 Other      10\n3 Android     6\n4 Gungan      3"
  },
  {
    "objectID": "slides/22_factors.html#lets-code",
    "href": "slides/22_factors.html#lets-code",
    "title": "Factors",
    "section": "Let’s code!",
    "text": "Let’s code!\nFactors [Rmd]"
  },
  {
    "objectID": "slides/24_functions.html#set-up",
    "href": "slides/24_functions.html#set-up",
    "title": "Functions",
    "section": "Set-up",
    "text": "Set-up\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "slides/24_functions.html#why-write-your-own-functions",
    "href": "slides/24_functions.html#why-write-your-own-functions",
    "title": "Functions",
    "section": "Why write your own functions?",
    "text": "Why write your own functions?"
  },
  {
    "objectID": "slides/24_functions.html#creating-functions-1",
    "href": "slides/24_functions.html#creating-functions-1",
    "title": "Functions",
    "section": "Creating functions",
    "text": "Creating functions\n\nfunctionname &lt;- function(argument1, argument2) {\n  # Function contents\n}"
  },
  {
    "objectID": "slides/24_functions.html#creating-functions-2",
    "href": "slides/24_functions.html#creating-functions-2",
    "title": "Functions",
    "section": "Creating functions",
    "text": "Creating functions\n\nmymean &lt;- function(x) {\n  sum(x) / length(x)\n}\n\n\n\nmymean(mtcars$mpg)\n\n[1] 20.09062\n\nmean(mtcars$mpg)\n\n[1] 20.09062"
  },
  {
    "objectID": "slides/24_functions.html#multi-line-functions",
    "href": "slides/24_functions.html#multi-line-functions",
    "title": "Functions",
    "section": "Multi-line functions",
    "text": "Multi-line functions\n\nmymean2 &lt;- function(x) {\n  mysum &lt;- sum(x)\n  mysum_divided &lt;- mysum / length(x)\n}\n\n\n\nmymean2(mtcars$mpg)\n\nWhy no output?\n\n\n\n(mymean_obj &lt;- mymean2(mtcars$mpg))\n\n[1] 20.09062"
  },
  {
    "objectID": "slides/24_functions.html#returning-output",
    "href": "slides/24_functions.html#returning-output",
    "title": "Functions",
    "section": "Returning output",
    "text": "Returning output\nDon’t assign last step to object\n\nmymean3 &lt;- function(x) {\n  mysum &lt;- sum(x)\n  mysum / length(x)\n}\n\nmymean3(mtcars$mpg)\n\n[1] 20.09062"
  },
  {
    "objectID": "slides/24_functions.html#returning-output-1",
    "href": "slides/24_functions.html#returning-output-1",
    "title": "Functions",
    "section": "Returning output",
    "text": "Returning output\nOr use return()\n\nmymean4 &lt;- function(x) {\n  mysum &lt;- sum(x)\n  mysum_divided &lt;- mysum / length(x)\n  return(mysum_divided)\n}\n\nmymean4(mtcars$mpg)\n\n[1] 20.09062"
  },
  {
    "objectID": "slides/24_functions.html#return-multiple-output-values",
    "href": "slides/24_functions.html#return-multiple-output-values",
    "title": "Functions",
    "section": "Return multiple output values",
    "text": "Return multiple output values\nlist()\n\nmymean5 &lt;- function(x) {\n  mysum &lt;- sum(x)\n  mysum_divided &lt;- mysum / length(x)\n  list(sum = mysum, mean = mysum_divided)\n}\n\nmymean5(mtcars$mpg)\n\n$sum\n[1] 642.9\n\n$mean\n[1] 20.09062"
  },
  {
    "objectID": "slides/24_functions.html#save-intermediate-objects",
    "href": "slides/24_functions.html#save-intermediate-objects",
    "title": "Functions",
    "section": "Save intermediate objects",
    "text": "Save intermediate objects\n\nmymean6 &lt;- function(x) {\n  mysum &lt;&lt;- sum(x)\n  mysum / length(x)\n}\n\nmymean6(mtcars$mpg)\n\n[1] 20.09062\n\n\n\n\n\n\n\n\nNote\n\n\nThis is fine when testing out a function but probably not great practice ‘in production’. Why?"
  },
  {
    "objectID": "slides/24_functions.html#print-messages-to-console",
    "href": "slides/24_functions.html#print-messages-to-console",
    "title": "Functions",
    "section": "Print messages to console",
    "text": "Print messages to console\n\nmymean7 &lt;- function(x) {\n  mysum &lt;- sum(x)\n  print(mysum)\n  mysum / length(x)\n}\n\nmymean7(mtcars$mpg)\n\n[1] 642.9\n\n\n[1] 20.09062"
  },
  {
    "objectID": "slides/24_functions.html#print-messages-to-console-1",
    "href": "slides/24_functions.html#print-messages-to-console-1",
    "title": "Functions",
    "section": "Print messages to console",
    "text": "Print messages to console\n\nmymean8 &lt;- function(x) {\n  mysum &lt;- sum(x)\n  print(paste0(\"The sum is: \", mysum))\n  mysum / length(x)\n}\n\nmymean8(mtcars$mpg)\n\n[1] \"The sum is: 642.9\"\n\n\n[1] 20.09062"
  },
  {
    "objectID": "slides/24_functions.html#print-messages-to-console-2",
    "href": "slides/24_functions.html#print-messages-to-console-2",
    "title": "Functions",
    "section": "Print messages to console",
    "text": "Print messages to console\n\nmymean9 &lt;- function(x) {\n  mysum &lt;- sum(x)\n  message(paste0(\"The sum is: \", mysum))\n  mysum / length(x)\n}\n\nmymean9(mtcars$mpg)\n\nThe sum is: 642.9\n\n\n[1] 20.09062\n\n\n\n\n\n\n\n\nNote\n\n\nCheck out {cli} package for powerful messaging."
  },
  {
    "objectID": "slides/24_functions.html#arguments-1",
    "href": "slides/24_functions.html#arguments-1",
    "title": "Functions",
    "section": "Arguments",
    "text": "Arguments\n\nmultiplier &lt;- function(x, constant) {\n  x * constant\n}\n\n\n\nmultiplier(x = 7, constant = 3)\n\n[1] 21\n\nmultiplier(x = 1:10, constant = 3)\n\n [1]  3  6  9 12 15 18 21 24 27 30\n\n\n\nmultiplier(x = 1:10)\n\nError in multiplier(x = 1:10) : \nargument \"constant\" is missing, with no default"
  },
  {
    "objectID": "slides/24_functions.html#argument-default-values",
    "href": "slides/24_functions.html#argument-default-values",
    "title": "Functions",
    "section": "Argument default values",
    "text": "Argument default values\n\nmultiplier2 &lt;- function(x, constant = 3) {\n  x * constant\n}\n\n\nmultiplier2(x = 1:10)\n\n [1]  3  6  9 12 15 18 21 24 27 30\n\nmultiplier2(x = 1:10, constant = 5)\n\n [1]  5 10 15 20 25 30 35 40 45 50"
  },
  {
    "objectID": "slides/24_functions.html#lets-write-a-function",
    "href": "slides/24_functions.html#lets-write-a-function",
    "title": "Functions",
    "section": "Let’s write a function!",
    "text": "Let’s write a function!\nHere’s the formula that reverse codes scale values\nValuemax+ Valuemin-Score\nWrite a function that calculates the reversed code score. What arguments do you need?"
  },
  {
    "objectID": "slides/24_functions.html#conditional-execution-1",
    "href": "slides/24_functions.html#conditional-execution-1",
    "title": "Functions",
    "section": "Conditional execution",
    "text": "Conditional execution\n\nhead(penguins[, 1:5])\n\n# A tibble: 6 × 5\n  species island    bill_length_mm bill_depth_mm flipper_length_mm\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181\n2 Adelie  Torgersen           39.5          17.4               186\n3 Adelie  Torgersen           40.3          18                 195\n4 Adelie  Torgersen           NA            NA                  NA\n5 Adelie  Torgersen           36.7          19.3               193\n6 Adelie  Torgersen           39.3          20.6               190\n\n\n\nmymean6(penguins$bill_length_mm)\n\n[1] NA"
  },
  {
    "objectID": "slides/24_functions.html#conditional-execution-2",
    "href": "slides/24_functions.html#conditional-execution-2",
    "title": "Functions",
    "section": "Conditional execution",
    "text": "Conditional execution\n\nhead(penguins[, 1:5])\n\n# A tibble: 6 × 5\n  species island    bill_length_mm bill_depth_mm flipper_length_mm\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181\n2 Adelie  Torgersen           39.5          17.4               186\n3 Adelie  Torgersen           40.3          18                 195\n4 Adelie  Torgersen           NA            NA                  NA\n5 Adelie  Torgersen           36.7          19.3               193\n6 Adelie  Torgersen           39.3          20.6               190\n\n\n\nmymean10 &lt;- function(x) {\n  sum(x, na.rm = TRUE) / sum(!is.na(x))\n}\n\n\nmymean10(penguins$bill_length_mm)\n\n[1] 43.92193"
  },
  {
    "objectID": "slides/24_functions.html#conditional-execution-3",
    "href": "slides/24_functions.html#conditional-execution-3",
    "title": "Functions",
    "section": "Conditional execution",
    "text": "Conditional execution\nBut if you want the user to control whether NA is ignored\n\nmymean11 &lt;- function(x, ignore_na = TRUE) {\n  if (ignore_na) {\n    sum(x, na.rm = TRUE) / sum(!is.na(x))\n  } else {\n    sum(x) / length(x)\n  }\n}\n\n\nmymean11(penguins$bill_length_mm)\n\n[1] 43.92193\n\nmymean11(penguins$bill_length_mm, ignore_na = FALSE)\n\n[1] NA"
  },
  {
    "objectID": "slides/24_functions.html#multiple-conditions",
    "href": "slides/24_functions.html#multiple-conditions",
    "title": "Functions",
    "section": "Multiple conditions",
    "text": "Multiple conditions\nUse else if\n\nage_cutoffs &lt;- function(x) {\n  if(x &lt;= 1.5) {\n    \"puppy\"\n  } else if (x &lt;= 3) {\n    \"adolescent\"\n  } else if (x &lt;= 10) {\n    \"adult\"\n  } else {\n    \"senior\"\n  }\n}\n\n\n\nage_cutoffs(1)\n\n[1] \"puppy\"\n\nage_cutoffs(2)\n\n[1] \"adolescent\"\n\nage_cutoffs(5)\n\n[1] \"adult\""
  },
  {
    "objectID": "slides/24_functions.html#stopping-based-on-conditionals",
    "href": "slides/24_functions.html#stopping-based-on-conditionals",
    "title": "Functions",
    "section": "Stopping based on conditionals",
    "text": "Stopping based on conditionals\n\nage_cutoffs2 &lt;- function(x) {\n  if(x &lt;= 1.5) {\n    \"puppy\"\n  } else if (x &lt;= 3) {\n    \"adolescent\"\n  } else if (x &lt;= 10) {\n    \"adult\"\n  } else if (x &lt;= 20) {\n    \"senior\"\n  } else {\n    stop(\"Age exceeded 20.\")\n  }\n}\n\n\n\nage_cutoffs2(15)\n\n[1] \"senior\"\n\n\n\nage_cutoffs2(22)\n\nError in age_cutoffs2(22) : Age exceeded 20."
  },
  {
    "objectID": "slides/24_functions.html#multiple-conditions-1",
    "href": "slides/24_functions.html#multiple-conditions-1",
    "title": "Functions",
    "section": "Multiple conditions",
    "text": "Multiple conditions\nUse switch()\n\ncentral_tend &lt;- function(x, type) {\n  switch(type,\n         mean = mean(x),\n         median = median(x),\n         trimmed = mean(x, trim = .1))\n}\n\n\n\nvector &lt;- rcauchy(100)\ncentral_tend(x = vector, type = \"mean\")\n\n[1] 2.147845\n\ncentral_tend(x = vector, type = \"median\")\n\n[1] 0.1206182\n\ncentral_tend(x = vector, type = \"trimmed\")\n\n[1] 0.4479796"
  },
  {
    "objectID": "slides/24_functions.html#creating-functions-in-tidyverse",
    "href": "slides/24_functions.html#creating-functions-in-tidyverse",
    "title": "Functions",
    "section": "Creating functions in tidyverse",
    "text": "Creating functions in tidyverse\n\nmean_species_bill &lt;- function(df) {\n  df |&gt; \n    group_by(species) |&gt; \n    summarise(mean(bill_length_mm, na.rm = TRUE))\n}\n\nmean_species_bill(penguins)\n\n# A tibble: 3 × 2\n  species   `mean(bill_length_mm, na.rm = TRUE)`\n  &lt;fct&gt;                                    &lt;dbl&gt;\n1 Adelie                                    38.8\n2 Chinstrap                                 48.8\n3 Gentoo                                    47.5"
  },
  {
    "objectID": "slides/24_functions.html#creating-functions-in-tidyverse-1",
    "href": "slides/24_functions.html#creating-functions-in-tidyverse-1",
    "title": "Functions",
    "section": "Creating functions in tidyverse",
    "text": "Creating functions in tidyverse\nWhat if we want user to input grouping and response variable?\n\ngrouped_mean &lt;- function(df, group_var, mean_var) {\n  df |&gt; \n    group_by(group_var) |&gt; \n    summarise(mean(mean_var, na.rm = TRUE))\n}\n\n\n\npenguins |&gt; \n  grouped_mean(group_var = species, mean_var = bill_length_mm)\n\nError in `group_by()`:\n! Must group by variables found in `.data`.\n✖ Column `group_var` is not found.\nRun `rlang::last_trace()` to see where the error occurred."
  },
  {
    "objectID": "slides/24_functions.html#embracing",
    "href": "slides/24_functions.html#embracing",
    "title": "Functions",
    "section": "Embracing",
    "text": "Embracing\nEmbrace variables in { }\n\ngrouped_mean2 &lt;- function(df, group_var, mean_var) {\n  df |&gt; \n    group_by({{ group_var }}) |&gt; \n    summarize(mean({{ mean_var }}, na.rm = TRUE))\n}\n\n\npenguins |&gt; \n  grouped_mean2(group_var = species, mean_var = bill_length_mm)\n\n# A tibble: 3 × 2\n  species   `mean(bill_length_mm, na.rm = TRUE)`\n  &lt;fct&gt;                                    &lt;dbl&gt;\n1 Adelie                                    38.8\n2 Chinstrap                                 48.8\n3 Gentoo                                    47.5"
  },
  {
    "objectID": "slides/24_functions.html#lets-code",
    "href": "slides/24_functions.html#lets-code",
    "title": "Functions",
    "section": "Let’s code!",
    "text": "Let’s code!\nFunctions [Rmd]"
  },
  {
    "objectID": "slides/26_grammar1.html#set-up",
    "href": "slides/26_grammar1.html#set-up",
    "title": "Grammar of graphics",
    "section": "Set-up",
    "text": "Set-up\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "slides/26_grammar1.html#plotting-with-ggplot2",
    "href": "slides/26_grammar1.html#plotting-with-ggplot2",
    "title": "Grammar of graphics",
    "section": "Plotting with {ggplot2}",
    "text": "Plotting with {ggplot2}\n\nlibrary(ggplot2)\n\n\n\n\n\n\n\n\nSource: Allison Horst"
  },
  {
    "objectID": "slides/26_grammar1.html#grammar-of-graphics",
    "href": "slides/26_grammar1.html#grammar-of-graphics",
    "title": "Grammar of graphics",
    "section": "Grammar of graphics",
    "text": "Grammar of graphics"
  },
  {
    "objectID": "slides/26_grammar1.html#seven-componentslayers-of-ggplots",
    "href": "slides/26_grammar1.html#seven-componentslayers-of-ggplots",
    "title": "Grammar of graphics",
    "section": "Seven components/layers of ggplots",
    "text": "Seven components/layers of ggplots\n\nData\nMappings – maps data to properties of geom\nGeom – represents data\nStat – transforms data\nPosition – control placement of data on coordinate\nFacet – split graph into subplots\nCoordinate – places data in coordinate system"
  },
  {
    "objectID": "slides/26_grammar1.html#seven-componentslayers-of-ggplots-1",
    "href": "slides/26_grammar1.html#seven-componentslayers-of-ggplots-1",
    "title": "Grammar of graphics",
    "section": "Seven components/layers of ggplots",
    "text": "Seven components/layers of ggplots\n\n\nggplot(data = DATA) +\n  GEOM_FUNCTION(\n    mapping = aes(MAPPINGS),\n    stat = STAT,\n    position = POSITION\n  ) +\n  COORDINATE_FUNCTION +\n  FACET_FUNCTION"
  },
  {
    "objectID": "slides/26_grammar1.html#full-specification-of-plot",
    "href": "slides/26_grammar1.html#full-specification-of-plot",
    "title": "Grammar of graphics",
    "section": "Full specification of plot",
    "text": "Full specification of plot\n\nggplot(data = penguins) +\n  geom_point(\n    mapping = aes(x = bill_length_mm, y = bill_depth_mm),\n    stat = \"identity\",\n    position = \"identity\"\n  ) +\n  coord_cartesian() +\n  facet_null()"
  },
  {
    "objectID": "slides/26_grammar1.html#tidy-data",
    "href": "slides/26_grammar1.html#tidy-data",
    "title": "Grammar of graphics",
    "section": "Tidy data",
    "text": "Tidy data\nData should be in tidy format for ggplots\n\n\nmpg\n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows"
  },
  {
    "objectID": "slides/26_grammar1.html#data-to-ggplot",
    "href": "slides/26_grammar1.html#data-to-ggplot",
    "title": "Grammar of graphics",
    "section": "Data to ggplot",
    "text": "Data to ggplot\nData inside ggplot()\n\nggplot(data = mpg)"
  },
  {
    "objectID": "slides/26_grammar1.html#data-to-ggplot-1",
    "href": "slides/26_grammar1.html#data-to-ggplot-1",
    "title": "Grammar of graphics",
    "section": "Data to ggplot",
    "text": "Data to ggplot\nData piped to ggplot()\n\nmpg |&gt;\n  ggplot()"
  },
  {
    "objectID": "slides/26_grammar1.html#data-to-ggplot-2",
    "href": "slides/26_grammar1.html#data-to-ggplot-2",
    "title": "Grammar of graphics",
    "section": "Data to ggplot",
    "text": "Data to ggplot\nProcess data before plotting\n\nmpg |&gt;\n  filter(class != \"2seater\") |&gt;\n  mutate(class = str_to_sentence(class)) |&gt;\n  ggplot()"
  },
  {
    "objectID": "slides/26_grammar1.html#map-data-to-positions",
    "href": "slides/26_grammar1.html#map-data-to-positions",
    "title": "Grammar of graphics",
    "section": "Map data to positions",
    "text": "Map data to positions\nSpecify columns for x and y\n\n#\nggplot(data = mpg, mapping = aes(x = displ, y = hwy))"
  },
  {
    "objectID": "slides/26_grammar1.html#map-data-to-positions-1",
    "href": "slides/26_grammar1.html#map-data-to-positions-1",
    "title": "Grammar of graphics",
    "section": "Map data to positions",
    "text": "Map data to positions\nEquivalent but not ideal. Why?\n\n#\nggplot(mpg, aes(displ, hwy))"
  },
  {
    "objectID": "slides/26_grammar1.html#map-data-to-positions-2",
    "href": "slides/26_grammar1.html#map-data-to-positions-2",
    "title": "Grammar of graphics",
    "section": "Map data to positions",
    "text": "Map data to positions\nThis is how we’ll do it\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy))"
  },
  {
    "objectID": "slides/26_grammar1.html#geoms",
    "href": "slides/26_grammar1.html#geoms",
    "title": "Grammar of graphics",
    "section": "Geoms",
    "text": "Geoms\nThere are many different ways of representing data on a plot"
  },
  {
    "objectID": "slides/26_grammar1.html#plot-points",
    "href": "slides/26_grammar1.html#plot-points",
    "title": "Grammar of graphics",
    "section": "Plot points",
    "text": "Plot points\nAdd geom_point()\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point()"
  },
  {
    "objectID": "slides/26_grammar1.html#plot-points-1",
    "href": "slides/26_grammar1.html#plot-points-1",
    "title": "Grammar of graphics",
    "section": "Plot points",
    "text": "Plot points\nHow is this different? What are advantages/disadvantages?\n\nmpg |&gt;\n  ggplot() +\n  geom_point(aes(x = displ, y = hwy))"
  },
  {
    "objectID": "slides/26_grammar1.html#plot-smooth-lines",
    "href": "slides/26_grammar1.html#plot-smooth-lines",
    "title": "Grammar of graphics",
    "section": "Plot smooth lines",
    "text": "Plot smooth lines\n\n#\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_smooth()"
  },
  {
    "objectID": "slides/26_grammar1.html#plot-multiple-geoms",
    "href": "slides/26_grammar1.html#plot-multiple-geoms",
    "title": "Grammar of graphics",
    "section": "Plot multiple geoms",
    "text": "Plot multiple geoms\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth()"
  },
  {
    "objectID": "slides/26_grammar1.html#order-matters",
    "href": "slides/26_grammar1.html#order-matters",
    "title": "Grammar of graphics",
    "section": "Order matters",
    "text": "Order matters\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_smooth() +\n  geom_point()"
  },
  {
    "objectID": "slides/26_grammar1.html#plot-linear-regression-line",
    "href": "slides/26_grammar1.html#plot-linear-regression-line",
    "title": "Grammar of graphics",
    "section": "Plot linear regression line",
    "text": "Plot linear regression line\n\nmpg |&gt;\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")"
  },
  {
    "objectID": "slides/26_grammar1.html#plot-boxplots",
    "href": "slides/26_grammar1.html#plot-boxplots",
    "title": "Grammar of graphics",
    "section": "Plot boxplots",
    "text": "Plot boxplots\n\nmpg |&gt;\n  ggplot(aes(x = class, y = displ)) +\n  geom_boxplot()"
  },
  {
    "objectID": "slides/26_grammar1.html#lets-code",
    "href": "slides/26_grammar1.html#lets-code",
    "title": "Grammar of graphics",
    "section": "Let’s code!",
    "text": "Let’s code!\nGrammar of graphics [Rmd]"
  },
  {
    "objectID": "slides/28_themes.html#edward-tufte",
    "href": "slides/28_themes.html#edward-tufte",
    "title": "Design and themes",
    "section": "Edward Tufte",
    "text": "Edward Tufte"
  },
  {
    "objectID": "slides/28_themes.html#graphical-excellence",
    "href": "slides/28_themes.html#graphical-excellence",
    "title": "Design and themes",
    "section": "Graphical excellence",
    "text": "Graphical excellence\nCommunicating complex ideas with clarity, precision, and efficiency"
  },
  {
    "objectID": "slides/28_themes.html#graphical-excellence-1",
    "href": "slides/28_themes.html#graphical-excellence-1",
    "title": "Design and themes",
    "section": "Graphical excellence",
    "text": "Graphical excellence\nCommunicating complex ideas with clarity, precision, and efficiency\n\nWell-designed presentation of interesting data\nGives to the viewer the greatest number of ideas in the shortest time with the least ink in the smallest space\nMultivariate\nRequires telling the truth about data"
  },
  {
    "objectID": "slides/28_themes.html#graphical-integrity",
    "href": "slides/28_themes.html#graphical-integrity",
    "title": "Design and themes",
    "section": "Graphical integrity",
    "text": "Graphical integrity\nTell the truth about the data"
  },
  {
    "objectID": "slides/28_themes.html#graphical-integrity-1",
    "href": "slides/28_themes.html#graphical-integrity-1",
    "title": "Design and themes",
    "section": "Graphical integrity",
    "text": "Graphical integrity\nWilke’s Principle of Proportional ink\nThe representation of numbers, as physically measured on the surface of the graphic itself, should be directly proportional to the numerical quantities represented"
  },
  {
    "objectID": "slides/28_themes.html#graphical-integrity-2",
    "href": "slides/28_themes.html#graphical-integrity-2",
    "title": "Design and themes",
    "section": "Graphical integrity",
    "text": "Graphical integrity\nPerceptions of length and area do not match (and we’re bad at judging area)"
  },
  {
    "objectID": "slides/28_themes.html#data-ink-ratio",
    "href": "slides/28_themes.html#data-ink-ratio",
    "title": "Design and themes",
    "section": "Data-ink ratio",
    "text": "Data-ink ratio\nData-ink: the non-erasable core of a graphic, the non-redundant ink arranged in response to variation in the numbers represented\nData-ink ratio: amount of data-ink divided by total ink used to print the graphic"
  },
  {
    "objectID": "slides/28_themes.html#data-ink-ratio-1",
    "href": "slides/28_themes.html#data-ink-ratio-1",
    "title": "Design and themes",
    "section": "Data-ink ratio",
    "text": "Data-ink ratio\n\n\nTukey boxplot\n\n\n\n\n\n\n\n\n\nTufte “box” plot"
  },
  {
    "objectID": "slides/28_themes.html#data-ink-ratio-2",
    "href": "slides/28_themes.html#data-ink-ratio-2",
    "title": "Design and themes",
    "section": "Data-ink ratio",
    "text": "Data-ink ratio\n\nAbove all else show the data\nMaximize the data-ink ratio\nErase non-data-ink\nErase redundant data-ink"
  },
  {
    "objectID": "slides/28_themes.html#chartjunk",
    "href": "slides/28_themes.html#chartjunk",
    "title": "Design and themes",
    "section": "Chartjunk",
    "text": "Chartjunk\nNon-data-ink or redundant data-ink that does not tell the viewer anything new"
  },
  {
    "objectID": "slides/28_themes.html#themes-1",
    "href": "slides/28_themes.html#themes-1",
    "title": "Design and themes",
    "section": "Themes",
    "text": "Themes"
  },
  {
    "objectID": "slides/28_themes.html#set-up",
    "href": "slides/28_themes.html#set-up",
    "title": "Design and themes",
    "section": "Set-up",
    "text": "Set-up\n\nlibrary(tidyverse)\n\nSwitch to R script"
  },
  {
    "objectID": "slides/28_themes.html#lets-code",
    "href": "slides/28_themes.html#lets-code",
    "title": "Design and themes",
    "section": "Let’s code!",
    "text": "Let’s code!\nThemes [Rmd]"
  },
  {
    "objectID": "slides/40_publications.html#templates",
    "href": "slides/40_publications.html#templates",
    "title": "Publications",
    "section": "Templates",
    "text": "Templates\n{rticles}"
  },
  {
    "objectID": "slides/40_publications.html#apa-template",
    "href": "slides/40_publications.html#apa-template",
    "title": "Publications",
    "section": "APA template",
    "text": "APA template\n{papaja}"
  },
  {
    "objectID": "slides/40_publications.html#apa-template-1",
    "href": "slides/40_publications.html#apa-template-1",
    "title": "Publications",
    "section": "APA template",
    "text": "APA template\n{papaja}\n\n\nYAML header\nr_refs() and cite_r()\nAPA 7"
  },
  {
    "objectID": "slides/40_publications.html#quarto-apa-template",
    "href": "slides/40_publications.html#quarto-apa-template",
    "title": "Publications",
    "section": "Quarto APA template",
    "text": "Quarto APA template\n\nqapaja\napaquarto\nHikmah Quarto templates"
  },
  {
    "objectID": "slides/40_publications.html#extracting-statistics-1",
    "href": "slides/40_publications.html#extracting-statistics-1",
    "title": "Publications",
    "section": "Extracting statistics",
    "text": "Extracting statistics\n\napa_print()"
  },
  {
    "objectID": "slides/40_publications.html#run-a-t-test",
    "href": "slides/40_publications.html#run-a-t-test",
    "title": "Publications",
    "section": "Run a t-test",
    "text": "Run a t-test\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\n(penguin_ttest &lt;- t.test(formula = bill_length_mm ~ sex, data = penguins))\n\n\n    Welch Two Sample t-test\n\ndata:  bill_length_mm by sex\nt = -6.6725, df = 329.29, p-value = 1.066e-10\nalternative hypothesis: true difference in means between group female and group male is not equal to 0\n95 percent confidence interval:\n -4.865676 -2.649908\nsample estimates:\nmean in group female   mean in group male \n            42.09697             45.85476"
  },
  {
    "objectID": "slides/40_publications.html#view-structure-of-a-t-test",
    "href": "slides/40_publications.html#view-structure-of-a-t-test",
    "title": "Publications",
    "section": "View structure of a t-test",
    "text": "View structure of a t-test\n\nstr(penguin_ttest)\n\nList of 10\n $ statistic  : Named num -6.67\n  ..- attr(*, \"names\")= chr \"t\"\n $ parameter  : Named num 329\n  ..- attr(*, \"names\")= chr \"df\"\n $ p.value    : num 1.07e-10\n $ conf.int   : num [1:2] -4.87 -2.65\n  ..- attr(*, \"conf.level\")= num 0.95\n $ estimate   : Named num [1:2] 42.1 45.9\n  ..- attr(*, \"names\")= chr [1:2] \"mean in group female\" \"mean in group male\"\n $ null.value : Named num 0\n  ..- attr(*, \"names\")= chr \"difference in means between group female and group male\"\n $ stderr     : num 0.563\n $ alternative: chr \"two.sided\"\n $ method     : chr \"Welch Two Sample t-test\"\n $ data.name  : chr \"bill_length_mm by sex\"\n - attr(*, \"class\")= chr \"htest\""
  },
  {
    "objectID": "slides/40_publications.html#extract-information-from-t-test",
    "href": "slides/40_publications.html#extract-information-from-t-test",
    "title": "Publications",
    "section": "Extract information from t-test",
    "text": "Extract information from t-test\n\nlibrary(papaja)\napa_print(penguin_ttest)\n\n$estimate\n[1] \"$\\\\Delta M = -3.76$, 95\\\\% CI $[-4.87, -2.65]$\"\n\n$statistic\n[1] \"$t(329.29) = -6.67$, $p &lt; .001$\"\n\n$full_result\n[1] \"$\\\\Delta M = -3.76$, 95\\\\% CI $[-4.87, -2.65]$, $t(329.29) = -6.67$, $p &lt; .001$\"\n\n$table\nA data.frame with 5 labelled columns:\n\n  estimate       conf.int statistic     df p.value\n1    -3.76 [-4.87, -2.65]     -6.67 329.29  &lt; .001\n\nestimate : $\\\\Delta M$ \nconf.int : 95\\\\% CI \nstatistic: $t$ \ndf       : $\\\\mathit{df}$ \np.value  : $p$ \nattr(,\"class\")\n[1] \"apa_results\" \"list\""
  },
  {
    "objectID": "slides/40_publications.html#extract-information-from-t-test-1",
    "href": "slides/40_publications.html#extract-information-from-t-test-1",
    "title": "Publications",
    "section": "Extract information from t-test",
    "text": "Extract information from t-test\n\napa_print(penguin_ttest)$full_result\n\n[1] \"$\\\\Delta M = -3.76$, 95\\\\% CI $[-4.87, -2.65]$, $t(329.29) = -6.67$, $p &lt; .001$\""
  },
  {
    "objectID": "slides/40_publications.html#insert-statistics-as-inline-code",
    "href": "slides/40_publications.html#insert-statistics-as-inline-code",
    "title": "Publications",
    "section": "Insert statistics as inline code",
    "text": "Insert statistics as inline code\n Male and female penguins differ in their bill length (`r apa_print(penguin_ttest)$full_result`). \n\nMale and female penguins differ in their bill length (\\(\\Delta M = -3.76\\), 95% CI \\([-4.87, -2.65]\\), \\(t(329.29) = -6.67\\), \\(p &lt; .001\\))."
  },
  {
    "objectID": "slides/40_publications.html#apa_print-objects",
    "href": "slides/40_publications.html#apa_print-objects",
    "title": "Publications",
    "section": "\napa_print() objects",
    "text": "apa_print() objects\n\n\n\n\nNon-parametrics (wilcox.test())\nCorrelations (cor.test())\nT-tests (t.test())\nANOVA (aov(), Anova(), afex_aov())\nMANOVA (manova())\nLinear regressions (lm())\nGeneralized linear models (glm())\n\n\n\nMixed models (lmer(), glmer())\nNon-linear models (nlme())\nEstimated marginal means (emm())\nWithin-subjects confidence intervals (wsci())\nBayes factors (from BayesFactor package)"
  },
  {
    "objectID": "slides/40_publications.html#printing-p-values",
    "href": "slides/40_publications.html#printing-p-values",
    "title": "Publications",
    "section": "Printing p-values",
    "text": "Printing p-values\nprintp()\n\nprintp(0.23456)\n\n[1] \".235\"\n\nprintp(0.23456, add_equals = TRUE)\n\n[1] \"= .235\"\n\nprintp(0.000000000000001)\n\n[1] \"&lt; .001\""
  },
  {
    "objectID": "slides/40_publications.html#printing-other-numbers",
    "href": "slides/40_publications.html#printing-other-numbers",
    "title": "Publications",
    "section": "Printing other numbers",
    "text": "Printing other numbers\nprintnum()\n\nprintnum(0.5555555)\n\n[1] \"0.56\"\n\nprintnum(0.5555555, digits = 4)\n\n[1] \"0.5556\"\n\nprintnum(0.5555555, gt1 = FALSE)\n\n[1] \".56\"\n\nprintnum(0.00000000000001)\n\n[1] \"0.00\"\n\nprintnum(0.00000000000001, zero = FALSE)\n\n[1] \"&lt; 0.01\""
  },
  {
    "objectID": "slides/40_publications.html#examples-of-extracting-statistics",
    "href": "slides/40_publications.html#examples-of-extracting-statistics",
    "title": "Publications",
    "section": "Examples of extracting statistics",
    "text": "Examples of extracting statistics\n\nRmd\nPDF"
  },
  {
    "objectID": "slides/40_publications.html#pre-registration-templates",
    "href": "slides/40_publications.html#pre-registration-templates",
    "title": "Publications",
    "section": "Pre-registration templates",
    "text": "Pre-registration templates\n{prereg}\n{preregr}"
  },
  {
    "objectID": "slides/40_publications.html#revision-letter-template",
    "href": "slides/40_publications.html#revision-letter-template",
    "title": "Publications",
    "section": "Revision letter template",
    "text": "Revision letter template\n\n\n\n\n\nFriends don’t let friends copy-paste"
  },
  {
    "objectID": "slides/40_publications.html#dissertations-in-r-markdown",
    "href": "slides/40_publications.html#dissertations-in-r-markdown",
    "title": "Publications",
    "section": "Dissertations in R Markdown",
    "text": "Dissertations in R Markdown"
  },
  {
    "objectID": "slides/40_publications.html#lets-code",
    "href": "slides/40_publications.html#lets-code",
    "title": "Publications",
    "section": "Let’s code!",
    "text": "Let’s code!\nJournal articles [Rmd]"
  },
  {
    "objectID": "slides/42_quarto.html#quarto",
    "href": "slides/42_quarto.html#quarto",
    "title": "Quarto",
    "section": "Quarto",
    "text": "Quarto\nQuarto is an open-source scientific and technical publishing system built on Pandoc"
  },
  {
    "objectID": "code/01_introduction.html",
    "href": "code/01_introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "Let’s go to R’s console, which is the direct connection to the R engine. In the console, you give R a command, and it returns the output."
  },
  {
    "objectID": "code/01_introduction.html#numerical-operations",
    "href": "code/01_introduction.html#numerical-operations",
    "title": "Introduction",
    "section": "Numerical operations",
    "text": "Numerical operations\nR can be a very fancy calculator. Let’s do some calculations by entering numerical operations into the console. How many seconds are there in a year?\n\n# &gt;\n\nOn average, how many days are in each month of a leap year?\n\n# &gt;"
  },
  {
    "objectID": "code/01_introduction.html#text",
    "href": "code/01_introduction.html#text",
    "title": "Introduction",
    "section": "Text",
    "text": "Text\nR also can store, manipulate, and return text. But working with text requires wrapping the characters in quotation marks (either \" or '). Type this out and replace &lt;name&gt; with your name: \"My name is &lt;name&gt;!\".\n\n# &gt;\n\nYou can also apply functions to text. If we want to yell our names, let’s convert the string of characters to upper case with the toupper() function. Put the previous text inside the parentheses of toupper().\n\n# &gt;\n\nPress the up arrow ⬆️ to place previous commands in the console. Navigate to the previous command and change the text a bit."
  },
  {
    "objectID": "code/01_introduction.html#packages",
    "href": "code/01_introduction.html#packages",
    "title": "Introduction",
    "section": "Packages",
    "text": "Packages\nInstall the {nycflights13} package. Remember how to do that?\n\n# &gt;\n\nYou should have already installed the {palmerpenguins} package. We want to look at the penguins data set from that package. What do we need to do first to get access to things in the package?\n\n# &gt;\n\nView the data set by typing penguins into the console.\n\n# &gt;"
  },
  {
    "objectID": "code/01_introduction.html#plot-data",
    "href": "code/01_introduction.html#plot-data",
    "title": "Introduction",
    "section": "Plot data",
    "text": "Plot data\nExcellent! Let’s say we want to make a scatterplot of the bill length vs. the bill depth for all birds. We can use the plot() function for this by passing the y-variable name, a tilde ~, the x-variable name, and then the name of the dataset. Something like plot(y ~ x, data = dataset). Replace these variables with the ones for bill length and depth in the penguins dataset.\n\n# &gt;\n\nHey, hey! We have a plot! 📊 Sweet! We’ve viewed and plotted data. Well done! 🎉 💪"
  },
  {
    "objectID": "code/03_coding.html",
    "href": "code/03_coding.html",
    "title": "Coding basics",
    "section": "",
    "text": "Let’s go to R’s console, which is the direct connection to the R engine. In the console, you give R a command, and it returns the output."
  },
  {
    "objectID": "code/03_coding.html#assignment",
    "href": "code/03_coding.html#assignment",
    "title": "Coding basics",
    "section": "Assignment",
    "text": "Assignment\nRemember our text string with our names?\n\"My name is Jeff!\"\nIt is repetitive to have to copy/paste text. We can assign things to objects, which store the contents in a variable. The assignment operator &lt;- assigns the value of the right hand side to the object on the left hand side. Use the &lt;- operator to assign the name text to an object called my_name.\n\n# &gt;\n\nNow print the contents of my_name by just typing it into the console.\n\n# &gt;\n\nNow apply the toupper() function to my_name rather than the actual character string.\n\n# &gt;\n\nHow do we find out all of the arguments for the toupper() function?\nLet’s specify the argument names not just the value.\n\n# &gt;\n\nPress the up arrow to navigate to the assignment command and change the object name to something different."
  },
  {
    "objectID": "code/03_coding.html#names",
    "href": "code/03_coding.html#names",
    "title": "Coding basics",
    "section": "Names",
    "text": "Names\nWhy did I assign the text to the object my_name and not, for example, names?\nWhat all is wrong with the file name Qualtrics experiment 3 ~ 01/05/22 [final_FINAL].xlsx?\nWhat would be a better name for this file?\nWhy is this date problematic? 01/05/25\nWhat would be an ISO 8601 format for this date?\nWhy is it useful to include dates in files names?"
  },
  {
    "objectID": "code/05_rmarkdown.html",
    "href": "code/05_rmarkdown.html",
    "title": "Literate programming",
    "section": "",
    "text": "Open course RStudio project.\nCreate new R script.\nType library(palmerpenguins).\nIs palmerpenguins loaded? How can you check?\nRun the line to load palmerpenguins.\nType print(penguins).\nSource the whole script.\nComment out the print(penguins) line.\nSource the script."
  },
  {
    "objectID": "code/05_rmarkdown.html#creating-and-working-in-scripts",
    "href": "code/05_rmarkdown.html#creating-and-working-in-scripts",
    "title": "Literate programming",
    "section": "",
    "text": "Open course RStudio project.\nCreate new R script.\nType library(palmerpenguins).\nIs palmerpenguins loaded? How can you check?\nRun the line to load palmerpenguins.\nType print(penguins).\nSource the whole script.\nComment out the print(penguins) line.\nSource the script."
  },
  {
    "objectID": "code/05_rmarkdown.html#creating-and-working-with-r-markdown-files",
    "href": "code/05_rmarkdown.html#creating-and-working-with-r-markdown-files",
    "title": "Literate programming",
    "section": "Creating and working with R Markdown files",
    "text": "Creating and working with R Markdown files\n\nCreate new R Markdown file.\nType “The mean of the first 9 digits is `r mean(1:9)`.”\nKnit/render the document.\nCreate a new code chunk.\nInside the code chunk, load the palmerpenguins package and print the penguins data set.\nRun the code chunk without knitting the file.\nKnit/render the file."
  },
  {
    "objectID": "code/06_datatypes_answers.html",
    "href": "code/06_datatypes_answers.html",
    "title": "Data types",
    "section": "",
    "text": "aa &lt;- 3\nbb &lt;- 3L\ncc &lt;- \"3\"\ndd &lt;- \"TRUE\"\nee &lt;- TRUE\nff &lt;- \"NA\"\ngg &lt;- NA\n\naa &lt;- 3\nbb &lt;- 3L\ncc &lt;- \"3\"\ndd &lt;- \"TRUE\"\nee &lt;- TRUE\nff &lt;- \"NA\"\ngg &lt;- NA"
  },
  {
    "objectID": "code/06_datatypes_answers.html#creating-objects",
    "href": "code/06_datatypes_answers.html#creating-objects",
    "title": "Data types",
    "section": "",
    "text": "aa &lt;- 3\nbb &lt;- 3L\ncc &lt;- \"3\"\ndd &lt;- \"TRUE\"\nee &lt;- TRUE\nff &lt;- \"NA\"\ngg &lt;- NA\n\naa &lt;- 3\nbb &lt;- 3L\ncc &lt;- \"3\"\ndd &lt;- \"TRUE\"\nee &lt;- TRUE\nff &lt;- \"NA\"\ngg &lt;- NA"
  },
  {
    "objectID": "code/06_datatypes_answers.html#checking-data-types",
    "href": "code/06_datatypes_answers.html#checking-data-types",
    "title": "Data types",
    "section": "Checking data types",
    "text": "Checking data types\n\nGuess what data type each object is then check it.\n\ntypeof(aa)\n\n[1] \"double\"\n\ntypeof(bb)\n\n[1] \"integer\"\n\ntypeof(cc)\n\n[1] \"character\"\n\ntypeof(dd)\n\n[1] \"character\"\n\ntypeof(ee)\n\n[1] \"logical\"\n\ntypeof(ff)\n\n[1] \"character\"\n\ntypeof(gg)\n\n[1] \"logical\"\n\n\n\n\nHow do we test if aa is an integer?\n\nis.integer(aa)\n\n[1] FALSE\n\n\n\n\nWhat will is.logical(dd) return?\n\nis.logical(dd)\n\n[1] FALSE\n\n\n\n\nHow do we test if ff and gg are NA?\n\nis.na(ff)\n\n[1] FALSE\n\nis.na(gg)\n\n[1] TRUE"
  },
  {
    "objectID": "code/06_datatypes_answers.html#checking-if-objects-are-the-same",
    "href": "code/06_datatypes_answers.html#checking-if-objects-are-the-same",
    "title": "Data types",
    "section": "Checking if objects are the same",
    "text": "Checking if objects are the same\n\nAre aa and bb the same? How do we test this?\n\naa\n\n[1] 3\n\nbb\n\n[1] 3\n\naa == bb\n\n[1] TRUE\n\n\n\n\nWhat about aa and cc?\n\naa\n\n[1] 3\n\ncc\n\n[1] \"3\"\n\naa == cc\n\n[1] TRUE\n\n\n\n\nA safer comparison tool is identical(). Test if aa and bb are identical. Then try aa and cc.\n\nidentical(aa, bb)\n\n[1] FALSE\n\nidentical(aa, cc)\n\n[1] FALSE\n\n\n\n\nNow see if aa is identical to 3 and if bb is identical to 3L.\n\nidentical(aa, 3)\n\n[1] TRUE\n\nidentical(bb, 3L)\n\n[1] TRUE"
  },
  {
    "objectID": "code/07_datastructures_answers.html",
    "href": "code/07_datastructures_answers.html",
    "title": "Data structures",
    "section": "",
    "text": "Vectors\nCreate a vector called dog_names with the values Bella, Daisy, and Max.\n\ndog_names &lt;- c(\"Bella\", \"Daisy\", \"Max\")\n\nCreate a vector called sex with the values Female, Male, and Male.\n\nsex &lt;- c(\"Female\", \"Female\", \"Male\")\n\nUse the index operator to print to console only Daisy and Max from dog_names.\n\ndog_names[2:3]\n\n[1] \"Daisy\" \"Max\"  \n\n\nReplace the Daisy entry with Luna and print dog_names to console.\n\ndog_names[2] &lt;- \"Luna\"\ndog_names\n\n[1] \"Bella\" \"Luna\"  \"Max\"  \n\n\nTest whether the name Sophie is contained in the vector dog_names.\n\n\"Sophie\" %in% dog_names\n\n[1] FALSE\n\n\n\n\nLists\nCopy/paste and run this code: (mylist &lt;- list(a = 1:4, b = c(4, 3, 8, 5), c = LETTERS[10:15], d = c(\"yes\", \"yes\")))\n\n(mylist &lt;- list(a = 1:4, b = c(4, 3, 8, 5), c = LETTERS[10:15], d = c(\"yes\", \"yes\")))\n\n$a\n[1] 1 2 3 4\n\n$b\n[1] 4 3 8 5\n\n$c\n[1] \"J\" \"K\" \"L\" \"M\" \"N\" \"O\"\n\n$d\n[1] \"yes\" \"yes\"\n\n\nCheck the data types for each list element individually.\n\ntypeof(mylist$a)\n\n[1] \"integer\"\n\ntypeof(mylist$b)\n\n[1] \"double\"\n\ntypeof(mylist$c)\n\n[1] \"character\"\n\ntypeof(mylist$d)\n\n[1] \"character\"\n\n\nCheck the data types for each list element with one command.\n\nstr(mylist)\n\nList of 4\n $ a: int [1:4] 1 2 3 4\n $ b: num [1:4] 4 3 8 5\n $ c: chr [1:6] \"J\" \"K\" \"L\" \"M\" ...\n $ d: chr [1:2] \"yes\" \"yes\"\n\n\nCombine list elements a and b into a single vector.\n\nc(mylist$a, mylist$b)\n\n[1] 1 2 3 4 4 3 8 5\n\n\n\n\nData frames\nCreate a data frame called mydf with three columns: x, y, and z and five rows. For x assign any five numbers, for y assign any five character strings, and for z assign any five logical values.\n\n(mydf &lt;- data.frame(x = sample(1:10, 5, replace = TRUE), y = sample(letters, 5), z = sample(c(TRUE, FALSE), 5, replace = TRUE)))\n\n  x y     z\n1 4 g FALSE\n2 5 v  TRUE\n3 3 m FALSE\n4 8 q  TRUE\n5 4 j  TRUE\n\n\nCreate a data frame called dogs that combines the dog_names and sex vectors and print to console.\n\n(dogs &lt;- data.frame(dog_names, sex))\n\n  dog_names    sex\n1     Bella Female\n2      Luna Female\n3       Max   Male\n\n\nPrint to console just Luna’s row.\n\ndogs[2, ]\n\n  dog_names    sex\n2      Luna Female\n\n\nPrint to console the number of rows in dogs.\n\nnrow(dogs)\n\n[1] 3"
  },
  {
    "objectID": "code/08_importing_answers.html",
    "href": "code/08_importing_answers.html",
    "title": "Importing data",
    "section": "",
    "text": "Download https://jeffreyrstevens.github.io/dpavir2025/data/newdata.csv and save it in your data/ directory.\nImport newdata.csv into an object called newdata using read.csv().\n\n\nnewdata &lt;- read.csv(here::here(\"data/newdata.csv\"))\n\n\nImport https://jeffreyrstevens.github.io/dpavir2025/data/newdata2.csv directly from the URL using readr::read_csv().\n\n\nlibrary(readr)\nnewdata2 &lt;- read_csv(\"https://jeffreyrstevens.github.io/dpavir2025/data/newdata2.csv\")\n\nRows: 198 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Breed, links, Image\ndbl (8): X2013.Rank, X2014.Rank, X2015.Rank, X2016.Rank, X2017.Rank, X2018.R...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nRepeat the previous import of newdata2.csv, but add the arguments col_select = c(\"Breed\", \"links\") and show_col_types = FALSE and name the object newdata3.\n\n\nnewdata3 &lt;- read_csv(\"https://jeffreyrstevens.github.io/dpavir2025/data/newdata2.csv\", col_select = c(\"Breed\", \"links\"), show_col_types = FALSE)\n\n\nExport the newdata3 data as a CSV file to your data/ directory.\n\n\nwrite_csv(newdata3, here::here(\"data/newdata3.csv\"))"
  },
  {
    "objectID": "code/09_validating_answers.html",
    "href": "code/09_validating_answers.html",
    "title": "Validating data",
    "section": "",
    "text": "For these exercises, we’ll use the mtcars data set build into base R.\n\nWhat are the dimensions of mtcars?\n\n\ndim(mtcars)\n\n[1] 32 11\n\n\n\nIn one line of code, view the data types for all of the columns in mtcars.\n\n\nstr(mtcars)\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\n\nWhat is the range of values for the mpg column?\n\n\nrange(mtcars$mpg)\n\n[1] 10.4 33.9\n\n\n\nWhat are all of the possible values used in gear?\n\n\nunique(mtcars$gear)\n\n[1] 4 3 5\n\n\n\nCheck whether the value 5 is found in the carb column.\n\n\n5 %in% mtcars$carb\n\n[1] FALSE\n\n\n\nDo any columns have missing values?\n\n\nsummary(mtcars)\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n\n\n\nWhat is the 3rd quartile for mpg?\n\n\nsummary(mtcars$mpg)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  10.40   15.43   19.20   20.09   22.80   33.90 \n\n\n\nCheck whether all horsepower (hp) values fall between 50 and 300. Which row numbers fall out of this range?\n\n\nwhich(mtcars$hp &lt; 50)\n\ninteger(0)\n\nwhich(mtcars$hp &gt; 300)\n\n[1] 31\n\n\n\nMake a codebook for mtcars.\n\n\n#dataReporter::makeCodebook(mtcars, replace = TRUE)"
  },
  {
    "objectID": "code/10_selecting_answers.html",
    "href": "code/10_selecting_answers.html",
    "title": "Selecting columns",
    "section": "",
    "text": "For these exercises, we’ll use the iris data set build into base R.\n\nView iris to see what it looks like.\n\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\nReturn a data frame with only the sepal columns using inclusion.\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nselect(iris, Sepal.Length, Sepal.Width)\n\n    Sepal.Length Sepal.Width\n1            5.1         3.5\n2            4.9         3.0\n3            4.7         3.2\n4            4.6         3.1\n5            5.0         3.6\n6            5.4         3.9\n7            4.6         3.4\n8            5.0         3.4\n9            4.4         2.9\n10           4.9         3.1\n11           5.4         3.7\n12           4.8         3.4\n13           4.8         3.0\n14           4.3         3.0\n15           5.8         4.0\n16           5.7         4.4\n17           5.4         3.9\n18           5.1         3.5\n19           5.7         3.8\n20           5.1         3.8\n21           5.4         3.4\n22           5.1         3.7\n23           4.6         3.6\n24           5.1         3.3\n25           4.8         3.4\n26           5.0         3.0\n27           5.0         3.4\n28           5.2         3.5\n29           5.2         3.4\n30           4.7         3.2\n31           4.8         3.1\n32           5.4         3.4\n33           5.2         4.1\n34           5.5         4.2\n35           4.9         3.1\n36           5.0         3.2\n37           5.5         3.5\n38           4.9         3.6\n39           4.4         3.0\n40           5.1         3.4\n41           5.0         3.5\n42           4.5         2.3\n43           4.4         3.2\n44           5.0         3.5\n45           5.1         3.8\n46           4.8         3.0\n47           5.1         3.8\n48           4.6         3.2\n49           5.3         3.7\n50           5.0         3.3\n51           7.0         3.2\n52           6.4         3.2\n53           6.9         3.1\n54           5.5         2.3\n55           6.5         2.8\n56           5.7         2.8\n57           6.3         3.3\n58           4.9         2.4\n59           6.6         2.9\n60           5.2         2.7\n61           5.0         2.0\n62           5.9         3.0\n63           6.0         2.2\n64           6.1         2.9\n65           5.6         2.9\n66           6.7         3.1\n67           5.6         3.0\n68           5.8         2.7\n69           6.2         2.2\n70           5.6         2.5\n71           5.9         3.2\n72           6.1         2.8\n73           6.3         2.5\n74           6.1         2.8\n75           6.4         2.9\n76           6.6         3.0\n77           6.8         2.8\n78           6.7         3.0\n79           6.0         2.9\n80           5.7         2.6\n81           5.5         2.4\n82           5.5         2.4\n83           5.8         2.7\n84           6.0         2.7\n85           5.4         3.0\n86           6.0         3.4\n87           6.7         3.1\n88           6.3         2.3\n89           5.6         3.0\n90           5.5         2.5\n91           5.5         2.6\n92           6.1         3.0\n93           5.8         2.6\n94           5.0         2.3\n95           5.6         2.7\n96           5.7         3.0\n97           5.7         2.9\n98           6.2         2.9\n99           5.1         2.5\n100          5.7         2.8\n101          6.3         3.3\n102          5.8         2.7\n103          7.1         3.0\n104          6.3         2.9\n105          6.5         3.0\n106          7.6         3.0\n107          4.9         2.5\n108          7.3         2.9\n109          6.7         2.5\n110          7.2         3.6\n111          6.5         3.2\n112          6.4         2.7\n113          6.8         3.0\n114          5.7         2.5\n115          5.8         2.8\n116          6.4         3.2\n117          6.5         3.0\n118          7.7         3.8\n119          7.7         2.6\n120          6.0         2.2\n121          6.9         3.2\n122          5.6         2.8\n123          7.7         2.8\n124          6.3         2.7\n125          6.7         3.3\n126          7.2         3.2\n127          6.2         2.8\n128          6.1         3.0\n129          6.4         2.8\n130          7.2         3.0\n131          7.4         2.8\n132          7.9         3.8\n133          6.4         2.8\n134          6.3         2.8\n135          6.1         2.6\n136          7.7         3.0\n137          6.3         3.4\n138          6.4         3.1\n139          6.0         3.0\n140          6.9         3.1\n141          6.7         3.1\n142          6.9         3.1\n143          5.8         2.7\n144          6.8         3.2\n145          6.7         3.3\n146          6.7         3.0\n147          6.3         2.5\n148          6.5         3.0\n149          6.2         3.4\n150          5.9         3.0\n\n\n\nReturn a data frame with only the sepal columns using a helper function.\n\n\nselect(iris, contains(\"Sepal\"))\n\n    Sepal.Length Sepal.Width\n1            5.1         3.5\n2            4.9         3.0\n3            4.7         3.2\n4            4.6         3.1\n5            5.0         3.6\n6            5.4         3.9\n7            4.6         3.4\n8            5.0         3.4\n9            4.4         2.9\n10           4.9         3.1\n11           5.4         3.7\n12           4.8         3.4\n13           4.8         3.0\n14           4.3         3.0\n15           5.8         4.0\n16           5.7         4.4\n17           5.4         3.9\n18           5.1         3.5\n19           5.7         3.8\n20           5.1         3.8\n21           5.4         3.4\n22           5.1         3.7\n23           4.6         3.6\n24           5.1         3.3\n25           4.8         3.4\n26           5.0         3.0\n27           5.0         3.4\n28           5.2         3.5\n29           5.2         3.4\n30           4.7         3.2\n31           4.8         3.1\n32           5.4         3.4\n33           5.2         4.1\n34           5.5         4.2\n35           4.9         3.1\n36           5.0         3.2\n37           5.5         3.5\n38           4.9         3.6\n39           4.4         3.0\n40           5.1         3.4\n41           5.0         3.5\n42           4.5         2.3\n43           4.4         3.2\n44           5.0         3.5\n45           5.1         3.8\n46           4.8         3.0\n47           5.1         3.8\n48           4.6         3.2\n49           5.3         3.7\n50           5.0         3.3\n51           7.0         3.2\n52           6.4         3.2\n53           6.9         3.1\n54           5.5         2.3\n55           6.5         2.8\n56           5.7         2.8\n57           6.3         3.3\n58           4.9         2.4\n59           6.6         2.9\n60           5.2         2.7\n61           5.0         2.0\n62           5.9         3.0\n63           6.0         2.2\n64           6.1         2.9\n65           5.6         2.9\n66           6.7         3.1\n67           5.6         3.0\n68           5.8         2.7\n69           6.2         2.2\n70           5.6         2.5\n71           5.9         3.2\n72           6.1         2.8\n73           6.3         2.5\n74           6.1         2.8\n75           6.4         2.9\n76           6.6         3.0\n77           6.8         2.8\n78           6.7         3.0\n79           6.0         2.9\n80           5.7         2.6\n81           5.5         2.4\n82           5.5         2.4\n83           5.8         2.7\n84           6.0         2.7\n85           5.4         3.0\n86           6.0         3.4\n87           6.7         3.1\n88           6.3         2.3\n89           5.6         3.0\n90           5.5         2.5\n91           5.5         2.6\n92           6.1         3.0\n93           5.8         2.6\n94           5.0         2.3\n95           5.6         2.7\n96           5.7         3.0\n97           5.7         2.9\n98           6.2         2.9\n99           5.1         2.5\n100          5.7         2.8\n101          6.3         3.3\n102          5.8         2.7\n103          7.1         3.0\n104          6.3         2.9\n105          6.5         3.0\n106          7.6         3.0\n107          4.9         2.5\n108          7.3         2.9\n109          6.7         2.5\n110          7.2         3.6\n111          6.5         3.2\n112          6.4         2.7\n113          6.8         3.0\n114          5.7         2.5\n115          5.8         2.8\n116          6.4         3.2\n117          6.5         3.0\n118          7.7         3.8\n119          7.7         2.6\n120          6.0         2.2\n121          6.9         3.2\n122          5.6         2.8\n123          7.7         2.8\n124          6.3         2.7\n125          6.7         3.3\n126          7.2         3.2\n127          6.2         2.8\n128          6.1         3.0\n129          6.4         2.8\n130          7.2         3.0\n131          7.4         2.8\n132          7.9         3.8\n133          6.4         2.8\n134          6.3         2.8\n135          6.1         2.6\n136          7.7         3.0\n137          6.3         3.4\n138          6.4         3.1\n139          6.0         3.0\n140          6.9         3.1\n141          6.7         3.1\n142          6.9         3.1\n143          5.8         2.7\n144          6.8         3.2\n145          6.7         3.3\n146          6.7         3.0\n147          6.3         2.5\n148          6.5         3.0\n149          6.2         3.4\n150          5.9         3.0\n\n\n\nReturn a data frame with the sepal and petal columns using a helper function.\n\n\nselect(iris, Sepal.Length:Petal.Width)\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width\n1            5.1         3.5          1.4         0.2\n2            4.9         3.0          1.4         0.2\n3            4.7         3.2          1.3         0.2\n4            4.6         3.1          1.5         0.2\n5            5.0         3.6          1.4         0.2\n6            5.4         3.9          1.7         0.4\n7            4.6         3.4          1.4         0.3\n8            5.0         3.4          1.5         0.2\n9            4.4         2.9          1.4         0.2\n10           4.9         3.1          1.5         0.1\n11           5.4         3.7          1.5         0.2\n12           4.8         3.4          1.6         0.2\n13           4.8         3.0          1.4         0.1\n14           4.3         3.0          1.1         0.1\n15           5.8         4.0          1.2         0.2\n16           5.7         4.4          1.5         0.4\n17           5.4         3.9          1.3         0.4\n18           5.1         3.5          1.4         0.3\n19           5.7         3.8          1.7         0.3\n20           5.1         3.8          1.5         0.3\n21           5.4         3.4          1.7         0.2\n22           5.1         3.7          1.5         0.4\n23           4.6         3.6          1.0         0.2\n24           5.1         3.3          1.7         0.5\n25           4.8         3.4          1.9         0.2\n26           5.0         3.0          1.6         0.2\n27           5.0         3.4          1.6         0.4\n28           5.2         3.5          1.5         0.2\n29           5.2         3.4          1.4         0.2\n30           4.7         3.2          1.6         0.2\n31           4.8         3.1          1.6         0.2\n32           5.4         3.4          1.5         0.4\n33           5.2         4.1          1.5         0.1\n34           5.5         4.2          1.4         0.2\n35           4.9         3.1          1.5         0.2\n36           5.0         3.2          1.2         0.2\n37           5.5         3.5          1.3         0.2\n38           4.9         3.6          1.4         0.1\n39           4.4         3.0          1.3         0.2\n40           5.1         3.4          1.5         0.2\n41           5.0         3.5          1.3         0.3\n42           4.5         2.3          1.3         0.3\n43           4.4         3.2          1.3         0.2\n44           5.0         3.5          1.6         0.6\n45           5.1         3.8          1.9         0.4\n46           4.8         3.0          1.4         0.3\n47           5.1         3.8          1.6         0.2\n48           4.6         3.2          1.4         0.2\n49           5.3         3.7          1.5         0.2\n50           5.0         3.3          1.4         0.2\n51           7.0         3.2          4.7         1.4\n52           6.4         3.2          4.5         1.5\n53           6.9         3.1          4.9         1.5\n54           5.5         2.3          4.0         1.3\n55           6.5         2.8          4.6         1.5\n56           5.7         2.8          4.5         1.3\n57           6.3         3.3          4.7         1.6\n58           4.9         2.4          3.3         1.0\n59           6.6         2.9          4.6         1.3\n60           5.2         2.7          3.9         1.4\n61           5.0         2.0          3.5         1.0\n62           5.9         3.0          4.2         1.5\n63           6.0         2.2          4.0         1.0\n64           6.1         2.9          4.7         1.4\n65           5.6         2.9          3.6         1.3\n66           6.7         3.1          4.4         1.4\n67           5.6         3.0          4.5         1.5\n68           5.8         2.7          4.1         1.0\n69           6.2         2.2          4.5         1.5\n70           5.6         2.5          3.9         1.1\n71           5.9         3.2          4.8         1.8\n72           6.1         2.8          4.0         1.3\n73           6.3         2.5          4.9         1.5\n74           6.1         2.8          4.7         1.2\n75           6.4         2.9          4.3         1.3\n76           6.6         3.0          4.4         1.4\n77           6.8         2.8          4.8         1.4\n78           6.7         3.0          5.0         1.7\n79           6.0         2.9          4.5         1.5\n80           5.7         2.6          3.5         1.0\n81           5.5         2.4          3.8         1.1\n82           5.5         2.4          3.7         1.0\n83           5.8         2.7          3.9         1.2\n84           6.0         2.7          5.1         1.6\n85           5.4         3.0          4.5         1.5\n86           6.0         3.4          4.5         1.6\n87           6.7         3.1          4.7         1.5\n88           6.3         2.3          4.4         1.3\n89           5.6         3.0          4.1         1.3\n90           5.5         2.5          4.0         1.3\n91           5.5         2.6          4.4         1.2\n92           6.1         3.0          4.6         1.4\n93           5.8         2.6          4.0         1.2\n94           5.0         2.3          3.3         1.0\n95           5.6         2.7          4.2         1.3\n96           5.7         3.0          4.2         1.2\n97           5.7         2.9          4.2         1.3\n98           6.2         2.9          4.3         1.3\n99           5.1         2.5          3.0         1.1\n100          5.7         2.8          4.1         1.3\n101          6.3         3.3          6.0         2.5\n102          5.8         2.7          5.1         1.9\n103          7.1         3.0          5.9         2.1\n104          6.3         2.9          5.6         1.8\n105          6.5         3.0          5.8         2.2\n106          7.6         3.0          6.6         2.1\n107          4.9         2.5          4.5         1.7\n108          7.3         2.9          6.3         1.8\n109          6.7         2.5          5.8         1.8\n110          7.2         3.6          6.1         2.5\n111          6.5         3.2          5.1         2.0\n112          6.4         2.7          5.3         1.9\n113          6.8         3.0          5.5         2.1\n114          5.7         2.5          5.0         2.0\n115          5.8         2.8          5.1         2.4\n116          6.4         3.2          5.3         2.3\n117          6.5         3.0          5.5         1.8\n118          7.7         3.8          6.7         2.2\n119          7.7         2.6          6.9         2.3\n120          6.0         2.2          5.0         1.5\n121          6.9         3.2          5.7         2.3\n122          5.6         2.8          4.9         2.0\n123          7.7         2.8          6.7         2.0\n124          6.3         2.7          4.9         1.8\n125          6.7         3.3          5.7         2.1\n126          7.2         3.2          6.0         1.8\n127          6.2         2.8          4.8         1.8\n128          6.1         3.0          4.9         1.8\n129          6.4         2.8          5.6         2.1\n130          7.2         3.0          5.8         1.6\n131          7.4         2.8          6.1         1.9\n132          7.9         3.8          6.4         2.0\n133          6.4         2.8          5.6         2.2\n134          6.3         2.8          5.1         1.5\n135          6.1         2.6          5.6         1.4\n136          7.7         3.0          6.1         2.3\n137          6.3         3.4          5.6         2.4\n138          6.4         3.1          5.5         1.8\n139          6.0         3.0          4.8         1.8\n140          6.9         3.1          5.4         2.1\n141          6.7         3.1          5.6         2.4\n142          6.9         3.1          5.1         2.3\n143          5.8         2.7          5.1         1.9\n144          6.8         3.2          5.9         2.3\n145          6.7         3.3          5.7         2.5\n146          6.7         3.0          5.2         2.3\n147          6.3         2.5          5.0         1.9\n148          6.5         3.0          5.2         2.0\n149          6.2         3.4          5.4         2.3\n150          5.9         3.0          5.1         1.8\n\n\n\nReturn a data frame with the sepal and petal columns using exclusion.\n\n\nselect(iris, -Species)\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width\n1            5.1         3.5          1.4         0.2\n2            4.9         3.0          1.4         0.2\n3            4.7         3.2          1.3         0.2\n4            4.6         3.1          1.5         0.2\n5            5.0         3.6          1.4         0.2\n6            5.4         3.9          1.7         0.4\n7            4.6         3.4          1.4         0.3\n8            5.0         3.4          1.5         0.2\n9            4.4         2.9          1.4         0.2\n10           4.9         3.1          1.5         0.1\n11           5.4         3.7          1.5         0.2\n12           4.8         3.4          1.6         0.2\n13           4.8         3.0          1.4         0.1\n14           4.3         3.0          1.1         0.1\n15           5.8         4.0          1.2         0.2\n16           5.7         4.4          1.5         0.4\n17           5.4         3.9          1.3         0.4\n18           5.1         3.5          1.4         0.3\n19           5.7         3.8          1.7         0.3\n20           5.1         3.8          1.5         0.3\n21           5.4         3.4          1.7         0.2\n22           5.1         3.7          1.5         0.4\n23           4.6         3.6          1.0         0.2\n24           5.1         3.3          1.7         0.5\n25           4.8         3.4          1.9         0.2\n26           5.0         3.0          1.6         0.2\n27           5.0         3.4          1.6         0.4\n28           5.2         3.5          1.5         0.2\n29           5.2         3.4          1.4         0.2\n30           4.7         3.2          1.6         0.2\n31           4.8         3.1          1.6         0.2\n32           5.4         3.4          1.5         0.4\n33           5.2         4.1          1.5         0.1\n34           5.5         4.2          1.4         0.2\n35           4.9         3.1          1.5         0.2\n36           5.0         3.2          1.2         0.2\n37           5.5         3.5          1.3         0.2\n38           4.9         3.6          1.4         0.1\n39           4.4         3.0          1.3         0.2\n40           5.1         3.4          1.5         0.2\n41           5.0         3.5          1.3         0.3\n42           4.5         2.3          1.3         0.3\n43           4.4         3.2          1.3         0.2\n44           5.0         3.5          1.6         0.6\n45           5.1         3.8          1.9         0.4\n46           4.8         3.0          1.4         0.3\n47           5.1         3.8          1.6         0.2\n48           4.6         3.2          1.4         0.2\n49           5.3         3.7          1.5         0.2\n50           5.0         3.3          1.4         0.2\n51           7.0         3.2          4.7         1.4\n52           6.4         3.2          4.5         1.5\n53           6.9         3.1          4.9         1.5\n54           5.5         2.3          4.0         1.3\n55           6.5         2.8          4.6         1.5\n56           5.7         2.8          4.5         1.3\n57           6.3         3.3          4.7         1.6\n58           4.9         2.4          3.3         1.0\n59           6.6         2.9          4.6         1.3\n60           5.2         2.7          3.9         1.4\n61           5.0         2.0          3.5         1.0\n62           5.9         3.0          4.2         1.5\n63           6.0         2.2          4.0         1.0\n64           6.1         2.9          4.7         1.4\n65           5.6         2.9          3.6         1.3\n66           6.7         3.1          4.4         1.4\n67           5.6         3.0          4.5         1.5\n68           5.8         2.7          4.1         1.0\n69           6.2         2.2          4.5         1.5\n70           5.6         2.5          3.9         1.1\n71           5.9         3.2          4.8         1.8\n72           6.1         2.8          4.0         1.3\n73           6.3         2.5          4.9         1.5\n74           6.1         2.8          4.7         1.2\n75           6.4         2.9          4.3         1.3\n76           6.6         3.0          4.4         1.4\n77           6.8         2.8          4.8         1.4\n78           6.7         3.0          5.0         1.7\n79           6.0         2.9          4.5         1.5\n80           5.7         2.6          3.5         1.0\n81           5.5         2.4          3.8         1.1\n82           5.5         2.4          3.7         1.0\n83           5.8         2.7          3.9         1.2\n84           6.0         2.7          5.1         1.6\n85           5.4         3.0          4.5         1.5\n86           6.0         3.4          4.5         1.6\n87           6.7         3.1          4.7         1.5\n88           6.3         2.3          4.4         1.3\n89           5.6         3.0          4.1         1.3\n90           5.5         2.5          4.0         1.3\n91           5.5         2.6          4.4         1.2\n92           6.1         3.0          4.6         1.4\n93           5.8         2.6          4.0         1.2\n94           5.0         2.3          3.3         1.0\n95           5.6         2.7          4.2         1.3\n96           5.7         3.0          4.2         1.2\n97           5.7         2.9          4.2         1.3\n98           6.2         2.9          4.3         1.3\n99           5.1         2.5          3.0         1.1\n100          5.7         2.8          4.1         1.3\n101          6.3         3.3          6.0         2.5\n102          5.8         2.7          5.1         1.9\n103          7.1         3.0          5.9         2.1\n104          6.3         2.9          5.6         1.8\n105          6.5         3.0          5.8         2.2\n106          7.6         3.0          6.6         2.1\n107          4.9         2.5          4.5         1.7\n108          7.3         2.9          6.3         1.8\n109          6.7         2.5          5.8         1.8\n110          7.2         3.6          6.1         2.5\n111          6.5         3.2          5.1         2.0\n112          6.4         2.7          5.3         1.9\n113          6.8         3.0          5.5         2.1\n114          5.7         2.5          5.0         2.0\n115          5.8         2.8          5.1         2.4\n116          6.4         3.2          5.3         2.3\n117          6.5         3.0          5.5         1.8\n118          7.7         3.8          6.7         2.2\n119          7.7         2.6          6.9         2.3\n120          6.0         2.2          5.0         1.5\n121          6.9         3.2          5.7         2.3\n122          5.6         2.8          4.9         2.0\n123          7.7         2.8          6.7         2.0\n124          6.3         2.7          4.9         1.8\n125          6.7         3.3          5.7         2.1\n126          7.2         3.2          6.0         1.8\n127          6.2         2.8          4.8         1.8\n128          6.1         3.0          4.9         1.8\n129          6.4         2.8          5.6         2.1\n130          7.2         3.0          5.8         1.6\n131          7.4         2.8          6.1         1.9\n132          7.9         3.8          6.4         2.0\n133          6.4         2.8          5.6         2.2\n134          6.3         2.8          5.1         1.5\n135          6.1         2.6          5.6         1.4\n136          7.7         3.0          6.1         2.3\n137          6.3         3.4          5.6         2.4\n138          6.4         3.1          5.5         1.8\n139          6.0         3.0          4.8         1.8\n140          6.9         3.1          5.4         2.1\n141          6.7         3.1          5.6         2.4\n142          6.9         3.1          5.1         2.3\n143          5.8         2.7          5.1         1.9\n144          6.8         3.2          5.9         2.3\n145          6.7         3.3          5.7         2.5\n146          6.7         3.0          5.2         2.3\n147          6.3         2.5          5.0         1.9\n148          6.5         3.0          5.2         2.0\n149          6.2         3.4          5.4         2.3\n150          5.9         3.0          5.1         1.8\n\n\n\nMove Species to be the first column using select() and a helper function.\n\n\nselect(iris, Species, everything())\n\n       Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n1       setosa          5.1         3.5          1.4         0.2\n2       setosa          4.9         3.0          1.4         0.2\n3       setosa          4.7         3.2          1.3         0.2\n4       setosa          4.6         3.1          1.5         0.2\n5       setosa          5.0         3.6          1.4         0.2\n6       setosa          5.4         3.9          1.7         0.4\n7       setosa          4.6         3.4          1.4         0.3\n8       setosa          5.0         3.4          1.5         0.2\n9       setosa          4.4         2.9          1.4         0.2\n10      setosa          4.9         3.1          1.5         0.1\n11      setosa          5.4         3.7          1.5         0.2\n12      setosa          4.8         3.4          1.6         0.2\n13      setosa          4.8         3.0          1.4         0.1\n14      setosa          4.3         3.0          1.1         0.1\n15      setosa          5.8         4.0          1.2         0.2\n16      setosa          5.7         4.4          1.5         0.4\n17      setosa          5.4         3.9          1.3         0.4\n18      setosa          5.1         3.5          1.4         0.3\n19      setosa          5.7         3.8          1.7         0.3\n20      setosa          5.1         3.8          1.5         0.3\n21      setosa          5.4         3.4          1.7         0.2\n22      setosa          5.1         3.7          1.5         0.4\n23      setosa          4.6         3.6          1.0         0.2\n24      setosa          5.1         3.3          1.7         0.5\n25      setosa          4.8         3.4          1.9         0.2\n26      setosa          5.0         3.0          1.6         0.2\n27      setosa          5.0         3.4          1.6         0.4\n28      setosa          5.2         3.5          1.5         0.2\n29      setosa          5.2         3.4          1.4         0.2\n30      setosa          4.7         3.2          1.6         0.2\n31      setosa          4.8         3.1          1.6         0.2\n32      setosa          5.4         3.4          1.5         0.4\n33      setosa          5.2         4.1          1.5         0.1\n34      setosa          5.5         4.2          1.4         0.2\n35      setosa          4.9         3.1          1.5         0.2\n36      setosa          5.0         3.2          1.2         0.2\n37      setosa          5.5         3.5          1.3         0.2\n38      setosa          4.9         3.6          1.4         0.1\n39      setosa          4.4         3.0          1.3         0.2\n40      setosa          5.1         3.4          1.5         0.2\n41      setosa          5.0         3.5          1.3         0.3\n42      setosa          4.5         2.3          1.3         0.3\n43      setosa          4.4         3.2          1.3         0.2\n44      setosa          5.0         3.5          1.6         0.6\n45      setosa          5.1         3.8          1.9         0.4\n46      setosa          4.8         3.0          1.4         0.3\n47      setosa          5.1         3.8          1.6         0.2\n48      setosa          4.6         3.2          1.4         0.2\n49      setosa          5.3         3.7          1.5         0.2\n50      setosa          5.0         3.3          1.4         0.2\n51  versicolor          7.0         3.2          4.7         1.4\n52  versicolor          6.4         3.2          4.5         1.5\n53  versicolor          6.9         3.1          4.9         1.5\n54  versicolor          5.5         2.3          4.0         1.3\n55  versicolor          6.5         2.8          4.6         1.5\n56  versicolor          5.7         2.8          4.5         1.3\n57  versicolor          6.3         3.3          4.7         1.6\n58  versicolor          4.9         2.4          3.3         1.0\n59  versicolor          6.6         2.9          4.6         1.3\n60  versicolor          5.2         2.7          3.9         1.4\n61  versicolor          5.0         2.0          3.5         1.0\n62  versicolor          5.9         3.0          4.2         1.5\n63  versicolor          6.0         2.2          4.0         1.0\n64  versicolor          6.1         2.9          4.7         1.4\n65  versicolor          5.6         2.9          3.6         1.3\n66  versicolor          6.7         3.1          4.4         1.4\n67  versicolor          5.6         3.0          4.5         1.5\n68  versicolor          5.8         2.7          4.1         1.0\n69  versicolor          6.2         2.2          4.5         1.5\n70  versicolor          5.6         2.5          3.9         1.1\n71  versicolor          5.9         3.2          4.8         1.8\n72  versicolor          6.1         2.8          4.0         1.3\n73  versicolor          6.3         2.5          4.9         1.5\n74  versicolor          6.1         2.8          4.7         1.2\n75  versicolor          6.4         2.9          4.3         1.3\n76  versicolor          6.6         3.0          4.4         1.4\n77  versicolor          6.8         2.8          4.8         1.4\n78  versicolor          6.7         3.0          5.0         1.7\n79  versicolor          6.0         2.9          4.5         1.5\n80  versicolor          5.7         2.6          3.5         1.0\n81  versicolor          5.5         2.4          3.8         1.1\n82  versicolor          5.5         2.4          3.7         1.0\n83  versicolor          5.8         2.7          3.9         1.2\n84  versicolor          6.0         2.7          5.1         1.6\n85  versicolor          5.4         3.0          4.5         1.5\n86  versicolor          6.0         3.4          4.5         1.6\n87  versicolor          6.7         3.1          4.7         1.5\n88  versicolor          6.3         2.3          4.4         1.3\n89  versicolor          5.6         3.0          4.1         1.3\n90  versicolor          5.5         2.5          4.0         1.3\n91  versicolor          5.5         2.6          4.4         1.2\n92  versicolor          6.1         3.0          4.6         1.4\n93  versicolor          5.8         2.6          4.0         1.2\n94  versicolor          5.0         2.3          3.3         1.0\n95  versicolor          5.6         2.7          4.2         1.3\n96  versicolor          5.7         3.0          4.2         1.2\n97  versicolor          5.7         2.9          4.2         1.3\n98  versicolor          6.2         2.9          4.3         1.3\n99  versicolor          5.1         2.5          3.0         1.1\n100 versicolor          5.7         2.8          4.1         1.3\n101  virginica          6.3         3.3          6.0         2.5\n102  virginica          5.8         2.7          5.1         1.9\n103  virginica          7.1         3.0          5.9         2.1\n104  virginica          6.3         2.9          5.6         1.8\n105  virginica          6.5         3.0          5.8         2.2\n106  virginica          7.6         3.0          6.6         2.1\n107  virginica          4.9         2.5          4.5         1.7\n108  virginica          7.3         2.9          6.3         1.8\n109  virginica          6.7         2.5          5.8         1.8\n110  virginica          7.2         3.6          6.1         2.5\n111  virginica          6.5         3.2          5.1         2.0\n112  virginica          6.4         2.7          5.3         1.9\n113  virginica          6.8         3.0          5.5         2.1\n114  virginica          5.7         2.5          5.0         2.0\n115  virginica          5.8         2.8          5.1         2.4\n116  virginica          6.4         3.2          5.3         2.3\n117  virginica          6.5         3.0          5.5         1.8\n118  virginica          7.7         3.8          6.7         2.2\n119  virginica          7.7         2.6          6.9         2.3\n120  virginica          6.0         2.2          5.0         1.5\n121  virginica          6.9         3.2          5.7         2.3\n122  virginica          5.6         2.8          4.9         2.0\n123  virginica          7.7         2.8          6.7         2.0\n124  virginica          6.3         2.7          4.9         1.8\n125  virginica          6.7         3.3          5.7         2.1\n126  virginica          7.2         3.2          6.0         1.8\n127  virginica          6.2         2.8          4.8         1.8\n128  virginica          6.1         3.0          4.9         1.8\n129  virginica          6.4         2.8          5.6         2.1\n130  virginica          7.2         3.0          5.8         1.6\n131  virginica          7.4         2.8          6.1         1.9\n132  virginica          7.9         3.8          6.4         2.0\n133  virginica          6.4         2.8          5.6         2.2\n134  virginica          6.3         2.8          5.1         1.5\n135  virginica          6.1         2.6          5.6         1.4\n136  virginica          7.7         3.0          6.1         2.3\n137  virginica          6.3         3.4          5.6         2.4\n138  virginica          6.4         3.1          5.5         1.8\n139  virginica          6.0         3.0          4.8         1.8\n140  virginica          6.9         3.1          5.4         2.1\n141  virginica          6.7         3.1          5.6         2.4\n142  virginica          6.9         3.1          5.1         2.3\n143  virginica          5.8         2.7          5.1         1.9\n144  virginica          6.8         3.2          5.9         2.3\n145  virginica          6.7         3.3          5.7         2.5\n146  virginica          6.7         3.0          5.2         2.3\n147  virginica          6.3         2.5          5.0         1.9\n148  virginica          6.5         3.0          5.2         2.0\n149  virginica          6.2         3.4          5.4         2.3\n150  virginica          5.9         3.0          5.1         1.8\n\n\n\nMove Species to be the first column using relocate().\n\n\nrelocate(iris, Species, .before = 1)\n\n       Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n1       setosa          5.1         3.5          1.4         0.2\n2       setosa          4.9         3.0          1.4         0.2\n3       setosa          4.7         3.2          1.3         0.2\n4       setosa          4.6         3.1          1.5         0.2\n5       setosa          5.0         3.6          1.4         0.2\n6       setosa          5.4         3.9          1.7         0.4\n7       setosa          4.6         3.4          1.4         0.3\n8       setosa          5.0         3.4          1.5         0.2\n9       setosa          4.4         2.9          1.4         0.2\n10      setosa          4.9         3.1          1.5         0.1\n11      setosa          5.4         3.7          1.5         0.2\n12      setosa          4.8         3.4          1.6         0.2\n13      setosa          4.8         3.0          1.4         0.1\n14      setosa          4.3         3.0          1.1         0.1\n15      setosa          5.8         4.0          1.2         0.2\n16      setosa          5.7         4.4          1.5         0.4\n17      setosa          5.4         3.9          1.3         0.4\n18      setosa          5.1         3.5          1.4         0.3\n19      setosa          5.7         3.8          1.7         0.3\n20      setosa          5.1         3.8          1.5         0.3\n21      setosa          5.4         3.4          1.7         0.2\n22      setosa          5.1         3.7          1.5         0.4\n23      setosa          4.6         3.6          1.0         0.2\n24      setosa          5.1         3.3          1.7         0.5\n25      setosa          4.8         3.4          1.9         0.2\n26      setosa          5.0         3.0          1.6         0.2\n27      setosa          5.0         3.4          1.6         0.4\n28      setosa          5.2         3.5          1.5         0.2\n29      setosa          5.2         3.4          1.4         0.2\n30      setosa          4.7         3.2          1.6         0.2\n31      setosa          4.8         3.1          1.6         0.2\n32      setosa          5.4         3.4          1.5         0.4\n33      setosa          5.2         4.1          1.5         0.1\n34      setosa          5.5         4.2          1.4         0.2\n35      setosa          4.9         3.1          1.5         0.2\n36      setosa          5.0         3.2          1.2         0.2\n37      setosa          5.5         3.5          1.3         0.2\n38      setosa          4.9         3.6          1.4         0.1\n39      setosa          4.4         3.0          1.3         0.2\n40      setosa          5.1         3.4          1.5         0.2\n41      setosa          5.0         3.5          1.3         0.3\n42      setosa          4.5         2.3          1.3         0.3\n43      setosa          4.4         3.2          1.3         0.2\n44      setosa          5.0         3.5          1.6         0.6\n45      setosa          5.1         3.8          1.9         0.4\n46      setosa          4.8         3.0          1.4         0.3\n47      setosa          5.1         3.8          1.6         0.2\n48      setosa          4.6         3.2          1.4         0.2\n49      setosa          5.3         3.7          1.5         0.2\n50      setosa          5.0         3.3          1.4         0.2\n51  versicolor          7.0         3.2          4.7         1.4\n52  versicolor          6.4         3.2          4.5         1.5\n53  versicolor          6.9         3.1          4.9         1.5\n54  versicolor          5.5         2.3          4.0         1.3\n55  versicolor          6.5         2.8          4.6         1.5\n56  versicolor          5.7         2.8          4.5         1.3\n57  versicolor          6.3         3.3          4.7         1.6\n58  versicolor          4.9         2.4          3.3         1.0\n59  versicolor          6.6         2.9          4.6         1.3\n60  versicolor          5.2         2.7          3.9         1.4\n61  versicolor          5.0         2.0          3.5         1.0\n62  versicolor          5.9         3.0          4.2         1.5\n63  versicolor          6.0         2.2          4.0         1.0\n64  versicolor          6.1         2.9          4.7         1.4\n65  versicolor          5.6         2.9          3.6         1.3\n66  versicolor          6.7         3.1          4.4         1.4\n67  versicolor          5.6         3.0          4.5         1.5\n68  versicolor          5.8         2.7          4.1         1.0\n69  versicolor          6.2         2.2          4.5         1.5\n70  versicolor          5.6         2.5          3.9         1.1\n71  versicolor          5.9         3.2          4.8         1.8\n72  versicolor          6.1         2.8          4.0         1.3\n73  versicolor          6.3         2.5          4.9         1.5\n74  versicolor          6.1         2.8          4.7         1.2\n75  versicolor          6.4         2.9          4.3         1.3\n76  versicolor          6.6         3.0          4.4         1.4\n77  versicolor          6.8         2.8          4.8         1.4\n78  versicolor          6.7         3.0          5.0         1.7\n79  versicolor          6.0         2.9          4.5         1.5\n80  versicolor          5.7         2.6          3.5         1.0\n81  versicolor          5.5         2.4          3.8         1.1\n82  versicolor          5.5         2.4          3.7         1.0\n83  versicolor          5.8         2.7          3.9         1.2\n84  versicolor          6.0         2.7          5.1         1.6\n85  versicolor          5.4         3.0          4.5         1.5\n86  versicolor          6.0         3.4          4.5         1.6\n87  versicolor          6.7         3.1          4.7         1.5\n88  versicolor          6.3         2.3          4.4         1.3\n89  versicolor          5.6         3.0          4.1         1.3\n90  versicolor          5.5         2.5          4.0         1.3\n91  versicolor          5.5         2.6          4.4         1.2\n92  versicolor          6.1         3.0          4.6         1.4\n93  versicolor          5.8         2.6          4.0         1.2\n94  versicolor          5.0         2.3          3.3         1.0\n95  versicolor          5.6         2.7          4.2         1.3\n96  versicolor          5.7         3.0          4.2         1.2\n97  versicolor          5.7         2.9          4.2         1.3\n98  versicolor          6.2         2.9          4.3         1.3\n99  versicolor          5.1         2.5          3.0         1.1\n100 versicolor          5.7         2.8          4.1         1.3\n101  virginica          6.3         3.3          6.0         2.5\n102  virginica          5.8         2.7          5.1         1.9\n103  virginica          7.1         3.0          5.9         2.1\n104  virginica          6.3         2.9          5.6         1.8\n105  virginica          6.5         3.0          5.8         2.2\n106  virginica          7.6         3.0          6.6         2.1\n107  virginica          4.9         2.5          4.5         1.7\n108  virginica          7.3         2.9          6.3         1.8\n109  virginica          6.7         2.5          5.8         1.8\n110  virginica          7.2         3.6          6.1         2.5\n111  virginica          6.5         3.2          5.1         2.0\n112  virginica          6.4         2.7          5.3         1.9\n113  virginica          6.8         3.0          5.5         2.1\n114  virginica          5.7         2.5          5.0         2.0\n115  virginica          5.8         2.8          5.1         2.4\n116  virginica          6.4         3.2          5.3         2.3\n117  virginica          6.5         3.0          5.5         1.8\n118  virginica          7.7         3.8          6.7         2.2\n119  virginica          7.7         2.6          6.9         2.3\n120  virginica          6.0         2.2          5.0         1.5\n121  virginica          6.9         3.2          5.7         2.3\n122  virginica          5.6         2.8          4.9         2.0\n123  virginica          7.7         2.8          6.7         2.0\n124  virginica          6.3         2.7          4.9         1.8\n125  virginica          6.7         3.3          5.7         2.1\n126  virginica          7.2         3.2          6.0         1.8\n127  virginica          6.2         2.8          4.8         1.8\n128  virginica          6.1         3.0          4.9         1.8\n129  virginica          6.4         2.8          5.6         2.1\n130  virginica          7.2         3.0          5.8         1.6\n131  virginica          7.4         2.8          6.1         1.9\n132  virginica          7.9         3.8          6.4         2.0\n133  virginica          6.4         2.8          5.6         2.2\n134  virginica          6.3         2.8          5.1         1.5\n135  virginica          6.1         2.6          5.6         1.4\n136  virginica          7.7         3.0          6.1         2.3\n137  virginica          6.3         3.4          5.6         2.4\n138  virginica          6.4         3.1          5.5         1.8\n139  virginica          6.0         3.0          4.8         1.8\n140  virginica          6.9         3.1          5.4         2.1\n141  virginica          6.7         3.1          5.6         2.4\n142  virginica          6.9         3.1          5.1         2.3\n143  virginica          5.8         2.7          5.1         1.9\n144  virginica          6.8         3.2          5.9         2.3\n145  virginica          6.7         3.3          5.7         2.5\n146  virginica          6.7         3.0          5.2         2.3\n147  virginica          6.3         2.5          5.0         1.9\n148  virginica          6.5         3.0          5.2         2.0\n149  virginica          6.2         3.4          5.4         2.3\n150  virginica          5.9         3.0          5.1         1.8\n\n\n\nRename Species to species using select() and a helper function.\n\n\nselect(iris, everything(), species = Species)\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    species\n1            5.1         3.5          1.4         0.2     setosa\n2            4.9         3.0          1.4         0.2     setosa\n3            4.7         3.2          1.3         0.2     setosa\n4            4.6         3.1          1.5         0.2     setosa\n5            5.0         3.6          1.4         0.2     setosa\n6            5.4         3.9          1.7         0.4     setosa\n7            4.6         3.4          1.4         0.3     setosa\n8            5.0         3.4          1.5         0.2     setosa\n9            4.4         2.9          1.4         0.2     setosa\n10           4.9         3.1          1.5         0.1     setosa\n11           5.4         3.7          1.5         0.2     setosa\n12           4.8         3.4          1.6         0.2     setosa\n13           4.8         3.0          1.4         0.1     setosa\n14           4.3         3.0          1.1         0.1     setosa\n15           5.8         4.0          1.2         0.2     setosa\n16           5.7         4.4          1.5         0.4     setosa\n17           5.4         3.9          1.3         0.4     setosa\n18           5.1         3.5          1.4         0.3     setosa\n19           5.7         3.8          1.7         0.3     setosa\n20           5.1         3.8          1.5         0.3     setosa\n21           5.4         3.4          1.7         0.2     setosa\n22           5.1         3.7          1.5         0.4     setosa\n23           4.6         3.6          1.0         0.2     setosa\n24           5.1         3.3          1.7         0.5     setosa\n25           4.8         3.4          1.9         0.2     setosa\n26           5.0         3.0          1.6         0.2     setosa\n27           5.0         3.4          1.6         0.4     setosa\n28           5.2         3.5          1.5         0.2     setosa\n29           5.2         3.4          1.4         0.2     setosa\n30           4.7         3.2          1.6         0.2     setosa\n31           4.8         3.1          1.6         0.2     setosa\n32           5.4         3.4          1.5         0.4     setosa\n33           5.2         4.1          1.5         0.1     setosa\n34           5.5         4.2          1.4         0.2     setosa\n35           4.9         3.1          1.5         0.2     setosa\n36           5.0         3.2          1.2         0.2     setosa\n37           5.5         3.5          1.3         0.2     setosa\n38           4.9         3.6          1.4         0.1     setosa\n39           4.4         3.0          1.3         0.2     setosa\n40           5.1         3.4          1.5         0.2     setosa\n41           5.0         3.5          1.3         0.3     setosa\n42           4.5         2.3          1.3         0.3     setosa\n43           4.4         3.2          1.3         0.2     setosa\n44           5.0         3.5          1.6         0.6     setosa\n45           5.1         3.8          1.9         0.4     setosa\n46           4.8         3.0          1.4         0.3     setosa\n47           5.1         3.8          1.6         0.2     setosa\n48           4.6         3.2          1.4         0.2     setosa\n49           5.3         3.7          1.5         0.2     setosa\n50           5.0         3.3          1.4         0.2     setosa\n51           7.0         3.2          4.7         1.4 versicolor\n52           6.4         3.2          4.5         1.5 versicolor\n53           6.9         3.1          4.9         1.5 versicolor\n54           5.5         2.3          4.0         1.3 versicolor\n55           6.5         2.8          4.6         1.5 versicolor\n56           5.7         2.8          4.5         1.3 versicolor\n57           6.3         3.3          4.7         1.6 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n59           6.6         2.9          4.6         1.3 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n62           5.9         3.0          4.2         1.5 versicolor\n63           6.0         2.2          4.0         1.0 versicolor\n64           6.1         2.9          4.7         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n66           6.7         3.1          4.4         1.4 versicolor\n67           5.6         3.0          4.5         1.5 versicolor\n68           5.8         2.7          4.1         1.0 versicolor\n69           6.2         2.2          4.5         1.5 versicolor\n70           5.6         2.5          3.9         1.1 versicolor\n71           5.9         3.2          4.8         1.8 versicolor\n72           6.1         2.8          4.0         1.3 versicolor\n73           6.3         2.5          4.9         1.5 versicolor\n74           6.1         2.8          4.7         1.2 versicolor\n75           6.4         2.9          4.3         1.3 versicolor\n76           6.6         3.0          4.4         1.4 versicolor\n77           6.8         2.8          4.8         1.4 versicolor\n78           6.7         3.0          5.0         1.7 versicolor\n79           6.0         2.9          4.5         1.5 versicolor\n80           5.7         2.6          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n83           5.8         2.7          3.9         1.2 versicolor\n84           6.0         2.7          5.1         1.6 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n86           6.0         3.4          4.5         1.6 versicolor\n87           6.7         3.1          4.7         1.5 versicolor\n88           6.3         2.3          4.4         1.3 versicolor\n89           5.6         3.0          4.1         1.3 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n92           6.1         3.0          4.6         1.4 versicolor\n93           5.8         2.6          4.0         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n95           5.6         2.7          4.2         1.3 versicolor\n96           5.7         3.0          4.2         1.2 versicolor\n97           5.7         2.9          4.2         1.3 versicolor\n98           6.2         2.9          4.3         1.3 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n100          5.7         2.8          4.1         1.3 versicolor\n101          6.3         3.3          6.0         2.5  virginica\n102          5.8         2.7          5.1         1.9  virginica\n103          7.1         3.0          5.9         2.1  virginica\n104          6.3         2.9          5.6         1.8  virginica\n105          6.5         3.0          5.8         2.2  virginica\n106          7.6         3.0          6.6         2.1  virginica\n107          4.9         2.5          4.5         1.7  virginica\n108          7.3         2.9          6.3         1.8  virginica\n109          6.7         2.5          5.8         1.8  virginica\n110          7.2         3.6          6.1         2.5  virginica\n111          6.5         3.2          5.1         2.0  virginica\n112          6.4         2.7          5.3         1.9  virginica\n113          6.8         3.0          5.5         2.1  virginica\n114          5.7         2.5          5.0         2.0  virginica\n115          5.8         2.8          5.1         2.4  virginica\n116          6.4         3.2          5.3         2.3  virginica\n117          6.5         3.0          5.5         1.8  virginica\n118          7.7         3.8          6.7         2.2  virginica\n119          7.7         2.6          6.9         2.3  virginica\n120          6.0         2.2          5.0         1.5  virginica\n121          6.9         3.2          5.7         2.3  virginica\n122          5.6         2.8          4.9         2.0  virginica\n123          7.7         2.8          6.7         2.0  virginica\n124          6.3         2.7          4.9         1.8  virginica\n125          6.7         3.3          5.7         2.1  virginica\n126          7.2         3.2          6.0         1.8  virginica\n127          6.2         2.8          4.8         1.8  virginica\n128          6.1         3.0          4.9         1.8  virginica\n129          6.4         2.8          5.6         2.1  virginica\n130          7.2         3.0          5.8         1.6  virginica\n131          7.4         2.8          6.1         1.9  virginica\n132          7.9         3.8          6.4         2.0  virginica\n133          6.4         2.8          5.6         2.2  virginica\n134          6.3         2.8          5.1         1.5  virginica\n135          6.1         2.6          5.6         1.4  virginica\n136          7.7         3.0          6.1         2.3  virginica\n137          6.3         3.4          5.6         2.4  virginica\n138          6.4         3.1          5.5         1.8  virginica\n139          6.0         3.0          4.8         1.8  virginica\n140          6.9         3.1          5.4         2.1  virginica\n141          6.7         3.1          5.6         2.4  virginica\n142          6.9         3.1          5.1         2.3  virginica\n143          5.8         2.7          5.1         1.9  virginica\n144          6.8         3.2          5.9         2.3  virginica\n145          6.7         3.3          5.7         2.5  virginica\n146          6.7         3.0          5.2         2.3  virginica\n147          6.3         2.5          5.0         1.9  virginica\n148          6.5         3.0          5.2         2.0  virginica\n149          6.2         3.4          5.4         2.3  virginica\n150          5.9         3.0          5.1         1.8  virginica\n\n\n\nRename Species to species using rename().\n\n\nrename(iris, species = Species)\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    species\n1            5.1         3.5          1.4         0.2     setosa\n2            4.9         3.0          1.4         0.2     setosa\n3            4.7         3.2          1.3         0.2     setosa\n4            4.6         3.1          1.5         0.2     setosa\n5            5.0         3.6          1.4         0.2     setosa\n6            5.4         3.9          1.7         0.4     setosa\n7            4.6         3.4          1.4         0.3     setosa\n8            5.0         3.4          1.5         0.2     setosa\n9            4.4         2.9          1.4         0.2     setosa\n10           4.9         3.1          1.5         0.1     setosa\n11           5.4         3.7          1.5         0.2     setosa\n12           4.8         3.4          1.6         0.2     setosa\n13           4.8         3.0          1.4         0.1     setosa\n14           4.3         3.0          1.1         0.1     setosa\n15           5.8         4.0          1.2         0.2     setosa\n16           5.7         4.4          1.5         0.4     setosa\n17           5.4         3.9          1.3         0.4     setosa\n18           5.1         3.5          1.4         0.3     setosa\n19           5.7         3.8          1.7         0.3     setosa\n20           5.1         3.8          1.5         0.3     setosa\n21           5.4         3.4          1.7         0.2     setosa\n22           5.1         3.7          1.5         0.4     setosa\n23           4.6         3.6          1.0         0.2     setosa\n24           5.1         3.3          1.7         0.5     setosa\n25           4.8         3.4          1.9         0.2     setosa\n26           5.0         3.0          1.6         0.2     setosa\n27           5.0         3.4          1.6         0.4     setosa\n28           5.2         3.5          1.5         0.2     setosa\n29           5.2         3.4          1.4         0.2     setosa\n30           4.7         3.2          1.6         0.2     setosa\n31           4.8         3.1          1.6         0.2     setosa\n32           5.4         3.4          1.5         0.4     setosa\n33           5.2         4.1          1.5         0.1     setosa\n34           5.5         4.2          1.4         0.2     setosa\n35           4.9         3.1          1.5         0.2     setosa\n36           5.0         3.2          1.2         0.2     setosa\n37           5.5         3.5          1.3         0.2     setosa\n38           4.9         3.6          1.4         0.1     setosa\n39           4.4         3.0          1.3         0.2     setosa\n40           5.1         3.4          1.5         0.2     setosa\n41           5.0         3.5          1.3         0.3     setosa\n42           4.5         2.3          1.3         0.3     setosa\n43           4.4         3.2          1.3         0.2     setosa\n44           5.0         3.5          1.6         0.6     setosa\n45           5.1         3.8          1.9         0.4     setosa\n46           4.8         3.0          1.4         0.3     setosa\n47           5.1         3.8          1.6         0.2     setosa\n48           4.6         3.2          1.4         0.2     setosa\n49           5.3         3.7          1.5         0.2     setosa\n50           5.0         3.3          1.4         0.2     setosa\n51           7.0         3.2          4.7         1.4 versicolor\n52           6.4         3.2          4.5         1.5 versicolor\n53           6.9         3.1          4.9         1.5 versicolor\n54           5.5         2.3          4.0         1.3 versicolor\n55           6.5         2.8          4.6         1.5 versicolor\n56           5.7         2.8          4.5         1.3 versicolor\n57           6.3         3.3          4.7         1.6 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n59           6.6         2.9          4.6         1.3 versicolor\n60           5.2         2.7          3.9         1.4 versicolor\n61           5.0         2.0          3.5         1.0 versicolor\n62           5.9         3.0          4.2         1.5 versicolor\n63           6.0         2.2          4.0         1.0 versicolor\n64           6.1         2.9          4.7         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n66           6.7         3.1          4.4         1.4 versicolor\n67           5.6         3.0          4.5         1.5 versicolor\n68           5.8         2.7          4.1         1.0 versicolor\n69           6.2         2.2          4.5         1.5 versicolor\n70           5.6         2.5          3.9         1.1 versicolor\n71           5.9         3.2          4.8         1.8 versicolor\n72           6.1         2.8          4.0         1.3 versicolor\n73           6.3         2.5          4.9         1.5 versicolor\n74           6.1         2.8          4.7         1.2 versicolor\n75           6.4         2.9          4.3         1.3 versicolor\n76           6.6         3.0          4.4         1.4 versicolor\n77           6.8         2.8          4.8         1.4 versicolor\n78           6.7         3.0          5.0         1.7 versicolor\n79           6.0         2.9          4.5         1.5 versicolor\n80           5.7         2.6          3.5         1.0 versicolor\n81           5.5         2.4          3.8         1.1 versicolor\n82           5.5         2.4          3.7         1.0 versicolor\n83           5.8         2.7          3.9         1.2 versicolor\n84           6.0         2.7          5.1         1.6 versicolor\n85           5.4         3.0          4.5         1.5 versicolor\n86           6.0         3.4          4.5         1.6 versicolor\n87           6.7         3.1          4.7         1.5 versicolor\n88           6.3         2.3          4.4         1.3 versicolor\n89           5.6         3.0          4.1         1.3 versicolor\n90           5.5         2.5          4.0         1.3 versicolor\n91           5.5         2.6          4.4         1.2 versicolor\n92           6.1         3.0          4.6         1.4 versicolor\n93           5.8         2.6          4.0         1.2 versicolor\n94           5.0         2.3          3.3         1.0 versicolor\n95           5.6         2.7          4.2         1.3 versicolor\n96           5.7         3.0          4.2         1.2 versicolor\n97           5.7         2.9          4.2         1.3 versicolor\n98           6.2         2.9          4.3         1.3 versicolor\n99           5.1         2.5          3.0         1.1 versicolor\n100          5.7         2.8          4.1         1.3 versicolor\n101          6.3         3.3          6.0         2.5  virginica\n102          5.8         2.7          5.1         1.9  virginica\n103          7.1         3.0          5.9         2.1  virginica\n104          6.3         2.9          5.6         1.8  virginica\n105          6.5         3.0          5.8         2.2  virginica\n106          7.6         3.0          6.6         2.1  virginica\n107          4.9         2.5          4.5         1.7  virginica\n108          7.3         2.9          6.3         1.8  virginica\n109          6.7         2.5          5.8         1.8  virginica\n110          7.2         3.6          6.1         2.5  virginica\n111          6.5         3.2          5.1         2.0  virginica\n112          6.4         2.7          5.3         1.9  virginica\n113          6.8         3.0          5.5         2.1  virginica\n114          5.7         2.5          5.0         2.0  virginica\n115          5.8         2.8          5.1         2.4  virginica\n116          6.4         3.2          5.3         2.3  virginica\n117          6.5         3.0          5.5         1.8  virginica\n118          7.7         3.8          6.7         2.2  virginica\n119          7.7         2.6          6.9         2.3  virginica\n120          6.0         2.2          5.0         1.5  virginica\n121          6.9         3.2          5.7         2.3  virginica\n122          5.6         2.8          4.9         2.0  virginica\n123          7.7         2.8          6.7         2.0  virginica\n124          6.3         2.7          4.9         1.8  virginica\n125          6.7         3.3          5.7         2.1  virginica\n126          7.2         3.2          6.0         1.8  virginica\n127          6.2         2.8          4.8         1.8  virginica\n128          6.1         3.0          4.9         1.8  virginica\n129          6.4         2.8          5.6         2.1  virginica\n130          7.2         3.0          5.8         1.6  virginica\n131          7.4         2.8          6.1         1.9  virginica\n132          7.9         3.8          6.4         2.0  virginica\n133          6.4         2.8          5.6         2.2  virginica\n134          6.3         2.8          5.1         1.5  virginica\n135          6.1         2.6          5.6         1.4  virginica\n136          7.7         3.0          6.1         2.3  virginica\n137          6.3         3.4          5.6         2.4  virginica\n138          6.4         3.1          5.5         1.8  virginica\n139          6.0         3.0          4.8         1.8  virginica\n140          6.9         3.1          5.4         2.1  virginica\n141          6.7         3.1          5.6         2.4  virginica\n142          6.9         3.1          5.1         2.3  virginica\n143          5.8         2.7          5.1         1.9  virginica\n144          6.8         3.2          5.9         2.3  virginica\n145          6.7         3.3          5.7         2.5  virginica\n146          6.7         3.0          5.2         2.3  virginica\n147          6.3         2.5          5.0         1.9  virginica\n148          6.5         3.0          5.2         2.0  virginica\n149          6.2         3.4          5.4         2.3  virginica\n150          5.9         3.0          5.1         1.8  virginica"
  },
  {
    "objectID": "code/11_mutating_answers.html",
    "href": "code/11_mutating_answers.html",
    "title": "Mutating columns",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits data set, so import that from https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits.csv (if you don’t already have it) and assign it to traits.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntraits &lt;- read_csv(here::here(\"data/dog_breed_traits.csv\"))\n\nRows: 195 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Breed, Coat Type, Coat Length\ndbl (14): Affectionate With Family, Good With Young Children, Good With Othe...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nView traits to see what it looks like.\n\n\nhead(traits)\n\n# A tibble: 6 × 17\n  Breed     Affectionate With Fa…¹ Good With Young Chil…² `Good With Other Dogs`\n  &lt;chr&gt;                      &lt;dbl&gt;                  &lt;dbl&gt;                  &lt;dbl&gt;\n1 Retrieve…                      5                      5                      5\n2 French B…                      5                      5                      4\n3 German S…                      5                      5                      3\n4 Retrieve…                      5                      5                      5\n5 Bulldogs                       4                      3                      3\n6 Poodles                        5                      5                      3\n# ℹ abbreviated names: ¹​`Affectionate With Family`, ²​`Good With Young Children`\n# ℹ 13 more variables: `Shedding Level` &lt;dbl&gt;, `Coat Grooming Frequency` &lt;dbl&gt;,\n#   `Drooling Level` &lt;dbl&gt;, `Coat Type` &lt;chr&gt;, `Coat Length` &lt;chr&gt;,\n#   `Openness To Strangers` &lt;dbl&gt;, `Playfulness Level` &lt;dbl&gt;,\n#   `Watchdog/Protective Nature` &lt;dbl&gt;, `Adaptability Level` &lt;dbl&gt;,\n#   `Trainability Level` &lt;dbl&gt;, `Energy Level` &lt;dbl&gt;, `Barking Level` &lt;dbl&gt;,\n#   `Mental Stimulation Needs` &lt;dbl&gt;\n\n\n\nReassign traits with only the columns Breed through Coat Length.\n\n\ntraits &lt;- select(traits, Breed:`Coat Length`)\n\n\nReassign traits removing the Drooling Level column. That’s gross.\n\n\ntraits &lt;- select(traits, -`Drooling Level`)\n\n\nWhat terrible column names! Reassign traits and change the column names to \"breed\", \"affectionate\", \"children\", \"other_dogs\", \"shedding\", \"grooming\", \"coat_type\", \"coat_length\". Note, use the colnames() function rather than select() or rename() since you already have the full vector of names.\n\n\ncolnames(traits) &lt;- c(\"breed\", \"affectionate\", \"children\", \"other_dogs\", \"shedding\", \"grooming\", \"coat_type\", \"coat_length\")\n\n\nThe ratings are supposed to run from 0 to 4 rather than 1 to 5. Change the affectionate column by subtracting 1 from the original numbers to rescale the values. Don’t reassign traits.\n\n\nmutate(traits, affectionate = affectionate - 1)\n\n# A tibble: 195 × 8\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Retrievers (Lab…            4        5          5        4        2 Double   \n 2 French Bulldogs             4        5          4        3        1 Smooth   \n 3 German Shepherd…            4        5          3        4        2 Double   \n 4 Retrievers (Gol…            4        5          5        4        2 Double   \n 5 Bulldogs                    3        3          3        3        3 Smooth   \n 6 Poodles                     4        5          3        1        4 Curly    \n 7 Beagles                     2        5          5        3        2 Smooth   \n 8 Rottweilers                 4        3          3        3        1 Smooth   \n 9 Pointers (Germa…            4        5          4        3        2 Smooth   \n10 Dachshunds                  4        3          4        2        2 Smooth   \n# ℹ 185 more rows\n# ℹ 1 more variable: coat_length &lt;chr&gt;\n\n\n\nActually, all of the ratings need to be rescaled. Subtract 1 from all of the ratings columns by using across().\n\n\nmutate(traits, across(affectionate:grooming, ~ .x - 1))\n\n# A tibble: 195 × 8\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Retrievers (Lab…            4        4          4        3        1 Double   \n 2 French Bulldogs             4        4          3        2        0 Smooth   \n 3 German Shepherd…            4        4          2        3        1 Double   \n 4 Retrievers (Gol…            4        4          4        3        1 Double   \n 5 Bulldogs                    3        2          2        2        2 Smooth   \n 6 Poodles                     4        4          2        0        3 Curly    \n 7 Beagles                     2        4          4        2        1 Smooth   \n 8 Rottweilers                 4        2          2        2        0 Smooth   \n 9 Pointers (Germa…            4        4          3        2        1 Smooth   \n10 Dachshunds                  4        2          3        1        1 Smooth   \n# ℹ 185 more rows\n# ℹ 1 more variable: coat_length &lt;chr&gt;\n\n\n\nCreate a new column called coat that combines the coat_type and coat_length columns by pasting the values of those two columns separated by -.\n\n\nmutate(traits, coat = paste(coat_type, coat_length, sep = \"-\"))\n\n# A tibble: 195 × 9\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 French Bulldogs             5        5          4        3        1 Smooth   \n 3 German Shepherd…            5        5          3        4        2 Double   \n 4 Retrievers (Gol…            5        5          5        4        2 Double   \n 5 Bulldogs                    4        3          3        3        3 Smooth   \n 6 Poodles                     5        5          3        1        4 Curly    \n 7 Beagles                     3        5          5        3        2 Smooth   \n 8 Rottweilers                 5        3          3        3        1 Smooth   \n 9 Pointers (Germa…            5        5          4        3        2 Smooth   \n10 Dachshunds                  5        3          4        2        2 Smooth   \n# ℹ 185 more rows\n# ℹ 2 more variables: coat_length &lt;chr&gt;, coat &lt;chr&gt;\n\n\n\nCreate a new column called shed that dichotomizes shedding such that values of 3 and above are “A lot” and values below 3 are “Not much”. Do you need to account for missing data?\n\n\nmutate(traits, shed = ifelse(shedding &gt; 2, \"A lot\", \"Not much\"))\n\n# A tibble: 195 × 9\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 French Bulldogs             5        5          4        3        1 Smooth   \n 3 German Shepherd…            5        5          3        4        2 Double   \n 4 Retrievers (Gol…            5        5          5        4        2 Double   \n 5 Bulldogs                    4        3          3        3        3 Smooth   \n 6 Poodles                     5        5          3        1        4 Curly    \n 7 Beagles                     3        5          5        3        2 Smooth   \n 8 Rottweilers                 5        3          3        3        1 Smooth   \n 9 Pointers (Germa…            5        5          4        3        2 Smooth   \n10 Dachshunds                  5        3          4        2        2 Smooth   \n# ℹ 185 more rows\n# ℹ 2 more variables: coat_length &lt;chr&gt;, shed &lt;chr&gt;\n\n\n\nUse rowwise() to calculate the mean rating for the children and other_dogs columns in a column called mean_rating.\n\n\nrowwise(traits) %&gt;%\n  mutate(mean_rating = mean(children, other_dogs))\n\n# A tibble: 195 × 9\n# Rowwise: \n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 French Bulldogs             5        5          4        3        1 Smooth   \n 3 German Shepherd…            5        5          3        4        2 Double   \n 4 Retrievers (Gol…            5        5          5        4        2 Double   \n 5 Bulldogs                    4        3          3        3        3 Smooth   \n 6 Poodles                     5        5          3        1        4 Curly    \n 7 Beagles                     3        5          5        3        2 Smooth   \n 8 Rottweilers                 5        3          3        3        1 Smooth   \n 9 Pointers (Germa…            5        5          4        3        2 Smooth   \n10 Dachshunds                  5        3          4        2        2 Smooth   \n# ℹ 185 more rows\n# ℹ 2 more variables: coat_length &lt;chr&gt;, mean_rating &lt;dbl&gt;\n\n\n\nCreate a column called coat_type2 that categorizes the coat_type values in the following way and puts it after coat_type:\n\n\n“very petable” = “Smooth”, “Silky”, “Wavy”\n“petable” = “Double”, “Curly”\n“not petable” = “Wiry”, “Hairless”, “Rough”, “Corded”\n\n\nmutate(traits, coat_type2 = case_when(\n  coat_type %in% c(\"Smooth\", \"Silky\", \"Wavy\") ~ \"very petable\",\n  coat_type %in% c(\"Wiry\", \"Hairless\", \"Rough\", \"Corded\") ~ \"not petable\",\n  coat_type %in% c(\"Double\", \"Curly\") ~ \"petable\"),\n  .after = coat_type\n)\n\n# A tibble: 195 × 9\n   breed affectionate children other_dogs shedding grooming coat_type coat_type2\n   &lt;chr&gt;        &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;     \n 1 Retr…            5        5          5        4        2 Double    petable   \n 2 Fren…            5        5          4        3        1 Smooth    very peta…\n 3 Germ…            5        5          3        4        2 Double    petable   \n 4 Retr…            5        5          5        4        2 Double    petable   \n 5 Bull…            4        3          3        3        3 Smooth    very peta…\n 6 Pood…            5        5          3        1        4 Curly     petable   \n 7 Beag…            3        5          5        3        2 Smooth    very peta…\n 8 Rott…            5        3          3        3        1 Smooth    very peta…\n 9 Poin…            5        5          4        3        2 Smooth    very peta…\n10 Dach…            5        3          4        2        2 Smooth    very peta…\n# ℹ 185 more rows\n# ℹ 1 more variable: coat_length &lt;chr&gt;"
  },
  {
    "objectID": "code/12_piping_answers.html",
    "href": "code/12_piping_answers.html",
    "title": "Piping",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits data set.\n\nCreate a pipeline to do all of the following:\n\n\nassign pipeline to traits\nimport data from https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits.csv\nsubset only the columns Breed through Coat Length\nremove the Drooling Level column\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntraits &lt;- read_csv(\"https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits.csv\") |&gt; \n  select(Breed:`Coat Length`) |&gt; \n  select(!`Drooling Level`)\n\nRows: 195 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Breed, Coat Type, Coat Length\ndbl (14): Affectionate With Family, Good With Young Children, Good With Othe...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nRename the column names to \"breed\", \"affectionate\", \"children\", \"other_dogs\", \"shedding\", \"grooming\", \"coat_type\", \"coat_length\" using this vector (either at the end of the last pipeline or in a separate line).\n\n\ncolnames(traits) &lt;- c(\"breed\", \"affectionate\", \"children\", \"other_dogs\", \"shedding\", \"grooming\", \"coat_type\", \"coat_length\")\n\n\nIn a new pipe, use traits to do the following.\n\n\nassign to traits2\nrescale all of the ratings columns by subtracting 1 from all of the values\ncreate a new column called coat that combines the coat_type and coat_length columns by pasting the values of those two columns separated by -\ncreate a new column called shed that dichotomizes shedding such that values of 3 and above are “A lot” and values below 3 are “Not much” and places the new column after shedding\ncalculate the mean rating for the children and other_dogs columns in a column called mean_rating and place it after other_dogs\n\n\ntraits2 &lt;- traits |&gt; \n  mutate(across(affectionate:grooming, ~ .x - 1)) |&gt; \n  mutate(coat = paste(coat_type, coat_length, sep = \"-\")) |&gt; \n  mutate(shed = ifelse(shedding &gt; 2, \"A lot\", \"Not much\"), .after = \"shedding\") |&gt; \n  rowwise() %&gt;%\n  mutate(mean_rating = mean(c(children, other_dogs)), .after = \"other_dogs\")\n\n\nIn a new pipe, use traits2 to do the following.\n\n\nassign to coat_grooming\nsubset only the grooming and coat_type columns\nrun a linear model (lm) using the formula grooming ~ coat_type (remember to use a placeholder for the data)\napply the summary() function\nprint the results to console\n\n\n(coat_grooming &lt;- traits2 |&gt; \n  select(grooming, coat_type) |&gt; \n  lm(grooming ~ coat_type, data = _) |&gt; \n   summary())\n\n\nCall:\nlm(formula = grooming ~ coat_type, data = select(traits2, grooming, \n    coat_type))\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.5000 -0.5909  0.3134  0.4091  2.4091 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)         2.5000     0.4025   6.212 3.35e-09 ***\ncoat_typeCurly     -0.5000     0.5045  -0.991 0.322938    \ncoat_typeDouble    -0.9091     0.4145  -2.193 0.029520 *  \ncoat_typeHairless  -2.1667     0.6148  -3.524 0.000534 ***\ncoat_typeRough     -0.8333     0.6148  -1.356 0.176889    \ncoat_typeSilky     -0.1667     0.4837  -0.345 0.730805    \ncoat_typeSmooth    -1.8134     0.4143  -4.377 2.00e-05 ***\ncoat_typeWavy      -1.0000     0.5196  -1.925 0.055796 .  \ncoat_typeWiry      -1.2000     0.4284  -2.801 0.005636 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8049 on 186 degrees of freedom\nMultiple R-squared:  0.3054,    Adjusted R-squared:  0.2755 \nF-statistic: 10.22 on 8 and 186 DF,  p-value: 8.381e-12"
  },
  {
    "objectID": "code/13_filtering_answers.html",
    "href": "code/13_filtering_answers.html",
    "title": "Filtering rows",
    "section": "",
    "text": "For these exercises, we’ll use a new clean version of the dog breed traits data set.\n\nImport data from https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits_clean.csv and assign to traits.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntraits &lt;- read_csv(\"https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits_clean.csv\")\n\nRows: 197 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): breed, coat_type, coat_length\ndbl (5): affectionate, children, other_dogs, shedding, grooming\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nReturn dogs only with short coats.\n\n\nfilter(traits, coat_length == \"Short\")\n\n# A tibble: 87 × 8\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 French Bulldogs             5        5          4        3        1 Smooth   \n 3 Bulldogs                    4        3          3        3        3 Smooth   \n 4 Beagles                     3        5          5        3        2 Smooth   \n 5 Rottweilers                 5        3          3        3        1 Smooth   \n 6 Pointers (Germa…            5        5          4        3        2 Smooth   \n 7 Dachshunds                  5        3          4        2        2 Smooth   \n 8 Pembroke Welsh …            5        3          4        4        2 Double   \n 9 Boxers                      4        5          3        2        2 Smooth   \n10 Great Danes                 5        3          3        3        1 Smooth   \n# ℹ 77 more rows\n# ℹ 1 more variable: coat_length &lt;chr&gt;\n\n\n\nReturn a data frame excluding dogs with short coats.\n\n\nfilter(traits, coat_length != \"Short\")\n\n# A tibble: 109 × 8\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 German Shepherd…            5        5          3        4        2 Double   \n 2 Retrievers (Gol…            5        5          5        4        2 Double   \n 3 Poodles                     5        5          3        1        4 Curly    \n 4 Australian Shep…            3        5          3        3        2 Double   \n 5 Yorkshire Terri…            5        5          3        1        5 Silky    \n 6 Siberian Huskies            5        5          5        4        2 Double   \n 7 Cavalier King C…            5        5          5        2        2 Wavy     \n 8 Miniature Schna…            5        5          3        3        4 Wiry     \n 9 Shih Tzu                    5        5          5        1        4 Double   \n10 Bernese Mountai…            5        5          5        5        3 Double   \n# ℹ 99 more rows\n# ℹ 1 more variable: coat_length &lt;chr&gt;\n\n\n\nReturn dogs with double or silky coats.\n\n\nfilter(traits, coat_type %in% c(\"Double\", \"Silky\"))\n\n# A tibble: 75 × 8\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 German Shepherd…            5        5          3        4        2 Double   \n 3 Retrievers (Gol…            5        5          5        4        2 Double   \n 4 Pembroke Welsh …            5        3          4        4        2 Double   \n 5 Australian Shep…            3        5          3        3        2 Double   \n 6 Yorkshire Terri…            5        5          3        1        5 Silky    \n 7 Siberian Huskies            5        5          5        4        2 Double   \n 8 Shih Tzu                    5        5          5        1        4 Double   \n 9 Bernese Mountai…            5        5          5        5        3 Double   \n10 Pomeranians                 5        3          3        2        3 Double   \n# ℹ 65 more rows\n# ℹ 1 more variable: coat_length &lt;chr&gt;\n\n\n\nReturn dogs with double or silky coats and shedding ratings 3 or below.\n\n\nfilter(traits, coat_type %in% c(\"Double\", \"Silky\") & shedding &lt;= 3)\n\n# A tibble: 65 × 8\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Australian Shep…            3        5          3        3        2 Double   \n 2 Yorkshire Terri…            5        5          3        1        5 Silky    \n 3 Shih Tzu                    5        5          5        1        4 Double   \n 4 Pomeranians                 5        3          3        2        3 Double   \n 5 Havanese                    5        5          5        2        3 Double   \n 6 Spaniels (Engli…            5        3          4        3        2 Double   \n 7 Shetland Sheepd…            5        5          5        3        3 Double   \n 8 Brittanys                   3        4          4        3        3 Double   \n 9 Spaniels (Cocke…            4        5          5        3        4 Double   \n10 Miniature Ameri…            5        5          5        3        3 Double   \n# ℹ 55 more rows\n# ℹ 1 more variable: coat_length &lt;chr&gt;\n\n\n\nReturn dogs with NA for coat_type.\n\n\nfilter(traits, is.na(coat_type))\n\n# A tibble: 1 × 8\n  breed affectionate children other_dogs shedding grooming coat_type coat_length\n  &lt;chr&gt;        &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;      \n1 Engl…            4        5          5        3        2 &lt;NA&gt;      &lt;NA&gt;       \n\n\n\nReturn dogs with NA for any column.\n\n\nfilter(traits, if_any(everything(), is.na))\n\n# A tibble: 2 × 8\n  breed affectionate children other_dogs shedding grooming coat_type coat_length\n  &lt;chr&gt;        &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;      \n1 Amer…            5        2          4        5       NA Rough     Medium     \n2 Engl…            4        5          5        3        2 &lt;NA&gt;      &lt;NA&gt;       \n\n\n\nReturn dogs not missing any data.\n\n\ndrop_na(traits)\n\n# A tibble: 195 × 8\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 French Bulldogs             5        5          4        3        1 Smooth   \n 3 German Shepherd…            5        5          3        4        2 Double   \n 4 Retrievers (Gol…            5        5          5        4        2 Double   \n 5 Bulldogs                    4        3          3        3        3 Smooth   \n 6 Poodles                     5        5          3        1        4 Curly    \n 7 Beagles                     3        5          5        3        2 Smooth   \n 8 Rottweilers                 5        3          3        3        1 Smooth   \n 9 Pointers (Germa…            5        5          4        3        2 Smooth   \n10 Dachshunds                  5        3          4        2        2 Smooth   \n# ℹ 185 more rows\n# ℹ 1 more variable: coat_length &lt;chr&gt;\n\n\n\nReturn dogs sorted by breed name.\n\n\narrange(traits, breed)\n\n# A tibble: 197 × 8\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Affenpinschers              3        3          3        3        3 Wiry     \n 2 Afghan Hounds               3        3          3        1        4 Silky    \n 3 Airedale Terrie…            3        3          3        1        3 Wiry     \n 4 Akitas                      3        3          1        3        3 Double   \n 5 Alaskan Malamut…            3        3          3        3        3 Double   \n 6 American Englis…            3        3          5        2        1 Smooth   \n 7 American Eskimo…            5        5          3        3        3 Double   \n 8 American Foxhou…            3        5          5        3        1 Smooth   \n 9 American Hairle…            5        5          3        1        1 Hairless \n10 American Rearsn…            5        2          4        5       NA Rough    \n# ℹ 187 more rows\n# ℹ 1 more variable: coat_length &lt;chr&gt;\n\n\n\nReturn dogs sorted by coat type then coat length then affectionate rating.\n\n\narrange(traits, coat_type, coat_length, affectionate)\n\n# A tibble: 197 × 8\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Bergamasco Shee…            3        3          3        1        1 Corded   \n 2 Pulik                       5        3          3        1        5 Corded   \n 3 Komondorok                  5        3          2        1        4 Corded   \n 4 Spanish Water D…            5        4          3        1        4 Corded   \n 5 Poodles                     5        5          3        1        4 Curly    \n 6 Portuguese Wate…            5        5          4        2        4 Curly    \n 7 Borzois                     3        3          3        3        2 Curly    \n 8 Bedlington Terr…            3        3          3        1        3 Curly    \n 9 Barbets                     4        5          5        1        3 Curly    \n10 Pumik                       5        3          3        1        2 Curly    \n# ℹ 187 more rows\n# ℹ 1 more variable: coat_length &lt;chr&gt;"
  },
  {
    "objectID": "code/14_summarizing_answers.html",
    "href": "code/14_summarizing_answers.html",
    "title": "Summarizing rows",
    "section": "",
    "text": "For these exercises, we’ll use a new clean version of the dog breed traits data set.\n\nImport data from https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits_clean.csv and assign to traits.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntraits &lt;- read_csv(\"https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits_clean.csv\")\n\nRows: 197 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): breed, coat_type, coat_length\ndbl (5): affectionate, children, other_dogs, shedding, grooming\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nWhat is the overall mean rating for affectionate?\n\n\nsummarise(traits, mean(affectionate))\n\n# A tibble: 1 × 1\n  `mean(affectionate)`\n                 &lt;dbl&gt;\n1                 4.50\n\n\n\nWhat is the overall mean rating for each of the rating columns ignoring NAs?\n\n\nsummarise(traits, across(affectionate:grooming, ~ mean(.x, na.rm = TRUE)))\n\n# A tibble: 1 × 5\n  affectionate children other_dogs shedding grooming\n         &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1         4.50     3.88       3.55     2.61     2.28\n\n\n\nHow many breeds are there in each coat type?\n\n\ncount(traits, coat_type)\n\n# A tibble: 10 × 2\n   coat_type     n\n   &lt;chr&gt;     &lt;int&gt;\n 1 Corded        4\n 2 Curly         7\n 3 Double       66\n 4 Hairless      3\n 5 Rough         4\n 6 Silky         9\n 7 Smooth       67\n 8 Wavy          6\n 9 Wiry         30\n10 &lt;NA&gt;          1\n\n\n\nWhat is the median grooming rating for each coat type?\n\n\ntraits |&gt; \n  group_by(coat_type) |&gt; \n  summarise(median(grooming, na.rm = TRUE))\n\n# A tibble: 10 × 2\n   coat_type `median(grooming, na.rm = TRUE)`\n   &lt;chr&gt;                                &lt;dbl&gt;\n 1 Corded                                 4  \n 2 Curly                                  3  \n 3 Double                                 2.5\n 4 Hairless                               1  \n 5 Rough                                  2  \n 6 Silky                                  3  \n 7 Smooth                                 2  \n 8 Wavy                                   2  \n 9 Wiry                                   2  \n10 &lt;NA&gt;                                   2  \n\n\n\nWhat is the lowest rating per coat length for each of the rating columns, ignoring NAs?\n\n\ntraits |&gt; \n  group_by(coat_length) |&gt; \n  summarise(across(affectionate:grooming, ~ min(.x, na.rm = TRUE)))\n\n# A tibble: 4 × 6\n  coat_length affectionate children other_dogs shedding grooming\n  &lt;chr&gt;              &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1 Long                   3        3          2        1        1\n2 Medium                 3        2          1        1        1\n3 Short                  1        1          1        1        1\n4 &lt;NA&gt;                   4        5          5        3        2\n\n\n\nWhat are the sample size, mean, and standard deviation of shedding ratings for medium coat length dogs per coat type sorted from largest to smallest sample size and only including coat types with 5 or more samples? Note: the order mentioned here is not necessarily the correct order for your pipeline.\n\n\ntraits |&gt; \n  filter(coat_length == \"Medium\") |&gt; \n  group_by(coat_type) |&gt; \n  summarise(n = n(), shedding_mean = mean(shedding), shedding_sd = sd(shedding)) |&gt; \n  arrange(desc(n)) |&gt; \n  filter(n &gt; 4)\n\n# A tibble: 5 × 4\n  coat_type     n shedding_mean shedding_sd\n  &lt;chr&gt;     &lt;int&gt;         &lt;dbl&gt;       &lt;dbl&gt;\n1 Double       39          3.03       0.707\n2 Wiry         19          2.53       0.612\n3 Curly         5          1.4        0.894\n4 Smooth        5          3          0    \n5 Wavy          5          1.8        0.837\n\n\n\nCalculate each breed’s mean rating across each ratings column and return a data frame with the highest rating for each coat type. Don’t forget to undo rowwise() with ungroup() before further calculations.\n\n\ntraits |&gt;\n  rowwise() |&gt; \n  mutate(mean_rating = mean(c(affectionate, children, other_dogs, shedding, grooming), na.rm = TRUE)) |&gt; \n  ungroup() |&gt; \n  group_by(coat_type) |&gt; \n  slice_max(mean_rating)\n\n# A tibble: 16 × 9\n# Groups:   coat_type [10]\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Pulik                       5        3          3        1        5 Corded   \n 2 Spanish Water D…            5        4          3        1        4 Corded   \n 3 Portuguese Wate…            5        5          4        2        4 Curly    \n 4 Bernese Mountai…            5        5          5        5        3 Double   \n 5 American Hairle…            5        5          3        1        1 Hairless \n 6 American Rearsn…            5        2          4        5       NA Rough    \n 7 Setters (Irish)             5        5          5        3        3 Silky    \n 8 Bearded Collies             4        5          5        3        4 Silky    \n 9 Pugs                        5        5          4        4        2 Smooth   \n10 Retrievers (Fla…            5        5          5        3        2 Smooth   \n11 Redbone Coonhou…            5        5          5        3        2 Smooth   \n12 Chinooks                    4        5          5        3        3 Smooth   \n13 Cavalier King C…            5        5          5        2        2 Wavy     \n14 Miniature Schna…            5        5          3        3        4 Wiry     \n15 Portuguese Pode…            5        5          5        3        2 Wiry     \n16 English Buttdra…            4        5          5        3        2 &lt;NA&gt;     \n# ℹ 2 more variables: coat_length &lt;chr&gt;, mean_rating &lt;dbl&gt;"
  },
  {
    "objectID": "code/15_pivoting_answers.html",
    "href": "code/15_pivoting_answers.html",
    "title": "Pivoting data",
    "section": "",
    "text": "For these exercises, we’ll use a new clean version of the dog breed traits data set.\n\nImport data from https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits_clean.csv and assign to traits.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntraits &lt;- read_csv(\"https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits_clean.csv\")\n\nRows: 197 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): breed, coat_type, coat_length\ndbl (5): affectionate, children, other_dogs, shedding, grooming\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nCreate traits2 where we delete the coat columns, so we only have breed and ratings data.\n\n\ntraits2 &lt;- traits |&gt; \n  select(-contains(\"coat\"))\n\n\nIs traits2 tidy?\nIs traits2 in wide or long format?\nReshape traits2 so that all of the ratings scores are in a single column called rating with a column labeling what kind of rating it is called scale. Assign this to traits3.\n\n\ntraits3 &lt;- traits2 |&gt; \n  pivot_longer(affectionate:grooming, names_to = \"scale\", values_to = \"rating\")\n\n\nHow would we check if traits3 has the expected number of rows?\nCreate traits4 by removing the rows with affectionate, children, and other_dogs as values of scale.\n\n\ntraits4 &lt;- traits3 |&gt; \n  filter(!scale %in% c(\"affectionate\", \"children\", \"other_dogs\"))\n\n\nSpread out the data into wide format with separate columns for the shedding and grooming data, then create a new column diff that subtracts grooming from shedding ratings.\n\n\ntraits4 |&gt;\n  pivot_wider(id_cols = breed, names_from = scale, values_from = rating) |&gt; \n  mutate(diff = shedding - grooming)\n\n# A tibble: 197 × 4\n   breed                         shedding grooming  diff\n   &lt;chr&gt;                            &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;\n 1 Retrievers (Labrador)                4        2     2\n 2 French Bulldogs                      3        1     2\n 3 German Shepherd Dogs                 4        2     2\n 4 Retrievers (Golden)                  4        2     2\n 5 Bulldogs                             3        3     0\n 6 Poodles                              1        4    -3\n 7 Beagles                              3        2     1\n 8 Rottweilers                          3        1     2\n 9 Pointers (German Shorthaired)        3        2     1\n10 Dachshunds                           2        2     0\n# ℹ 187 more rows"
  },
  {
    "objectID": "code/16_separating_answers.html",
    "href": "code/16_separating_answers.html",
    "title": "Separating and uniting data",
    "section": "",
    "text": "For these exercises, we’ll use a new clean version of the dog breed traits data set.\n\nLoad tidyverse, import data from https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits_clean.csv, and assign it to traits.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntraits &lt;- read_csv(\"https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits_clean.csv\", show_col_types = FALSE)\n\n\nCreate traits2 which adds a coat column that combines coat_type and coat_length into single column delimited by “-”.\n\n\ntraits2 &lt;- traits |&gt; \n  unite(\"coat\", contains(\"coat_\"), sep = \"-\")\n\n\nSplit the coat column into type and length and keep the original coat column.\n\n\ntraits2 |&gt; \n  separate(coat, into = c(\"type\", \"length\"), remove = FALSE)\n\n# A tibble: 197 × 9\n   breed   affectionate children other_dogs shedding grooming coat  type  length\n   &lt;chr&gt;          &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Retrie…            5        5          5        4        2 Doub… Doub… Short \n 2 French…            5        5          4        3        1 Smoo… Smoo… Short \n 3 German…            5        5          3        4        2 Doub… Doub… Medium\n 4 Retrie…            5        5          5        4        2 Doub… Doub… Medium\n 5 Bulldo…            4        3          3        3        3 Smoo… Smoo… Short \n 6 Poodles            5        5          3        1        4 Curl… Curly Long  \n 7 Beagles            3        5          5        3        2 Smoo… Smoo… Short \n 8 Rottwe…            5        3          3        3        1 Smoo… Smoo… Short \n 9 Pointe…            5        5          4        3        2 Smoo… Smoo… Short \n10 Dachsh…            5        3          4        2        2 Smoo… Smoo… Short \n# ℹ 187 more rows\n\n\n\nCreate traits3 from traits that (1) removes the coat columns, (2) turns the ratings columns into long format, and (3) removes the children row for Bulldogs.\n\n\ntraits3 &lt;- traits |&gt; \n  select(-contains(\"coat_\")) |&gt; \n  pivot_longer(affectionate:grooming, names_to = \"scale\", values_to = \"rating\") |&gt; \n  filter(breed != \"Bulldogs\" | scale != \"children\")\n\n\nCreate traits4 from traits3 that ensures a complete data set with all five ratings for all breeds (and fills in missing combinations with NA) and check for the missing Bulldog children row.\n\n\ntraits4 &lt;- traits3 |&gt; \n  complete(breed, scale)\n\n\nHow could we copy the rating from the previous row into the Bulldog children row to replace the NA? (Note this is not a good idea in this case!)\n\n\ntraits4 |&gt; \n  fill(rating) |&gt; \n  filter(breed == \"Bulldogs\")\n\n# A tibble: 5 × 3\n  breed    scale        rating\n  &lt;chr&gt;    &lt;chr&gt;         &lt;dbl&gt;\n1 Bulldogs affectionate      4\n2 Bulldogs children          4\n3 Bulldogs grooming          3\n4 Bulldogs other_dogs        3\n5 Bulldogs shedding          3\n\n\n\nFrom traits, generate all combinations of coat type and length observed in the data, excluding NA.\n\n\ntraits |&gt; \n  expand(nesting(coat_type, coat_length)) |&gt; \n  drop_na()\n\n# A tibble: 18 × 2\n   coat_type coat_length\n   &lt;chr&gt;     &lt;chr&gt;      \n 1 Corded    Long       \n 2 Corded    Medium     \n 3 Curly     Long       \n 4 Curly     Medium     \n 5 Double    Long       \n 6 Double    Medium     \n 7 Double    Short      \n 8 Hairless  Short      \n 9 Rough     Long       \n10 Rough     Medium     \n11 Silky     Long       \n12 Silky     Medium     \n13 Smooth    Medium     \n14 Smooth    Short      \n15 Wavy      Long       \n16 Wavy      Medium     \n17 Wiry      Medium     \n18 Wiry      Short      \n\n\n\nFrom traits, generate all possible combinations of coat type and length, excluding NA.\n\n\ntraits |&gt; \n  expand(coat_type, coat_length) |&gt; \n  drop_na()\n\n# A tibble: 27 × 2\n   coat_type coat_length\n   &lt;chr&gt;     &lt;chr&gt;      \n 1 Corded    Long       \n 2 Corded    Medium     \n 3 Corded    Short      \n 4 Curly     Long       \n 5 Curly     Medium     \n 6 Curly     Short      \n 7 Double    Long       \n 8 Double    Medium     \n 9 Double    Short      \n10 Hairless  Long       \n# ℹ 17 more rows"
  },
  {
    "objectID": "code/17_mergingcolumns_answers.html",
    "href": "code/17_mergingcolumns_answers.html",
    "title": "Merging columns",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits data set along with the data on breed popularity rankings.\n\nLoad tidyverse, download and import dog_breed_traits_clean.csv to traits, and import dog_breed_ranks.csv to ranks. Make sure to download both files from the website, as they have changed or are new.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntraits &lt;- read_csv(here::here(\"data/dog_breed_traits_clean.csv\"), show_col_types = FALSE)\nranks &lt;- read_csv(here::here(\"data/dog_breed_ranks.csv\"), show_col_types = FALSE)\n\n\nWhich breeds differ between traits and ranks?\n\n\ntraits$breed[!traits$breed %in% ranks$breed]\n\n[1] \"American Rearsniffer\" \"English Buttdragger\" \n\nranks$breed[!ranks$breed %in% traits$breed]\n\n[1] \"Bergamasco\" \"Pumi\"       \"Puli\"      \n\n\n\nMerge traits and ranks (in that order) to produce a data frame that includes breeds shared by both data sets. How many rows are there?\n\n\ntraits |&gt; \n  inner_join(ranks, by = \"breed\")\n\n# A tibble: 195 × 16\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 French Bulldogs             5        5          4        3        1 Smooth   \n 3 German Shepherd…            5        5          3        4        2 Double   \n 4 Retrievers (Gol…            5        5          5        4        2 Double   \n 5 Bulldogs                    4        3          3        3        3 Smooth   \n 6 Poodles                     5        5          3        1        4 Curly    \n 7 Beagles                     3        5          5        3        2 Smooth   \n 8 Rottweilers                 5        3          3        3        1 Smooth   \n 9 Pointers (Germa…            5        5          4        3        2 Smooth   \n10 Dachshunds                  5        3          4        2        2 Smooth   \n# ℹ 185 more rows\n# ℹ 9 more variables: coat_length &lt;chr&gt;, `2013 Rank` &lt;dbl&gt;, `2014 Rank` &lt;dbl&gt;,\n#   `2015 Rank` &lt;dbl&gt;, `2016 Rank` &lt;dbl&gt;, `2017 Rank` &lt;dbl&gt;, `2018 Rank` &lt;dbl&gt;,\n#   `2019 Rank` &lt;dbl&gt;, `2020 Rank` &lt;dbl&gt;\n\n\n\nMerge traits and ranks (in that order) to produce a data frame that includes all breeds included in either data set. How many rows are there?\n\n\ntraits |&gt; \n  full_join(ranks, by = \"breed\")\n\n# A tibble: 200 × 16\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 French Bulldogs             5        5          4        3        1 Smooth   \n 3 German Shepherd…            5        5          3        4        2 Double   \n 4 Retrievers (Gol…            5        5          5        4        2 Double   \n 5 Bulldogs                    4        3          3        3        3 Smooth   \n 6 Poodles                     5        5          3        1        4 Curly    \n 7 Beagles                     3        5          5        3        2 Smooth   \n 8 Rottweilers                 5        3          3        3        1 Smooth   \n 9 Pointers (Germa…            5        5          4        3        2 Smooth   \n10 Dachshunds                  5        3          4        2        2 Smooth   \n# ℹ 190 more rows\n# ℹ 9 more variables: coat_length &lt;chr&gt;, `2013 Rank` &lt;dbl&gt;, `2014 Rank` &lt;dbl&gt;,\n#   `2015 Rank` &lt;dbl&gt;, `2016 Rank` &lt;dbl&gt;, `2017 Rank` &lt;dbl&gt;, `2018 Rank` &lt;dbl&gt;,\n#   `2019 Rank` &lt;dbl&gt;, `2020 Rank` &lt;dbl&gt;\n\n\n\nMerge traits and ranks (in that order) to produce a data frame that includes only breeds included in traits. How many rows are there?\n\n\ntraits |&gt; \n  left_join(ranks, by = \"breed\")\n\n# A tibble: 197 × 16\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 French Bulldogs             5        5          4        3        1 Smooth   \n 3 German Shepherd…            5        5          3        4        2 Double   \n 4 Retrievers (Gol…            5        5          5        4        2 Double   \n 5 Bulldogs                    4        3          3        3        3 Smooth   \n 6 Poodles                     5        5          3        1        4 Curly    \n 7 Beagles                     3        5          5        3        2 Smooth   \n 8 Rottweilers                 5        3          3        3        1 Smooth   \n 9 Pointers (Germa…            5        5          4        3        2 Smooth   \n10 Dachshunds                  5        3          4        2        2 Smooth   \n# ℹ 187 more rows\n# ℹ 9 more variables: coat_length &lt;chr&gt;, `2013 Rank` &lt;dbl&gt;, `2014 Rank` &lt;dbl&gt;,\n#   `2015 Rank` &lt;dbl&gt;, `2016 Rank` &lt;dbl&gt;, `2017 Rank` &lt;dbl&gt;, `2018 Rank` &lt;dbl&gt;,\n#   `2019 Rank` &lt;dbl&gt;, `2020 Rank` &lt;dbl&gt;\n\n\n\nMerge traits and ranks (in that order) to produce a data frame that includes only breeds included in ranks. How many rows are there?\n\n\ntraits |&gt; \n  right_join(ranks, by = \"breed\")\n\n# A tibble: 198 × 16\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 French Bulldogs             5        5          4        3        1 Smooth   \n 3 German Shepherd…            5        5          3        4        2 Double   \n 4 Retrievers (Gol…            5        5          5        4        2 Double   \n 5 Bulldogs                    4        3          3        3        3 Smooth   \n 6 Poodles                     5        5          3        1        4 Curly    \n 7 Beagles                     3        5          5        3        2 Smooth   \n 8 Rottweilers                 5        3          3        3        1 Smooth   \n 9 Pointers (Germa…            5        5          4        3        2 Smooth   \n10 Dachshunds                  5        3          4        2        2 Smooth   \n# ℹ 188 more rows\n# ℹ 9 more variables: coat_length &lt;chr&gt;, `2013 Rank` &lt;dbl&gt;, `2014 Rank` &lt;dbl&gt;,\n#   `2015 Rank` &lt;dbl&gt;, `2016 Rank` &lt;dbl&gt;, `2017 Rank` &lt;dbl&gt;, `2018 Rank` &lt;dbl&gt;,\n#   `2019 Rank` &lt;dbl&gt;, `2020 Rank` &lt;dbl&gt;\n\n\n\nMake table4a and table4b tidy then join them to replicate table1.\n\n\ntable4a_tidy &lt;- pivot_longer(table4a, -country, names_to = \"year\", values_to = \"cases\")\ntable4b_tidy &lt;- pivot_longer(table4b, -country, names_to = \"year\", values_to = \"population\")\nleft_join(table4a_tidy, table4b_tidy)\n\nJoining with `by = join_by(country, year)`\n\n\n# A tibble: 6 × 4\n  country     year   cases population\n  &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan 1999     745   19987071\n2 Afghanistan 2000    2666   20595360\n3 Brazil      1999   37737  172006362\n4 Brazil      2000   80488  174504898\n5 China       1999  212258 1272915272\n6 China       2000  213766 1280428583"
  },
  {
    "objectID": "code/18_mergingrows_answers.html",
    "href": "code/18_mergingrows_answers.html",
    "title": "Merging rows",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits and dog breed popularity rankings data sets.\n\nLoad tidyverse, import dog_breed_traits_clean.csv to traits, import dog_breed_ranks.csv to ranks, and import dog_breed_ranks.csv to popularity.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntraits &lt;- read_csv(here::here(\"data/dog_breed_traits_clean.csv\"), show_col_types = FALSE)\nranks &lt;- read_csv(here::here(\"data/dog_breed_ranks.csv\"), show_col_types = FALSE)\npopularity &lt;- read_csv(here::here(\"data/dog_breed_popularity.csv\"), show_col_types = FALSE)\n\nNew names:\n• `` -&gt; `...2`\n\n\n\nFirst, set a random seed by using set.seed(2). Then create a subset of ranks that is a random selection of 10% of the rows, sort by breed name, and assign to ranks2.\n\n\nset.seed(2)\nranks2 &lt;- slice_sample(ranks, prop = 0.1) |&gt; \n  arrange(breed)\n\n\nUse a filtering join to return the subset of traits that matches the breeds in ranks2 and assign this to traits2.\n\n\ntraits2 &lt;- traits |&gt; \n  semi_join(ranks2, by = \"breed\")\n\n\nUse a filtering join to return the subset of traits that excludes the breeds in ranks2.\n\n\ntraits |&gt; \n  anti_join(ranks2, by = \"breed\")\n\n# A tibble: 178 × 8\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 French Bulldogs             5        5          4        3        1 Smooth   \n 3 German Shepherd…            5        5          3        4        2 Double   \n 4 Retrievers (Gol…            5        5          5        4        2 Double   \n 5 Bulldogs                    4        3          3        3        3 Smooth   \n 6 Poodles                     5        5          3        1        4 Curly    \n 7 Beagles                     3        5          5        3        2 Smooth   \n 8 Rottweilers                 5        3          3        3        1 Smooth   \n 9 Pointers (Germa…            5        5          4        3        2 Smooth   \n10 Dachshunds                  5        3          4        2        2 Smooth   \n# ℹ 168 more rows\n# ℹ 1 more variable: coat_length &lt;chr&gt;\n\n\n\nNow we want to filter traits based on breeds in popularity. Notice that the breeds column in popularity is called Breed. This is problematic because the breed column in traits is called breed and names are case-sensitive. Use join_by() to filter traits by breeds in popularity. How many rows are there?\n\n\ntraits |&gt; \n  semi_join(popularity, by = join_by(breed == Breed))\n\n# A tibble: 195 × 8\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 French Bulldogs             5        5          4        3        1 Smooth   \n 3 German Shepherd…            5        5          3        4        2 Double   \n 4 Retrievers (Gol…            5        5          5        4        2 Double   \n 5 Bulldogs                    4        3          3        3        3 Smooth   \n 6 Poodles                     5        5          3        1        4 Curly    \n 7 Beagles                     3        5          5        3        2 Smooth   \n 8 Rottweilers                 5        3          3        3        1 Smooth   \n 9 Pointers (Germa…            5        5          4        3        2 Smooth   \n10 Dachshunds                  5        3          4        2        2 Smooth   \n# ℹ 185 more rows\n# ℹ 1 more variable: coat_length &lt;chr&gt;\n\n\n\nUse filter() (not joins) to return the subset of traits that excludes the breeds in ranks2.\n\n\ntraits |&gt; \n  filter(!breed %in% ranks2$breed)\n\n# A tibble: 178 × 8\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 French Bulldogs             5        5          4        3        1 Smooth   \n 3 German Shepherd…            5        5          3        4        2 Double   \n 4 Retrievers (Gol…            5        5          5        4        2 Double   \n 5 Bulldogs                    4        3          3        3        3 Smooth   \n 6 Poodles                     5        5          3        1        4 Curly    \n 7 Beagles                     3        5          5        3        2 Smooth   \n 8 Rottweilers                 5        3          3        3        1 Smooth   \n 9 Pointers (Germa…            5        5          4        3        2 Smooth   \n10 Dachshunds                  5        3          4        2        2 Smooth   \n# ℹ 168 more rows\n# ℹ 1 more variable: coat_length &lt;chr&gt;\n\n\n\nAppend traits2 to the bottom of itself.\n\n\nbind_rows(traits2, traits2)\n\n# A tibble: 38 × 8\n   breed            affectionate children other_dogs shedding grooming coat_type\n   &lt;chr&gt;                   &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;    \n 1 Yorkshire Terri…            5        5          3        1        5 Silky    \n 2 Miniature Schna…            5        5          3        3        4 Wiry     \n 3 Cane Corso                  4        3          3        2        1 Smooth   \n 4 Weimaraners                 5        5          3        3        2 Smooth   \n 5 Bullmastiffs                4        3          3        3        1 Smooth   \n 6 Scottish Terrie…            5        3          2        2        3 Wiry     \n 7 Chinese Shar-Pei            4        3          3        3        1 Smooth   \n 8 Cardigan Welsh …            4        4          3        3        2 Double   \n 9 Lhasa Apsos                 5        3          3        1        3 Silky    \n10 Coton de Tulear             5        5          5        2        4 Double   \n# ℹ 28 more rows\n# ℹ 1 more variable: coat_length &lt;chr&gt;\n\n\n\nAppend traits2 to the right of itself.\n\n\nbind_cols(traits2, traits2)\n\nNew names:\n• `breed` -&gt; `breed...1`\n• `affectionate` -&gt; `affectionate...2`\n• `children` -&gt; `children...3`\n• `other_dogs` -&gt; `other_dogs...4`\n• `shedding` -&gt; `shedding...5`\n• `grooming` -&gt; `grooming...6`\n• `coat_type` -&gt; `coat_type...7`\n• `coat_length` -&gt; `coat_length...8`\n• `breed` -&gt; `breed...9`\n• `affectionate` -&gt; `affectionate...10`\n• `children` -&gt; `children...11`\n• `other_dogs` -&gt; `other_dogs...12`\n• `shedding` -&gt; `shedding...13`\n• `grooming` -&gt; `grooming...14`\n• `coat_type` -&gt; `coat_type...15`\n• `coat_length` -&gt; `coat_length...16`\n\n\n# A tibble: 19 × 16\n   breed...1           affectionate...2 children...3 other_dogs...4 shedding...5\n   &lt;chr&gt;                          &lt;dbl&gt;        &lt;dbl&gt;          &lt;dbl&gt;        &lt;dbl&gt;\n 1 Yorkshire Terriers                 5            5              3            1\n 2 Miniature Schnauze…                5            5              3            3\n 3 Cane Corso                         4            3              3            2\n 4 Weimaraners                        5            5              3            3\n 5 Bullmastiffs                       4            3              3            3\n 6 Scottish Terriers                  5            3              2            2\n 7 Chinese Shar-Pei                   4            3              3            3\n 8 Cardigan Welsh Cor…                4            4              3            3\n 9 Lhasa Apsos                        5            3              3            1\n10 Coton de Tulear                    5            5              5            2\n11 Anatolian Shepherd…                1            3              3            3\n12 Basenjis                           3            3              3            2\n13 Miniature Bull Ter…                5            3              3            2\n14 Setters (Gordon)                   5            3              3            3\n15 Spaniels (Clumber)                 4            3              3            3\n16 Pulik                              5            3              3            1\n17 Salukis                            5            3              3            2\n18 Barbets                            4            5              5            1\n19 Pharaoh Hounds                     5            3              5            3\n# ℹ 11 more variables: grooming...6 &lt;dbl&gt;, coat_type...7 &lt;chr&gt;,\n#   coat_length...8 &lt;chr&gt;, breed...9 &lt;chr&gt;, affectionate...10 &lt;dbl&gt;,\n#   children...11 &lt;dbl&gt;, other_dogs...12 &lt;dbl&gt;, shedding...13 &lt;dbl&gt;,\n#   grooming...14 &lt;dbl&gt;, coat_type...15 &lt;chr&gt;, coat_length...16 &lt;chr&gt;\n\n\n\nAppend traits2 to the right of ranks2.\n\n\nbind_cols(ranks2, traits2)\n\nNew names:\n• `breed` -&gt; `breed...1`\n• `breed` -&gt; `breed...10`\n\n\n# A tibble: 19 × 17\n   breed...1         `2013 Rank` `2014 Rank` `2015 Rank` `2016 Rank` `2017 Rank`\n   &lt;chr&gt;                   &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Anatolian Shephe…          93          94          92          84          86\n 2 Barbets                    NA          NA          NA          NA          NA\n 3 Basenjis                   85          86          87          88          84\n 4 Bullmastiffs               41          45          43          48          51\n 5 Cane Corso                 50          48          35          40          37\n 6 Cardigan Welsh C…          75          78          76          69          68\n 7 Chinese Shar-Pei           54          58          59          61          64\n 8 Coton de Tulear            NA          31          85          80          81\n 9 Lhasa Apsos                63          67          65          71          77\n10 Miniature Bull T…         125         129         121         120         115\n11 Miniature Schnau…          17          16          16          17          18\n12 Pharaoh Hounds            160         164         171         168         174\n13 Pulik                     136         151         154         159         142\n14 Salukis                   115         134         132         125         123\n15 Scottish Terriers          55          59          58          58          58\n16 Setters (Gordon)          105         100         105         104         104\n17 Spaniels (Clumbe…         131         143         134         144         140\n18 Weimaraners                33          35          34          34          34\n19 Yorkshire Terrie…           6           6           7           9           9\n# ℹ 11 more variables: `2018 Rank` &lt;dbl&gt;, `2019 Rank` &lt;dbl&gt;, `2020 Rank` &lt;dbl&gt;,\n#   breed...10 &lt;chr&gt;, affectionate &lt;dbl&gt;, children &lt;dbl&gt;, other_dogs &lt;dbl&gt;,\n#   shedding &lt;dbl&gt;, grooming &lt;dbl&gt;, coat_type &lt;chr&gt;, coat_length &lt;chr&gt;\n\n\n\nWhy is this not a good idea? What would be a better way to achieve this?\n\n\nleft_join(ranks2, traits2)\n\nJoining with `by = join_by(breed)`\n\n\n# A tibble: 19 × 16\n   breed `2013 Rank` `2014 Rank` `2015 Rank` `2016 Rank` `2017 Rank` `2018 Rank`\n   &lt;chr&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n 1 Anat…          93          94          92          84          86          90\n 2 Barb…          NA          NA          NA          NA          NA          NA\n 3 Base…          85          86          87          88          84          87\n 4 Bull…          41          45          43          48          51          51\n 5 Cane…          50          48          35          40          37          32\n 6 Card…          75          78          76          69          68          68\n 7 Chin…          54          58          59          61          64          64\n 8 Coto…          NA          31          85          80          81          81\n 9 Lhas…          63          67          65          71          77          71\n10 Mini…         125         129         121         120         115         110\n11 Mini…          17          16          16          17          18          19\n12 Phar…         160         164         171         168         174         172\n13 Pulik         136         151         154         159         142         160\n14 Salu…         115         134         132         125         123         120\n15 Scot…          55          59          58          58          58          57\n16 Sett…         105         100         105         104         104         115\n17 Span…         131         143         134         144         140         143\n18 Weim…          33          35          34          34          34          36\n19 York…           6           6           7           9           9          10\n# ℹ 9 more variables: `2019 Rank` &lt;dbl&gt;, `2020 Rank` &lt;dbl&gt;, affectionate &lt;dbl&gt;,\n#   children &lt;dbl&gt;, other_dogs &lt;dbl&gt;, shedding &lt;dbl&gt;, grooming &lt;dbl&gt;,\n#   coat_type &lt;chr&gt;, coat_length &lt;chr&gt;"
  },
  {
    "objectID": "code/19_numbers_answers.html",
    "href": "code/19_numbers_answers.html",
    "title": "Numbers",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits and dog breed popularity rankings data sets.\n\nLoad tidyverse and import dog_breed_traits_clean.csv to traits.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntraits &lt;- read_csv(here::here(\"data/dog_breed_traits_clean.csv\"), show_col_types = FALSE)\n\n\nCreate a column of per-row means over all rating columns called mean_ratings and assign to traits2.\n\n\ntraits2 &lt;- traits |&gt; \n  rowwise() |&gt; \n  mutate(mean_ratings = mean(c(affectionate, children, other_dogs, shedding, grooming, na.rm = TRUE)))\n\n\nConvert mean_ratings to a proportion in a column called pmean_ratings and add to traits2.\n\n\ntraits2 &lt;- traits2 |&gt; \n  mutate(pmean_ratings = mean_ratings / 5)\n\n\nApply a natural log transformation to the pmeans_ratings vector.\n\n\nlog(traits2$pmean_ratings)\n\n  [1] -0.3101549 -0.4567584 -0.4054651 -0.3101549 -0.5679840 -0.4567584\n  [7] -0.4567584 -0.6286087 -0.4054651 -0.5679840 -0.4567584 -0.5679840\n [13] -0.4054651 -0.5679840 -0.6286087 -0.3101549 -0.4054651 -0.4567584\n [19] -0.3566749 -0.3566749 -0.4567584 -0.2231436 -0.5679840 -0.3566749\n [25] -0.7621401 -0.5108256 -0.3101549 -0.5108256 -0.3566749 -0.3101549\n [31] -0.3101549 -0.5108256 -0.5108256 -0.9162907 -0.4054651 -0.4567584\n [37] -0.6931472 -0.5679840 -0.4567584 -0.4567584 -0.3566749 -0.4567584\n [43] -0.5679840 -0.4054651 -0.3101549 -0.6286087 -0.3101549 -0.7621401\n [49] -0.3566749 -0.5679840 -0.5108256 -0.4567584 -0.4567584 -0.7621401\n [55] -0.6931472 -0.4054651 -0.6286087 -0.4567584 -0.4567584 -0.6286087\n [61] -0.6931472 -0.7621401 -0.4567584 -0.7621401 -0.6286087 -0.5679840\n [67] -0.4567584 -0.3566749 -0.5108256 -0.5679840 -0.5679840 -0.4567584\n [73] -0.6931472 -0.5108256 -0.3101549 -0.4567584 -0.5679840 -0.6286087\n [79] -0.7621401 -0.3101549 -0.5108256 -0.6931472 -0.4567584 -0.6286087\n [85] -0.8362480 -0.8362480 -0.4054651 -0.5679840 -0.5679840 -0.4054651\n [91] -0.5679840 -0.5108256 -0.5679840 -0.5679840 -0.5108256 -0.3101549\n [97] -0.5679840 -0.3101549 -0.5108256 -0.6931472 -0.4054651 -0.3566749\n[103] -0.6931472 -0.4567584 -0.6931472 -0.6931472 -0.5679840 -0.5679840\n[109] -0.4567584 -0.5108256 -0.4567584 -0.4567584 -0.5679840 -0.5679840\n[115] -0.5108256 -0.4567584 -0.6931472 -0.4567584 -0.4054651 -0.6931472\n[121] -0.5679840 -0.6931472 -0.5679840 -0.5679840 -0.3101549 -0.5679840\n[127] -0.4054651 -0.4054651 -0.6286087 -0.4567584 -0.7621401 -0.5679840\n[133] -0.6286087 -0.6931472 -0.6286087 -0.6286087 -0.5679840 -0.3101549\n[139] -0.6286087 -0.5108256 -0.7621401 -0.6931472 -0.5108256 -0.6931472\n[145] -0.4567584 -0.3566749 -0.4054651 -0.5108256 -0.5108256 -0.6931472\n[151] -0.7621401 -0.5108256 -0.4054651 -0.4054651 -0.5108256 -0.6931472\n[157] -0.3566749 -0.7621401 -0.5679840 -0.4054651 -0.5108256 -0.5679840\n[163] -0.6286087 -0.4567584 -0.4567584 -0.5108256 -0.5679840 -0.5679840\n[169] -0.5679840 -0.4054651 -0.5679840 -0.5108256 -0.9162907 -0.6286087\n[175] -0.5108256 -0.6286087 -0.5679840 -0.6286087 -0.7621401 -0.4567584\n[181] -0.6286087 -0.5679840 -0.5108256 -0.6286087 -0.6931472 -0.3566749\n[187] -0.4054651 -0.5108256 -0.6931472 -0.4054651 -0.5679840 -0.5108256\n[193] -0.7621401 -0.4054651 -0.6931472         NA -0.4054651\n\n\n\nRound pmean_ratings to two decimal places.\n\n\nround(traits2$pmean_ratings, digits = 2)\n\n  [1] 0.73 0.63 0.67 0.73 0.57 0.63 0.63 0.53 0.67 0.57 0.63 0.57 0.67 0.57 0.53\n [16] 0.73 0.67 0.63 0.70 0.70 0.63 0.80 0.57 0.70 0.47 0.60 0.73 0.60 0.70 0.73\n [31] 0.73 0.60 0.60 0.40 0.67 0.63 0.50 0.57 0.63 0.63 0.70 0.63 0.57 0.67 0.73\n [46] 0.53 0.73 0.47 0.70 0.57 0.60 0.63 0.63 0.47 0.50 0.67 0.53 0.63 0.63 0.53\n [61] 0.50 0.47 0.63 0.47 0.53 0.57 0.63 0.70 0.60 0.57 0.57 0.63 0.50 0.60 0.73\n [76] 0.63 0.57 0.53 0.47 0.73 0.60 0.50 0.63 0.53 0.43 0.43 0.67 0.57 0.57 0.67\n [91] 0.57 0.60 0.57 0.57 0.60 0.73 0.57 0.73 0.60 0.50 0.67 0.70 0.50 0.63 0.50\n[106] 0.50 0.57 0.57 0.63 0.60 0.63 0.63 0.57 0.57 0.60 0.63 0.50 0.63 0.67 0.50\n[121] 0.57 0.50 0.57 0.57 0.73 0.57 0.67 0.67 0.53 0.63 0.47 0.57 0.53 0.50 0.53\n[136] 0.53 0.57 0.73 0.53 0.60 0.47 0.50 0.60 0.50 0.63 0.70 0.67 0.60 0.60 0.50\n[151] 0.47 0.60 0.67 0.67 0.60 0.50 0.70 0.47 0.57 0.67 0.60 0.57 0.53 0.63 0.63\n[166] 0.60 0.57 0.57 0.57 0.67 0.57 0.60 0.40 0.53 0.60 0.53 0.57 0.53 0.47 0.63\n[181] 0.53 0.57 0.60 0.53 0.50 0.70 0.67 0.60 0.50 0.67 0.57 0.60 0.47 0.67 0.50\n[196]   NA 0.67\n\n\n\nConvert pmean_ratings to scientific notation.\n\n\nformat(traits2$pmean_ratings, scientific = TRUE)\n\n  [1] \"7.333333e-01\" \"6.333333e-01\" \"6.666667e-01\" \"7.333333e-01\" \"5.666667e-01\"\n  [6] \"6.333333e-01\" \"6.333333e-01\" \"5.333333e-01\" \"6.666667e-01\" \"5.666667e-01\"\n [11] \"6.333333e-01\" \"5.666667e-01\" \"6.666667e-01\" \"5.666667e-01\" \"5.333333e-01\"\n [16] \"7.333333e-01\" \"6.666667e-01\" \"6.333333e-01\" \"7.000000e-01\" \"7.000000e-01\"\n [21] \"6.333333e-01\" \"8.000000e-01\" \"5.666667e-01\" \"7.000000e-01\" \"4.666667e-01\"\n [26] \"6.000000e-01\" \"7.333333e-01\" \"6.000000e-01\" \"7.000000e-01\" \"7.333333e-01\"\n [31] \"7.333333e-01\" \"6.000000e-01\" \"6.000000e-01\" \"4.000000e-01\" \"6.666667e-01\"\n [36] \"6.333333e-01\" \"5.000000e-01\" \"5.666667e-01\" \"6.333333e-01\" \"6.333333e-01\"\n [41] \"7.000000e-01\" \"6.333333e-01\" \"5.666667e-01\" \"6.666667e-01\" \"7.333333e-01\"\n [46] \"5.333333e-01\" \"7.333333e-01\" \"4.666667e-01\" \"7.000000e-01\" \"5.666667e-01\"\n [51] \"6.000000e-01\" \"6.333333e-01\" \"6.333333e-01\" \"4.666667e-01\" \"5.000000e-01\"\n [56] \"6.666667e-01\" \"5.333333e-01\" \"6.333333e-01\" \"6.333333e-01\" \"5.333333e-01\"\n [61] \"5.000000e-01\" \"4.666667e-01\" \"6.333333e-01\" \"4.666667e-01\" \"5.333333e-01\"\n [66] \"5.666667e-01\" \"6.333333e-01\" \"7.000000e-01\" \"6.000000e-01\" \"5.666667e-01\"\n [71] \"5.666667e-01\" \"6.333333e-01\" \"5.000000e-01\" \"6.000000e-01\" \"7.333333e-01\"\n [76] \"6.333333e-01\" \"5.666667e-01\" \"5.333333e-01\" \"4.666667e-01\" \"7.333333e-01\"\n [81] \"6.000000e-01\" \"5.000000e-01\" \"6.333333e-01\" \"5.333333e-01\" \"4.333333e-01\"\n [86] \"4.333333e-01\" \"6.666667e-01\" \"5.666667e-01\" \"5.666667e-01\" \"6.666667e-01\"\n [91] \"5.666667e-01\" \"6.000000e-01\" \"5.666667e-01\" \"5.666667e-01\" \"6.000000e-01\"\n [96] \"7.333333e-01\" \"5.666667e-01\" \"7.333333e-01\" \"6.000000e-01\" \"5.000000e-01\"\n[101] \"6.666667e-01\" \"7.000000e-01\" \"5.000000e-01\" \"6.333333e-01\" \"5.000000e-01\"\n[106] \"5.000000e-01\" \"5.666667e-01\" \"5.666667e-01\" \"6.333333e-01\" \"6.000000e-01\"\n[111] \"6.333333e-01\" \"6.333333e-01\" \"5.666667e-01\" \"5.666667e-01\" \"6.000000e-01\"\n[116] \"6.333333e-01\" \"5.000000e-01\" \"6.333333e-01\" \"6.666667e-01\" \"5.000000e-01\"\n[121] \"5.666667e-01\" \"5.000000e-01\" \"5.666667e-01\" \"5.666667e-01\" \"7.333333e-01\"\n[126] \"5.666667e-01\" \"6.666667e-01\" \"6.666667e-01\" \"5.333333e-01\" \"6.333333e-01\"\n[131] \"4.666667e-01\" \"5.666667e-01\" \"5.333333e-01\" \"5.000000e-01\" \"5.333333e-01\"\n[136] \"5.333333e-01\" \"5.666667e-01\" \"7.333333e-01\" \"5.333333e-01\" \"6.000000e-01\"\n[141] \"4.666667e-01\" \"5.000000e-01\" \"6.000000e-01\" \"5.000000e-01\" \"6.333333e-01\"\n[146] \"7.000000e-01\" \"6.666667e-01\" \"6.000000e-01\" \"6.000000e-01\" \"5.000000e-01\"\n[151] \"4.666667e-01\" \"6.000000e-01\" \"6.666667e-01\" \"6.666667e-01\" \"6.000000e-01\"\n[156] \"5.000000e-01\" \"7.000000e-01\" \"4.666667e-01\" \"5.666667e-01\" \"6.666667e-01\"\n[161] \"6.000000e-01\" \"5.666667e-01\" \"5.333333e-01\" \"6.333333e-01\" \"6.333333e-01\"\n[166] \"6.000000e-01\" \"5.666667e-01\" \"5.666667e-01\" \"5.666667e-01\" \"6.666667e-01\"\n[171] \"5.666667e-01\" \"6.000000e-01\" \"4.000000e-01\" \"5.333333e-01\" \"6.000000e-01\"\n[176] \"5.333333e-01\" \"5.666667e-01\" \"5.333333e-01\" \"4.666667e-01\" \"6.333333e-01\"\n[181] \"5.333333e-01\" \"5.666667e-01\" \"6.000000e-01\" \"5.333333e-01\" \"5.000000e-01\"\n[186] \"7.000000e-01\" \"6.666667e-01\" \"6.000000e-01\" \"5.000000e-01\" \"6.666667e-01\"\n[191] \"5.666667e-01\" \"6.000000e-01\" \"4.666667e-01\" \"6.666667e-01\" \"5.000000e-01\"\n[196] \"          NA\" \"6.666667e-01\"\n\n\n\nSum up the total grooming ratings for each coat type.\n\n\ntraits |&gt; \n  count(coat_type, wt = grooming)\n\n# A tibble: 10 × 2\n   coat_type     n\n   &lt;chr&gt;     &lt;dbl&gt;\n 1 Corded       14\n 2 Curly        21\n 3 Double      171\n 4 Hairless      4\n 5 Rough         8\n 6 Silky        30\n 7 Smooth      113\n 8 Wavy         15\n 9 Wiry         69\n10 &lt;NA&gt;          2\n\n\n\nAdd inline R code to the following sentence in R Markdown to say how many rows have NA for grooming:\n\nWe are missing grooming data for [insert inline R code] breeds."
  },
  {
    "objectID": "code/20_strings_answers.html",
    "href": "code/20_strings_answers.html",
    "title": "Strings",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits data set.\n\nLoad tidyverse and import dog_breed_traits_clean.csv to traits.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntraits &lt;- read_csv(here::here(\"data/dog_breed_traits_clean.csv\"), show_col_types = FALSE)\n\n\nReturn the first ten letters of the alphabet in upper case.\n\n\nLETTERS[1:10]\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\n\n\nCreate this character string and assign it to mystring: The elephant said “Hello” then ‘Bye!’ Then view how it would be printed.\n\n\n(mystring &lt;- \"The elephant said \\\"Hello\\\" then 'Bye'!\")\n\n[1] \"The elephant said \\\"Hello\\\" then 'Bye'!\"\n\nwriteLines(mystring)\n\nThe elephant said \"Hello\" then 'Bye'!\n\n\n\nFind how many characters are in mystring.\n\n\nstr_length(mystring)\n\n[1] 37\n\n\n\nCreate a vector of the first four characters of the coat_length column from traits.\n\n\nstr_sub(traits$coat_length, 1, 4)\n\n  [1] \"Shor\" \"Shor\" \"Medi\" \"Medi\" \"Shor\" \"Long\" \"Shor\" \"Shor\" \"Shor\" \"Shor\"\n [11] \"Shor\" \"Medi\" \"Long\" \"Shor\" \"Shor\" \"Medi\" \"Medi\" \"Shor\" \"Medi\" \"Long\"\n [21] \"Shor\" \"Medi\" \"Long\" \"Long\" \"Shor\" \"Medi\" \"Long\" \"Shor\" \"Shor\" \"Long\"\n [31] \"Medi\" \"Medi\" \"Shor\" \"Shor\" \"Shor\" \"Shor\" \"Shor\" \"Long\" \"Shor\" \"Shor\"\n [41] \"Medi\" \"Shor\" \"Shor\" \"Medi\" \"Long\" \"Shor\" \"Medi\" \"Medi\" \"Long\" \"Medi\"\n [51] \"Shor\" \"Shor\" \"Medi\" \"Shor\" \"Shor\" \"Long\" \"Medi\" \"Medi\" \"Shor\" \"Medi\"\n [61] \"Shor\" \"Shor\" \"Medi\" \"Shor\" \"Medi\" \"Medi\" \"Medi\" \"Long\" \"Shor\" \"Medi\"\n [71] \"Shor\" \"Shor\" \"Medi\" \"Medi\" \"Medi\" \"Shor\" \"Shor\" \"Long\" \"Shor\" \"Long\"\n [81] \"Shor\" \"Shor\" \"Shor\" \"Medi\" \"Shor\" \"Shor\" \"Medi\" \"Medi\" \"Shor\" \"Medi\"\n [91] \"Medi\" \"Medi\" \"Shor\" \"Medi\" \"Long\" \"Long\" \"Shor\" \"Long\" \"Long\" \"Shor\"\n[101] \"Medi\" \"Medi\" \"Medi\" \"Medi\" \"Shor\" \"Medi\" \"Medi\" \"Long\" \"Shor\" \"Medi\"\n[111] \"Medi\" \"Medi\" \"Shor\" \"Shor\" \"Shor\" \"Shor\" \"Medi\" \"Medi\" \"Medi\" \"Medi\"\n[121] \"Shor\" \"Long\" \"Shor\" \"Shor\" \"Long\" \"Medi\" \"Shor\" \"Medi\" \"Shor\" \"Shor\"\n[131] \"Shor\" \"Shor\" \"Medi\" \"Shor\" \"Medi\" \"Shor\" \"Shor\" \"Medi\" \"Shor\" \"Medi\"\n[141] \"Medi\" \"Shor\" \"Long\" \"Shor\" \"Medi\" \"Shor\" \"Shor\" \"Medi\" \"Medi\" \"Long\"\n[151] \"Medi\" \"Shor\" \"Shor\" \"Medi\" \"Shor\" \"Medi\" \"Medi\" \"Medi\" \"Shor\" \"Medi\"\n[161] \"Long\" \"Medi\" \"Shor\" \"Long\" \"Medi\" \"Medi\" \"Shor\" \"Medi\" \"Medi\" \"Medi\"\n[171] \"Shor\" \"Medi\" \"Long\" \"Medi\" \"Long\" \"Medi\" \"Medi\" \"Long\" \"Shor\" \"Shor\"\n[181] \"Medi\" \"Medi\" \"Long\" \"Shor\" \"Shor\" \"Medi\" \"Medi\" \"Medi\" \"Shor\" \"Shor\"\n[191] \"Medi\" \"Shor\" \"Shor\" \"Shor\" \"Shor\" \"Medi\" NA    \n\n\n\nConvert the breed column of traits to sentence case.\n\n\nstr_to_sentence(traits$breed)\n\n  [1] \"Retrievers (labrador)\"                \n  [2] \"French bulldogs\"                      \n  [3] \"German shepherd dogs\"                 \n  [4] \"Retrievers (golden)\"                  \n  [5] \"Bulldogs\"                             \n  [6] \"Poodles\"                              \n  [7] \"Beagles\"                              \n  [8] \"Rottweilers\"                          \n  [9] \"Pointers (german shorthaired)\"        \n [10] \"Dachshunds\"                           \n [11] \"Pembroke welsh corgis\"                \n [12] \"Australian shepherds\"                 \n [13] \"Yorkshire terriers\"                   \n [14] \"Boxers\"                               \n [15] \"Great danes\"                          \n [16] \"Siberian huskies\"                     \n [17] \"Cavalier king charles spaniels\"       \n [18] \"Doberman pinschers\"                   \n [19] \"Miniature schnauzers\"                 \n [20] \"Shih tzu\"                             \n [21] \"Boston terriers\"                      \n [22] \"Bernese mountain dogs\"                \n [23] \"Pomeranians\"                          \n [24] \"Havanese\"                             \n [25] \"Cane corso\"                           \n [26] \"Spaniels (english springer)\"          \n [27] \"Shetland sheepdogs\"                   \n [28] \"Brittanys\"                            \n [29] \"Pugs\"                                 \n [30] \"Spaniels (cocker)\"                    \n [31] \"Miniature american shepherds\"         \n [32] \"Border collies\"                       \n [33] \"Mastiffs\"                             \n [34] \"Chihuahuas\"                           \n [35] \"Vizslas\"                              \n [36] \"Basset hounds\"                        \n [37] \"Belgian malinois\"                     \n [38] \"Maltese\"                              \n [39] \"Weimaraners\"                          \n [40] \"Collies\"                              \n [41] \"Newfoundlands\"                        \n [42] \"Rhodesian ridgebacks\"                 \n [43] \"Shiba inu\"                            \n [44] \"West highland white terriers\"         \n [45] \"Bichons frises\"                       \n [46] \"Bloodhounds\"                          \n [47] \"Spaniels (english cocker)\"            \n [48] \"Akitas\"                               \n [49] \"Portuguese water dogs\"                \n [50] \"Retrievers (chesapeake bay)\"          \n [51] \"Dalmatians\"                           \n [52] \"St. Bernards\"                         \n [53] \"Papillons\"                            \n [54] \"Australian cattle dogs\"               \n [55] \"Bullmastiffs\"                         \n [56] \"Samoyeds\"                             \n [57] \"Scottish terriers\"                    \n [58] \"Soft coated wheaten terriers\"         \n [59] \"Whippets\"                             \n [60] \"Pointers (german wirehaired)\"         \n [61] \"Chinese shar-pei\"                     \n [62] \"Airedale terriers\"                    \n [63] \"Wirehaired pointing griffons\"         \n [64] \"Bull terriers\"                        \n [65] \"Alaskan malamutes\"                    \n [66] \"Cardigan welsh corgis\"                \n [67] \"Giant schnauzers\"                     \n [68] \"Old english sheepdogs\"                \n [69] \"Italian greyhounds\"                   \n [70] \"Great pyrenees\"                       \n [71] \"Dogues de bordeaux\"                   \n [72] \"Russell terriers\"                     \n [73] \"Cairn terriers\"                       \n [74] \"Irish wolfhounds\"                     \n [75] \"Setters (irish)\"                      \n [76] \"Greater swiss mountain dogs\"          \n [77] \"Miniature pinschers\"                  \n [78] \"Lhasa apsos\"                          \n [79] \"Chinese crested\"                      \n [80] \"Coton de tulear\"                      \n [81] \"Staffordshire bull terriers\"          \n [82] \"American staffordshire terriers\"      \n [83] \"Rat terriers\"                         \n [84] \"Chow chows\"                           \n [85] \"Anatolian shepherd dogs\"              \n [86] \"Basenjis\"                             \n [87] \"Spaniels (boykin)\"                    \n [88] \"Lagotti romagnoli\"                    \n [89] \"Brussels griffons\"                    \n [90] \"Retrievers (nova scotia duck tolling)\"\n [91] \"Norwegian elkhounds\"                  \n [92] \"Standard schnauzers\"                  \n [93] \"Dogo argentinos\"                      \n [94] \"Bouviers des flandres\"                \n [95] \"Pekingese\"                            \n [96] \"Keeshonden\"                           \n [97] \"Border terriers\"                      \n [98] \"Leonbergers\"                          \n [99] \"Tibetan terriers\"                     \n[100] \"Neapolitan mastiffs\"                  \n[101] \"Setters (english)\"                    \n[102] \"Retrievers (flat-coated)\"             \n[103] \"Borzois\"                              \n[104] \"Fox terriers (wire)\"                  \n[105] \"Miniature bull terriers\"              \n[106] \"Belgian tervuren\"                     \n[107] \"Setters (gordon)\"                     \n[108] \"Silky terriers\"                       \n[109] \"Norwich terriers\"                     \n[110] \"Spinoni italiani\"                     \n[111] \"Japanese chin\"                        \n[112] \"Welsh terriers\"                       \n[113] \"Toy fox terriers\"                     \n[114] \"Schipperkes\"                          \n[115] \"Parson russell terriers\"              \n[116] \"Pointers\"                             \n[117] \"Belgian sheepdogs\"                    \n[118] \"Tibetan spaniels\"                     \n[119] \"American eskimo dogs\"                 \n[120] \"Irish terriers\"                       \n[121] \"Beaucerons\"                           \n[122] \"Afghan hounds\"                        \n[123] \"Boerboels\"                            \n[124] \"Fox terriers (smooth)\"                \n[125] \"Bearded collies\"                      \n[126] \"Black russian terriers\"               \n[127] \"Black and tan coonhounds\"             \n[128] \"Spaniels (welsh springer)\"            \n[129] \"American hairless terriers\"           \n[130] \"Norfolk terriers\"                     \n[131] \"Xoloitzcuintli\"                       \n[132] \"Manchester terriers\"                  \n[133] \"Kerry blue terriers\"                  \n[134] \"Australian terriers\"                  \n[135] \"Spaniels (clumber)\"                   \n[136] \"Lakeland terriers\"                    \n[137] \"Bluetick coonhounds\"                  \n[138] \"English toy spaniels\"                 \n[139] \"German pinschers\"                     \n[140] \"Tibetan mastiffs\"                     \n[141] \"Bedlington terriers\"                  \n[142] \"Greyhounds\"                           \n[143] \"Pulik\"                                \n[144] \"Salukis\"                              \n[145] \"Barbets\"                              \n[146] \"Redbone coonhounds\"                   \n[147] \"Swedish vallhunds\"                    \n[148] \"Sealyham terriers\"                    \n[149] \"Spanish water dogs\"                   \n[150] \"Briards\"                              \n[151] \"Berger picards\"                       \n[152] \"Entlebucher mountain dogs\"            \n[153] \"Treeing walker coonhounds\"            \n[154] \"Icelandic sheepdogs\"                  \n[155] \"Wirehaired vizslas\"                   \n[156] \"Pumik\"                                \n[157] \"Portuguese podengo pequenos\"          \n[158] \"Spaniels (american water)\"            \n[159] \"Retrievers (curly-coated)\"            \n[160] \"Spaniels (field)\"                     \n[161] \"Lowchen\"                              \n[162] \"Nederlandse kooikerhondjes\"           \n[163] \"Affenpinschers\"                       \n[164] \"Petits bassets griffons vendeens\"     \n[165] \"Finnish lapphunds\"                    \n[166] \"Scottish deerhounds\"                  \n[167] \"Plott hounds\"                         \n[168] \"Norwegian buhunds\"                    \n[169] \"Glen of imaal terriers\"               \n[170] \"Setters (irish red and white)\"        \n[171] \"Ibizan hounds\"                        \n[172] \"Spaniels (sussex)\"                    \n[173] \"Bergamasco sheepdogs\"                 \n[174] \"Spaniels (irish water)\"               \n[175] \"Polish lowland sheepdogs\"             \n[176] \"Otterhounds\"                          \n[177] \"Kuvaszok\"                             \n[178] \"Komondorok\"                           \n[179] \"Cirnechi dell etna\"                   \n[180] \"Pharaoh hounds\"                       \n[181] \"Dandie dinmont terriers\"              \n[182] \"Pyrenean shepherds\"                   \n[183] \"Skye terriers\"                        \n[184] \"Canaan dogs\"                          \n[185] \"American english coonhounds\"          \n[186] \"Chinooks\"                             \n[187] \"Finnish spitz\"                        \n[188] \"Grand basset griffon vendeens\"        \n[189] \"Sloughis\"                             \n[190] \"Harriers\"                             \n[191] \"Cesky terriers\"                       \n[192] \"American foxhounds\"                   \n[193] \"Azawakhs\"                             \n[194] \"English foxhounds\"                    \n[195] \"Norwegian lundehunds\"                 \n[196] \"American rearsniffer\"                 \n[197] \"English buttdragger\"                  \n\n\n\nCreate series of sentences using breed and coat_length that states “[insert breed name] have a [insert coat length] coat” that uses the proper cases.\n\n\nstr_glue(\"{traits$breed} have a {str_to_lower(traits$coat_length)} coat\")\n\nRetrievers (Labrador) have a short coat\nFrench Bulldogs have a short coat\nGerman Shepherd Dogs have a medium coat\nRetrievers (Golden) have a medium coat\nBulldogs have a short coat\nPoodles have a long coat\nBeagles have a short coat\nRottweilers have a short coat\nPointers (German Shorthaired) have a short coat\nDachshunds have a short coat\nPembroke Welsh Corgis have a short coat\nAustralian Shepherds have a medium coat\nYorkshire Terriers have a long coat\nBoxers have a short coat\nGreat Danes have a short coat\nSiberian Huskies have a medium coat\nCavalier King Charles Spaniels have a medium coat\nDoberman Pinschers have a short coat\nMiniature Schnauzers have a medium coat\nShih Tzu have a long coat\nBoston Terriers have a short coat\nBernese Mountain Dogs have a medium coat\nPomeranians have a long coat\nHavanese have a long coat\nCane Corso have a short coat\nSpaniels (English Springer) have a medium coat\nShetland Sheepdogs have a long coat\nBrittanys have a short coat\nPugs have a short coat\nSpaniels (Cocker) have a long coat\nMiniature American Shepherds have a medium coat\nBorder Collies have a medium coat\nMastiffs have a short coat\nChihuahuas have a short coat\nVizslas have a short coat\nBasset Hounds have a short coat\nBelgian Malinois have a short coat\nMaltese have a long coat\nWeimaraners have a short coat\nCollies have a short coat\nNewfoundlands have a medium coat\nRhodesian Ridgebacks have a short coat\nShiba Inu have a short coat\nWest Highland White Terriers have a medium coat\nBichons Frises have a long coat\nBloodhounds have a short coat\nSpaniels (English Cocker) have a medium coat\nAkitas have a medium coat\nPortuguese Water Dogs have a long coat\nRetrievers (Chesapeake Bay) have a medium coat\nDalmatians have a short coat\nSt. Bernards have a short coat\nPapillons have a medium coat\nAustralian Cattle Dogs have a short coat\nBullmastiffs have a short coat\nSamoyeds have a long coat\nScottish Terriers have a medium coat\nSoft Coated Wheaten Terriers have a medium coat\nWhippets have a short coat\nPointers (German Wirehaired) have a medium coat\nChinese Shar-Pei have a short coat\nAiredale Terriers have a short coat\nWirehaired Pointing Griffons have a medium coat\nBull Terriers have a short coat\nAlaskan Malamutes have a medium coat\nCardigan Welsh Corgis have a medium coat\nGiant Schnauzers have a medium coat\nOld English Sheepdogs have a long coat\nItalian Greyhounds have a short coat\nGreat Pyrenees have a medium coat\nDogues de Bordeaux have a short coat\nRussell Terriers have a short coat\nCairn Terriers have a medium coat\nIrish Wolfhounds have a medium coat\nSetters (Irish) have a medium coat\nGreater Swiss Mountain Dogs have a short coat\nMiniature Pinschers have a short coat\nLhasa Apsos have a long coat\nChinese Crested have a short coat\nCoton de Tulear have a long coat\nStaffordshire Bull Terriers have a short coat\nAmerican Staffordshire Terriers have a short coat\nRat Terriers have a short coat\nChow Chows have a medium coat\nAnatolian Shepherd Dogs have a short coat\nBasenjis have a short coat\nSpaniels (Boykin) have a medium coat\nLagotti Romagnoli have a medium coat\nBrussels Griffons have a short coat\nRetrievers (Nova Scotia Duck Tolling) have a medium coat\nNorwegian Elkhounds have a medium coat\nStandard Schnauzers have a medium coat\nDogo Argentinos have a short coat\nBouviers des Flandres have a medium coat\nPekingese have a long coat\nKeeshonden have a long coat\nBorder Terriers have a short coat\nLeonbergers have a long coat\nTibetan Terriers have a long coat\nNeapolitan Mastiffs have a short coat\nSetters (English) have a medium coat\nRetrievers (Flat-Coated) have a medium coat\nBorzois have a medium coat\nFox Terriers (Wire) have a medium coat\nMiniature Bull Terriers have a short coat\nBelgian Tervuren have a medium coat\nSetters (Gordon) have a medium coat\nSilky Terriers have a long coat\nNorwich Terriers have a short coat\nSpinoni Italiani have a medium coat\nJapanese Chin have a medium coat\nWelsh Terriers have a medium coat\nToy Fox Terriers have a short coat\nSchipperkes have a short coat\nParson Russell Terriers have a short coat\nPointers have a short coat\nBelgian Sheepdogs have a medium coat\nTibetan Spaniels have a medium coat\nAmerican Eskimo Dogs have a medium coat\nIrish Terriers have a medium coat\nBeaucerons have a short coat\nAfghan Hounds have a long coat\nBoerboels have a short coat\nFox Terriers (Smooth) have a short coat\nBearded Collies have a long coat\nBlack Russian Terriers have a medium coat\nBlack and Tan Coonhounds have a short coat\nSpaniels (Welsh Springer) have a medium coat\nAmerican Hairless Terriers have a short coat\nNorfolk Terriers have a short coat\nXoloitzcuintli have a short coat\nManchester Terriers have a short coat\nKerry Blue Terriers have a medium coat\nAustralian Terriers have a short coat\nSpaniels (Clumber) have a medium coat\nLakeland Terriers have a short coat\nBluetick Coonhounds have a short coat\nEnglish Toy Spaniels have a medium coat\nGerman Pinschers have a short coat\nTibetan Mastiffs have a medium coat\nBedlington Terriers have a medium coat\nGreyhounds have a short coat\nPulik have a long coat\nSalukis have a short coat\nBarbets have a medium coat\nRedbone Coonhounds have a short coat\nSwedish Vallhunds have a short coat\nSealyham Terriers have a medium coat\nSpanish Water Dogs have a medium coat\nBriards have a long coat\nBerger Picards have a medium coat\nEntlebucher Mountain Dogs have a short coat\nTreeing Walker Coonhounds have a short coat\nIcelandic Sheepdogs have a medium coat\nWirehaired Vizslas have a short coat\nPumik have a medium coat\nPortuguese Podengo Pequenos have a medium coat\nSpaniels (American Water) have a medium coat\nRetrievers (Curly-Coated) have a short coat\nSpaniels (Field) have a medium coat\nLowchen have a long coat\nNederlandse Kooikerhondjes have a medium coat\nAffenpinschers have a short coat\nPetits Bassets Griffons Vendeens have a long coat\nFinnish Lapphunds have a medium coat\nScottish Deerhounds have a medium coat\nPlott Hounds have a short coat\nNorwegian Buhunds have a medium coat\nGlen of Imaal Terriers have a medium coat\nSetters (Irish Red and White) have a medium coat\nIbizan Hounds have a short coat\nSpaniels (Sussex) have a medium coat\nBergamasco Sheepdogs have a long coat\nSpaniels (Irish Water) have a medium coat\nPolish Lowland Sheepdogs have a long coat\nOtterhounds have a medium coat\nKuvaszok have a medium coat\nKomondorok have a long coat\nCirnechi dell Etna have a short coat\nPharaoh Hounds have a short coat\nDandie Dinmont Terriers have a medium coat\nPyrenean Shepherds have a medium coat\nSkye Terriers have a long coat\nCanaan Dogs have a short coat\nAmerican English Coonhounds have a short coat\nChinooks have a medium coat\nFinnish Spitz have a medium coat\nGrand Basset Griffon Vendeens have a medium coat\nSloughis have a short coat\nHarriers have a short coat\nCesky Terriers have a medium coat\nAmerican Foxhounds have a short coat\nAzawakhs have a short coat\nEnglish Foxhounds have a short coat\nNorwegian Lundehunds have a short coat\nAmerican Rearsniffer have a medium coat\nEnglish Buttdragger have a NA coat\n\n\n\nIn the mtcars data set, extract the first two digits of the mpg variable and the last three digits of the car names and combine them into a single string.\n\n\nstr_glue(\"{str_sub(mtcars$mpg, 1, 2)}{str_sub(row.names(mtcars), -3, -1)}\")\n\n21RX4\n21Wag\n22710\n21ive\n18out\n18ant\n14360\n2440D\n22230\n19280\n1780C\n160SE\n170SL\n15SLC\n10ood\n10tal\n14ial\n32128\n30vic\n33lla\n21ona\n15ger\n15lin\n13Z28\n19ird\n271-9\n264-2\n30opa\n15a L\n19ino\n15ora\n2142E\n\n\n\nPrint the fruit data set, then capitalize all first word letters in the data set, then capitalize all words in the data set.\n\n\nfruit\n\n [1] \"apple\"             \"apricot\"           \"avocado\"          \n [4] \"banana\"            \"bell pepper\"       \"bilberry\"         \n [7] \"blackberry\"        \"blackcurrant\"      \"blood orange\"     \n[10] \"blueberry\"         \"boysenberry\"       \"breadfruit\"       \n[13] \"canary melon\"      \"cantaloupe\"        \"cherimoya\"        \n[16] \"cherry\"            \"chili pepper\"      \"clementine\"       \n[19] \"cloudberry\"        \"coconut\"           \"cranberry\"        \n[22] \"cucumber\"          \"currant\"           \"damson\"           \n[25] \"date\"              \"dragonfruit\"       \"durian\"           \n[28] \"eggplant\"          \"elderberry\"        \"feijoa\"           \n[31] \"fig\"               \"goji berry\"        \"gooseberry\"       \n[34] \"grape\"             \"grapefruit\"        \"guava\"            \n[37] \"honeydew\"          \"huckleberry\"       \"jackfruit\"        \n[40] \"jambul\"            \"jujube\"            \"kiwi fruit\"       \n[43] \"kumquat\"           \"lemon\"             \"lime\"             \n[46] \"loquat\"            \"lychee\"            \"mandarine\"        \n[49] \"mango\"             \"mulberry\"          \"nectarine\"        \n[52] \"nut\"               \"olive\"             \"orange\"           \n[55] \"pamelo\"            \"papaya\"            \"passionfruit\"     \n[58] \"peach\"             \"pear\"              \"persimmon\"        \n[61] \"physalis\"          \"pineapple\"         \"plum\"             \n[64] \"pomegranate\"       \"pomelo\"            \"purple mangosteen\"\n[67] \"quince\"            \"raisin\"            \"rambutan\"         \n[70] \"raspberry\"         \"redcurrant\"        \"rock melon\"       \n[73] \"salal berry\"       \"satsuma\"           \"star fruit\"       \n[76] \"strawberry\"        \"tamarillo\"         \"tangerine\"        \n[79] \"ugli fruit\"        \"watermelon\"       \n\nstr_to_sentence(fruit)\n\n [1] \"Apple\"             \"Apricot\"           \"Avocado\"          \n [4] \"Banana\"            \"Bell pepper\"       \"Bilberry\"         \n [7] \"Blackberry\"        \"Blackcurrant\"      \"Blood orange\"     \n[10] \"Blueberry\"         \"Boysenberry\"       \"Breadfruit\"       \n[13] \"Canary melon\"      \"Cantaloupe\"        \"Cherimoya\"        \n[16] \"Cherry\"            \"Chili pepper\"      \"Clementine\"       \n[19] \"Cloudberry\"        \"Coconut\"           \"Cranberry\"        \n[22] \"Cucumber\"          \"Currant\"           \"Damson\"           \n[25] \"Date\"              \"Dragonfruit\"       \"Durian\"           \n[28] \"Eggplant\"          \"Elderberry\"        \"Feijoa\"           \n[31] \"Fig\"               \"Goji berry\"        \"Gooseberry\"       \n[34] \"Grape\"             \"Grapefruit\"        \"Guava\"            \n[37] \"Honeydew\"          \"Huckleberry\"       \"Jackfruit\"        \n[40] \"Jambul\"            \"Jujube\"            \"Kiwi fruit\"       \n[43] \"Kumquat\"           \"Lemon\"             \"Lime\"             \n[46] \"Loquat\"            \"Lychee\"            \"Mandarine\"        \n[49] \"Mango\"             \"Mulberry\"          \"Nectarine\"        \n[52] \"Nut\"               \"Olive\"             \"Orange\"           \n[55] \"Pamelo\"            \"Papaya\"            \"Passionfruit\"     \n[58] \"Peach\"             \"Pear\"              \"Persimmon\"        \n[61] \"Physalis\"          \"Pineapple\"         \"Plum\"             \n[64] \"Pomegranate\"       \"Pomelo\"            \"Purple mangosteen\"\n[67] \"Quince\"            \"Raisin\"            \"Rambutan\"         \n[70] \"Raspberry\"         \"Redcurrant\"        \"Rock melon\"       \n[73] \"Salal berry\"       \"Satsuma\"           \"Star fruit\"       \n[76] \"Strawberry\"        \"Tamarillo\"         \"Tangerine\"        \n[79] \"Ugli fruit\"        \"Watermelon\"       \n\nstr_to_title(fruit)\n\n [1] \"Apple\"             \"Apricot\"           \"Avocado\"          \n [4] \"Banana\"            \"Bell Pepper\"       \"Bilberry\"         \n [7] \"Blackberry\"        \"Blackcurrant\"      \"Blood Orange\"     \n[10] \"Blueberry\"         \"Boysenberry\"       \"Breadfruit\"       \n[13] \"Canary Melon\"      \"Cantaloupe\"        \"Cherimoya\"        \n[16] \"Cherry\"            \"Chili Pepper\"      \"Clementine\"       \n[19] \"Cloudberry\"        \"Coconut\"           \"Cranberry\"        \n[22] \"Cucumber\"          \"Currant\"           \"Damson\"           \n[25] \"Date\"              \"Dragonfruit\"       \"Durian\"           \n[28] \"Eggplant\"          \"Elderberry\"        \"Feijoa\"           \n[31] \"Fig\"               \"Goji Berry\"        \"Gooseberry\"       \n[34] \"Grape\"             \"Grapefruit\"        \"Guava\"            \n[37] \"Honeydew\"          \"Huckleberry\"       \"Jackfruit\"        \n[40] \"Jambul\"            \"Jujube\"            \"Kiwi Fruit\"       \n[43] \"Kumquat\"           \"Lemon\"             \"Lime\"             \n[46] \"Loquat\"            \"Lychee\"            \"Mandarine\"        \n[49] \"Mango\"             \"Mulberry\"          \"Nectarine\"        \n[52] \"Nut\"               \"Olive\"             \"Orange\"           \n[55] \"Pamelo\"            \"Papaya\"            \"Passionfruit\"     \n[58] \"Peach\"             \"Pear\"              \"Persimmon\"        \n[61] \"Physalis\"          \"Pineapple\"         \"Plum\"             \n[64] \"Pomegranate\"       \"Pomelo\"            \"Purple Mangosteen\"\n[67] \"Quince\"            \"Raisin\"            \"Rambutan\"         \n[70] \"Raspberry\"         \"Redcurrant\"        \"Rock Melon\"       \n[73] \"Salal Berry\"       \"Satsuma\"           \"Star Fruit\"       \n[76] \"Strawberry\"        \"Tamarillo\"         \"Tangerine\"        \n[79] \"Ugli Fruit\"        \"Watermelon\""
  },
  {
    "objectID": "code/21_patterns_answers.html",
    "href": "code/21_patterns_answers.html",
    "title": "Matching patterns",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits data set.\n\nLoad tidyverse, import dog_breed_traits_clean.csv to traits, and extract the breed column into an object called breeds that randomly shuffles the breeds using 12 as a seed for randomization.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntraits &lt;- read_csv(here::here(\"data/dog_breed_traits_clean.csv\"), show_col_types = FALSE)\nset.seed(12)\nbreeds &lt;- sample(traits$breed)\n\n\nView the breeds ending with the letter “s”.\n\n\nstr_view_all(breeds, \"s$\")\n\nWarning: `str_view_all()` was deprecated in stringr 1.5.0.\nℹ Please use `str_view()` instead.\n\n\n [1] │ English Foxhound&lt;s&gt;\n [2] │ Retrievers (Nova Scotia Duck Tolling)\n [3] │ Coton de Tulear\n [4] │ Norwegian Elkhound&lt;s&gt;\n [5] │ Spaniels (Irish Water)\n [6] │ Italian Greyhound&lt;s&gt;\n [7] │ Chihuahua&lt;s&gt;\n [8] │ Lakeland Terrier&lt;s&gt;\n [9] │ English Buttdragger\n[10] │ American Staffordshire Terrier&lt;s&gt;\n[11] │ Bearded Collie&lt;s&gt;\n[12] │ Beauceron&lt;s&gt;\n[13] │ Maltese\n[14] │ Silky Terrier&lt;s&gt;\n[15] │ Belgian Tervuren\n[16] │ Otterhound&lt;s&gt;\n[17] │ Yorkshire Terrier&lt;s&gt;\n[18] │ Entlebucher Mountain Dog&lt;s&gt;\n[19] │ Scottish Terrier&lt;s&gt;\n[20] │ Russell Terrier&lt;s&gt;\n... and 177 more\n\n\n\nCreate a logical vector showing whether breeds have at least two words in their names.\n\n\nstr_detect(breeds, \" \")\n\n  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE\n [13] FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE\n [25] FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [37]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE\n [49]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE\n [61]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE\n [73]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE\n [85]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n [97]  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[109] FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE\n[121]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE\n[133]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE\n[145]  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE\n[157]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[169]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[181]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n[193]  TRUE  TRUE  TRUE  TRUE  TRUE\n\n\n\nExtract the hounds (but don’t release them). That is, return a vector of all breeds that include the string “hound” or “Hound”.\n\n\nstr_subset(breeds, \"hound|Hound\")\n\n [1] \"English Foxhounds\"           \"Norwegian Elkhounds\"        \n [3] \"Italian Greyhounds\"          \"Otterhounds\"                \n [5] \"Black and Tan Coonhounds\"    \"Afghan Hounds\"              \n [7] \"Ibizan Hounds\"               \"Plott Hounds\"               \n [9] \"Redbone Coonhounds\"          \"Irish Wolfhounds\"           \n[11] \"American English Coonhounds\" \"Treeing Walker Coonhounds\"  \n[13] \"Bluetick Coonhounds\"         \"Scottish Deerhounds\"        \n[15] \"American Foxhounds\"          \"Greyhounds\"                 \n[17] \"Pharaoh Hounds\"              \"Basset Hounds\"              \n[19] \"Bloodhounds\"                \n\n\n\nExtract the breeds that include the following pattern “&lt;wildcard&gt;ep”.\n\n\nstr_subset(breeds, \".ep\")\n\n [1] \"Icelandic Sheepdogs\"          \"Shetland Sheepdogs\"          \n [3] \"Anatolian Shepherd Dogs\"      \"Australian Shepherds\"        \n [5] \"Pyrenean Shepherds\"           \"German Shepherd Dogs\"        \n [7] \"Bergamasco Sheepdogs\"         \"Old English Sheepdogs\"       \n [9] \"Polish Lowland Sheepdogs\"     \"Miniature American Shepherds\"\n[11] \"Belgian Sheepdogs\"           \n\n\n\nOK, maybe English Buttdragger isn’t the proper AKC name for this breed. Replace English Buttdragger with English Chaser.\n\n\nstr_replace(breeds, \"English Buttdragger\", \"English Chaser\")\n\n  [1] \"English Foxhounds\"                    \n  [2] \"Retrievers (Nova Scotia Duck Tolling)\"\n  [3] \"Coton de Tulear\"                      \n  [4] \"Norwegian Elkhounds\"                  \n  [5] \"Spaniels (Irish Water)\"               \n  [6] \"Italian Greyhounds\"                   \n  [7] \"Chihuahuas\"                           \n  [8] \"Lakeland Terriers\"                    \n  [9] \"English Chaser\"                       \n [10] \"American Staffordshire Terriers\"      \n [11] \"Bearded Collies\"                      \n [12] \"Beaucerons\"                           \n [13] \"Maltese\"                              \n [14] \"Silky Terriers\"                       \n [15] \"Belgian Tervuren\"                     \n [16] \"Otterhounds\"                          \n [17] \"Yorkshire Terriers\"                   \n [18] \"Entlebucher Mountain Dogs\"            \n [19] \"Scottish Terriers\"                    \n [20] \"Russell Terriers\"                     \n [21] \"Black and Tan Coonhounds\"             \n [22] \"Afghan Hounds\"                        \n [23] \"Ibizan Hounds\"                        \n [24] \"Azawakhs\"                             \n [25] \"Borzois\"                              \n [26] \"Spaniels (Cocker)\"                    \n [27] \"Finnish Lapphunds\"                    \n [28] \"Chinooks\"                             \n [29] \"Cesky Terriers\"                       \n [30] \"Plott Hounds\"                         \n [31] \"Dogues de Bordeaux\"                   \n [32] \"Icelandic Sheepdogs\"                  \n [33] \"Border Collies\"                       \n [34] \"Chow Chows\"                           \n [35] \"Sealyham Terriers\"                    \n [36] \"Miniature Schnauzers\"                 \n [37] \"Petits Bassets Griffons Vendeens\"     \n [38] \"Retrievers (Golden)\"                  \n [39] \"Bedlington Terriers\"                  \n [40] \"Welsh Terriers\"                       \n [41] \"Sloughis\"                             \n [42] \"Akitas\"                               \n [43] \"Norwegian Buhunds\"                    \n [44] \"Shetland Sheepdogs\"                   \n [45] \"Miniature Pinschers\"                  \n [46] \"Lowchen\"                              \n [47] \"Fox Terriers (Wire)\"                  \n [48] \"Kerry Blue Terriers\"                  \n [49] \"Redbone Coonhounds\"                   \n [50] \"Anatolian Shepherd Dogs\"              \n [51] \"Soft Coated Wheaten Terriers\"         \n [52] \"Dandie Dinmont Terriers\"              \n [53] \"Lagotti Romagnoli\"                    \n [54] \"Weimaraners\"                          \n [55] \"Brittanys\"                            \n [56] \"Collies\"                              \n [57] \"Great Danes\"                          \n [58] \"Berger Picards\"                       \n [59] \"Spaniels (Clumber)\"                   \n [60] \"Boxers\"                               \n [61] \"Irish Wolfhounds\"                     \n [62] \"Rhodesian Ridgebacks\"                 \n [63] \"Norwegian Lundehunds\"                 \n [64] \"Briards\"                              \n [65] \"Setters (Irish)\"                      \n [66] \"Bernese Mountain Dogs\"                \n [67] \"Giant Schnauzers\"                     \n [68] \"Pointers\"                             \n [69] \"Xoloitzcuintli\"                       \n [70] \"Bulldogs\"                             \n [71] \"Basenjis\"                             \n [72] \"Harriers\"                             \n [73] \"Siberian Huskies\"                     \n [74] \"Whippets\"                             \n [75] \"American English Coonhounds\"          \n [76] \"Doberman Pinschers\"                   \n [77] \"Cardigan Welsh Corgis\"                \n [78] \"Tibetan Mastiffs\"                     \n [79] \"Rat Terriers\"                         \n [80] \"Dachshunds\"                           \n [81] \"Retrievers (Chesapeake Bay)\"          \n [82] \"Chinese Crested\"                      \n [83] \"Poodles\"                              \n [84] \"Retrievers (Labrador)\"                \n [85] \"Fox Terriers (Smooth)\"                \n [86] \"Wirehaired Vizslas\"                   \n [87] \"Bichons Frises\"                       \n [88] \"West Highland White Terriers\"         \n [89] \"Miniature Bull Terriers\"              \n [90] \"Spaniels (Field)\"                     \n [91] \"Australian Shepherds\"                 \n [92] \"Bullmastiffs\"                         \n [93] \"Pyrenean Shepherds\"                   \n [94] \"Cirnechi dell Etna\"                   \n [95] \"Chinese Shar-Pei\"                     \n [96] \"Skye Terriers\"                        \n [97] \"Norwich Terriers\"                     \n [98] \"Treeing Walker Coonhounds\"            \n [99] \"Barbets\"                              \n[100] \"Rottweilers\"                          \n[101] \"Cairn Terriers\"                       \n[102] \"Spanish Water Dogs\"                   \n[103] \"Portuguese Podengo Pequenos\"          \n[104] \"Bluetick Coonhounds\"                  \n[105] \"Shih Tzu\"                             \n[106] \"Toy Fox Terriers\"                     \n[107] \"Scottish Deerhounds\"                  \n[108] \"Spaniels (Welsh Springer)\"            \n[109] \"Beagles\"                              \n[110] \"German Shepherd Dogs\"                 \n[111] \"Glen of Imaal Terriers\"               \n[112] \"American Foxhounds\"                   \n[113] \"Bergamasco Sheepdogs\"                 \n[114] \"Pugs\"                                 \n[115] \"Affenpinschers\"                       \n[116] \"Pumik\"                                \n[117] \"Setters (Gordon)\"                     \n[118] \"French Bulldogs\"                      \n[119] \"Leonbergers\"                          \n[120] \"Pointers (German Wirehaired)\"         \n[121] \"Alaskan Malamutes\"                    \n[122] \"Pembroke Welsh Corgis\"                \n[123] \"Nederlandse Kooikerhondjes\"           \n[124] \"Retrievers (Curly-Coated)\"            \n[125] \"Australian Terriers\"                  \n[126] \"Cavalier King Charles Spaniels\"       \n[127] \"Retrievers (Flat-Coated)\"             \n[128] \"Mastiffs\"                             \n[129] \"Shiba Inu\"                            \n[130] \"Dalmatians\"                           \n[131] \"Spaniels (American Water)\"            \n[132] \"Greyhounds\"                           \n[133] \"Black Russian Terriers\"               \n[134] \"Salukis\"                              \n[135] \"Spaniels (Sussex)\"                    \n[136] \"Pharaoh Hounds\"                       \n[137] \"Setters (English)\"                    \n[138] \"Spaniels (English Cocker)\"            \n[139] \"Kuvaszok\"                             \n[140] \"Cane Corso\"                           \n[141] \"Pomeranians\"                          \n[142] \"Great Pyrenees\"                       \n[143] \"Schipperkes\"                          \n[144] \"Papillons\"                            \n[145] \"Finnish Spitz\"                        \n[146] \"Tibetan Terriers\"                     \n[147] \"Newfoundlands\"                        \n[148] \"Neapolitan Mastiffs\"                  \n[149] \"Samoyeds\"                             \n[150] \"Keeshonden\"                           \n[151] \"Setters (Irish Red and White)\"        \n[152] \"Greater Swiss Mountain Dogs\"          \n[153] \"Canaan Dogs\"                          \n[154] \"St. Bernards\"                         \n[155] \"Pulik\"                                \n[156] \"Spinoni Italiani\"                     \n[157] \"Old English Sheepdogs\"                \n[158] \"Tibetan Spaniels\"                     \n[159] \"Japanese Chin\"                        \n[160] \"Basset Hounds\"                        \n[161] \"Havanese\"                             \n[162] \"Wirehaired Pointing Griffons\"         \n[163] \"American Eskimo Dogs\"                 \n[164] \"English Toy Spaniels\"                 \n[165] \"Polish Lowland Sheepdogs\"             \n[166] \"Portuguese Water Dogs\"                \n[167] \"Irish Terriers\"                       \n[168] \"Lhasa Apsos\"                          \n[169] \"German Pinschers\"                     \n[170] \"Border Terriers\"                      \n[171] \"Komondorok\"                           \n[172] \"Parson Russell Terriers\"              \n[173] \"Bouviers des Flandres\"                \n[174] \"Staffordshire Bull Terriers\"          \n[175] \"Norfolk Terriers\"                     \n[176] \"Belgian Malinois\"                     \n[177] \"Swedish Vallhunds\"                    \n[178] \"Grand Basset Griffon Vendeens\"        \n[179] \"Brussels Griffons\"                    \n[180] \"Pointers (German Shorthaired)\"        \n[181] \"Miniature American Shepherds\"         \n[182] \"Bloodhounds\"                          \n[183] \"Australian Cattle Dogs\"               \n[184] \"Boerboels\"                            \n[185] \"Dogo Argentinos\"                      \n[186] \"Pekingese\"                            \n[187] \"Bull Terriers\"                        \n[188] \"Vizslas\"                              \n[189] \"Standard Schnauzers\"                  \n[190] \"Spaniels (English Springer)\"          \n[191] \"Airedale Terriers\"                    \n[192] \"Spaniels (Boykin)\"                    \n[193] \"Belgian Sheepdogs\"                    \n[194] \"Manchester Terriers\"                  \n[195] \"American Rearsniffer\"                 \n[196] \"Boston Terriers\"                      \n[197] \"American Hairless Terriers\"           \n\n\n\nReplace all instances of “English” with “British” and then return the breeds that include “English” or “British” in them (to check our work).\n\n\nstr_replace(breeds, \"English\", \"British\") |&gt; \n  str_subset(\"English|British\")\n\n[1] \"British Foxhounds\"           \"British Buttdragger\"        \n[3] \"American British Coonhounds\" \"Setters (British)\"          \n[5] \"Spaniels (British Cocker)\"   \"Old British Sheepdogs\"      \n[7] \"British Toy Spaniels\"        \"Spaniels (British Springer)\"\n\n\n\nExtract the Spaniels and then separate the breed names into different strings for each word and create a matrix out of it.\n\n\nbreeds |&gt; \n  str_subset(\"spaniel|Spaniel\") |&gt; \n  str_split(\"\\\\s\", simplify = TRUE)\n\n      [,1]       [,2]        [,3]        [,4]      \n [1,] \"Spaniels\" \"(Irish\"    \"Water)\"    \"\"        \n [2,] \"Spaniels\" \"(Cocker)\"  \"\"          \"\"        \n [3,] \"Spaniels\" \"(Clumber)\" \"\"          \"\"        \n [4,] \"Spaniels\" \"(Field)\"   \"\"          \"\"        \n [5,] \"Spaniels\" \"(Welsh\"    \"Springer)\" \"\"        \n [6,] \"Cavalier\" \"King\"      \"Charles\"   \"Spaniels\"\n [7,] \"Spaniels\" \"(American\" \"Water)\"    \"\"        \n [8,] \"Spaniels\" \"(Sussex)\"  \"\"          \"\"        \n [9,] \"Spaniels\" \"(English\"  \"Cocker)\"   \"\"        \n[10,] \"Tibetan\"  \"Spaniels\"  \"\"          \"\"        \n[11,] \"English\"  \"Toy\"       \"Spaniels\"  \"\"        \n[12,] \"Spaniels\" \"(English\"  \"Springer)\" \"\"        \n[13,] \"Spaniels\" \"(Boykin)\"  \"\"          \"\""
  },
  {
    "objectID": "code/22_factors_answers.html",
    "href": "code/22_factors_answers.html",
    "title": "Factors",
    "section": "",
    "text": "For these exercises, we’ll use the dog breed traits data set.\n\nLoad tidyverse, import dog_breed_traits_clean.csv to traits.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ntraits &lt;- read_csv(here::here(\"data/dog_breed_traits_clean.csv\"), show_col_types = FALSE)\nset.seed(12)\nbreeds &lt;- sample(traits$breed)\n\n\nConvert both coat_type and coat_length into factors using across() and save as traits2.\n\n\ntraits2 &lt;- traits |&gt; \n  mutate(across(contains(\"coat\"), factor))\n\n\nCheck the levels for both columns, one using a pipe and one without using a pipe.\n\n\nlevels(traits2$coat_type)\n\n[1] \"Corded\"   \"Curly\"    \"Double\"   \"Hairless\" \"Rough\"    \"Silky\"    \"Smooth\"  \n[8] \"Wavy\"     \"Wiry\"    \n\ntraits2 |&gt; \n  pull(coat_length) |&gt; \n  levels()\n\n[1] \"Long\"   \"Medium\" \"Short\" \n\n\n\nReorder the levels for coat_length to be Short, Medium, Long (reassigned to traits2) and then check the levels.\n\n\ntraits2 &lt;- traits2 |&gt; \n  mutate(coat_length = fct_relevel(coat_length, \"Short\", \"Medium\", \"Long\"))\nlevels(traits2$coat_length)\n\n[1] \"Short\"  \"Medium\" \"Long\"  \n\n\n\nReorder the levels for coat_type to be in the order of the most to least frequent coat type and then check the levels.\n\n\ntraits2 &lt;- traits2 |&gt; \n  mutate(coat_type = fct_infreq(coat_type))\nlevels(traits2$coat_type)\n\n[1] \"Smooth\"   \"Double\"   \"Wiry\"     \"Silky\"    \"Curly\"    \"Wavy\"     \"Corded\"  \n[8] \"Rough\"    \"Hairless\"\n\n\n\nRelabel coat_length to be Stubby, Mid, and Lush rather than Short, Medium, and Long.\n\n\ntraits2 &lt;- traits2 |&gt; \n  mutate(coat_length = fct_recode(coat_length, \"Stubby\" = \"Short\",\n                                  \"Mid\" = \"Medium\",\n                                  \"Lush\" = \"Long\"))\nlevels(traits2$coat_length)\n\n[1] \"Stubby\" \"Mid\"    \"Lush\"  \n\n\n\nThe new AKC standard subsumes Rough coats with Wiry coats and Silky with Wavy. Please update the coat_type variable accordingly.\n\n\ntraits2 &lt;- traits2 |&gt; \n  mutate(coat_type = fct_collapse(coat_type, Wiry = c(\"Rough\", \"Wiry\"),\n                                  Wavy = c(\"Silky\", \"Wavy\")))\nlevels(traits2$coat_type)\n\n[1] \"Smooth\"   \"Double\"   \"Wiry\"     \"Wavy\"     \"Curly\"    \"Corded\"   \"Hairless\""
  },
  {
    "objectID": "code/23_dates_answers.html",
    "href": "code/23_dates_answers.html",
    "title": "Dates and times",
    "section": "",
    "text": "For these exercises, we’ll use the dates data set.\n\nLoad tidyverse, import dates.csv to dates, and view the data set.\n\n\nlibrary(tidyverse)\ndates &lt;- read_csv(here::here(\"data/dates.csv\"), show_col_types = FALSE)\n\n\nConvert birth_date to a date object and resave dates.\n\n\ndates &lt;- dates |&gt; \n  mutate(birth_date = mdy(birth_date))\n\n\nCreate a column called time1 that converts test1 to datetime and change the time zone to “America/Chicago”.\n\n\ndates |&gt; \n  mutate(time1 = as_datetime(test1, tz = \"America/Chicago\"))\n\n# A tibble: 20 × 5\n      id birth_date test1      test2      time1              \n   &lt;dbl&gt; &lt;date&gt;     &lt;date&gt;     &lt;date&gt;     &lt;dttm&gt;             \n 1     1 1955-05-04 2022-01-21 2022-09-12 2022-01-21 00:00:00\n 2     2 2001-01-26 2022-01-05 2022-06-07 2022-01-05 00:00:00\n 3     3 1973-01-13 2022-02-02 2022-06-26 2022-02-02 00:00:00\n 4     4 1951-03-26 2022-02-09 2022-08-08 2022-02-09 00:00:00\n 5     5 1986-10-25 2022-01-14 2022-06-05 2022-01-14 00:00:00\n 6     6 2003-04-10 2022-03-04 2022-08-14 2022-03-04 00:00:00\n 7     7 1971-01-21 2022-02-13 2022-08-09 2022-02-13 00:00:00\n 8     8 1966-04-14 2022-03-17 2022-08-27 2022-03-17 00:00:00\n 9     9 1993-07-05 2022-02-13 2022-06-29 2022-02-13 00:00:00\n10    10 1966-04-25 2022-03-04 2022-07-12 2022-03-04 00:00:00\n11    11 1992-04-22 2022-02-25 2022-09-02 2022-02-25 00:00:00\n12    12 1957-03-01 2022-01-12 2022-09-20 2022-01-12 00:00:00\n13    13 1984-03-01 2022-01-14 2022-07-23 2022-01-14 00:00:00\n14    14 1957-11-28 2022-03-30 2022-06-18 2022-03-30 00:00:00\n15    15 1993-08-01 2022-02-06 2022-07-24 2022-02-06 00:00:00\n16    16 1979-09-03 2022-01-26 2022-09-03 2022-01-26 00:00:00\n17    17 1993-04-30 2022-01-24 2022-07-06 2022-01-24 00:00:00\n18    18 1962-07-03 2022-01-25 2022-06-10 2022-01-25 00:00:00\n19    19 1997-05-10 2022-02-21 2022-07-22 2022-02-21 00:00:00\n20    20 1966-10-19 2022-02-10 2022-07-09 2022-02-10 00:00:00\n\n\n\nCalculate each participant’s age in years at the time of test 1, rounded to 1 decimal place, stored in age and resave dates.\n\n\ndates &lt;- dates |&gt; \n  mutate(age = round(as.numeric(test1 - birth_date) / 365.25, 1))\n\n\nCalculate the number of days between test 1 and test 2 for each participant and label this column test_diff (and resave dates).\n\n\ndates &lt;- dates |&gt; \n  mutate(test_diff = test2 - test1)\n\n\nCreate dates2 that subsets the participants who were born after January 1, 1970.\n\n\ndates2 &lt;- dates |&gt; \n  filter(birth_date &gt; \"1970-01-01\")\n\n\nCreate a column named diff_text that writes the following sentence for each participant in dates2: “Participant [insert id] (age: [insert age]) had test 1 on [insert test1] and test 2 on [insert test2], which were [insert test_diff] days apart.”\n\n\ndates2 |&gt; \n  mutate(diff_text = stringr::str_glue(\"Participant {id} (age: {age}) had test 1 on {test1} and test 2 on {test2}, which were {test_diff} days apart.\"))\n\n# A tibble: 12 × 7\n      id birth_date test1      test2        age test_diff diff_text             \n   &lt;dbl&gt; &lt;date&gt;     &lt;date&gt;     &lt;date&gt;     &lt;dbl&gt; &lt;drtn&gt;    &lt;glue&gt;                \n 1     2 2001-01-26 2022-01-05 2022-06-07  20.9 153 days  Participant 2 (age: 2…\n 2     3 1973-01-13 2022-02-02 2022-06-26  49.1 144 days  Participant 3 (age: 4…\n 3     5 1986-10-25 2022-01-14 2022-06-05  35.2 142 days  Participant 5 (age: 3…\n 4     6 2003-04-10 2022-03-04 2022-08-14  18.9 163 days  Participant 6 (age: 1…\n 5     7 1971-01-21 2022-02-13 2022-08-09  51.1 177 days  Participant 7 (age: 5…\n 6     9 1993-07-05 2022-02-13 2022-06-29  28.6 136 days  Participant 9 (age: 2…\n 7    11 1992-04-22 2022-02-25 2022-09-02  29.8 189 days  Participant 11 (age: …\n 8    13 1984-03-01 2022-01-14 2022-07-23  37.9 190 days  Participant 13 (age: …\n 9    15 1993-08-01 2022-02-06 2022-07-24  28.5 168 days  Participant 15 (age: …\n10    16 1979-09-03 2022-01-26 2022-09-03  42.4 220 days  Participant 16 (age: …\n11    17 1993-04-30 2022-01-24 2022-07-06  28.7 163 days  Participant 17 (age: …\n12    19 1997-05-10 2022-02-21 2022-07-22  24.8 151 days  Participant 19 (age: …"
  },
  {
    "objectID": "code/24_functions_answers.html",
    "href": "code/24_functions_answers.html",
    "title": "Functions",
    "section": "",
    "text": "Write a function called mystring that takes a vector as an argument and returns the first three characters from the string. Test it on words[1:10].\n\n\nlibrary(stringr)\nmystring &lt;- function(x) {\n  str_sub(x, 1, 3)\n}\nmystring(words[1:10])\n\n [1] \"a\"   \"abl\" \"abo\" \"abs\" \"acc\" \"acc\" \"ach\" \"acr\" \"act\" \"act\"\n\n\n\nAdd an argument to mystring() that allows the user to control how many of the first characters should be returned. Test it on words[1:10] with 5 characters.\n\n\nmystring &lt;- function(x, chars) {\n  str_sub(x, 1, chars)\n}\nmystring(words[1:10], chars = 5)\n\n [1] \"a\"     \"able\"  \"about\" \"absol\" \"accep\" \"accou\" \"achie\" \"acros\" \"act\"  \n[10] \"activ\"\n\n\n\nSet the default number of characters returned by mystring() to be 3 and test that the default works and that you can override the default.\n\n\nmystring &lt;- function(x, chars = 3) {\n  str_sub(x, 1, chars)\n}\nmystring(words[1:10])\n\n [1] \"a\"   \"abl\" \"abo\" \"abs\" \"acc\" \"acc\" \"ach\" \"acr\" \"act\" \"act\"\n\nmystring(words[1:10], chars = 5)\n\n [1] \"a\"     \"able\"  \"about\" \"absol\" \"accep\" \"accou\" \"achie\" \"acros\" \"act\"  \n[10] \"activ\"\n\n\n\nAdd a step that checks whether the inputted vector is a character string. If it is, continue to return the truncated strings. If the vector is not a character string, use the stop() function to stop the computation and return a message to the console telling the user that the vector was not a character vector. Test your function with a character vector, a numeric vector, and a logical vector.\n\n\nmystring &lt;- function(x, chars = 3) {\n  if (!is.character(x)) {\n    stop(\"Please enter a character vector.\")\n  } else {\n  str_sub(x, 1, chars)\n  }\n}\n\nmystring(words[1:10])\n\n [1] \"a\"   \"abl\" \"abo\" \"abs\" \"acc\" \"acc\" \"ach\" \"acr\" \"act\" \"act\"\n\n# mystring(1:10)\n# mystring(c(TRUE, FALSE))\n\n\nCreate a function called parse_my_vector that does the following:\n\n\nAllows users to input a vector and a response to the argument type that determines whether the vector is a numeric (\"num\"), character (\"char\"), or logical (\"logical\") vector. There should be no default value. If the user response does not match any of these three strings, stop with a message asking the user to specify one of the three strings.\nFor each type, checks whether the vector is actually the type specified by the user and stops with a message if they do not match.\nFor numeric vectors, multiplies by 10. For character vectors, extracts the first three characters. For logical vectors, returns the number of TRUE responses.\nBefore returning output, prints a message thanking the user.\nReturns the original vector and output of the functions described above.\n\n\nparse_my_vector &lt;- function(x, type) {\n  if (type == \"num\") {\n    if (is.numeric(x)) {\n      output &lt;- x / 10\n    } else {\n      stop(\"Type response does not match vector type.\")\n    }\n  } else if (type == \"char\") {\n    if (is.character(x)) {\n      output &lt;- str_sub(x, 1, 3)\n    } else {\n      stop(\"Type response does not match vector type.\")\n    }\n  } else if (type == \"logical\") {\n    output &lt;- sum(x)\n  } else {\n    stop(\"Please enter either 'num', 'char', or 'logical'.\")\n  }\n  message(\"Thank you!\")\n  list(x,output)\n}\n\n\nCheck the following with parse_my_vector():\n\n\nx = 1:10, type = “num”\nx = 1:10, type = “char”\nx = words[1:10], type = “num”\nx = words[1:10], type = “char”\nx = c(TRUE, FALSE, TRUE), type = “num”\nx = c(TRUE, FALSE, TRUE), type = “logical”\nx = 1:10, type = “nums”\n\n\nparse_my_vector(x = 1:10, type = \"num\")\n\nThank you!\n\n\n[[1]]\n [1]  1  2  3  4  5  6  7  8  9 10\n\n[[2]]\n [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n\n# parse_my_vector(x = 1:10, type = \"char\")\n# parse_my_vector(x = words[1:10], type = \"num\")\nparse_my_vector(x = words[1:10], type = \"char\")\n\nThank you!\n\n\n[[1]]\n [1] \"a\"        \"able\"     \"about\"    \"absolute\" \"accept\"   \"account\" \n [7] \"achieve\"  \"across\"   \"act\"      \"active\"  \n\n[[2]]\n [1] \"a\"   \"abl\" \"abo\" \"abs\" \"acc\" \"acc\" \"ach\" \"acr\" \"act\" \"act\"\n\n# parse_my_vector(x = c(TRUE, FALSE, TRUE), type = \"num\")\nparse_my_vector(x = c(TRUE, FALSE, TRUE), type = \"logical\")\n\nThank you!\n\n\n[[1]]\n[1]  TRUE FALSE  TRUE\n\n[[2]]\n[1] 2\n\n# parse_my_vector(x = 1:10, type = \"nums\")"
  },
  {
    "objectID": "code/25_iteration_answers.html",
    "href": "code/25_iteration_answers.html",
    "title": "Iteration",
    "section": "",
    "text": "Write a for loop that calculates the mean bill length for each species in the penguins data set (don’t use group_by()) and saves them as species_means.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\npenguin_species &lt;- unique(penguins$species)\nspecies_means &lt;- NA\nfor (i in penguin_species) {\n  species_means[i] &lt;- penguins |&gt; \n    filter(species == i) |&gt; \n    summarise(mean_bill_length = mean(bill_length_mm, na.rm = TRUE)) |&gt; \n    pull()\n}\nspecies_means &lt;- species_means[!is.na(species_means)]\n\n\nTurn #1 into a function called species_mean that lets the user determine which variable to calculate the mean over.\n\n\nspecies_mean &lt;- function(var) {\n  penguin_species &lt;- unique(penguins$species)\n  species_means &lt;- NA\n  for (i in penguin_species) {\n    species_means[i] &lt;- penguins |&gt; \n      filter(species == i) |&gt; \n      summarise(mean({{var}}, na.rm = TRUE)) |&gt; \n      pull()\n  }\n  species_means &lt;- species_means[!is.na(species_means)]\n  return(species_means)\n}\nspecies_mean(bill_length_mm)\n\n   Adelie    Gentoo Chinstrap \n 38.79139  47.50488  48.83382 \n\n\n\nCreate a list penguins_island that separates the penguins data by island.\n\n\npenguins_island &lt;- penguins |&gt; \n  split(penguins$island)\n\n\nApply map() to find the number of observations for each year.\n\n\nmap(penguins_island, nrow)\n\n$Biscoe\n[1] 168\n\n$Dream\n[1] 124\n\n$Torgersen\n[1] 52\n\n\n\nApply map() to calculate the mean body weight for each island.\n\n\nmap(penguins_island, ~ mean(.x$body_mass_g, na.rm = TRUE))\n\n$Biscoe\n[1] 4716.018\n\n$Dream\n[1] 3712.903\n\n$Torgersen\n[1] 3706.373\n\n\n\nRework #5 to return a numeric vector with values rounded to 1 decimal place.\n\n\nmap_dbl(penguins_island, ~ round(mean(.x$body_mass_g, na.rm = TRUE), 1))\n\n   Biscoe     Dream Torgersen \n   4716.0    3712.9    3706.4"
  },
  {
    "objectID": "code/26_grammar1_answers.html",
    "href": "code/26_grammar1_answers.html",
    "title": "Grammar of graphics I",
    "section": "",
    "text": "Using the mtcars data, create a scatterplot of the fuel efficiency as a function of weight.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nmtcars |&gt; \n  ggplot(aes(x = wt, y = mpg)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nRepeat the plot but only with vehicles having 4 or 6 cylinders.\n\n\nmtcars |&gt; \n  filter(cyl &lt; 8) |&gt; \n  ggplot(aes(x = wt, y = mpg)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nRepeat plot #1 but add a smooth line underneath the data points.\n\n\nmtcars |&gt; \n  ggplot(aes(x = wt, y = mpg)) +\n  geom_smooth() +\n  geom_point()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nMake a boxplot of fuel efficiency for each cylinder size.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = cyl, y = mpg)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nAdd ” cylinders” to the end of each value in the cylinder column of data and replot #4.\n\n\nmtcars |&gt; \n  mutate(cyl = paste0(cyl, \" cylinders\")) |&gt; \n  ggplot(aes(x = cyl, y = mpg)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nReplot #4 ordering the cylinders such that the median mpg increases from left to right.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = fct_reorder(cyl, mpg), y = mpg)) +\n  geom_boxplot()"
  },
  {
    "objectID": "code/27_grammar2_answers.html",
    "href": "code/27_grammar2_answers.html",
    "title": "Grammar of graphics II",
    "section": "",
    "text": "Using the mtcars data, create a scatterplot of the fuel efficiency as a function of weight.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nmtcars |&gt; \n  ggplot(aes(x = wt, y = mpg)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nRepeat the scatterplot, but make the points violet open squares of size 5.\n\n\nmtcars |&gt; \n  ggplot(aes(x = wt, y = mpg)) +\n  geom_point(color = \"violet\", shape = 0, size = 5)\n\n\n\n\n\n\n\n\n\nRepeat the scatterplot but with separate colors for cylinder levels.\n\n\nmtcars |&gt; \n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nWhy does the legend look like that? Fix it so there are separate colors for cylinder levels.\n\n\nmtcars |&gt; \n  ggplot(aes(x = wt, y = mpg, color = as.factor(cyl))) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nOverlay separate regression lines for each cylinder level.\n\n\nmtcars |&gt; \n  ggplot(aes(x = wt, y = mpg, color = as.factor(cyl))) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nOverlay a single firebrick regression line over the points with a firebrick1-colored confidence band.\n\n\nmtcars |&gt; \n  ggplot(aes(x = wt, y = mpg)) +\n  geom_point(aes(color = as.factor(cyl))) +\n  geom_smooth(method = \"lm\", color = \"firebrick\", fill = \"firebrick1\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nPlot the mean and standard error of the mean of fuel efficiency for each level of cylinder and color them sienna.\n\n\nmtcars |&gt; \n  ggplot(aes(x = as.factor(cyl), y = mpg)) +\n  stat_summary(color = \"sienna\")\n\nNo summary function supplied, defaulting to `mean_se()`"
  },
  {
    "objectID": "code/28_themes_answers.html",
    "href": "code/28_themes_answers.html",
    "title": "Design and themes",
    "section": "",
    "text": "Using the mtcars data, create a scatterplot of the fuel efficiency as a function of weight with color based on the number of cylinders.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nRepeat the scatterplot but with classic, bw, and dark themes.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point() +\n  theme_classic()\n\n\n\n\n\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point() +\n  theme_bw()\n\n\n\n\n\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point() +\n  theme_dark()\n\n\n\n\n\n\n\n\n\nRepeat the scatterplot from #1 but with no minor grid lines and no legend.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point() +\n  theme(panel.grid.minor = element_blank(),\n        legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nRepeat the scatterplot from #1 but no minor grid lines for the x-axis (keep them for the y-axis) and move the legend inside the plot area and remove the legend title.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point() +\n  theme(panel.grid.minor.x = element_blank(),\n        legend.position = c(0.8, 0.8),\n        legend.title = element_blank())\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\n\n\n\n\n\n\n\n\n\nRepeat the scatterplot from #1 but make the major y-axis grid lines black dashed lines and change the text font to 12 point Times font.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point() +\n  theme(panel.grid.major.y = element_line(color = \"black\", linetype = 2),\n        text = element_text(family = \"Times\", size = 12))\n\n\n\n\n\n\n\n\n\nCreate a version of scatterplot #1 that minimizes the data-ink ratio by reducing non-data-ink.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point() +\n  theme_minimal() +\n  theme(panel.grid = element_blank(),\n        legend.title = element_blank(),\n        legend.position = c(0.8, 0.8))"
  },
  {
    "objectID": "code/29_color_answers.html",
    "href": "code/29_color_answers.html",
    "title": "Color",
    "section": "",
    "text": "Using the mtcars data, create a scatterplot of the fuel efficiency as a function of weight with color based on the number of cylinders.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nRepeat the scatterplot but use scale_color_brewer() to set the palette to Set1.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point() +\n  scale_color_brewer(palette = \"Set1\")\n\n\n\n\n\n\n\n\n\nWhy did you use scale_color_brewer() not scale_fill_brewer() or scale_color_distiller()?\nRepeat scatterplot #1 but use scale_color_manual() to set the three colors to red, green, and blue.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point() +\n  scale_color_manual(values = c(\"red\", \"green\", \"blue\"))\n\n\n\n\n\n\n\n\n\nFind three colors (either names or hex codes), and repeat scatterplot #4 with your own colors.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point() +\n  scale_color_manual(values = c(\"coral2\", \"palegreen4\", \"slateblue4\"))\n\n\n\n\n\n\n\n\n\nUsing the mtcars data, create a scatterplot of the fuel efficiency as a function of weight with color based on horsepower using the BuPu palette and reverse the direction of the gradient.\n\n\nmtcars |&gt; \n  ggplot(aes(x = wt, y = mpg, color = hp)) +\n  geom_point() +\n  scale_color_distiller(palette = \"BuPu\", direction = 2)\n\n\n\n\n\n\n\n\n\nCreate a new column in mtcars that centers and scales displacement with the scale() function. Create a scatterplot of fuel efficiency as a function of weight with color based on the rescaled displacement, using a diverging scale of your choice.\n\n\nmtcars |&gt; \n  mutate(disp2 = scale(disp)) |&gt; \n  ggplot(aes(x = wt, y = mpg, color = disp2)) +\n  geom_point() +\n  scale_color_distiller(palette = \"RdBu\")"
  },
  {
    "objectID": "code/30_histograms_answers.html",
    "href": "code/30_histograms_answers.html",
    "title": "Plotting distributions: histograms",
    "section": "",
    "text": "Using the mtcars data, create a histogram of the fuel efficiency values.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nmtcars |&gt; \n  ggplot(aes(x = mpg)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nNot a great histogram. Mess with the number of bins until you get a nice histogram.\n\n\nmtcars |&gt; \n  ggplot(aes(x = mpg)) +\n  geom_histogram(bins = 8)\n\n\n\n\n\n\n\n\n\nNow change the bin width to generate the same plot as #2.\n\n\nmtcars |&gt; \n  ggplot(aes(x = mpg)) +\n  geom_histogram(binwidth = 3.35)\n\n\n\n\n\n\n\n\n\nUsing the same binwidth from #3, plot a histogram with lightseagreen lines and aquamarine3 shaded areas. Then overlay a density plot with a aquamarine4 line with width 2.\n\n\nmtcars |&gt; \n  ggplot(aes(x = mpg)) +\n  geom_histogram(aes(y = after_stat(density)), binwidth = 3.35, fill = \"aquamarine3\", color = \"lightseagreen\") +\n  geom_density(bw = 3.35, color = \"aquamarine4\", linewidth = 2)\n\n\n\n\n\n\n\n\n\nWhat is the difference between a frequency polygon and a density plot?\nMake a density plot with bandwidth of 3 and separate line colors for different cylinder levels.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = mpg, color = cyl)) +\n  geom_density(bw = 3)\n\n\n\n\n\n\n\n\n\nRepeat #6 but also include separate colors for the shaded areas with a transparency of 0.5. Use viridis colors for both lines and shaded areas, and reverse the direction of the colors where 4 is yellow, 6 is greenish, and 8 is purplish.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = mpg, color = cyl, fill = cyl)) +\n  geom_density(bw = 3, alpha = 0.5) +\n  scale_color_viridis_d(direction = -1) +\n  scale_fill_viridis_d(direction = -1)"
  },
  {
    "objectID": "code/31_boxplots_answers.html",
    "href": "code/31_boxplots_answers.html",
    "title": "Plotting distributions: boxplots",
    "section": "",
    "text": "Using the penguins data, create a boxplot that shows penguin flipper length by island without outliers.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\npenguins %&gt;%\n  ggplot(aes(x = island, y = flipper_length_mm)) +\n  geom_boxplot(outlier.shape = NA)\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\n\nAdd the means and standard error for each boxplot.\n\n\npenguins %&gt;%\n  ggplot(aes(x = island, y = flipper_length_mm)) +\n  geom_boxplot(outlier.shape = NA) +\n  stat_summary()\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_summary()`).\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\n\n\n\nSwitch from standard errors to confidence intervals, increase the size of the point, and color the box shading chocolate.\n\n\npenguins %&gt;%\n  ggplot(aes(x = island, y = flipper_length_mm)) +\n  geom_boxplot(outlier.shape = NA, fill = \"chocolate\") +\n  stat_summary(fun.data = mean_cl_normal, size = 0.75)\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_summary()`).\n\n\n\n\n\n\n\n\n\n\nFill the boxplots with color separately for each island and remove the legend.\n\n\npenguins %&gt;%\n  ggplot(aes(x = island, y = flipper_length_mm, fill = island)) +\n  geom_boxplot(outlier.shape = NA) +\n  stat_summary(fun.data = mean_cl_normal, size = 0.75) +\n  theme(legend.position = \"none\")\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_summary()`).\n\n\n\n\n\n\n\n\n\n\nCreate a boxplot to show how flipper length differs for each species by island.\n\n\npenguins %&gt;%\n  ggplot(aes(x = island, y = flipper_length_mm, fill = island)) +\n  geom_boxplot(outlier.shape = NA) +\n  stat_summary(fun.data = mean_cl_normal, size = 0.75) +\n  facet_wrap(vars(species)) +\n  theme(legend.position = \"none\")\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_summary()`).\n\n\n\n\n\n\n\n\n\n\nRecreate the boxplot #5 as a violin plot with a white background.\n\n\npenguins %&gt;%\n  ggplot(aes(x = island, y = flipper_length_mm, fill = island)) +\n  geom_violin(outlier.shape = NA) +\n  stat_summary(fun.data = mean_cl_normal, size = 0.75) +\n  facet_wrap(vars(species)) +\n  theme(legend.position = \"none\",\n        panel.background = element_rect(fill = \"white\"))\n\nWarning in geom_violin(outlier.shape = NA): Ignoring unknown parameters:\n`outlier.shape`\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_ydensity()`).\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_summary()`)."
  },
  {
    "objectID": "code/32_barcharts_answers.html",
    "href": "code/32_barcharts_answers.html",
    "title": "Plotting amounts: barcharts and dot plots",
    "section": "",
    "text": "Using the mtcars data, create a barchart of the counts for each level of cylinder.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl),\n         gear = as.factor(gear)) |&gt; \n  ggplot(aes(x = cyl)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nRepeat the barchart but stack the counts by gear.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl),\n         gear = as.factor(gear)) |&gt; \n  ggplot(aes(x = cyl, fill = gear)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\nRecreate this plot:\n\n\n\nmtcars |&gt;\n  mutate(cyl = as.factor(cyl),\n         cyl = str_c(cyl, \" cylinders\"),\n         gear = as.factor(gear),\n         gear = str_c(gear, \" gears\")) |&gt;\n  ggplot(aes(x = cyl, fill = gear)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\n\n\nRepeat barchart #2 but set the position to “dodge”.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl),\n         gear = as.factor(gear)) |&gt; \n  ggplot(aes(x = cyl, fill = gear)) +\n  geom_bar(position = \"dodge\")\n\n\n\n\n\n\n\n\n\nWhoa, what happened to 8 cylinders? Unfortunately, since there were only two levels of gear for 8 cylinders, it just split the bars in two. To hold the numbers of bars the same across all levels, you can set position to position_dodge(preserve = \"single\"). Try that.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl),\n         gear = as.factor(gear)) |&gt; \n  ggplot(aes(x = cyl, fill = gear)) +\n  geom_bar(position = position_dodge(preserve = \"single\"))\n\n\n\n\n\n\n\n\n\nWell, that’s better—the two bars are the same width as all of the other bars. But the 4 gears should show up as 0. To fix, we need to count the data first, find implicitly missing data, and plot using geom_col(). So first, find counts for the combinations of cylinders and gears. Then use complete() to find the implicitly missing combinations. Then replace the NAs with 0s. Then use geom_col() to plot these values with the position dodged.\n\n\nmtcars |&gt; \n  mutate(cyl = as.factor(cyl),\n         gear = as.factor(gear)) |&gt; \n  count(cyl, gear) |&gt; \n  complete(cyl, gear) |&gt; \n  mutate(n = as.numeric(str_replace_na(n, \"0\"))) |&gt; \n  ggplot(aes(x = cyl, y = n, fill = gear)) +\n  geom_col(position = position_dodge())\n\n\n\n\n\n\n\n\n\nMake a dotplot of the counts for each level of carb and plot carb on the y-axis and the count on the x-axis. Reminder that first you’ll need to count the observations in each level of carb before starting the plot.\n\n\nmtcars |&gt; \n  count(carb) |&gt; \n  ggplot(aes(x = carb, y = n)) +\n  geom_point() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nRepeat dotplot #8 but order carb based on the counts from highest to lowest count.\n\n\nmtcars |&gt; \n  count(carb) |&gt; \n  ggplot(aes(x = fct_reorder(as.factor(carb), n), y = n)) +\n  geom_point() +\n  coord_flip()"
  },
  {
    "objectID": "code/33_associations_answers.html",
    "href": "code/33_associations_answers.html",
    "title": "Plotting x-y data: associations",
    "section": "",
    "text": "Using the mpg data, create a scatterplot of the highway fuel efficiency and city fuel efficiency.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nmpg |&gt; \n  ggplot(aes(x = hwy, y = cty)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nNow add a dashed reference line showing equivalent values for the two axes and set the aspect ratio to 1.\n\n\nmpg |&gt; \n  ggplot(aes(x = hwy, y = cty)) +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\")+\n  geom_point() +\n  theme(aspect.ratio = 1)\n\n\n\n\n\n\n\n\n\nLooks like there is a possibility of overplotting. Turn this into a bubble chart with dot size scaling to the number of data points for each dot and make the dot colors steelblue.\n\n\nmpg |&gt; \n  ggplot(aes(x = hwy, y = cty)) +\n  geom_count(color = \"steelblue\")\n\n\n\n\n\n\n\n\n\nAdd rugs to scatterplot #1 and change to minimal theme.\n\n\nmpg |&gt; \n  ggplot(aes(x = hwy, y = cty)) +\n  geom_point() +\n  geom_rug() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nFrom scatterplot #1, color the dots by class, move the legend to the top left corner of the plot, and add marginal density plots.\n\n\nlibrary(ggExtra)\nclass_plot &lt;- mpg |&gt; \n  ggplot(aes(x = hwy, y = cty, color = class)) +\n  geom_point() +\n  theme(legend.position = c(0.2, 0.7))\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\nggMarginal(class_plot, type = \"density\", groupFill = TRUE)\n\n\n\n\n\n\n\n\n\nCreate a data frame called mpg_num that only includes variables with numeric values using the where() function. Then remove the year column.\n\n\nmpg_num &lt;- mpg |&gt; \n  select(where(is.numeric)) |&gt; \n  select(!year)\n\n\nCreate correlation plots of the numeric variables in mpg_num in both base R and using {GGally}’s ggpairs() function.\n\n\npairs(mpg_num)\n\n\n\n\n\n\n\nlibrary(GGally)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\nggpairs(mpg_num)\n\n\n\n\n\n\n\n\n\nCreate a correlation matrix of mpg_num with the cor() function. Then use ggcorrplot() from the {ggcorrplot} package to make a heatmap correlation plot with just the upper triangle of the matrix and using circles to represent correlation coefficient magnitude.\n\n\nlibrary(ggcorrplot)\nmpg_num |&gt; \n  cor() |&gt; \n  ggcorrplot(type = \"upper\", method = \"circle\")"
  },
  {
    "objectID": "code/34_timeseries_answers.html",
    "href": "code/34_timeseries_answers.html",
    "title": "Plotting x-y data: time series",
    "section": "",
    "text": "Using the mpg data, calculate the mean highway fuel efficiency for each number of cylinders and plot a line graph of fuel efficiency by cylinder number.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nmpg |&gt; \n  group_by(cyl) |&gt; \n  summarise(mean_hwy = mean(hwy)) |&gt; \n  ggplot(aes(x = cyl, y = mean_hwy)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\nRepeat the previous plot but also group by class and plot separately colored lines for different classes.\n\n\nmpg |&gt; \n  group_by(cyl, class) |&gt; \n  summarise(mean_hwy = mean(hwy)) |&gt; \n  ggplot(aes(x = cyl, y = mean_hwy, color = class)) +\n  geom_line()\n\n`summarise()` has grouped output by 'cyl'. You can override using the `.groups`\nargument.\n\n\n\n\n\n\n\n\n\n\nCreate a new column called low_high that codes high fuel efficiency greater than or equal to 25 as 1 and less than 25 as 0. Plot low_high as a function of displacement with a bubble chart (no legend) and include a logistic regression curve and band.\n\n\nmpg |&gt; \n  mutate(low_high = ifelse(hwy &gt; 25, 1, 0)) |&gt; \n  ggplot(aes(x = displ, y = low_high)) +\n  geom_count(show.legend = FALSE) +\n  geom_smooth(method = \"glm\", formula = y ~ x, method.args = list(family = \"binomial\"))\n\n\n\n\n\n\n\n\n\nPlot highway fuel efficiency for each class as points first, then add jitter, finding an appropriate amount of jitter to add.\n\n\nmpg |&gt; \n  ggplot(aes(x = class, y = hwy)) +\n  geom_point()\n\n\n\n\n\n\n\nmpg |&gt; \n  ggplot(aes(x = class, y = hwy)) +\n  geom_jitter(width = 0.1, height = 2)\n\n\n\n\n\n\n\n\n\nRepeat plot #4 with a beeswarm plot.\n\n\nlibrary(ggbeeswarm)\nmpg |&gt; \n  ggplot(aes(x = class, y = hwy)) +\n  geom_beeswarm()"
  },
  {
    "objectID": "code/35_categories_answers.html",
    "href": "code/35_categories_answers.html",
    "title": "Plotting x-y data: categories",
    "section": "",
    "text": "Using the mpg data, create a data object called class_cyl that subsets only the compact and midsize class cars with 4 or 6 cylinders and makes cylinder number a factor. You should end up with 84 observations.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nclass_cyl &lt;- mpg |&gt; \n  filter(class %in% c(\"compact\", \"midsize\") &\n           cyl %in% c(4, 6)) |&gt; \n  mutate(cyl = as.factor(cyl))\n\n\nCreate an interaction plot from class_cyl with cylinder number on the x-axis, highway fuel efficiency on the y-axis, and separately colored lines for class. Spatially separate overlapping error bars.\n\n\nlibrary(tidyverse)\nclass_cyl |&gt; \n  ggplot(aes(x = cyl, y = hwy, color = class, group = class)) +\n  stat_summary(position = position_dodge(width = 0.1)) +\n  stat_summary(fun = mean, geom = \"line\", position = position_dodge(width = 0.1))\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\n\n\n\nRepeat interaction plot #2, reversing the roles of class and cylinder number by making class the x-axis and cylinder number the lines. Do the two plots communicate information differently? Which do you prefer?\n\n\nmpg |&gt; \n  filter(class %in% c(\"compact\", \"midsize\") &\n           cyl %in% c(4, 6)) |&gt; \n  mutate(cyl = as.factor(cyl)) |&gt; \n  ggplot(aes(x = class, y = hwy, color = cyl, group = cyl)) +\n  stat_summary() +\n  stat_summary(fun = mean, geom = \"line\")\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\n\n\n\nTake the class_cyl data and calculate the mean and standard error for each combination of class and cylinder number levels. Note that you can calculate standard error by dividing the standard deviation by the square root of the sample size. Next, create a column that subtracts SE from mean for the lower bound and add SE to mean for the upper bound. Assign these means, standard errors, and lower and upper bounds to mean_mpg (you should have 4 observations and 6 variables).\n\n\nmean_mpg &lt;- class_cyl |&gt; \n  group_by(cyl, class) |&gt; \n  summarise(mean_hwy = mean(hwy), se_hwy = sd(hwy) / sqrt(n())) |&gt; \n  mutate(lower = mean_hwy - se_hwy, upper = mean_hwy + se_hwy)\n\n`summarise()` has grouped output by 'cyl'. You can override using the `.groups`\nargument.\n\n\n\nReplicate plot #3 using the mean_mpg data set by plotting the means and bounds as error bars and include a line connecting across class. Is it identical to plot #3?\n\n\nmean_mpg |&gt; \n  ggplot(aes(x = class, y = mean_hwy, color = cyl)) +\n  geom_pointrange(aes(ymin = lower, ymax = upper)) +\n  geom_line(aes(group = cyl))\n\n\n\n\n\n\n\n\n\nUsing class_cyl, calculate the mean highway fuel efficiency for each manufacturer and cylinder size. Plot a slopegraph of dashed lines for each manufacturer connecting the mean fuel efficiency for 4 and 6 cylinders. Overlay the mean and standard deviation across manufacturers for both levels of cylinder number.\n\n\nclass_cyl |&gt; \n  group_by(manufacturer, cyl) |&gt; \n  summarise(mean_hwy = mean(hwy)) |&gt; \n  ggplot(aes(x = cyl, y = mean_hwy)) +\n  geom_line(linetype = \"dashed\", aes(group = manufacturer)) +\n  stat_summary()\n\n`summarise()` has grouped output by 'manufacturer'. You can override using the\n`.groups` argument.\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\n\n\n\nUsing mpg, create a raincloud plot that includes a half density plot and half dot plot of highway fuel efficiency for each class. Adjust the bin width and dot size to produce a reasonable distribution of dots. Color the lines and shaded areas differently for each class, but remove the legend. Reduce the opacity of the shaded areas.\n\n\nlibrary(gghalves)\nmpg |&gt; \n  ggplot(aes(x = class, y = hwy, fill = class, color = class)) +\n  geom_half_violin(alpha = 0.5) +\n  geom_half_dotplot(binwidth = 0.5, dotsize = 0.5) +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "code/36_axes_answers.html",
    "href": "code/36_axes_answers.html",
    "title": "Adjusting axes",
    "section": "",
    "text": "Using the mpg data, create boxplots of highway fuel efficiency as a function of class.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nmpg |&gt; \n  ggplot(aes(x = class, y = hwy)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nZoom into the plot with y-axis limits of 15 and 40 without altering the data.\n\n\nmpg |&gt; \n  ggplot(aes(x = class, y = hwy)) +\n  geom_boxplot() +\n  coord_cartesian(ylim = c(15, 40))\n\n\n\n\n\n\n\n\n\nChange the y-axis limits to 15 and 40 but allow the statistical transformations to change the data.\n\n\nmpg |&gt; \n  ggplot(aes(x = class, y = hwy)) +\n  geom_boxplot() +\n  ylim(15, 40)\n\nWarning: Removed 10 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\n\nReplot #1 but using a log10 scale.\n\n\nmpg |&gt; \n  ggplot(aes(x = class, y = hwy)) +\n  geom_boxplot() +\n  scale_y_log10()\n\n\n\n\n\n\n\n\n\nReplot #1 but with y-axis limits running from 0 to 50 and with labels in increments of 5 but no minor grid lines.\n\n\nmpg |&gt; \n  ggplot(aes(x = class, y = hwy)) +\n  geom_boxplot() +\n  scale_y_continuous(limits = c(0, 50), breaks = seq(0, 50, 5)) +\n  theme(panel.grid.minor = element_blank())\n\n\n\n\n\n\n\n\n\nReplot #1 but create separate panels based on year (as rows) and cylinders (as columns) and allowing the scales to vary across rows.\n\n\nmpg |&gt; \n  ggplot(aes(x = class, y = hwy)) +\n  geom_boxplot() +\n  facet_grid(rows = vars(year), cols = vars(cyl), scale = \"free\")\n\n\n\n\n\n\n\n\n\nReplot #1 and assign it to hwy_plot and replot a similar version with city fuel efficiency named cty_plot. Then combine them into a compound plot labeled as subfigures A and B and save this figure on your computer as a PNG file.\n\n\nhwy_plot &lt;- mpg |&gt; \n  ggplot(aes(x = class, y = hwy)) +\n  geom_boxplot()\ncty_plot &lt;- mpg |&gt; \n  ggplot(aes(x = class, y = cty)) +\n  geom_boxplot()\nlibrary(patchwork)\nhwy_plot + cty_plot + plot_annotation(tag_levels = \"A\")\n\n\n\n\n\n\n\n# ggsave(\"fuel_efficiency_class.png\")"
  },
  {
    "objectID": "code/37_annotating_answers.html",
    "href": "code/37_annotating_answers.html",
    "title": "Annotating plots",
    "section": "",
    "text": "Using the mpg data, create a scatterplot of highway and city fuel efficiencies. Create a title, subtitle, caption, and axes labels.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nmpg |&gt; \n  ggplot(aes(x = cty, y = hwy)) +\n  geom_point() +\n  labs(title = \"Fuel efficiency\", subtitle = \"Highway vs. city miles per gallon\", caption = \"Source: mpg data\", x = \"City miles per gallon\", y = \"Highway miles per gallon\")\n\n\n\n\n\n\n\n\n\nRepeat #1 adding a linear regression line. Use cor() to calculate the correlation coefficient for the correlation. Add it to the plot somewhere labeled and rounded to two decimals.\n\n\nmpg_corr &lt;- cor(mpg$hwy, mpg$cty)\nmpg |&gt; \n  ggplot(aes(x = cty, y = hwy)) +\n  geom_smooth(method = \"lm\") +\n  geom_point() +\n  labs(title = \"Fuel efficiency\", subtitle = \"Highway vs. city miles per gallon\", caption = \"Source: mpg data\", x = \"City miles per gallon\", y = \"Highway miles per gallon\") +\n  annotate(geom = \"text\", label = paste0(\"r = \", round(mpg_corr, 2)), x = 15, y = 40)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\nRepeat #1. Find the manufacturer and model of the data point with the highest city fuel efficiency. Label this point by drawing a line from the point to the text label and include the manufacturer and model (broken across two lines).\n\n\nmpg |&gt; \n  ggplot(aes(x = cty, y = hwy)) +\n  geom_point() +\n  labs(title = \"Fuel efficiency\", subtitle = \"Highway vs. city miles per gallon\", caption = \"Source: mpg data\", x = \"City miles per gallon\", y = \"Highway miles per gallon\") +\n  annotate(geom = \"text\", label = \"Volkswagon\\nBeetle\", x = 33, y = 40) +\n  annotate(geom = \"segment\", x = 33, xend = 34.8, y = 41, yend = 43.5)\n\n\n\n\n\n\n\n\n\nRepeat #1 drawing grey horizontal and vertical lines at 20 mpg for both axes underneath the data points. Add a lightpink rectangle under the points filling the upper right quandrant (&gt;20 for both axes).\n\n\nmpg |&gt; \n  ggplot(aes(x = cty, y = hwy)) +\n  geom_hline(yintercept = 20, color = \"grey60\") +\n  geom_vline(xintercept = 20, color = \"grey60\") +\n  annotate(geom = \"rect\", xmin = 20, xmax = 50, ymin = 20, ymax = 50, fill = \"lightpink\", alpha = 0.25) +\n  geom_point() +\n  labs(title = \"Fuel efficiency\", subtitle = \"Highway vs. city miles per gallon\", caption = \"Source: mpg data\", x = \"City miles per gallon\", y = \"Highway miles per gallon\") +\n  coord_cartesian(xlim = c(9, 35), ylim = c(10, 45))\n\n\n\n\n\n\n\n\n\nCreate boxplots of fuel efficiency by class but order the class levels by mean highway fuel efficiency. At y = 10, add the sample size for each box (e.g., N=5, N=47, etc.).\n\n\nmpg |&gt; \n  ggplot(aes(x = fct_reorder(class, hwy), y = hwy)) +\n  geom_boxplot() +\n  geom_text(stat = \"count\", aes(label = paste0(\"N=\", after_stat(count))), y = 10) +\n  ylim(10, 44)"
  },
  {
    "objectID": "code/39_tables_answers.html",
    "href": "code/39_tables_answers.html",
    "title": "Tables",
    "section": "",
    "text": "Using the mpg data, create a data frame called my_mpg that capitalizes the manufacturer.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nmy_mpg &lt;- mpg |&gt; \n  mutate(manufacturer = str_to_sentence(manufacturer))\n\n\nCalculate mean highway and city fuel efficiency for each manufacturer and return a table with the caption “Highway and city fuel efficiency” and column names “Manufacturer”, “Highway”, and “City”.\n\n\nlibrary(knitr)\nmy_mpg |&gt; \n  summarise(mean_hwy = mean(hwy), mean_cty = mean(cty), .by = c(manufacturer)) |&gt; \n  kable(digits = 1, \n        col.names = c(\"Manufacturer\", \"Highway\", \"City\"),\n        caption = \"Highway and city fuel efficiency\")\n\n\nHighway and city fuel efficiency\n\n\nManufacturer\nHighway\nCity\n\n\n\n\nAudi\n26.4\n17.6\n\n\nChevrolet\n21.9\n15.0\n\n\nDodge\n17.9\n13.1\n\n\nFord\n19.4\n14.0\n\n\nHonda\n32.6\n24.4\n\n\nHyundai\n26.9\n18.6\n\n\nJeep\n17.6\n13.5\n\n\nLand rover\n16.5\n11.5\n\n\nLincoln\n17.0\n11.3\n\n\nMercury\n18.0\n13.2\n\n\nNissan\n24.6\n18.1\n\n\nPontiac\n26.4\n17.0\n\n\nSubaru\n25.6\n19.3\n\n\nToyota\n24.9\n18.5\n\n\nVolkswagen\n29.2\n20.9\n\n\n\n\n\n\nRepeat the table from #2 but add a header that spans Highway and City that says “Fuel efficiency”. Reminder, you’ll need to load {kableExtra} to do this.\n\n\nlibrary(kableExtra)\nmy_mpg |&gt; \n  summarise(mean_hwy = mean(hwy), mean_cty = mean(cty), .by = c(manufacturer)) |&gt; \n  kable(digits = 1, \n        col.names = c(\"Manufacturer\", \"Highway\", \"City\"),\n        caption = \"Highway and city fuel efficiency\") |&gt; \n  add_header_above(c(\" \" = 1, \"Fuel efficiency\" = 2))\n\n\nHighway and city fuel efficiency\n\n\n\n\n\n\n\n\n\nFuel efficiency\n\n\n\nManufacturer\nHighway\nCity\n\n\n\n\nAudi\n26.4\n17.6\n\n\nChevrolet\n21.9\n15.0\n\n\nDodge\n17.9\n13.1\n\n\nFord\n19.4\n14.0\n\n\nHonda\n32.6\n24.4\n\n\nHyundai\n26.9\n18.6\n\n\nJeep\n17.6\n13.5\n\n\nLand rover\n16.5\n11.5\n\n\nLincoln\n17.0\n11.3\n\n\nMercury\n18.0\n13.2\n\n\nNissan\n24.6\n18.1\n\n\nPontiac\n26.4\n17.0\n\n\nSubaru\n25.6\n19.3\n\n\nToyota\n24.9\n18.5\n\n\nVolkswagen\n29.2\n20.9\n\n\n\n\n\n\n\n\nCalculate mean highway and city fuel efficiency for each manufacturer and year. Order the data frame by year, then remove the year column and add labels for each year that spans the rows for each year. Also, add a footnote that says “Source: mpg data set.”.\n\n\nmy_mpg |&gt; \n  summarise(mean_hwy = mean(hwy), mean_cty = mean(cty), .by = c(year, manufacturer)) |&gt; \n  arrange(year) |&gt; \n  select(-year) |&gt; \n  kable(digits = 1, \n        col.names = c(\"Manufacturer\", \"Highway\", \"City\"),\n        caption = \"Highway and city fuel efficiency\") |&gt; \n  pack_rows(\"1999\", 1, 15) |&gt; \n  pack_rows(\"2008\", 16, 30) |&gt; \n  footnote(general = \"Source: mpg data set.\")\n\n\nHighway and city fuel efficiency\n\n\nManufacturer\nHighway\nCity\n\n\n\n\n1999\n\n\nAudi\n26.1\n17.1\n\n\nChevrolet\n21.6\n15.1\n\n\nDodge\n18.4\n13.4\n\n\nFord\n18.6\n13.9\n\n\nHonda\n31.6\n24.8\n\n\nHyundai\n26.7\n18.3\n\n\nJeep\n18.5\n14.5\n\n\nLand rover\n15.0\n11.0\n\n\nLincoln\n16.5\n11.0\n\n\nMercury\n17.0\n13.5\n\n\nNissan\n23.5\n17.7\n\n\nPontiac\n26.3\n17.0\n\n\nSubaru\n25.5\n19.0\n\n\nToyota\n24.0\n18.1\n\n\nVolkswagen\n29.7\n21.2\n\n\n2008\n\n\nAudi\n26.8\n18.1\n\n\nChevrolet\n22.1\n14.9\n\n\nDodge\n17.6\n13.0\n\n\nFord\n20.5\n14.1\n\n\nHonda\n33.8\n24.0\n\n\nHyundai\n27.0\n18.9\n\n\nJeep\n17.3\n13.2\n\n\nLand rover\n18.0\n12.0\n\n\nLincoln\n18.0\n12.0\n\n\nMercury\n19.0\n13.0\n\n\nNissan\n25.6\n18.4\n\n\nPontiac\n26.5\n17.0\n\n\nSubaru\n25.6\n19.5\n\n\nToyota\n26.1\n19.1\n\n\nVolkswagen\n28.5\n20.5\n\n\n\nNote: \n\n\n\n\n Source: mpg data set.\n\n\n\n\n\n\n\n\n\n\n\nConduct a linear regression called my_model of the effects of displacement, cylinder, and year on highway fuel efficiency: lm(hwy ~ displ + cyl + year, my_mpg). Apply the summary() function to the model object, then return the coefficients table from the summary.\n\n\nmy_model &lt;- lm(hwy ~ displ + cyl + year, my_mpg)\nmy_model_summary &lt;- summary(my_model)$coefficients\nkable(my_model_summary)\n\n\n\n\n\nEstimate\nStd. Error\nt value\nPr(&gt;|t|)\n\n\n\n\n(Intercept)\n-259.1221270\n109.1594125\n-2.373795\n0.0184288\n\n\ndispl\n-2.0912178\n0.5146232\n-4.063590\n0.0000663\n\n\ncyl\n-1.3065333\n0.4111205\n-3.177982\n0.0016866\n\n\nyear\n0.1484984\n0.0545146\n2.724013\n0.0069446\n\n\n\n\n\n\nExtract the table after applying {papaja}’s apa_print() to my_model, then pass this to apa_table().\n\n\nlibrary(papaja)\napa_table(apa_print(my_model)$table)\n\n\n(#tab:unnamed-chunk-6)\n\n\nPredictor\n\\(b\\)\n95% CI\n\\(t\\)\n\\(\\mathit{df}\\)\n\\(p\\)\n\n\n\n\nIntercept\n-259.12\n[-474.20, -44.04]\n-2.37\n230\n.018\n\n\nDispl\n-2.09\n[-3.11, -1.08]\n-4.06\n230\n&lt; .001\n\n\nCyl\n-1.31\n[-2.12, -0.50]\n-3.18\n230\n.002\n\n\nYear\n0.15\n[0.04, 0.26]\n2.72\n230\n.007"
  },
  {
    "objectID": "code/codebook_mtcars.html",
    "href": "code/codebook_mtcars.html",
    "title": "Codebook for mtcars",
    "section": "",
    "text": "# &gt;\n# &gt;"
  },
  {
    "objectID": "code/codebook_mtcars.html#mpg",
    "href": "code/codebook_mtcars.html#mpg",
    "title": "Codebook for mtcars",
    "section": "mpg",
    "text": "mpg\n\n\n\n\n\n\n\nFeature\nResult\n\n\n\n\nVariable type\nnumeric\n\n\nNumber of missing obs.\n0 (0 %)\n\n\nNumber of unique values\n25\n\n\nMedian\n19.2\n\n\n1st and 3rd quartiles\n15.43; 22.8\n\n\nMin. and max.\n10.4; 33.9\n\n\n\n\n# &gt;"
  },
  {
    "objectID": "code/codebook_mtcars.html#cyl",
    "href": "code/codebook_mtcars.html#cyl",
    "title": "Codebook for mtcars",
    "section": "cyl",
    "text": "cyl\n\n\n\n\n\n\n\nFeature\nResult\n\n\n\n\nVariable type\nnumeric\n\n\nNumber of missing obs.\n0 (0 %)\n\n\nNumber of unique values\n3\n\n\nMedian\n6\n\n\n1st and 3rd quartiles\n4; 8\n\n\nMin. and max.\n4; 8\n\n\n\n\n# &gt;"
  },
  {
    "objectID": "code/codebook_mtcars.html#disp",
    "href": "code/codebook_mtcars.html#disp",
    "title": "Codebook for mtcars",
    "section": "disp",
    "text": "disp\n\n\n\n\n\n\n\nFeature\nResult\n\n\n\n\nVariable type\nnumeric\n\n\nNumber of missing obs.\n0 (0 %)\n\n\nNumber of unique values\n27\n\n\nMedian\n196.3\n\n\n1st and 3rd quartiles\n120.83; 326\n\n\nMin. and max.\n71.1; 472\n\n\n\n\n# &gt;"
  },
  {
    "objectID": "code/codebook_mtcars.html#hp",
    "href": "code/codebook_mtcars.html#hp",
    "title": "Codebook for mtcars",
    "section": "hp",
    "text": "hp\n\n\n\n\n\n\n\nFeature\nResult\n\n\n\n\nVariable type\nnumeric\n\n\nNumber of missing obs.\n0 (0 %)\n\n\nNumber of unique values\n22\n\n\nMedian\n123\n\n\n1st and 3rd quartiles\n96.5; 180\n\n\nMin. and max.\n52; 335\n\n\n\n\n# &gt;"
  },
  {
    "objectID": "code/codebook_mtcars.html#drat",
    "href": "code/codebook_mtcars.html#drat",
    "title": "Codebook for mtcars",
    "section": "drat",
    "text": "drat\n\n\n\n\n\n\n\nFeature\nResult\n\n\n\n\nVariable type\nnumeric\n\n\nNumber of missing obs.\n0 (0 %)\n\n\nNumber of unique values\n22\n\n\nMedian\n3.7\n\n\n1st and 3rd quartiles\n3.08; 3.92\n\n\nMin. and max.\n2.76; 4.93\n\n\n\n\n# &gt;"
  },
  {
    "objectID": "code/codebook_mtcars.html#wt",
    "href": "code/codebook_mtcars.html#wt",
    "title": "Codebook for mtcars",
    "section": "wt",
    "text": "wt\n\n\n\n\n\n\n\nFeature\nResult\n\n\n\n\nVariable type\nnumeric\n\n\nNumber of missing obs.\n0 (0 %)\n\n\nNumber of unique values\n29\n\n\nMedian\n3.33\n\n\n1st and 3rd quartiles\n2.58; 3.61\n\n\nMin. and max.\n1.51; 5.42\n\n\n\n\n# &gt;"
  },
  {
    "objectID": "code/codebook_mtcars.html#qsec",
    "href": "code/codebook_mtcars.html#qsec",
    "title": "Codebook for mtcars",
    "section": "qsec",
    "text": "qsec\n\n\n\n\n\n\n\nFeature\nResult\n\n\n\n\nVariable type\nnumeric\n\n\nNumber of missing obs.\n0 (0 %)\n\n\nNumber of unique values\n30\n\n\nMedian\n17.71\n\n\n1st and 3rd quartiles\n16.89; 18.9\n\n\nMin. and max.\n14.5; 22.9\n\n\n\n\n# &gt;"
  },
  {
    "objectID": "code/codebook_mtcars.html#vs",
    "href": "code/codebook_mtcars.html#vs",
    "title": "Codebook for mtcars",
    "section": "vs",
    "text": "vs\n\n\n\n\n\n\n\nFeature\nResult\n\n\n\n\nVariable type\nnumeric\n\n\nNumber of missing obs.\n0 (0 %)\n\n\nNumber of unique values\n2\n\n\nMedian\n0\n\n\n1st and 3rd quartiles\n0; 1\n\n\nMin. and max.\n0; 1\n\n\n\n\n# &gt;"
  },
  {
    "objectID": "code/codebook_mtcars.html#am",
    "href": "code/codebook_mtcars.html#am",
    "title": "Codebook for mtcars",
    "section": "am",
    "text": "am\n\n\n\n\n\n\n\nFeature\nResult\n\n\n\n\nVariable type\nnumeric\n\n\nNumber of missing obs.\n0 (0 %)\n\n\nNumber of unique values\n2\n\n\nMedian\n0\n\n\n1st and 3rd quartiles\n0; 1\n\n\nMin. and max.\n0; 1\n\n\n\n\n# &gt;"
  },
  {
    "objectID": "code/codebook_mtcars.html#gear",
    "href": "code/codebook_mtcars.html#gear",
    "title": "Codebook for mtcars",
    "section": "gear",
    "text": "gear\n\n\n\n\n\n\n\nFeature\nResult\n\n\n\n\nVariable type\nnumeric\n\n\nNumber of missing obs.\n0 (0 %)\n\n\nNumber of unique values\n3\n\n\nMedian\n4\n\n\n1st and 3rd quartiles\n3; 4\n\n\nMin. and max.\n3; 5\n\n\n\n\n# &gt;"
  },
  {
    "objectID": "code/codebook_mtcars.html#carb",
    "href": "code/codebook_mtcars.html#carb",
    "title": "Codebook for mtcars",
    "section": "carb",
    "text": "carb\n\n\n\n\n\n\n\nFeature\nResult\n\n\n\n\nVariable type\nnumeric\n\n\nNumber of missing obs.\n0 (0 %)\n\n\nNumber of unique values\n6\n\n\nMedian\n2\n\n\n1st and 3rd quartiles\n2; 4\n\n\nMin. and max.\n1; 8\n\n\n\n\n# &gt;\n\nReport generation information:\n\nCreated by: Jeffrey R. Stevens (username: jstevens).\nReport creation time: Sat Feb 04 2023 12:27:58\nReport was run from directory: /media/jstevens/data/jstevens/OneDrive/active_sync/projects/dpavir_2023/code\ndataReporter v1.0.2 [Pkg: 2021-11-11 from RSPM (R 4.2.0)]\nR version 4.2.2 Patched (2022-11-10 r83330).\nPlatform: x86_64-pc-linux-gnu (64-bit)(Ubuntu 22.04.1 LTS).\nFunction call: dataReporter::makeDataReport(data = mtcars, mode = c(\"summarize\",  \"visualize\", \"check\"), smartNum = FALSE, file = \"codebook_mtcars.Rmd\",      replace = TRUE, checks = list(character = \"showAllFactorLevels\",          factor = \"showAllFactorLevels\", labelled = \"showAllFactorLevels\",          haven_labelled = \"showAllFactorLevels\", numeric = NULL,          integer = NULL, logical = NULL, Date = NULL), listChecks = FALSE,      maxProbVals = Inf, codebook = TRUE, reportTitle = \"Codebook for mtcars\")"
  },
  {
    "objectID": "group_challenges.html",
    "href": "group_challenges.html",
    "title": "Group challenges",
    "section": "",
    "text": "Using the penguins data set from the {palmerpenguins} package, recreate this data frame.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\n\n\n\n`summarise()` has grouped output by 'species', 'island'. You can override using\nthe `.groups` argument.\n\n\n# A tibble: 4 × 4\n# Groups:   species, island [4]\n  species   island    female  male\n  &lt;fct&gt;     &lt;fct&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie    Biscoe     3369. 4050 \n2 Adelie    Dream      3344. 4046.\n3 Adelie    Torgersen  3396. 4035.\n4 Chinstrap Dream      3527. 3939."
  },
  {
    "objectID": "group_challenges.html#group-data-wrangling-challenge",
    "href": "group_challenges.html#group-data-wrangling-challenge",
    "title": "Group challenges",
    "section": "",
    "text": "Using the penguins data set from the {palmerpenguins} package, recreate this data frame.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\n\n\n\n`summarise()` has grouped output by 'species', 'island'. You can override using\nthe `.groups` argument.\n\n\n# A tibble: 4 × 4\n# Groups:   species, island [4]\n  species   island    female  male\n  &lt;fct&gt;     &lt;fct&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie    Biscoe     3369. 4050 \n2 Adelie    Dream      3344. 4046.\n3 Adelie    Torgersen  3396. 4035.\n4 Chinstrap Dream      3527. 3939."
  },
  {
    "objectID": "group_challenges.html#group-plotting-challenge",
    "href": "group_challenges.html#group-plotting-challenge",
    "title": "Group challenges",
    "section": "Group plotting challenge",
    "text": "Group plotting challenge\nplot1 &lt;- penguins |&gt; filter(species == “Adelie”) |&gt; drop_na(sex) |&gt; mutate(Sex = fct_recode(sex, “Female” = “female”, “Male” = “male”)) |&gt; ggplot(aes(x = bill_length_mm, y = bill_depth_mm, color = Sex)) + geom_point(size = 2.8, alpha = 0.55) + geom_smooth(method = “lm”, se = F, color = “gray50”) + scale_x_continuous(limits = c(31, 46), n.breaks = 15) + scale_y_continuous(limits = c(16, 21), n.breaks = 8, expand = c(0, 1.5)) + annotate(geom = “segment”, x = 33.5, xend = 34.35, y = 21.5, yend = 21.2, color = “black”) + annotate(geom = “text”, label = “Penguin 42”, x = 34, y = 21.8) + labs(y = “Bill depth (mm)”, x = “Bill length (mm)”, title = “Bill size by sex”) + theme_classic() + theme(legend.position = c(0.85, 0.2), legend.background = element_rect(fill = “transparent”, color = “transparent”))\nplot2 &lt;- penguins |&gt; filter(species == “Adelie”) |&gt; drop_na(sex, island) |&gt; mutate(Sex = fct_recode(sex, “Female” = “female”, “Male” = “male”), Island = island) |&gt; ggplot(aes(x = Sex, y = flipper_length_mm, group = Island, shape = Island, color = Island)) + stat_summary(position = position_dodge(width = 0.12)) + stat_summary(fun = mean, geom = “line”, position = position_dodge(width = 0.12)) + labs(y = “Flipper length (mm)”, title = “Mean and standard error of flipper length by sex and island”) + theme_classic() + theme(legend.position = c(0.85, 0.25))\nplot3 &lt;- penguins |&gt; filter(species == “Adelie”) |&gt; drop_na(sex, island, year) |&gt; mutate(Sex = fct_recode(sex, “Female” = “female”, “Male” = “male”), Year = as.factor(year)) |&gt; ggplot(aes(x = Year, y = flipper_length_mm, color = Year)) + geom_jitter(width = .2, alpha = 0.6) + stat_summary(fun.data = mean_cl_normal, color = “black”) + scale_y_continuous(limits = c(170, 210), n.breaks = 5) + geom_text(stat = “count”, aes(label = paste0(“N =”, after_stat(count))), y = 170, color = “black”) + facet_wrap(vars(island)) + labs(y = “Flipper length (mm)”, title = “Mean and 95% confidence interval of flipper length by island and year”) + scale_color_manual(values = c(“#0072B2”, “#009E73”, “#E69F00”)) + theme_classic() + theme(legend.position = “none”)\n(plot1 + plot2) / plot3 + plot_annotation(title = “Adelie penguin bill and flipper size”, caption = “Source {palmerpenguins} data set”, tag_levels = “A”)"
  }
]