{
  "hash": "e79c19cec6b4841fdddd33c01d32b876",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Piping\"\nauthor: \"Jeffrey R. Stevens\"\ndate: \"2025-02-17\"\noutput: html_document\nexecute:\n  freeze: auto\n---\n\n\n\nFor these exercises, we'll use the dog breed traits data set. \n\n1. Create a pipeline to do all of the following:\n\n* assign pipeline to `traits`\n* import data from <https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits.csv>\n* subset only the columns _Breed_ through _Coat Length_\n* remove the _Drooling Level_ column\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\ntraits <- read_csv(\"https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits.csv\") |> \n  select(Breed:`Coat Length`) |> \n  select(!`Drooling Level`)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 195 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Breed, Coat Type, Coat Length\ndbl (14): Affectionate With Family, Good With Young Children, Good With Othe...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n2. Rename the column names to `\"breed\", \"affectionate\", \"children\", \"other_dogs\", \"shedding\", \"grooming\", \"coat_type\", \"coat_length\"` using this vector (either at the end of the last pipeline or in a separate line).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(traits) <- c(\"breed\", \"affectionate\", \"children\", \"other_dogs\", \"shedding\", \"grooming\", \"coat_type\", \"coat_length\")\n```\n:::\n\n\n\n3. In a new pipe, use `traits` to do the following. \n\n* assign to `traits2`\n* rescale all of the ratings columns by subtracting 1 from all of the values\n* create a new column called _coat_ that combines the _coat_type_ and _coat_length_ columns by pasting the values of those two columns separated by `-`\n* create a new column called _shed_ that dichotomizes _shedding_ such that values of 3 and above are \"A lot\" and values below 3 are \"Not much\" and places the new column after _shedding_\n* calculate the mean rating for the _children_ and _other_dogs_ columns in a column called `mean_rating` and place it after _other_dogs_\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits2 <- traits |> \n  mutate(across(affectionate:grooming, ~ .x - 1)) |> \n  mutate(coat = paste(coat_type, coat_length, sep = \"-\")) |> \n  mutate(shed = ifelse(shedding > 2, \"A lot\", \"Not much\"), .after = \"shedding\") |> \n  rowwise() %>%\n  mutate(mean_rating = mean(c(children, other_dogs)), .after = \"other_dogs\")\n```\n:::\n\n\n\n4. In a new pipe, use `traits2` to do the following. \n\n* assign to `coat_grooming`\n* subset only the _grooming_ and _coat_type_ columns\n* run a linear model (`lm`) using the formula `grooming ~ coat_type` (remember to use a placeholder for the data)\n* apply the `summary()` function\n* print the results to console\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(coat_grooming <- traits2 |> \n  select(grooming, coat_type) |> \n  lm(grooming ~ coat_type, data = _) |> \n   summary())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = grooming ~ coat_type, data = select(traits2, grooming, \n    coat_type))\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.5000 -0.5909  0.3134  0.4091  2.4091 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(>|t|)    \n(Intercept)         2.5000     0.4025   6.212 3.35e-09 ***\ncoat_typeCurly     -0.5000     0.5045  -0.991 0.322938    \ncoat_typeDouble    -0.9091     0.4145  -2.193 0.029520 *  \ncoat_typeHairless  -2.1667     0.6148  -3.524 0.000534 ***\ncoat_typeRough     -0.8333     0.6148  -1.356 0.176889    \ncoat_typeSilky     -0.1667     0.4837  -0.345 0.730805    \ncoat_typeSmooth    -1.8134     0.4143  -4.377 2.00e-05 ***\ncoat_typeWavy      -1.0000     0.5196  -1.925 0.055796 .  \ncoat_typeWiry      -1.2000     0.4284  -2.801 0.005636 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8049 on 186 degrees of freedom\nMultiple R-squared:  0.3054,\tAdjusted R-squared:  0.2755 \nF-statistic: 10.22 on 8 and 186 DF,  p-value: 8.381e-12\n```\n\n\n:::\n:::\n",
    "supporting": [
      "12_piping_answers_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}