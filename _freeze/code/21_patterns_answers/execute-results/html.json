{
  "hash": "d43ada2a93fc680ea043d9f14bda0080",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Matching patterns\"\nauthor: \"Jeffrey R. Stevens\"\ndate: \"2023-03-10\"\noutput: html_document\nexecute:\n  freeze: auto\n---\n\n\n\nFor these exercises, we'll use the dog breed traits data set. \n\n1. Load tidyverse, import [`dog_breed_traits_clean.csv`](https://jeffreyrstevens.quarto.pub/dpavir/data/dog_breed_traits_clean.csv) to `traits`, and extract the _breed_ column into an object called `breeds` that randomly shuffles the breeds using 12 as a seed for randomization.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\ntraits <- read_csv(here::here(\"data/dog_breed_traits_clean.csv\"), show_col_types = FALSE)\nset.seed(12)\nbreeds <- sample(traits$breed)\n```\n:::\n\n\n\n\n2. View the breeds ending with the letter \"s\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view_all(breeds, \"s$\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `str_view_all()` was deprecated in stringr 1.5.0.\nℹ Please use `str_view()` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] │ English Foxhound<s>\n [2] │ Retrievers (Nova Scotia Duck Tolling)\n [3] │ Coton de Tulear\n [4] │ Norwegian Elkhound<s>\n [5] │ Spaniels (Irish Water)\n [6] │ Italian Greyhound<s>\n [7] │ Chihuahua<s>\n [8] │ Lakeland Terrier<s>\n [9] │ English Buttdragger\n[10] │ American Staffordshire Terrier<s>\n[11] │ Bearded Collie<s>\n[12] │ Beauceron<s>\n[13] │ Maltese\n[14] │ Silky Terrier<s>\n[15] │ Belgian Tervuren\n[16] │ Otterhound<s>\n[17] │ Yorkshire Terrier<s>\n[18] │ Entlebucher Mountain Dog<s>\n[19] │ Scottish Terrier<s>\n[20] │ Russell Terrier<s>\n... and 177 more\n```\n\n\n:::\n:::\n\n\n\n\n3. Create a logical vector showing whether breeds have at least two words in their names.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(breeds, \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE\n [13] FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE\n [25] FALSE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [37]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE\n [49]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE\n [61]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE\n [73]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE\n [85]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n [97]  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[109] FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE\n[121]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE\n[133]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE\n[145]  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE\n[157]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[169]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[181]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n[193]  TRUE  TRUE  TRUE  TRUE  TRUE\n```\n\n\n:::\n:::\n\n\n\n\n4. Extract the hounds (but don't release them). That is, return a vector of all breeds that include the string \"hound\" or \"Hound\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_subset(breeds, \"hound|Hound\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"English Foxhounds\"           \"Norwegian Elkhounds\"        \n [3] \"Italian Greyhounds\"          \"Otterhounds\"                \n [5] \"Black and Tan Coonhounds\"    \"Afghan Hounds\"              \n [7] \"Ibizan Hounds\"               \"Plott Hounds\"               \n [9] \"Redbone Coonhounds\"          \"Irish Wolfhounds\"           \n[11] \"American English Coonhounds\" \"Treeing Walker Coonhounds\"  \n[13] \"Bluetick Coonhounds\"         \"Scottish Deerhounds\"        \n[15] \"American Foxhounds\"          \"Greyhounds\"                 \n[17] \"Pharaoh Hounds\"              \"Basset Hounds\"              \n[19] \"Bloodhounds\"                \n```\n\n\n:::\n:::\n\n\n\n\n5. Extract the breeds that include the following pattern \"\\<wildcard\\>ep\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_subset(breeds, \".ep\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Icelandic Sheepdogs\"          \"Shetland Sheepdogs\"          \n [3] \"Anatolian Shepherd Dogs\"      \"Australian Shepherds\"        \n [5] \"Pyrenean Shepherds\"           \"German Shepherd Dogs\"        \n [7] \"Bergamasco Sheepdogs\"         \"Old English Sheepdogs\"       \n [9] \"Polish Lowland Sheepdogs\"     \"Miniature American Shepherds\"\n[11] \"Belgian Sheepdogs\"           \n```\n\n\n:::\n:::\n\n\n\n\n6. OK, maybe English Buttdragger isn't the proper AKC name for this breed. Replace English Buttdragger with English Chaser.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace(breeds, \"English Buttdragger\", \"English Chaser\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"English Foxhounds\"                    \n  [2] \"Retrievers (Nova Scotia Duck Tolling)\"\n  [3] \"Coton de Tulear\"                      \n  [4] \"Norwegian Elkhounds\"                  \n  [5] \"Spaniels (Irish Water)\"               \n  [6] \"Italian Greyhounds\"                   \n  [7] \"Chihuahuas\"                           \n  [8] \"Lakeland Terriers\"                    \n  [9] \"English Chaser\"                       \n [10] \"American Staffordshire Terriers\"      \n [11] \"Bearded Collies\"                      \n [12] \"Beaucerons\"                           \n [13] \"Maltese\"                              \n [14] \"Silky Terriers\"                       \n [15] \"Belgian Tervuren\"                     \n [16] \"Otterhounds\"                          \n [17] \"Yorkshire Terriers\"                   \n [18] \"Entlebucher Mountain Dogs\"            \n [19] \"Scottish Terriers\"                    \n [20] \"Russell Terriers\"                     \n [21] \"Black and Tan Coonhounds\"             \n [22] \"Afghan Hounds\"                        \n [23] \"Ibizan Hounds\"                        \n [24] \"Azawakhs\"                             \n [25] \"Borzois\"                              \n [26] \"Spaniels (Cocker)\"                    \n [27] \"Finnish Lapphunds\"                    \n [28] \"Chinooks\"                             \n [29] \"Cesky Terriers\"                       \n [30] \"Plott Hounds\"                         \n [31] \"Dogues de Bordeaux\"                   \n [32] \"Icelandic Sheepdogs\"                  \n [33] \"Border Collies\"                       \n [34] \"Chow Chows\"                           \n [35] \"Sealyham Terriers\"                    \n [36] \"Miniature Schnauzers\"                 \n [37] \"Petits Bassets Griffons Vendeens\"     \n [38] \"Retrievers (Golden)\"                  \n [39] \"Bedlington Terriers\"                  \n [40] \"Welsh Terriers\"                       \n [41] \"Sloughis\"                             \n [42] \"Akitas\"                               \n [43] \"Norwegian Buhunds\"                    \n [44] \"Shetland Sheepdogs\"                   \n [45] \"Miniature Pinschers\"                  \n [46] \"Lowchen\"                              \n [47] \"Fox Terriers (Wire)\"                  \n [48] \"Kerry Blue Terriers\"                  \n [49] \"Redbone Coonhounds\"                   \n [50] \"Anatolian Shepherd Dogs\"              \n [51] \"Soft Coated Wheaten Terriers\"         \n [52] \"Dandie Dinmont Terriers\"              \n [53] \"Lagotti Romagnoli\"                    \n [54] \"Weimaraners\"                          \n [55] \"Brittanys\"                            \n [56] \"Collies\"                              \n [57] \"Great Danes\"                          \n [58] \"Berger Picards\"                       \n [59] \"Spaniels (Clumber)\"                   \n [60] \"Boxers\"                               \n [61] \"Irish Wolfhounds\"                     \n [62] \"Rhodesian Ridgebacks\"                 \n [63] \"Norwegian Lundehunds\"                 \n [64] \"Briards\"                              \n [65] \"Setters (Irish)\"                      \n [66] \"Bernese Mountain Dogs\"                \n [67] \"Giant Schnauzers\"                     \n [68] \"Pointers\"                             \n [69] \"Xoloitzcuintli\"                       \n [70] \"Bulldogs\"                             \n [71] \"Basenjis\"                             \n [72] \"Harriers\"                             \n [73] \"Siberian Huskies\"                     \n [74] \"Whippets\"                             \n [75] \"American English Coonhounds\"          \n [76] \"Doberman Pinschers\"                   \n [77] \"Cardigan Welsh Corgis\"                \n [78] \"Tibetan Mastiffs\"                     \n [79] \"Rat Terriers\"                         \n [80] \"Dachshunds\"                           \n [81] \"Retrievers (Chesapeake Bay)\"          \n [82] \"Chinese Crested\"                      \n [83] \"Poodles\"                              \n [84] \"Retrievers (Labrador)\"                \n [85] \"Fox Terriers (Smooth)\"                \n [86] \"Wirehaired Vizslas\"                   \n [87] \"Bichons Frises\"                       \n [88] \"West Highland White Terriers\"         \n [89] \"Miniature Bull Terriers\"              \n [90] \"Spaniels (Field)\"                     \n [91] \"Australian Shepherds\"                 \n [92] \"Bullmastiffs\"                         \n [93] \"Pyrenean Shepherds\"                   \n [94] \"Cirnechi dell Etna\"                   \n [95] \"Chinese Shar-Pei\"                     \n [96] \"Skye Terriers\"                        \n [97] \"Norwich Terriers\"                     \n [98] \"Treeing Walker Coonhounds\"            \n [99] \"Barbets\"                              \n[100] \"Rottweilers\"                          \n[101] \"Cairn Terriers\"                       \n[102] \"Spanish Water Dogs\"                   \n[103] \"Portuguese Podengo Pequenos\"          \n[104] \"Bluetick Coonhounds\"                  \n[105] \"Shih Tzu\"                             \n[106] \"Toy Fox Terriers\"                     \n[107] \"Scottish Deerhounds\"                  \n[108] \"Spaniels (Welsh Springer)\"            \n[109] \"Beagles\"                              \n[110] \"German Shepherd Dogs\"                 \n[111] \"Glen of Imaal Terriers\"               \n[112] \"American Foxhounds\"                   \n[113] \"Bergamasco Sheepdogs\"                 \n[114] \"Pugs\"                                 \n[115] \"Affenpinschers\"                       \n[116] \"Pumik\"                                \n[117] \"Setters (Gordon)\"                     \n[118] \"French Bulldogs\"                      \n[119] \"Leonbergers\"                          \n[120] \"Pointers (German Wirehaired)\"         \n[121] \"Alaskan Malamutes\"                    \n[122] \"Pembroke Welsh Corgis\"                \n[123] \"Nederlandse Kooikerhondjes\"           \n[124] \"Retrievers (Curly-Coated)\"            \n[125] \"Australian Terriers\"                  \n[126] \"Cavalier King Charles Spaniels\"       \n[127] \"Retrievers (Flat-Coated)\"             \n[128] \"Mastiffs\"                             \n[129] \"Shiba Inu\"                            \n[130] \"Dalmatians\"                           \n[131] \"Spaniels (American Water)\"            \n[132] \"Greyhounds\"                           \n[133] \"Black Russian Terriers\"               \n[134] \"Salukis\"                              \n[135] \"Spaniels (Sussex)\"                    \n[136] \"Pharaoh Hounds\"                       \n[137] \"Setters (English)\"                    \n[138] \"Spaniels (English Cocker)\"            \n[139] \"Kuvaszok\"                             \n[140] \"Cane Corso\"                           \n[141] \"Pomeranians\"                          \n[142] \"Great Pyrenees\"                       \n[143] \"Schipperkes\"                          \n[144] \"Papillons\"                            \n[145] \"Finnish Spitz\"                        \n[146] \"Tibetan Terriers\"                     \n[147] \"Newfoundlands\"                        \n[148] \"Neapolitan Mastiffs\"                  \n[149] \"Samoyeds\"                             \n[150] \"Keeshonden\"                           \n[151] \"Setters (Irish Red and White)\"        \n[152] \"Greater Swiss Mountain Dogs\"          \n[153] \"Canaan Dogs\"                          \n[154] \"St. Bernards\"                         \n[155] \"Pulik\"                                \n[156] \"Spinoni Italiani\"                     \n[157] \"Old English Sheepdogs\"                \n[158] \"Tibetan Spaniels\"                     \n[159] \"Japanese Chin\"                        \n[160] \"Basset Hounds\"                        \n[161] \"Havanese\"                             \n[162] \"Wirehaired Pointing Griffons\"         \n[163] \"American Eskimo Dogs\"                 \n[164] \"English Toy Spaniels\"                 \n[165] \"Polish Lowland Sheepdogs\"             \n[166] \"Portuguese Water Dogs\"                \n[167] \"Irish Terriers\"                       \n[168] \"Lhasa Apsos\"                          \n[169] \"German Pinschers\"                     \n[170] \"Border Terriers\"                      \n[171] \"Komondorok\"                           \n[172] \"Parson Russell Terriers\"              \n[173] \"Bouviers des Flandres\"                \n[174] \"Staffordshire Bull Terriers\"          \n[175] \"Norfolk Terriers\"                     \n[176] \"Belgian Malinois\"                     \n[177] \"Swedish Vallhunds\"                    \n[178] \"Grand Basset Griffon Vendeens\"        \n[179] \"Brussels Griffons\"                    \n[180] \"Pointers (German Shorthaired)\"        \n[181] \"Miniature American Shepherds\"         \n[182] \"Bloodhounds\"                          \n[183] \"Australian Cattle Dogs\"               \n[184] \"Boerboels\"                            \n[185] \"Dogo Argentinos\"                      \n[186] \"Pekingese\"                            \n[187] \"Bull Terriers\"                        \n[188] \"Vizslas\"                              \n[189] \"Standard Schnauzers\"                  \n[190] \"Spaniels (English Springer)\"          \n[191] \"Airedale Terriers\"                    \n[192] \"Spaniels (Boykin)\"                    \n[193] \"Belgian Sheepdogs\"                    \n[194] \"Manchester Terriers\"                  \n[195] \"American Rearsniffer\"                 \n[196] \"Boston Terriers\"                      \n[197] \"American Hairless Terriers\"           \n```\n\n\n:::\n:::\n\n\n\n\n7. Replace all instances of \"English\" with \"British\" and then return the breeds that include \"English\" or \"British\" in them (to check our work).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace(breeds, \"English\", \"British\") |> \n  str_subset(\"English|British\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"British Foxhounds\"           \"British Buttdragger\"        \n[3] \"American British Coonhounds\" \"Setters (British)\"          \n[5] \"Spaniels (British Cocker)\"   \"Old British Sheepdogs\"      \n[7] \"British Toy Spaniels\"        \"Spaniels (British Springer)\"\n```\n\n\n:::\n:::\n\n\n\n\n8. Extract the Spaniels and then separate the breed names into different strings for each word and create a matrix out of it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbreeds |> \n  str_subset(\"spaniel|Spaniel\") |> \n  str_split(\"\\\\s\", simplify = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      [,1]       [,2]        [,3]        [,4]      \n [1,] \"Spaniels\" \"(Irish\"    \"Water)\"    \"\"        \n [2,] \"Spaniels\" \"(Cocker)\"  \"\"          \"\"        \n [3,] \"Spaniels\" \"(Clumber)\" \"\"          \"\"        \n [4,] \"Spaniels\" \"(Field)\"   \"\"          \"\"        \n [5,] \"Spaniels\" \"(Welsh\"    \"Springer)\" \"\"        \n [6,] \"Cavalier\" \"King\"      \"Charles\"   \"Spaniels\"\n [7,] \"Spaniels\" \"(American\" \"Water)\"    \"\"        \n [8,] \"Spaniels\" \"(Sussex)\"  \"\"          \"\"        \n [9,] \"Spaniels\" \"(English\"  \"Cocker)\"   \"\"        \n[10,] \"Tibetan\"  \"Spaniels\"  \"\"          \"\"        \n[11,] \"English\"  \"Toy\"       \"Spaniels\"  \"\"        \n[12,] \"Spaniels\" \"(English\"  \"Springer)\" \"\"        \n[13,] \"Spaniels\" \"(Boykin)\"  \"\"          \"\"        \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}