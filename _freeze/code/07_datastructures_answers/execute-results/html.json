{
  "hash": "bc253b9402ceaa682a985406c4f71955",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data structures\"\nauthor: \"Jeffrey R. Stevens\"\ndate: \"2023-02-06\"\noutput: html_document\nexecute:\n  freeze: auto\n---\n\n\n\n## In-class coding\n\nMake a sequence from 0 to 100 in steps of 10.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(0, 100, 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]   0  10  20  30  40  50  60  70  80  90 100\n```\n\n\n:::\n:::\n\n\n\nCreate a repetition of “yes” and “no” with 10 instance of each, alternating between the two. Then make one with 10 \"yes\" and then 10 \"no\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(c(\"yes\", \"no\"), times = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"yes\" \"no\"  \"yes\" \"no\"  \"yes\" \"no\"  \"yes\" \"no\"  \"yes\" \"no\"  \"yes\" \"no\" \n[13] \"yes\" \"no\"  \"yes\" \"no\"  \"yes\" \"no\"  \"yes\" \"no\" \n```\n\n\n:::\n\n```{.r .cell-code}\nrep(c(\"yes\", \"no\"), each = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"yes\" \"yes\" \"yes\" \"yes\" \"yes\" \"yes\" \"yes\" \"yes\" \"yes\" \"yes\" \"no\"  \"no\" \n[13] \"no\"  \"no\"  \"no\"  \"no\"  \"no\"  \"no\"  \"no\"  \"no\" \n```\n\n\n:::\n:::\n\n\n\n\nAdd the argument `n = 10` to `head(mtcars)`. What does this do?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mtcars, n =  10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360        14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D         24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230          22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280          19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n```\n\n\n:::\n:::\n\n\n\n\n## Extra coding practice\n\n### Vectors\n\nCreate a vector called  `dog_names` with the values _Bella_, _Daisy_, and _Max_.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndog_names <- c(\"Bella\", \"Daisy\", \"Max\")\n```\n:::\n\n\n\nCreate a vector called `sex` with the values _Female_, _Male_, and _Male_.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsex <- c(\"Female\", \"Female\", \"Male\")\n```\n:::\n\n\n\nUse the index operator to print to console only _Daisy_ and _Max_ from `dog_names`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndog_names[2:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Daisy\" \"Max\"  \n```\n\n\n:::\n:::\n\n\n\nReplace the _Daisy_ entry with _Luna_ and print `dog_names` to console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndog_names[2] <- \"Luna\"\ndog_names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Bella\" \"Luna\"  \"Max\"  \n```\n\n\n:::\n:::\n\n\n\n\n### Lists\n\nCopy/paste and run this code: `(mylist <- list(a = 1:4, b = c(4, 3, 8, 5), c = LETTERS[10:15], d = c(\"yes\", \"yes\")))`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(mylist <- list(a = 1:4, b = c(4, 3, 8, 5), c = LETTERS[10:15], d = c(\"yes\", \"yes\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$a\n[1] 1 2 3 4\n\n$b\n[1] 4 3 8 5\n\n$c\n[1] \"J\" \"K\" \"L\" \"M\" \"N\" \"O\"\n\n$d\n[1] \"yes\" \"yes\"\n```\n\n\n:::\n:::\n\n\n\nCheck the data types for each list element individually.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(mylist$a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(mylist$b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(mylist$c)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(mylist$d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\nCheck the data types for each list element with one command.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mylist)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 4\n $ a: int [1:4] 1 2 3 4\n $ b: num [1:4] 4 3 8 5\n $ c: chr [1:6] \"J\" \"K\" \"L\" \"M\" ...\n $ d: chr [1:2] \"yes\" \"yes\"\n```\n\n\n:::\n:::\n\n\n\nCombine list elements `a` and `b` into a single vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(mylist$a, mylist$b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 4 3 8 5\n```\n\n\n:::\n:::\n\n\n\n### Data frames\n\nCreate a data frame called `mydf` with three columns: `x`, `y`, and `z` and five rows. For `x` assign any five numbers, for `y` assign any five character strings, and for `z` assign any five logical values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(mydf <- data.frame(x = sample(1:10, 5, replace = TRUE), y = sample(letters, 5), z = sample(c(TRUE, FALSE), 5, replace = TRUE)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   x y     z\n1  3 f FALSE\n2  7 k  TRUE\n3  5 j FALSE\n4  5 w FALSE\n5 10 n FALSE\n```\n\n\n:::\n:::\n\n\n\nCreate a data frame called `dogs` that combines the `dog_names` and `sex` vectors and print to console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(dogs <- data.frame(dog_names, sex))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dog_names    sex\n1     Bella Female\n2      Luna Female\n3       Max   Male\n```\n\n\n:::\n:::\n\n\n\nPrint to console just Luna's row.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndogs[2, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dog_names    sex\n2      Luna Female\n```\n\n\n:::\n:::\n\n\n\nPrint to console the number of rows in `dogs`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(dogs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}