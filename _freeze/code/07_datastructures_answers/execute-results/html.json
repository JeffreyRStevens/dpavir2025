{
  "hash": "845d8dda69422db7796b9d2447e0e4f7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data structures\"\nauthor: \"Jeffrey R. Stevens\"\ndate: \"2025-02-05\"\noutput: html_document\nexecute:\n  freeze: auto\n---\n\n\n\n\n### Vectors\n\nCreate a vector called  `dog_names` with the values _Bella_, _Daisy_, and _Max_.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndog_names <- c(\"Bella\", \"Daisy\", \"Max\")\n```\n:::\n\n\n\nCreate a vector called `sex` with the values _Female_, _Male_, and _Male_.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsex <- c(\"Female\", \"Female\", \"Male\")\n```\n:::\n\n\n\nUse the index operator to print to console only _Daisy_ and _Max_ from `dog_names`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndog_names[2:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Daisy\" \"Max\"  \n```\n\n\n:::\n:::\n\n\n\nReplace the _Daisy_ entry with _Luna_ and print `dog_names` to console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndog_names[2] <- \"Luna\"\ndog_names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Bella\" \"Luna\"  \"Max\"  \n```\n\n\n:::\n:::\n\n\n\nTest whether the name _Sophie_ is contained in the vector `dog_names`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"Sophie\" %in% dog_names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n### Lists\n\nCopy/paste and run this code: `(mylist <- list(a = 1:4, b = c(4, 3, 8, 5), c = LETTERS[10:15], d = c(\"yes\", \"yes\")))`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(mylist <- list(a = 1:4, b = c(4, 3, 8, 5), c = LETTERS[10:15], d = c(\"yes\", \"yes\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$a\n[1] 1 2 3 4\n\n$b\n[1] 4 3 8 5\n\n$c\n[1] \"J\" \"K\" \"L\" \"M\" \"N\" \"O\"\n\n$d\n[1] \"yes\" \"yes\"\n```\n\n\n:::\n:::\n\n\n\nCheck the data types for each list element individually.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(mylist$a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(mylist$b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(mylist$c)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(mylist$d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\nCheck the data types for each list element with one command.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mylist)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 4\n $ a: int [1:4] 1 2 3 4\n $ b: num [1:4] 4 3 8 5\n $ c: chr [1:6] \"J\" \"K\" \"L\" \"M\" ...\n $ d: chr [1:2] \"yes\" \"yes\"\n```\n\n\n:::\n:::\n\n\n\nCombine list elements `a` and `b` into a single vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(mylist$a, mylist$b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 4 3 8 5\n```\n\n\n:::\n:::\n\n\n\n### Data frames\n\nCreate a data frame called `mydf` with three columns: `x`, `y`, and `z` and five rows. For `x` assign any five numbers, for `y` assign any five character strings, and for `z` assign any five logical values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(mydf <- data.frame(x = sample(1:10, 5, replace = TRUE), y = sample(letters, 5), z = sample(c(TRUE, FALSE), 5, replace = TRUE)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x y     z\n1 4 g FALSE\n2 5 v  TRUE\n3 3 m FALSE\n4 8 q  TRUE\n5 4 j  TRUE\n```\n\n\n:::\n:::\n\n\n\nCreate a data frame called `dogs` that combines the `dog_names` and `sex` vectors and print to console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(dogs <- data.frame(dog_names, sex))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dog_names    sex\n1     Bella Female\n2      Luna Female\n3       Max   Male\n```\n\n\n:::\n:::\n\n\n\nPrint to console just Luna's row.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndogs[2, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dog_names    sex\n2      Luna Female\n```\n\n\n:::\n:::\n\n\n\nPrint to console the number of rows in `dogs`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(dogs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n",
    "supporting": [
      "07_datastructures_answers_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}