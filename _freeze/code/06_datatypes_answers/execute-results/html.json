{
  "hash": "b6d4840ce6b9c430e5b29189aa304bca",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data types\"\nauthor: \"Jeffrey R. Stevens\"\ndate: \"2025-02-03\"\noutput: html_document\nexecute:\n  freeze: auto\n---\n\n\n\n## Creating objects\n\n### First, let's create some objects: \n```\naa <- 3\nbb <- 3L\ncc <- \"3\"\ndd <- \"TRUE\"\nee <- TRUE\nff <- \"NA\"\ngg <- NA\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\naa <- 3\nbb <- 3L\ncc <- \"3\"\ndd <- \"TRUE\"\nee <- TRUE\nff <- \"NA\"\ngg <- NA\n```\n:::\n\n\n\n## Checking data types\n\n### Guess what data type each object is then check it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(aa)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(bb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(cc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(dd)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(ee)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(ff)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(gg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n\n### How do we test if `aa` is an integer?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.integer(aa)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n### What will `is.logical(dd)` return?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.logical(dd)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\n### How do we test if `ff` and `gg` are `NA`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.na(ff)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nis.na(gg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n## Checking if objects are the same\n\n### Are `aa` and `bb` the same? How do we test this?\n\n\n::: {.cell}\n\n```{.r .cell-code}\naa\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nbb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\naa == bb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n### What about `aa` and `cc`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\naa\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\ncc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"3\"\n```\n\n\n:::\n\n```{.r .cell-code}\naa == cc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n### A safer comparison tool is `identical()`. Test if `aa` and `bb` are identical. Then try `aa` and `cc`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentical(aa, bb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nidentical(aa, cc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n### Now see if `aa` is identical to `3` and if `bb` is identical to `3L`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentical(aa, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nidentical(bb, 3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n",
    "supporting": [
      "06_datatypes_answers_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}