{
  "hash": "fed63970cec18d7175bfe71bfcd5c828",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mutating columns\"\nauthor: \"Jeffrey R. Stevens\"\ndate: \"2023-02-15\"\noutput: html_document\nexecute:\n  freeze: auto\n---\n\n\n\nFor these exercises, we'll use the dog breed traits data set, so import that from <https://jeffreyrstevens.quarto.pub/dpavir/data/dog_breed_traits.csv> (if you don't already have it) and assign it to `traits`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\ntraits <- read_csv(here::here(\"data/dog_breed_traits.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 195 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Breed, Coat Type, Coat Length\ndbl (14): Affectionate With Family, Good With Young Children, Good With Othe...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\n1. View `traits` to see what it looks like.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(traits)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 17\n  Breed     Affectionate With Fa…¹ Good With Young Chil…² `Good With Other Dogs`\n  <chr>                      <dbl>                  <dbl>                  <dbl>\n1 Retrieve…                      5                      5                      5\n2 French B…                      5                      5                      4\n3 German S…                      5                      5                      3\n4 Retrieve…                      5                      5                      5\n5 Bulldogs                       4                      3                      3\n6 Poodles                        5                      5                      3\n# ℹ abbreviated names: ¹​`Affectionate With Family`, ²​`Good With Young Children`\n# ℹ 13 more variables: `Shedding Level` <dbl>, `Coat Grooming Frequency` <dbl>,\n#   `Drooling Level` <dbl>, `Coat Type` <chr>, `Coat Length` <chr>,\n#   `Openness To Strangers` <dbl>, `Playfulness Level` <dbl>,\n#   `Watchdog/Protective Nature` <dbl>, `Adaptability Level` <dbl>,\n#   `Trainability Level` <dbl>, `Energy Level` <dbl>, `Barking Level` <dbl>,\n#   `Mental Stimulation Needs` <dbl>\n```\n\n\n:::\n:::\n\n\n\n2. Reassign `traits` with only the columns _Breed_ through _Coat Length_.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits <- select(traits, Breed:`Coat Length`)\n```\n:::\n\n\n\n3. Reassign `traits` removing the _Drooling Level_ column. That's gross.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits <- select(traits, -`Drooling Level`)\n```\n:::\n\n\n\n4. What terrible column names! Reassign `traits` and change the column names to `\"breed\", \"affectionate\", \"children\", \"other_dogs\", \"shedding\", \"grooming\", \"coat_type\", \"coat_length\"`. Note, use the `colnames()` function rather than `select()` or `rename()` since you already have the full vector of names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(traits) <- c(\"breed\", \"affectionate\", \"children\", \"other_dogs\", \"shedding\", \"grooming\", \"coat_type\", \"coat_length\")\n```\n:::\n\n\n\n5. The ratings are supposed to run from 0 to 4 rather than 1 to 5. Change the _affectionate_ column by subtracting 1 from the original numbers to rescale the values. Don't reassign `traits`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(traits, affectionate = affectionate - 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 195 × 8\n   breed            affectionate children other_dogs shedding grooming coat_type\n   <chr>                   <dbl>    <dbl>      <dbl>    <dbl>    <dbl> <chr>    \n 1 Retrievers (Lab…            4        5          5        4        2 Double   \n 2 French Bulldogs             4        5          4        3        1 Smooth   \n 3 German Shepherd…            4        5          3        4        2 Double   \n 4 Retrievers (Gol…            4        5          5        4        2 Double   \n 5 Bulldogs                    3        3          3        3        3 Smooth   \n 6 Poodles                     4        5          3        1        4 Curly    \n 7 Beagles                     2        5          5        3        2 Smooth   \n 8 Rottweilers                 4        3          3        3        1 Smooth   \n 9 Pointers (Germa…            4        5          4        3        2 Smooth   \n10 Dachshunds                  4        3          4        2        2 Smooth   \n# ℹ 185 more rows\n# ℹ 1 more variable: coat_length <chr>\n```\n\n\n:::\n:::\n\n\n\n6. Actually, all of the ratings need to be rescaled. Subtract 1 from all of the ratings columns by using `across()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(traits, across(affectionate:grooming, ~ .x - 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 195 × 8\n   breed            affectionate children other_dogs shedding grooming coat_type\n   <chr>                   <dbl>    <dbl>      <dbl>    <dbl>    <dbl> <chr>    \n 1 Retrievers (Lab…            4        4          4        3        1 Double   \n 2 French Bulldogs             4        4          3        2        0 Smooth   \n 3 German Shepherd…            4        4          2        3        1 Double   \n 4 Retrievers (Gol…            4        4          4        3        1 Double   \n 5 Bulldogs                    3        2          2        2        2 Smooth   \n 6 Poodles                     4        4          2        0        3 Curly    \n 7 Beagles                     2        4          4        2        1 Smooth   \n 8 Rottweilers                 4        2          2        2        0 Smooth   \n 9 Pointers (Germa…            4        4          3        2        1 Smooth   \n10 Dachshunds                  4        2          3        1        1 Smooth   \n# ℹ 185 more rows\n# ℹ 1 more variable: coat_length <chr>\n```\n\n\n:::\n:::\n\n\n\n7. Create a new column called _coat_ that combines the _coat_type_ and _coat_length_ columns by pasting the values of those two columns separated by `-`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(traits, coat = paste(coat_type, coat_length, sep = \"-\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 195 × 9\n   breed            affectionate children other_dogs shedding grooming coat_type\n   <chr>                   <dbl>    <dbl>      <dbl>    <dbl>    <dbl> <chr>    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 French Bulldogs             5        5          4        3        1 Smooth   \n 3 German Shepherd…            5        5          3        4        2 Double   \n 4 Retrievers (Gol…            5        5          5        4        2 Double   \n 5 Bulldogs                    4        3          3        3        3 Smooth   \n 6 Poodles                     5        5          3        1        4 Curly    \n 7 Beagles                     3        5          5        3        2 Smooth   \n 8 Rottweilers                 5        3          3        3        1 Smooth   \n 9 Pointers (Germa…            5        5          4        3        2 Smooth   \n10 Dachshunds                  5        3          4        2        2 Smooth   \n# ℹ 185 more rows\n# ℹ 2 more variables: coat_length <chr>, coat <chr>\n```\n\n\n:::\n:::\n\n\n\n8. Create a new column called _shed_ that dichotomizes shedding such that values of 3 and above are \"A lot\" and values below 3 are \"Not much\". Do you need to account for missing data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(traits, shed = ifelse(shedding > 2, \"A lot\", \"Not much\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 195 × 9\n   breed            affectionate children other_dogs shedding grooming coat_type\n   <chr>                   <dbl>    <dbl>      <dbl>    <dbl>    <dbl> <chr>    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 French Bulldogs             5        5          4        3        1 Smooth   \n 3 German Shepherd…            5        5          3        4        2 Double   \n 4 Retrievers (Gol…            5        5          5        4        2 Double   \n 5 Bulldogs                    4        3          3        3        3 Smooth   \n 6 Poodles                     5        5          3        1        4 Curly    \n 7 Beagles                     3        5          5        3        2 Smooth   \n 8 Rottweilers                 5        3          3        3        1 Smooth   \n 9 Pointers (Germa…            5        5          4        3        2 Smooth   \n10 Dachshunds                  5        3          4        2        2 Smooth   \n# ℹ 185 more rows\n# ℹ 2 more variables: coat_length <chr>, shed <chr>\n```\n\n\n:::\n:::\n\n\n\n9. Use `rowwise()` to calculate the mean rating for the _children_ and _other_dogs_ columns in a column called `mean_rating`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrowwise(traits) %>%\n  mutate(mean_rating = mean(children, other_dogs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 195 × 9\n# Rowwise: \n   breed            affectionate children other_dogs shedding grooming coat_type\n   <chr>                   <dbl>    <dbl>      <dbl>    <dbl>    <dbl> <chr>    \n 1 Retrievers (Lab…            5        5          5        4        2 Double   \n 2 French Bulldogs             5        5          4        3        1 Smooth   \n 3 German Shepherd…            5        5          3        4        2 Double   \n 4 Retrievers (Gol…            5        5          5        4        2 Double   \n 5 Bulldogs                    4        3          3        3        3 Smooth   \n 6 Poodles                     5        5          3        1        4 Curly    \n 7 Beagles                     3        5          5        3        2 Smooth   \n 8 Rottweilers                 5        3          3        3        1 Smooth   \n 9 Pointers (Germa…            5        5          4        3        2 Smooth   \n10 Dachshunds                  5        3          4        2        2 Smooth   \n# ℹ 185 more rows\n# ℹ 2 more variables: coat_length <chr>, mean_rating <dbl>\n```\n\n\n:::\n:::\n\n\n\n10. Create a column called _coat_type2_ that categorizes the _coat_type_ values in the following way and puts it after _coat_type_:\n* \"very petable\" = \"Smooth\", \"Silky\", \"Wavy\"\n* \"petable\" = \"Double\", \"Curly\"\n* \"not petable\" = \"Wiry\", \"Hairless\", \"Rough\", \"Corded\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(traits, coat_type2 = case_when(\n  coat_type %in% c(\"Smooth\", \"Silky\", \"Wavy\") ~ \"very petable\",\n  coat_type %in% c(\"Wiry\", \"Hairless\", \"Rough\", \"Corded\") ~ \"not petable\",\n  coat_type %in% c(\"Double\", \"Curly\") ~ \"petable\"),\n  .after = coat_type\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 195 × 9\n   breed affectionate children other_dogs shedding grooming coat_type coat_type2\n   <chr>        <dbl>    <dbl>      <dbl>    <dbl>    <dbl> <chr>     <chr>     \n 1 Retr…            5        5          5        4        2 Double    petable   \n 2 Fren…            5        5          4        3        1 Smooth    very peta…\n 3 Germ…            5        5          3        4        2 Double    petable   \n 4 Retr…            5        5          5        4        2 Double    petable   \n 5 Bull…            4        3          3        3        3 Smooth    very peta…\n 6 Pood…            5        5          3        1        4 Curly     petable   \n 7 Beag…            3        5          5        3        2 Smooth    very peta…\n 8 Rott…            5        3          3        3        1 Smooth    very peta…\n 9 Poin…            5        5          4        3        2 Smooth    very peta…\n10 Dach…            5        3          4        2        2 Smooth    very peta…\n# ℹ 185 more rows\n# ℹ 1 more variable: coat_length <chr>\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}