{
  "hash": "c3e024c13f53e16a405705661d91b904",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Plotting amounts: barcharts and dot plots\"\nauthor: \"Jeffrey R. Stevens\"\ndate: \"2023-04-14\"\noutput: html_document\nexecute:\n  freeze: auto\n---\n\n\n\n\n1. Using the `mtcars` data, create a barchart of the counts for each level of cylinder.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nmtcars |> \n  mutate(cyl = as.factor(cyl),\n         gear = as.factor(gear)) |> \n  ggplot(aes(x = cyl)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](32_barcharts_answers_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n2. Repeat the barchart but stack the counts by gear.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n  mutate(cyl = as.factor(cyl),\n         gear = as.factor(gear)) |> \n  ggplot(aes(x = cyl, fill = gear)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](32_barcharts_answers_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n3. Recreate this plot:\n\n![](../images/stacked_proportional_barchart.png)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  mutate(cyl = as.factor(cyl),\n         cyl = str_c(cyl, \" cylinders\"),\n         gear = as.factor(gear),\n         gear = str_c(gear, \" gears\")) |>\n  ggplot(aes(x = cyl, fill = gear)) +\n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](32_barcharts_answers_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n4. Repeat barchart #2 but set the position to \"dodge\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n  mutate(cyl = as.factor(cyl),\n         gear = as.factor(gear)) |> \n  ggplot(aes(x = cyl, fill = gear)) +\n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](32_barcharts_answers_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n5. Whoa, what happened to 8 cylinders? Unfortunately, since there were only two levels of gear for 8 cylinders, it just split the bars in two. To hold the numbers of bars the same across all levels, you can set position to `position_dodge(preserve = \"single\")`. Try that.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n  mutate(cyl = as.factor(cyl),\n         gear = as.factor(gear)) |> \n  ggplot(aes(x = cyl, fill = gear)) +\n  geom_bar(position = position_dodge(preserve = \"single\"))\n```\n\n::: {.cell-output-display}\n![](32_barcharts_answers_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n6. Well, that's better---the two bars are the same width as all of the other bars. But the 4 gears should show up as 0. To fix, we need to count the data first, find implicitly missing data, and plot using `geom_col()`. So first, find counts for the combinations of cylinders and gears. Then use `complete()` to find the implicitly missing combinations. Then replace the NAs with 0s. Then use `geom_col()` to plot these values with the position dodged.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n  mutate(cyl = as.factor(cyl),\n         gear = as.factor(gear)) |> \n  count(cyl, gear) |> \n  complete(cyl, gear) |> \n  mutate(n = as.numeric(str_replace_na(n, \"0\"))) |> \n  ggplot(aes(x = cyl, y = n, fill = gear)) +\n  geom_col(position = position_dodge())\n```\n\n::: {.cell-output-display}\n![](32_barcharts_answers_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n7. Make a dotplot of the counts for each level of carb and plot carb on the y-axis and the count on the x-axis. Reminder that first you'll need to count the observations in each level of carb before starting the plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n  count(carb) |> \n  ggplot(aes(x = carb, y = n)) +\n  geom_point() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](32_barcharts_answers_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n8. Repeat dotplot #8 but order carb based on the counts from highest to lowest count.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n  count(carb) |> \n  ggplot(aes(x = fct_reorder(as.factor(carb), n), y = n)) +\n  geom_point() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](32_barcharts_answers_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "32_barcharts_answers_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}