{
  "hash": "c62920fd2ea4c8599534088db57bc587",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Factors\"\nauthor: \"Jeffrey R. Stevens\"\ndate: \"2023-03-20\"\noutput: html_document\nexecute:\n  freeze: auto\n---\n\n\n\nFor these exercises, we'll use the dog breed traits data set. \n\n1. Load tidyverse, import [`dog_breed_traits_clean.csv`](https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits_clean.csv) to `traits`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\ntraits <- read_csv(here::here(\"data/dog_breed_traits_clean.csv\"), show_col_types = FALSE)\nset.seed(12)\nbreeds <- sample(traits$breed)\n```\n:::\n\n\n\n\n2. Convert both _coat_type_ and _coat_length_ into factors using `across()` and save as `traits2`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits2 <- traits |> \n  mutate(across(contains(\"coat\"), factor))\n```\n:::\n\n\n\n\n3. Check the levels for both columns, one using a pipe and one without using a pipe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(traits2$coat_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Corded\"   \"Curly\"    \"Double\"   \"Hairless\" \"Rough\"    \"Silky\"    \"Smooth\"  \n[8] \"Wavy\"     \"Wiry\"    \n```\n\n\n:::\n\n```{.r .cell-code}\ntraits2 |> \n  pull(coat_length) |> \n  levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Long\"   \"Medium\" \"Short\" \n```\n\n\n:::\n:::\n\n\n\n4. Reorder the levels for _coat_length_ to be Short, Medium, Long (reassigned to `traits2`) and then check the levels.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits2 <- traits2 |> \n  mutate(coat_length = fct_relevel(coat_length, \"Short\", \"Medium\", \"Long\"))\nlevels(traits2$coat_length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Short\"  \"Medium\" \"Long\"  \n```\n\n\n:::\n:::\n\n\n\n5. Reorder the levels for _coat_type_ to be in the order of the most to least frequent coat type and then check the levels.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits2 <- traits2 |> \n  mutate(coat_type = fct_infreq(coat_type))\nlevels(traits2$coat_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Smooth\"   \"Double\"   \"Wiry\"     \"Silky\"    \"Curly\"    \"Wavy\"     \"Corded\"  \n[8] \"Rough\"    \"Hairless\"\n```\n\n\n:::\n:::\n\n\n\n6. Relabel _coat_length_ to be Stubby, Mid, and Lush rather than Short, Medium, and Long.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits2 <- traits2 |> \n  mutate(coat_length = fct_recode(coat_length, \"Stubby\" = \"Short\",\n                                  \"Mid\" = \"Medium\",\n                                  \"Lush\" = \"Long\"))\nlevels(traits2$coat_length)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Stubby\" \"Mid\"    \"Lush\"  \n```\n\n\n:::\n:::\n\n\n\n7. The new AKC standard subsumes Rough coats with Wiry coats and Silky with Wavy. Please update the _coat_type_ variable accordingly.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits2 <- traits2 |> \n  mutate(coat_type = fct_collapse(coat_type, Wiry = c(\"Rough\", \"Wiry\"),\n                                  Wavy = c(\"Silky\", \"Wavy\")))\nlevels(traits2$coat_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Smooth\"   \"Double\"   \"Wiry\"     \"Wavy\"     \"Curly\"    \"Corded\"   \"Hairless\"\n```\n\n\n:::\n:::\n",
    "supporting": [
      "22_factors_answers_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}