{
  "hash": "348f825280a5b86302aa720e39ceae59",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Iteration\"\nauthor: \"Jeffrey R. Stevens\"\ndate: \"2023-03-29\"\noutput: html_document\nexecute:\n  freeze: auto\n---\n\n\n\n\n1. Write a for loop that calculates the mean bill length for each species in the `penguins` data set (don't use `group_by()`) and saves them as `species_means`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\npenguin_species <- unique(penguins$species)\nspecies_means <- NA\nfor (i in penguin_species) {\n  species_means[i] <- penguins |> \n    filter(species == i) |> \n    summarise(mean_bill_length = mean(bill_length_mm, na.rm = TRUE)) |> \n    pull()\n}\nspecies_means <- species_means[!is.na(species_means)]\n```\n:::\n\n\n\n2. Turn #1 into a function called `species_mean` that lets the user determine which variable to calculate the mean over.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_mean <- function(var) {\n  penguin_species <- unique(penguins$species)\n  species_means <- NA\n  for (i in penguin_species) {\n    species_means[i] <- penguins |> \n      filter(species == i) |> \n      summarise(mean({{var}}, na.rm = TRUE)) |> \n      pull()\n  }\n  species_means <- species_means[!is.na(species_means)]\n  return(species_means)\n}\nspecies_mean(bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Adelie    Gentoo Chinstrap \n 38.79139  47.50488  48.83382 \n```\n\n\n:::\n:::\n\n\n\n3. Create a list `penguins_island` that separates the penguins data by island.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins_island <- penguins |> \n  split(penguins$island)\n```\n:::\n\n\n\n4. Apply `map()` to find the number of observations for each year.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap(penguins_island, nrow)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Biscoe\n[1] 168\n\n$Dream\n[1] 124\n\n$Torgersen\n[1] 52\n```\n\n\n:::\n:::\n\n\n\n\n5. Apply `map()` to calculate the mean body weight for each island.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap(penguins_island, ~ mean(.x$body_mass_g, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Biscoe\n[1] 4716.018\n\n$Dream\n[1] 3712.903\n\n$Torgersen\n[1] 3706.373\n```\n\n\n:::\n:::\n\n\n\n6. Rework #5 to return a numeric vector with values rounded to 1 decimal place.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_dbl(penguins_island, ~ round(mean(.x$body_mass_g, na.rm = TRUE), 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Biscoe     Dream Torgersen \n   4716.0    3712.9    3706.4 \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}