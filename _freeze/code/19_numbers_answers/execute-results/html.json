{
  "hash": "6f02f64a7008b5ac1618d1d596015430",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Numbers\"\nauthor: \"Jeffrey R. Stevens\"\ndate: \"2025-03-05\"\noutput: html_document\nexecute:\n  freeze: auto\n---\n\n\n\nFor these exercises, we'll use the dog breed traits and dog breed popularity rankings data sets. \n\n1. Load tidyverse and import [`dog_breed_traits_clean.csv`](https://jeffreyrstevens.github.io/dpavir2025/data/dog_breed_traits_clean.csv) to `traits`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\ntraits <- read_csv(here::here(\"data/dog_breed_traits_clean.csv\"), show_col_types = FALSE)\n```\n:::\n\n\n\n\n2. Create a column of per-row means over all rating columns called _mean_ratings_ and assign to `traits2`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits2 <- traits |> \n  rowwise() |> \n  mutate(mean_ratings = mean(c(affectionate, children, other_dogs, shedding, grooming), na.rm = TRUE))\n```\n:::\n\n\n\n3. Convert _mean_ratings_ to a proportion in a column called _pmean_ratings_ and append to `traits2`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits2 <- traits2 |> \n  mutate(pmean_ratings = mean_ratings / 5)\n```\n:::\n\n\n\n4. Apply a natural log transformation to the _pmeans_ratings_ vector.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(traits2$pmean_ratings)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] -0.17435339 -0.32850407 -0.27443685 -0.17435339 -0.44628710 -0.32850407\n  [7] -0.32850407 -0.51082562 -0.27443685 -0.44628710 -0.32850407 -0.44628710\n [13] -0.27443685 -0.44628710 -0.51082562 -0.17435339 -0.27443685 -0.32850407\n [19] -0.22314355 -0.22314355 -0.32850407 -0.08338161 -0.44628710 -0.22314355\n [25] -0.65392647 -0.38566248 -0.17435339 -0.38566248 -0.22314355 -0.17435339\n [31] -0.17435339 -0.38566248 -0.38566248 -0.82098055 -0.27443685 -0.32850407\n [37] -0.57981850 -0.44628710 -0.32850407 -0.32850407 -0.22314355 -0.32850407\n [43] -0.44628710 -0.27443685 -0.17435339 -0.51082562 -0.17435339 -0.65392647\n [49] -0.22314355 -0.44628710 -0.38566248 -0.32850407 -0.32850407 -0.65392647\n [55] -0.57981850 -0.27443685 -0.51082562 -0.32850407 -0.32850407 -0.51082562\n [61] -0.57981850 -0.65392647 -0.32850407 -0.65392647 -0.51082562 -0.44628710\n [67] -0.32850407 -0.22314355 -0.38566248 -0.44628710 -0.44628710 -0.32850407\n [73] -0.57981850 -0.38566248 -0.17435339 -0.32850407 -0.44628710 -0.51082562\n [79] -0.65392647 -0.17435339 -0.38566248 -0.57981850 -0.32850407 -0.51082562\n [85] -0.73396918 -0.73396918 -0.27443685 -0.44628710 -0.44628710 -0.27443685\n [91] -0.44628710 -0.38566248 -0.44628710 -0.44628710 -0.38566248 -0.17435339\n [97] -0.44628710 -0.17435339 -0.38566248 -0.57981850 -0.27443685 -0.22314355\n[103] -0.57981850 -0.32850407 -0.57981850 -0.57981850 -0.44628710 -0.44628710\n[109] -0.32850407 -0.38566248 -0.32850407 -0.32850407 -0.44628710 -0.44628710\n[115] -0.38566248 -0.32850407 -0.57981850 -0.32850407 -0.27443685 -0.57981850\n[121] -0.44628710 -0.57981850 -0.44628710 -0.44628710 -0.17435339 -0.44628710\n[127] -0.27443685 -0.27443685 -0.51082562 -0.32850407 -0.65392647 -0.44628710\n[133] -0.51082562 -0.57981850 -0.51082562 -0.51082562 -0.44628710 -0.17435339\n[139] -0.51082562 -0.38566248 -0.65392647 -0.57981850 -0.38566248 -0.57981850\n[145] -0.32850407 -0.22314355 -0.27443685 -0.38566248 -0.38566248 -0.57981850\n[151] -0.65392647 -0.38566248 -0.27443685 -0.27443685 -0.38566248 -0.57981850\n[157] -0.22314355 -0.65392647 -0.44628710 -0.27443685 -0.38566248 -0.44628710\n[163] -0.51082562 -0.32850407 -0.32850407 -0.38566248 -0.44628710 -0.44628710\n[169] -0.44628710 -0.27443685 -0.44628710 -0.38566248 -0.82098055 -0.51082562\n[175] -0.38566248 -0.51082562 -0.44628710 -0.51082562 -0.65392647 -0.32850407\n[181] -0.51082562 -0.44628710 -0.38566248 -0.51082562 -0.57981850 -0.22314355\n[187] -0.27443685 -0.38566248 -0.57981850 -0.27443685 -0.44628710 -0.38566248\n[193] -0.65392647 -0.27443685 -0.57981850 -0.22314355 -0.27443685\n```\n\n\n:::\n:::\n\n\n\n5. Round _pmean_ratings_ to two decimal places.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(traits2$pmean_ratings, digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 0.84 0.72 0.76 0.84 0.64 0.72 0.72 0.60 0.76 0.64 0.72 0.64 0.76 0.64 0.60\n [16] 0.84 0.76 0.72 0.80 0.80 0.72 0.92 0.64 0.80 0.52 0.68 0.84 0.68 0.80 0.84\n [31] 0.84 0.68 0.68 0.44 0.76 0.72 0.56 0.64 0.72 0.72 0.80 0.72 0.64 0.76 0.84\n [46] 0.60 0.84 0.52 0.80 0.64 0.68 0.72 0.72 0.52 0.56 0.76 0.60 0.72 0.72 0.60\n [61] 0.56 0.52 0.72 0.52 0.60 0.64 0.72 0.80 0.68 0.64 0.64 0.72 0.56 0.68 0.84\n [76] 0.72 0.64 0.60 0.52 0.84 0.68 0.56 0.72 0.60 0.48 0.48 0.76 0.64 0.64 0.76\n [91] 0.64 0.68 0.64 0.64 0.68 0.84 0.64 0.84 0.68 0.56 0.76 0.80 0.56 0.72 0.56\n[106] 0.56 0.64 0.64 0.72 0.68 0.72 0.72 0.64 0.64 0.68 0.72 0.56 0.72 0.76 0.56\n[121] 0.64 0.56 0.64 0.64 0.84 0.64 0.76 0.76 0.60 0.72 0.52 0.64 0.60 0.56 0.60\n[136] 0.60 0.64 0.84 0.60 0.68 0.52 0.56 0.68 0.56 0.72 0.80 0.76 0.68 0.68 0.56\n[151] 0.52 0.68 0.76 0.76 0.68 0.56 0.80 0.52 0.64 0.76 0.68 0.64 0.60 0.72 0.72\n[166] 0.68 0.64 0.64 0.64 0.76 0.64 0.68 0.44 0.60 0.68 0.60 0.64 0.60 0.52 0.72\n[181] 0.60 0.64 0.68 0.60 0.56 0.80 0.76 0.68 0.56 0.76 0.64 0.68 0.52 0.76 0.56\n[196] 0.80 0.76\n```\n\n\n:::\n:::\n\n\n\n6. Convert _pmean_ratings_ to scientific notation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformat(traits2$pmean_ratings, scientific = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"8.4e-01\" \"7.2e-01\" \"7.6e-01\" \"8.4e-01\" \"6.4e-01\" \"7.2e-01\" \"7.2e-01\"\n  [8] \"6.0e-01\" \"7.6e-01\" \"6.4e-01\" \"7.2e-01\" \"6.4e-01\" \"7.6e-01\" \"6.4e-01\"\n [15] \"6.0e-01\" \"8.4e-01\" \"7.6e-01\" \"7.2e-01\" \"8.0e-01\" \"8.0e-01\" \"7.2e-01\"\n [22] \"9.2e-01\" \"6.4e-01\" \"8.0e-01\" \"5.2e-01\" \"6.8e-01\" \"8.4e-01\" \"6.8e-01\"\n [29] \"8.0e-01\" \"8.4e-01\" \"8.4e-01\" \"6.8e-01\" \"6.8e-01\" \"4.4e-01\" \"7.6e-01\"\n [36] \"7.2e-01\" \"5.6e-01\" \"6.4e-01\" \"7.2e-01\" \"7.2e-01\" \"8.0e-01\" \"7.2e-01\"\n [43] \"6.4e-01\" \"7.6e-01\" \"8.4e-01\" \"6.0e-01\" \"8.4e-01\" \"5.2e-01\" \"8.0e-01\"\n [50] \"6.4e-01\" \"6.8e-01\" \"7.2e-01\" \"7.2e-01\" \"5.2e-01\" \"5.6e-01\" \"7.6e-01\"\n [57] \"6.0e-01\" \"7.2e-01\" \"7.2e-01\" \"6.0e-01\" \"5.6e-01\" \"5.2e-01\" \"7.2e-01\"\n [64] \"5.2e-01\" \"6.0e-01\" \"6.4e-01\" \"7.2e-01\" \"8.0e-01\" \"6.8e-01\" \"6.4e-01\"\n [71] \"6.4e-01\" \"7.2e-01\" \"5.6e-01\" \"6.8e-01\" \"8.4e-01\" \"7.2e-01\" \"6.4e-01\"\n [78] \"6.0e-01\" \"5.2e-01\" \"8.4e-01\" \"6.8e-01\" \"5.6e-01\" \"7.2e-01\" \"6.0e-01\"\n [85] \"4.8e-01\" \"4.8e-01\" \"7.6e-01\" \"6.4e-01\" \"6.4e-01\" \"7.6e-01\" \"6.4e-01\"\n [92] \"6.8e-01\" \"6.4e-01\" \"6.4e-01\" \"6.8e-01\" \"8.4e-01\" \"6.4e-01\" \"8.4e-01\"\n [99] \"6.8e-01\" \"5.6e-01\" \"7.6e-01\" \"8.0e-01\" \"5.6e-01\" \"7.2e-01\" \"5.6e-01\"\n[106] \"5.6e-01\" \"6.4e-01\" \"6.4e-01\" \"7.2e-01\" \"6.8e-01\" \"7.2e-01\" \"7.2e-01\"\n[113] \"6.4e-01\" \"6.4e-01\" \"6.8e-01\" \"7.2e-01\" \"5.6e-01\" \"7.2e-01\" \"7.6e-01\"\n[120] \"5.6e-01\" \"6.4e-01\" \"5.6e-01\" \"6.4e-01\" \"6.4e-01\" \"8.4e-01\" \"6.4e-01\"\n[127] \"7.6e-01\" \"7.6e-01\" \"6.0e-01\" \"7.2e-01\" \"5.2e-01\" \"6.4e-01\" \"6.0e-01\"\n[134] \"5.6e-01\" \"6.0e-01\" \"6.0e-01\" \"6.4e-01\" \"8.4e-01\" \"6.0e-01\" \"6.8e-01\"\n[141] \"5.2e-01\" \"5.6e-01\" \"6.8e-01\" \"5.6e-01\" \"7.2e-01\" \"8.0e-01\" \"7.6e-01\"\n[148] \"6.8e-01\" \"6.8e-01\" \"5.6e-01\" \"5.2e-01\" \"6.8e-01\" \"7.6e-01\" \"7.6e-01\"\n[155] \"6.8e-01\" \"5.6e-01\" \"8.0e-01\" \"5.2e-01\" \"6.4e-01\" \"7.6e-01\" \"6.8e-01\"\n[162] \"6.4e-01\" \"6.0e-01\" \"7.2e-01\" \"7.2e-01\" \"6.8e-01\" \"6.4e-01\" \"6.4e-01\"\n[169] \"6.4e-01\" \"7.6e-01\" \"6.4e-01\" \"6.8e-01\" \"4.4e-01\" \"6.0e-01\" \"6.8e-01\"\n[176] \"6.0e-01\" \"6.4e-01\" \"6.0e-01\" \"5.2e-01\" \"7.2e-01\" \"6.0e-01\" \"6.4e-01\"\n[183] \"6.8e-01\" \"6.0e-01\" \"5.6e-01\" \"8.0e-01\" \"7.6e-01\" \"6.8e-01\" \"5.6e-01\"\n[190] \"7.6e-01\" \"6.4e-01\" \"6.8e-01\" \"5.2e-01\" \"7.6e-01\" \"5.6e-01\" \"8.0e-01\"\n[197] \"7.6e-01\"\n```\n\n\n:::\n:::\n\n\n\n7. Sum up the total grooming ratings for each coat type.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits |> \n  count(coat_type, wt = grooming)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   coat_type     n\n   <chr>     <dbl>\n 1 Corded       14\n 2 Curly        21\n 3 Double      171\n 4 Hairless      4\n 5 Rough         8\n 6 Silky        30\n 7 Smooth      113\n 8 Wavy         15\n 9 Wiry         69\n10 <NA>          2\n```\n\n\n:::\n:::\n\n\n\n\n8. Add inline R code to the following sentence in R Markdown to say how many rows have `NA` for _grooming_:\n\nWe are missing grooming data for [insert inline R code] breeds.\n",
    "supporting": [
      "19_numbers_answers_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}