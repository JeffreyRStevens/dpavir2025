{
  "hash": "3e22dbf6f91ee96ae195fa872768fe05",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Separating and uniting data\"\nauthor: \"Jeffrey R. Stevens\"\ndate: \"2023-02-27\"\noutput: html_document\nexecute:\n  freeze: auto\n---\n\n\n\nFor these exercises, we'll use a new clean version of the dog breed traits data set. \n\n1. Load tidyverse, import data from <https://jeffreyrstevens.quarto.pub/dpavir/data/dog_breed_traits_clean.csv>, and assign it to `traits`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\ntraits <- read_csv(\"https://jeffreyrstevens.quarto.pub/dpavir/data/dog_breed_traits_clean.csv\", show_col_types = FALSE)\n```\n:::\n\n\n\n2. Create `traits2` which adds a _coat_ column that combines _coat_type_ and _coat_length_ into single column delimited by \"-\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits2 <- traits |> \n  unite(\"coat\", contains(\"coat_\"), sep = \"-\")\n```\n:::\n\n\n\n3. Split the _coat_ column into _type_ and _length_ and keep the original _coat_ column.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits2 |> \n  separate(coat, into = c(\"type\", \"length\"), remove = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 197 × 9\n   breed   affectionate children other_dogs shedding grooming coat  type  length\n   <chr>          <dbl>    <dbl>      <dbl>    <dbl>    <dbl> <chr> <chr> <chr> \n 1 Retrie…            5        5          5        4        2 Doub… Doub… Short \n 2 French…            5        5          4        3        1 Smoo… Smoo… Short \n 3 German…            5        5          3        4        2 Doub… Doub… Medium\n 4 Retrie…            5        5          5        4        2 Doub… Doub… Medium\n 5 Bulldo…            4        3          3        3        3 Smoo… Smoo… Short \n 6 Poodles            5        5          3        1        4 Curl… Curly Long  \n 7 Beagles            3        5          5        3        2 Smoo… Smoo… Short \n 8 Rottwe…            5        3          3        3        1 Smoo… Smoo… Short \n 9 Pointe…            5        5          4        3        2 Smoo… Smoo… Short \n10 Dachsh…            5        3          4        2        2 Smoo… Smoo… Short \n# ℹ 187 more rows\n```\n\n\n:::\n:::\n\n\n\n4. Create `traits3` from `traits` that (1) removes the coat columns, (2) turns the ratings columns into long format, and (3) removes the _children_ row for _Bulldogs_.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits3 <- traits |> \n  select(-contains(\"coat_\")) |> \n  pivot_longer(affectionate:grooming, names_to = \"scale\", values_to = \"rating\") |> \n  filter(breed != \"Bulldogs\" | scale != \"children\")\n```\n:::\n\n\n\n5. Create `traits4` from `traits3` that ensures a complete data set with all five ratings for all breeds (and fills in missing combinations with `NA`) and check for the missing Bulldog children row.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits4 <- traits3 |> \n  complete(breed, scale)\n```\n:::\n\n\n\n6. How could we copy the rating from the previous row into the Bulldog children row to replace the `NA`? (Note this is not a good idea in this case!)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits4 |> \n  fill(rating) |> \n  filter(breed == \"Bulldogs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  breed    scale        rating\n  <chr>    <chr>         <dbl>\n1 Bulldogs affectionate      4\n2 Bulldogs children          4\n3 Bulldogs grooming          3\n4 Bulldogs other_dogs        3\n5 Bulldogs shedding          3\n```\n\n\n:::\n:::\n\n\n\n7. From `traits`, generate all combinations of coat type and length **observed in the data**, excluding `NA`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits |> \n  expand(nesting(coat_type, coat_length)) |> \n  drop_na()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 2\n   coat_type coat_length\n   <chr>     <chr>      \n 1 Corded    Long       \n 2 Corded    Medium     \n 3 Curly     Long       \n 4 Curly     Medium     \n 5 Double    Long       \n 6 Double    Medium     \n 7 Double    Short      \n 8 Hairless  Short      \n 9 Rough     Long       \n10 Rough     Medium     \n11 Silky     Long       \n12 Silky     Medium     \n13 Smooth    Medium     \n14 Smooth    Short      \n15 Wavy      Long       \n16 Wavy      Medium     \n17 Wiry      Medium     \n18 Wiry      Short      \n```\n\n\n:::\n:::\n\n\n\n8. From `traits`, generate **all possible** combinations of coat type and length, excluding `NA`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits |> \n  expand(coat_type, coat_length) |> \n  drop_na()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 27 × 2\n   coat_type coat_length\n   <chr>     <chr>      \n 1 Corded    Long       \n 2 Corded    Medium     \n 3 Corded    Short      \n 4 Curly     Long       \n 5 Curly     Medium     \n 6 Curly     Short      \n 7 Double    Long       \n 8 Double    Medium     \n 9 Double    Short      \n10 Hairless  Long       \n# ℹ 17 more rows\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}