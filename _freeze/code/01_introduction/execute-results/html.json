{
  "hash": "8eec8099785a6cbc101d721b510282a1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction\"\nauthor: \"Jeffrey R. Stevens\"\ndate: \"2025-01-22\"\noutput: html_document\nexecute:\n  freeze: auto\n---\n\n\n\n\nLet's go to R's console, which is the direct connection to the R engine. In the console, you give R a command, and it returns the output.\n\n## Numerical operations\n\nR can be a very fancy calculator. Let's do some calculations by entering numerical operations into the console. How many seconds are there in a year?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# >\n```\n:::\n\n\n\n\nOn average, how many days are in each month of a leap year?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# >\n```\n:::\n\n\n\n\n## Text\n\nR also can store, manipulate, and return text. But working with text requires wrapping the characters in quotation marks (either \\\" or \\'). Type this out and replace `<name>` with your name: `\"My name is <name>!\"`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# >\n```\n:::\n\n\n\n\nYou can also apply functions to text. If we want to yell our names, let's convert the string of characters to upper case with the `toupper()` function. Put the previous text inside the parentheses of `toupper()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# >\n```\n:::\n\n\n\n\nPress the up arrow ⬆️ to place previous commands in the console. Navigate to the previous command and change the text a bit.\n\n## Packages\n\nIf you haven't already, install the `{palmerpenguins}` and `{tidyverse}` packages. Remember how to do that?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# >\n```\n:::\n\n\n\n\nNow that we have installed the `{palmerpenguins}` package, we want to look at the `penguins` data set from that package. What do we need to do first to get access to things in the package?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# >\n```\n:::\n\n\n\n\n\nView the data set by typing `penguins` into the console.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# >\n```\n:::\n\n\n\n\n## Plot data \n\nExcellent! Let's say we want to make a scatterplot of the bill length vs. the bill depth for all birds. We can use the `plot()` function for this by passing the y-variable name, a tilde `~`, the x-variable name, and then the name of the dataset. Something like `plot(y ~ x, data = dataset)`. Replace these variables with the ones for bill length and depth in the `penguins` dataset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# >\n```\n:::\n\n\n\n\nHey, hey! We have a plot! 📊 Sweet! We've viewed and plotted data. Well done! 🎉 💪\n\n\n",
    "supporting": [
      "01_introduction_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}