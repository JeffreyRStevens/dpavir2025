{
  "hash": "ce452fb778fc2f82012cd2d42afda4a0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction\"\nauthor: \"Jeffrey R. Stevens\"\ndate: \"2023-01-23\"\noutput: html_document\nexecute:\n  freeze: auto\n---\n\n\n\nLet's go to R's console, which is the direct connection to the R engine. In the console, you give R a command, and it returns the output.\n\n## Numerical operations\n\nR can be a very fancy calculator. Let's do some calculations by entering numerical operations into the console. How many seconds are there in a year?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n60 * 60 * 24 * 365\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 31536000\n```\n\n\n:::\n:::\n\n\n\nOn average, how many days are in each month of a leap year?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n 366 / 12\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30.5\n```\n\n\n:::\n:::\n\n\n\n## Text\n\nR also can store, manipulate, and return text. But working with text requires wrapping the characters in quotation marks (either \\\" or \\'). Type this out and replace `<name>` with your name: `\"My name is <name>!\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"My name is Jeff!\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"My name is Jeff!\"\n```\n\n\n:::\n:::\n\n\n\nYou can also apply functions to text. If we want to yell our names, let's convert the string of characters to upper case with the `toupper()` function. Put the previous text inside the parentheses of `toupper()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoupper(\"My name is Jeff!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"MY NAME IS JEFF!\"\n```\n\n\n:::\n:::\n\n\n\nPress the up arrow ‚¨ÜÔ∏è to place previous commands in the console. Navigate to the previous command and change the text a bit.\n\n## Packages\n\nIf you haven't already, install the `{palmerpenguins}` and `{tidyverse}` packages. Remember how to do that?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"palmerpenguins\", \"tidyverse\"))\n```\n:::\n\n\n\nNow that we have installed the `{palmerpenguins}` package, we want to look at the `penguins` data set from that package. What do we need to do first to get access to things in the package?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n:::\n\n\n\n\nView the data set by typing `penguins` into the console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 √ó 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ‚Ñπ 334 more rows\n# ‚Ñπ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n<!-- ## Importing data -->\n\n<!-- Let's import, process, and plot some data! For this, we're going to need several of the `{tidyverse}` packages, so let's just load them all by loading `{tidyverse}`. -->\n<!-- ```{r} -->\n<!-- library(tidyverse) -->\n<!-- ``` -->\n\n<!-- Now I stumbled across some extra penguin data that was missing from the original data set. I have it saved as a CSV or comma-separated value file at `https://jeffreyrstevens.quarto.pub/dpavir/code/penguins_extra.csv`. To import it into our R session, we need to use the `read_csv()` function. How might you do that? -->\n<!-- ```{r} -->\n<!-- read_csv(\"penguins_extra.csv\") -->\n<!-- ``` -->\n\n<!-- Hmm, did that do what we wanted? What do we need to do next to be able to work with the data? -->\n<!-- ```{r} -->\n<!-- penguins2 <- read_csv(\"penguins_extra.csv\") -->\n<!-- ``` -->\n\n\n<!-- ## Wrangle data -->\n\n<!-- OK, now we have two data sets and we need to combine them into a single data set. We can use the `bind_rows()` function to do this and assign it to an object called `penguins_all`. How might you do that? -->\n<!-- ```{r} -->\n<!-- penguins_all <- bind_rows(penguins, penguins2) -->\n<!-- ``` -->\n\n<!-- We want to explore these data a bit, but we're only interested in the 2009 observations. So we need to `filter()` the data to only give us data in which the values in the _year_ column are 2009.  -->\n<!-- ```{r} -->\n<!-- filter(penguins, `year` == 2009) -->\n<!-- ``` -->\n\n## Plot data \n\nExcellent! Let's say we want to make a scatterplot of the bill length vs. the bill depth for all birds. We can use the `plot()` function for this.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(bill_length_mm ~ bill_depth_mm, data = penguins)\n```\n\n::: {.cell-output-display}\n![](01_introduction_answers_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nHey, hey! We have a plot! üìä Sweet! We've viewed and plotted data. Well done! üéâ üí™\n\n\n",
    "supporting": [
      "01_introduction_answers_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}