{
  "hash": "9c52175290ba2efcda61523a9884ea71",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Strings\"\nauthor: \"Jeff Stevens\"\ndate: \"2023-03-08\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: auto\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2025](https://jeffreyrstevens.github.io/dpavir2025)\"\n    code-link: true\n    logo: \"../logo/dpavir_hex.png\"\n---\n\n\n\n\n\n# Introduction\n\n\n## The problem\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nWhat's different between these data sets? \n\nWhat is needed to create `data2` from `data1`?\n\n:::: {.columns}\n\n::: {.column width=\"28%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n      id cond  resp \n   <int> <chr> <chr>\n 1     1 cond1 yes  \n 2     2 cond2 no   \n 3     3 cond1 yes  \n 4     4 cond2 yes  \n 5     5 cond1 no   \n 6     6 cond2 yes  \n 7     7 cond1 yes  \n 8     8 cond2 no   \n 9     9 cond1 no   \n10    10 cond2 no   \n11    11 cond1 yes  \n12    12 cond2 yes  \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"72%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n      id cond  resp  output                           \n   <int> <chr> <chr> <glue>                           \n 1     1 1     Yes   1 had condition 1 and said \"Yes\" \n 2     2 2     No    2 had condition 2 and said \"No\"  \n 3     3 1     Yes   3 had condition 1 and said \"Yes\" \n 4     4 2     Yes   4 had condition 2 and said \"Yes\" \n 5     5 1     No    5 had condition 1 and said \"No\"  \n 6     6 2     Yes   6 had condition 2 and said \"Yes\" \n 7     7 1     Yes   7 had condition 1 and said \"Yes\" \n 8     8 2     No    8 had condition 2 and said \"No\"  \n 9     9 1     No    9 had condition 1 and said \"No\"  \n10    10 2     No    10 had condition 2 and said \"No\" \n11    11 1     Yes   11 had condition 1 and said \"Yes\"\n12    12 2     Yes   12 had condition 2 and said \"Yes\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Set-up\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n```\n:::\n\n\n\n\n\n## Mental model\n\n![](../images/mentalmodel_strings.png){fig-align=\"center\"}\n\n\n# Character string basics\n\n\n## Useful character vectors \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nletters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n```\n\n\n:::\n\n```{.r .cell-code}\nLETTERS\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmonth.name\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"January\"   \"February\"  \"March\"     \"April\"     \"May\"       \"June\"     \n [7] \"July\"      \"August\"    \"September\" \"October\"   \"November\"  \"December\" \n```\n\n\n:::\n\n```{.r .cell-code}\nmonth.abb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n```\n\n\n:::\n:::\n\n\n\n\n## Quotes \n\nCreate strings with either single quotes or double quotes\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(string1 <- \"This is a string\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"This is a string\"\n```\n\n\n:::\n\n```{.r .cell-code}\nwriteLines(string1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThis is a string\n```\n\n\n:::\n\n```{.r .cell-code}\n(string2 <- 'So is this.')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"So is this.\"\n```\n\n\n:::\n\n```{.r .cell-code}\nwriteLines(string2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSo is this.\n```\n\n\n:::\n:::\n\n\n\n\n\n## Quotes\n\nIncluding quotes in strings\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(string3 <- 'If I want to include a \"double quote\" inside a string, I use single quotes')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"If I want to include a \\\"double quote\\\" inside a string, I use single quotes\"\n```\n\n\n:::\n\n```{.r .cell-code}\nwriteLines(string3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIf I want to include a \"double quote\" inside a string, I use single quotes\n```\n\n\n:::\n\n```{.r .cell-code}\n(string4 <- \"And 'vice versa'\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"And 'vice versa'\"\n```\n\n\n:::\n\n```{.r .cell-code}\nwriteLines(string4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnd 'vice versa'\n```\n\n\n:::\n:::\n\n\n\n\n\n## Escaping quotes\n\nOr use `\\` to \"escape\" it\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndouble_quote <- \"\\\"\"\nwriteLines(double_quote)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsingle_quote <- '\\''\nwriteLines(single_quote)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'\n```\n\n\n:::\n:::\n\n\n\n\n\n## Escaping quotes\n\nBecause `\\` escapes, you can't just wrap it in quotes\n\nIf you want an actual backslash printed, you need two `\\\\`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbackslash <- \"\\\\\"\nwriteLines(backslash)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\\\n```\n\n\n:::\n:::\n\n\n\n\n![](../images/backslashes.png){fig-align=\"center\" width=\"40%\"}\n\n\n# Working with strings\n\n\n## Strings with {stringr}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n:::\n\n\n\n\n![](../images/stringr_allisonhorst.png){fig-align=\"center\" width=\"58%\"}\n\n![](../images/stringr_hex.png){.absolute width=\"15%\" top=\"0%\" left=\"90%\"}\n\n\n::: {.aside}\nSource: [Allison Horst](https://allisonhorst.com/r-packages-functions)\n:::\n\n\n## String length\n\nReturn number of characters in a string with `stringr::str_length()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(r4ds_string <- c(\"a\", \"R for data science\", NA))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\"                  \"R for data science\" NA                  \n```\n\n\n:::\n\n```{.r .cell-code}\nstr_length(r4ds_string)  # nchar() in base R\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1 18 NA\n```\n\n\n:::\n\n```{.r .cell-code}\n# This differs from length...\nlength(r4ds_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n\n<!-- ## Truncating strings -->\n\n<!-- Truncate strings with `stringr::str_trunc()` -->\n<!-- ```{r} -->\n<!-- x <- \"This string is moderately long\" -->\n<!-- str_trunc(x, 20, side = \"right\") -->\n<!-- str_trunc(x, 20, side = \"left\") -->\n<!-- str_trunc(x, 20, side = \"right\", ellipsis = \"\") -->\n<!-- ``` -->\n\n\n## Extracting strings\n\nExtract parts of a string based on position with `stringr::str_sub()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"apple\", \"banana\", \"pear\")\nstr_sub(x, 1, 3)  # substr() in base R\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"app\" \"ban\" \"pea\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Negative numbers count backwards from end\nstr_sub(x, -3, -1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ple\" \"ana\" \"ear\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Extracting strings\n\nUseful when you don't have delimiters. But use delimiters!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(species = str_sub(species, 1, 1),\n         island = str_sub(island, 1, 3),\n         year = str_sub(year, -2, -1), .keep = \"used\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   species island year \n   <chr>   <chr>  <chr>\n 1 A       Tor    07   \n 2 A       Tor    07   \n 3 A       Tor    07   \n 4 A       Tor    07   \n 5 A       Tor    07   \n 6 A       Tor    07   \n 7 A       Tor    07   \n 8 A       Tor    07   \n 9 A       Tor    07   \n10 A       Tor    07   \n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Extracting strings\n\nAlso can substitute characters based on position\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"apple\"  \"banana\" \"pear\"  \n```\n\n\n:::\n\n```{.r .cell-code}\nstr_sub(x, 1, 1) <- \"#\"  # replace first character\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"#pple\"  \"#anana\" \"#ear\"  \n```\n\n\n:::\n\n```{.r .cell-code}\nstr_sub(x, -1, -1) <- \"*\"  # replace last character\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"#ppl*\"  \"#anan*\" \"#ea*\"  \n```\n\n\n:::\n\n```{.r .cell-code}\nstr_sub(x, 0, 0) <- \"~\"  # add before first character\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"~#ppl*\"  \"~#anan*\" \"~#ea*\"  \n```\n\n\n:::\n:::\n\n\n\n\n\n## Changing case\n\nControl capitalization with `stringr::str_to_lower()` and `stringr::str_to_upper()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(y <- \"hello, World\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hello, World\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_to_lower(y)  # tolower() in base R\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hello, world\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_to_upper(y)  # toupper() in base R\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"HELLO, WORLD\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Changing case\n\nPlus super useful `stringr::str_to_title()` and `stringr::str_to_sentence()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_to_title(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello, World\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_to_sentence(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello, world\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Changing case\n\nUseful for column names\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n```\n\n\n:::\n\n```{.r .cell-code}\nstr_to_lower(names(iris))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sepal.length\" \"sepal.width\"  \"petal.length\" \"petal.width\"  \"species\"     \n```\n\n\n:::\n:::\n\n\n\n\n\n## Changing case\n\nOr to change case of column entries\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(sex_upper = str_to_sentence(sex), .keep = \"used\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 2\n   sex    sex_upper\n   <fct>  <chr>    \n 1 male   Male     \n 2 female Female   \n 3 female Female   \n 4 <NA>   <NA>     \n 5 female Female   \n 6 male   Male     \n 7 female Female   \n 8 male   Male     \n 9 <NA>   <NA>     \n10 <NA>   <NA>     \n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\nBut notice what happened to data type\n\n# Combining strings\n\n\n## Combining strings\n\nCombine **multiple strings** into a single string with `stringr::str_c()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"x\", \"y\", \"z\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x\" \"y\" \"z\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_c(\"x\", \"y\", \"z\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"xyz\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_c(\"x\", \"y\", \"z\", sep = \", \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x, y, z\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Collapsing strings\n\nCollapse a **vector** of strings into a single string with `collapse` argument\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_c(c(\"x\", \"y\", \"z\"), collapse = \", \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x, y, z\"\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\nHow is this different from using `sep` argument?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_c(\"x\", \"y\", \"z\", sep = \", \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x, y, z\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Collapsing strings\n\nWhen would this be useful?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_c(month.name, collapse = \", \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"January, February, March, April, May, June, July, August, September, October, November, December\"\n```\n\n\n:::\n\n```{.r .cell-code}\nunique(penguins$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Adelie    Gentoo    Chinstrap\nLevels: Adelie Chinstrap Gentoo\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_c(sort(unique(penguins$species)), collapse = \", \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Adelie, Chinstrap, Gentoo\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Combining strings with output \n\nPasting character vectors with base R `paste()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- \"Fred\"\nage <- 50\npaste(\"My name is\", name, \", and my age next year is\", age + 1, \".\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"My name is Fred , and my age next year is 51 .\"\n```\n\n\n:::\n\n```{.r .cell-code}\npaste0(\"My name is\", name, \", and my age next year is\", age + 1, \".\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"My name isFred, and my age next year is51.\"\n```\n\n\n:::\n\n```{.r .cell-code}\npaste0(\"My name is \", name, \", and my age next year is \", age + 1, \".\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"My name is Fred, and my age next year is 51.\"\n```\n\n\n:::\n\n```{.r .cell-code}\npaste(\"My name is \", name, \", and my age next year is \", age + 1, \".\", sep = \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"My name is Fred, and my age next year is 51.\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Combining strings with output \n\nGluing character vectors with `stringr::str_glue()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_glue(\"My name is {name}, and my age next year is {age + 1}.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMy name is Fred, and my age next year is 51.\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_glue(\"My name is {name}, and my age next year is {age + 1}.\", \n         name = \"Jane\", age = 40)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMy name is Jane, and my age next year is 41.\n```\n\n\n:::\n:::\n\n\n\n\n\n## Combining strings with output \n\nApply to each row of a data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  mutate(full_island = str_glue(\"{island} Island\")) |> \n  arrange(bill_length_mm) |> \n  select(species, island, full_island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   species island    full_island     \n   <fct>   <fct>     <glue>          \n 1 Adelie  Dream     Dream Island    \n 2 Adelie  Dream     Dream Island    \n 3 Adelie  Torgersen Torgersen Island\n 4 Adelie  Dream     Dream Island    \n 5 Adelie  Torgersen Torgersen Island\n 6 Adelie  Torgersen Torgersen Island\n 7 Adelie  Biscoe    Biscoe Island   \n 8 Adelie  Torgersen Torgersen Island\n 9 Adelie  Torgersen Torgersen Island\n10 Adelie  Biscoe    Biscoe Island   \n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n<!-- ## Combining strings with output  -->\n\n<!-- Apply to multiple elements of a vector with `str_glue_data()` -->\n<!-- ```{r} -->\n<!-- str_glue_data(mtcars, \"{rownames(.)} has {hp} hp\") -->\n<!-- ``` -->\n\n<!-- ::: {.fragment} -->\n<!-- What is the difference between these two examples? -->\n<!-- ::: -->\n\n\n## Cheatsheet\n\n\n![](../images/stringr_cheatsheet.png){fig-align=\"center\"}\n\n\n\n## Solving the problem\n\n:::: {.columns}\n\n::: {.column width=\"28%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n      id cond  resp \n   <int> <chr> <chr>\n 1     1 cond1 yes  \n 2     2 cond2 no   \n 3     3 cond1 yes  \n 4     4 cond2 yes  \n 5     5 cond1 no   \n 6     6 cond2 yes  \n 7     7 cond1 yes  \n 8     8 cond2 no   \n 9     9 cond1 no   \n10    10 cond2 no   \n11    11 cond1 yes  \n12    12 cond2 yes  \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"72%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n      id cond  resp  output                           \n   <int> <chr> <chr> <glue>                           \n 1     1 1     Yes   1 had condition 1 and said \"Yes\" \n 2     2 2     No    2 had condition 2 and said \"No\"  \n 3     3 1     Yes   3 had condition 1 and said \"Yes\" \n 4     4 2     Yes   4 had condition 2 and said \"Yes\" \n 5     5 1     No    5 had condition 1 and said \"No\"  \n 6     6 2     Yes   6 had condition 2 and said \"Yes\" \n 7     7 1     Yes   7 had condition 1 and said \"Yes\" \n 8     8 2     No    8 had condition 2 and said \"No\"  \n 9     9 1     No    9 had condition 1 and said \"No\"  \n10    10 2     No    10 had condition 2 and said \"No\" \n11    11 1     Yes   11 had condition 1 and said \"Yes\"\n12    12 2     Yes   12 had condition 2 and said \"Yes\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Let's code!\n\n[Strings](../code/20_strings.html){target=\"_blank\"} [[Rmd](../code/20_strings.Rmd){target=\"_blank\"}]\n",
    "supporting": [
      "20_strings_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}