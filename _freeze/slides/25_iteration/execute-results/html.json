{
  "hash": "3505401113f86e274c210f664ca25646",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Iteration\"\nauthor: \"Jeff Stevens\"\ndate: \"2023-03-29\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: auto\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2025](https://jeffreyrstevens.github.io/dpavir2025)\"\n    code-link: true\n    logo: \"../logo/dpavir_hex.png\"\n---\n\n\n\n\n\n# Introduction\n\n\n## The problems\n\n* Run the same model on multiple data sets\n* Create the same plot multiple data sets\n* Read in data files from multiple subjects\n\n\n## Set-up\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(here)\n```\n:::\n\n\n\n\n\n# Iteration\n\n## For loops\n\n![](../images/for-loop.png){fig-align=\"center\" width=\"58%\"}\n\n\n## For loops\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (counter in min:max) {\n  # What you want repeated.\n  # Index counter-specific vector with [counter]\n}\n```\n:::\n\n\n\n\n\n\n## Building objects with for loops\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:nrow(penguins)) {\n  bill_size[i] <- penguins$bill_length_mm[i] * penguins$bill_depth_mm[i]\n}\n```\n:::\n\n\n\n::: {.fragment}\n```\nError: object 'bill_size' not found\n```\n:::\n\n::: {.fragment}\n::: {.callout-warning}\nYou must initialize variables that you build in for loops.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbill_size <- NA\nfor (i in 1:nrow(penguins)) {\n  bill_size[i] <- penguins$bill_length_mm[i] * penguins$bill_depth_mm[i]\n}\n```\n:::\n\n\n\n:::\n\n\n## For loops with vectors\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in month.name) {\n  print(paste0(i, \" has \", str_length(i), \" letters.\"))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"January has 7 letters.\"\n[1] \"February has 8 letters.\"\n[1] \"March has 5 letters.\"\n[1] \"April has 5 letters.\"\n[1] \"May has 3 letters.\"\n[1] \"June has 4 letters.\"\n[1] \"July has 4 letters.\"\n[1] \"August has 6 letters.\"\n[1] \"September has 9 letters.\"\n[1] \"October has 7 letters.\"\n[1] \"November has 8 letters.\"\n[1] \"December has 8 letters.\"\n```\n\n\n:::\n:::\n\n\n\n\n<!-- ## For loops with lists -->\n\n<!-- Use `foreach()` from [`{foreach}`](https://github.com/RevolutionAnalytics/foreach) package -->\n\n<!-- ```{r} -->\n<!-- species_list <- split(penguins, penguins$species) -->\n<!-- library(foreach) -->\n<!-- foreach (species = species_list) %do% { -->\n<!--     lm(bill_length_mm ~ bill_depth_mm, data = species) -->\n<!-- } -->\n<!-- ``` -->\n\n<!-- ##  Parallel processing -->\n\n<!-- To run loops in parallel, use `%dopar` with `foreach()` -->\n\n<!-- ```{r eval = FALSE} -->\n<!-- library(doParallel) -->\n<!-- registerDoParallel(3) -->\n<!-- foreach (dat = dat_list) %dopar% { -->\n<!--     lm(bill_length_mm ~ bill_depth_mm, data = dat) -->\n<!-- } -->\n<!-- stopImplicitCluster() -->\n<!-- ``` -->\n\n\n# Mapping over multiple arguments\n\n## Mapping with {purrr}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n```\n:::\n\n\n\n\n![](../images/purrr_map.png){fig-align=\"center\" width=\"58%\"}\n\n![](../images/purrr_hex.png){.absolute width=\"15%\" top=\"0%\" left=\"90%\"}\n\n::: {.aside}\nSource: [Malcolm Barrett](https://malco.io/slides/hs_purrr/)\n:::\n\n\n## Mapping functions\n\n`purrr::map()` applies functions repeatedly across data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap(select(penguins, ends_with(\"_mm\")), ~ mean(.x, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$bill_length_mm\n[1] 43.92193\n\n$bill_depth_mm\n[1] 17.15117\n\n$flipper_length_mm\n[1] 200.9152\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\nWhat kind of data type does `map()` return?\n:::\n\n\n## Mapping function\n\nNeed different data types as output?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_dbl(select(penguins, ends_with(\"_mm\")), ~ mean(.x, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   bill_length_mm     bill_depth_mm flipper_length_mm \n         43.92193          17.15117         200.91520 \n```\n\n\n:::\n\n```{.r .cell-code}\nmap_chr(select(penguins, ends_with(\"_mm\")), ~ mean(.x, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   bill_length_mm     bill_depth_mm flipper_length_mm \n      \"43.921930\"       \"17.151170\"      \"200.915205\" \n```\n\n\n:::\n:::\n\n\n\n\n\n## Mapping function\n\nUse `split()` like `dplyr::group_by()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  split(penguins$species) |>\n  map(~ lm(bill_length_mm ~ bill_depth_mm, data = .x))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Adelie\n\nCall:\nlm(formula = bill_length_mm ~ bill_depth_mm, data = .x)\n\nCoefficients:\n  (Intercept)  bill_depth_mm  \n       23.068          0.857  \n\n\n$Chinstrap\n\nCall:\nlm(formula = bill_length_mm ~ bill_depth_mm, data = .x)\n\nCoefficients:\n  (Intercept)  bill_depth_mm  \n       13.428          1.922  \n\n\n$Gentoo\n\nCall:\nlm(formula = bill_length_mm ~ bill_depth_mm, data = .x)\n\nCoefficients:\n  (Intercept)  bill_depth_mm  \n       17.230          2.021  \n```\n\n\n:::\n:::\n\n\n\n\n\n## Mapping function\n\nCreate multiple plots\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\n  split(penguins$species) |>\n  map(~ ggplot(.x, aes(bill_length_mm, bill_depth_mm)) + geom_point())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$Adelie\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](25_iteration_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n$Chinstrap\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](25_iteration_files/figure-revealjs/unnamed-chunk-10-2.png){width=960}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n$Gentoo\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](25_iteration_files/figure-revealjs/unnamed-chunk-10-3.png){width=960}\n:::\n:::\n\n\n\n\n\n## Importing multiple data files\n\nFirst, we'll create multiple data files\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_list <- penguins |> \n  split(penguins$species)\nwrite_csv(species_list$Adelie, here(\"data/adelie_penguin_data.csv\"))\nwrite_csv(species_list$Chinstrap, here(\"data/chinstrap_penguin_data.csv\"))\nwrite_csv(species_list$Gentoo, here(\"data/gentoo_penguin_data.csv\"))\n```\n:::\n\n\n\n\n\n## Importing multiple data files\n\nGet file names and paths with `dir()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(penguin_files <- dir(path = \"../data\", \n                      pattern = \"penguin_data.csv\", \n                      full.names = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"../data/adelie_penguin_data.csv\"    \"../data/chinstrap_penguin_data.csv\"\n[3] \"../data/gentoo_penguin_data.csv\"   \n```\n\n\n:::\n:::\n\n\n\n\n\n## Importing multiple data files\n\nMap `readr::read_csv()` to each element of `penguin_files`\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(penguin_data1 <- map(penguin_files, read_csv))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex <chr>, year <dbl>\n\n[[2]]\n# A tibble: 68 × 8\n   species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <chr>     <chr>           <dbl>         <dbl>             <dbl>       <dbl>\n 1 Chinstrap Dream            46.5          17.9               192        3500\n 2 Chinstrap Dream            50            19.5               196        3900\n 3 Chinstrap Dream            51.3          19.2               193        3650\n 4 Chinstrap Dream            45.4          18.7               188        3525\n 5 Chinstrap Dream            52.7          19.8               197        3725\n 6 Chinstrap Dream            45.2          17.8               198        3950\n 7 Chinstrap Dream            46.1          18.2               178        3250\n 8 Chinstrap Dream            51.3          18.2               197        3750\n 9 Chinstrap Dream            46            18.9               195        4150\n10 Chinstrap Dream            51.3          19.9               198        3700\n# ℹ 58 more rows\n# ℹ 2 more variables: sex <chr>, year <dbl>\n\n[[3]]\n# A tibble: 124 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <chr>   <chr>           <dbl>         <dbl>             <dbl>       <dbl>\n 1 Gentoo  Biscoe           46.1          13.2               211        4500\n 2 Gentoo  Biscoe           50            16.3               230        5700\n 3 Gentoo  Biscoe           48.7          14.1               210        4450\n 4 Gentoo  Biscoe           50            15.2               218        5700\n 5 Gentoo  Biscoe           47.6          14.5               215        5400\n 6 Gentoo  Biscoe           46.5          13.5               210        4550\n 7 Gentoo  Biscoe           45.4          14.6               211        4800\n 8 Gentoo  Biscoe           46.7          15.3               219        5200\n 9 Gentoo  Biscoe           43.3          13.4               209        4400\n10 Gentoo  Biscoe           46.8          15.4               215        5150\n# ℹ 114 more rows\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Importing multiple data files\n\n::: {style=\"font-size:90%\"}\nUse `purrr::map_df()` to return output as data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(penguin_data2 <- map_df(penguin_files, read_csv))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Solving the problems\n\n* Run the same model on multiple data sets\n* Create the same plot for multiple data sets\n* Read in data files from multiple subjects\n\n\n\n## Let's code!\n\n[Iteration](../code/25_iteration.html){target=\"_blank\"} [[Rmd](../code/25_iteration.Rmd){target=\"_blank\"}]\n",
    "supporting": [
      "25_iteration_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}