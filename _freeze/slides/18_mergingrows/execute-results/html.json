{
  "hash": "8310371093edefd4cacd793bf0f0477e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Merging rows\"\nauthor: \"Jeff Stevens\"\ndate: \"2025-03-03\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: true\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2025](https://jeffreyrstevens.github.io/dpavir2025)\"\n    code-link: true\n    logo: \"../logo/dpavir_hex.png\"\n---\n\n\n\n\n# Introduction\n\n\n## The problem\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nWhat's different between these data sets? \n\nWhat is needed to create `data3` from `data1` and `data2`?\n\n:::: {.columns}\n\n::: {.column width=\"31%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n      id   resp\n   <int>  <dbl>\n 1     1 0.130 \n 2     2 0.992 \n 3     3 0.947 \n 4     4 0.0274\n 5     5 0.705 \n 6     6 0.0499\n 7     7 0.874 \n 8     8 0.742 \n 9     9 0.240 \n10    10 0.330 \n11    11 0.379 \n12    12 0.174 \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"28%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n      id  cond\n   <int> <int>\n 1     1     1\n 2     2     2\n 3     3     3\n 4     4     1\n 5     5     2\n 6     6     3\n 7     7     1\n 8     8     2\n 9     9     3\n10    10     1\n11    11     2\n12    12     3\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n     id   resp\n  <int>  <dbl>\n1     1 0.130 \n2     4 0.0274\n3     7 0.874 \n4    10 0.330 \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Set-up\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(nycflights13)\n(flights2 <- select(flights, year:dep_time, carrier, tailnum))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 6\n    year month   day dep_time carrier tailnum\n   <int> <int> <int>    <int> <chr>   <chr>  \n 1  2013     1     1      517 UA      N14228 \n 2  2013     1     1      533 UA      N24211 \n 3  2013     1     1      542 AA      N619AA \n 4  2013     1     1      544 B6      N804JB \n 5  2013     1     1      554 DL      N668DN \n 6  2013     1     1      554 UA      N39463 \n 7  2013     1     1      555 B6      N516JB \n 8  2013     1     1      557 EV      N829AS \n 9  2013     1     1      557 B6      N593JB \n10  2013     1     1      558 AA      N3ALAA \n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Set-up\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(20250303)\n(airlines2 <- slice_sample(airlines, prop = 0.5))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 2\n  carrier name                       \n  <chr>   <chr>                      \n1 HA      Hawaiian Airlines Inc.     \n2 MQ      Envoy Air                  \n3 9E      Endeavor Air Inc.          \n4 AA      American Airlines Inc.     \n5 FL      AirTran Airways Corporation\n6 B6      JetBlue Airways            \n7 EV      ExpressJet Airlines Inc.   \n8 UA      United Air Lines Inc.      \n```\n\n\n:::\n\n```{.r .cell-code}\n(airlines3 <- rename(airlines2, airline = carrier))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 2\n  airline name                       \n  <chr>   <chr>                      \n1 HA      Hawaiian Airlines Inc.     \n2 MQ      Envoy Air                  \n3 9E      Endeavor Air Inc.          \n4 AA      American Airlines Inc.     \n5 FL      AirTran Airways Corporation\n6 B6      JetBlue Airways            \n7 EV      ExpressJet Airlines Inc.   \n8 UA      United Air Lines Inc.      \n```\n\n\n:::\n:::\n\n\n\n\n\n## Joining with {dplyr}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n\n\n\n![](../images/joins_semi.gif){fig-align=\"center\" width=\"45%\"}\n\n![](../images/dplyr_hex.png){.absolute width=\"15%\" top=\"0%\" left=\"95%\"}\n\n\n::: {.aside}\nSource: [Garrick Aden-Buie](https://github.com/gadenbuie/tidyexplain)\n:::\n<!-- <img src=\"images/white_bar.png\", width = 40%, style = \"position:absolute; top: 19%; left: 40%\"></img> -->\n<!-- <img src=\"images/white_bar.png\", width = 40%, style = \"position:absolute; top: 19%; left: 60%\"></img> -->\n\n\n# Filtering joins\n\n## Filtering joins\n\n#### Filters rows\n\n![](../images/joins_semi.gif){fig-align=\"center\" width=\"50%\"}\n\n\n## Semi joins\n\n#### Keep only matching observations\n\n![](../images/join-semi.png){.absolute width=\"60%\" top=\"35%\" left=\"0%\"}\n\n![](../images/joins_semi.gif){.absolute width=\"40%\" top=\"20%\" left=\"65%\"}\n\n::: {.fragment}\nWhen is this useful?\n:::\n\n\n## Semi joins\n\n![](../images/join-semi.png){.absolute width=\"30%\" top=\"-10%\" left=\"50%\"}\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    key val_x\n  <dbl> <chr>\n1     1 x1   \n2     2 x2   \n3     3 x3   \n```\n\n\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    key val_y\n  <dbl> <chr>\n1     1 y1   \n2     2 y2   \n3     4 y3   \n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsemi_join(x, y, by = \"key\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n    key val_x\n  <dbl> <chr>\n1     1 x1   \n2     2 x2   \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Semi joins\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairlines2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 2\n  carrier name                       \n  <chr>   <chr>                      \n1 HA      Hawaiian Airlines Inc.     \n2 MQ      Envoy Air                  \n3 9E      Endeavor Air Inc.          \n4 AA      American Airlines Inc.     \n5 FL      AirTran Airways Corporation\n6 B6      JetBlue Airways            \n7 EV      ExpressJet Airlines Inc.   \n8 UA      United Air Lines Inc.      \n```\n\n\n:::\n:::\n\n\n\n\n\n## Semi joins\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |>\n  semi_join(airlines2, by = \"carrier\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 248,661 × 6\n    year month   day dep_time carrier tailnum\n   <int> <int> <int>    <int> <chr>   <chr>  \n 1  2013     1     1      517 UA      N14228 \n 2  2013     1     1      533 UA      N24211 \n 3  2013     1     1      542 AA      N619AA \n 4  2013     1     1      544 B6      N804JB \n 5  2013     1     1      554 UA      N39463 \n 6  2013     1     1      555 B6      N516JB \n 7  2013     1     1      557 EV      N829AS \n 8  2013     1     1      557 B6      N593JB \n 9  2013     1     1      558 AA      N3ALAA \n10  2013     1     1      558 B6      N793JB \n# ℹ 248,651 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Semi joins\n\nHow could we do this with `filter()`?\n\n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |>\n  filter(carrier %in% airlines2$carrier)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 248,661 × 6\n    year month   day dep_time carrier tailnum\n   <int> <int> <int>    <int> <chr>   <chr>  \n 1  2013     1     1      517 UA      N14228 \n 2  2013     1     1      533 UA      N24211 \n 3  2013     1     1      542 AA      N619AA \n 4  2013     1     1      544 B6      N804JB \n 5  2013     1     1      554 UA      N39463 \n 6  2013     1     1      555 B6      N516JB \n 7  2013     1     1      557 EV      N829AS \n 8  2013     1     1      557 B6      N593JB \n 9  2013     1     1      558 AA      N3ALAA \n10  2013     1     1      558 B6      N793JB \n# ℹ 248,651 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Anti joins\n\n#### Keep only non-matching observations\n\n![](../images/join-anti.png){.absolute width=\"60%\" top=\"35%\" left=\"0%\"}\n\n![](../images/joins_anti.gif){.absolute width=\"40%\" top=\"20%\" left=\"65%\"}\n\n::: {.fragment}\nWhen is this useful?\n:::\n\n---\n\n## Anti joins\n\n![](../images/join-anti.png){.absolute width=\"30%\" top=\"-10%\" left=\"50%\"}\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    key val_x\n  <dbl> <chr>\n1     1 x1   \n2     2 x2   \n3     3 x3   \n```\n\n\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    key val_y\n  <dbl> <chr>\n1     1 y1   \n2     2 y2   \n3     4 y3   \n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanti_join(x, y, by = \"key\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n    key val_x\n  <dbl> <chr>\n1     3 x3   \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Anti joins\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |>\n  anti_join(airlines2, by = \"carrier\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 88,115 × 6\n    year month   day dep_time carrier tailnum\n   <int> <int> <int>    <int> <chr>   <chr>  \n 1  2013     1     1      554 DL      N668DN \n 2  2013     1     1      602 DL      N971DL \n 3  2013     1     1      606 DL      N3739P \n 4  2013     1     1      615 DL      N326NB \n 5  2013     1     1      622 US      N807AW \n 6  2013     1     1      627 US      N535UW \n 7  2013     1     1      629 WN      N273WN \n 8  2013     1     1      629 US      N426US \n 9  2013     1     1      643 US      N178US \n10  2013     1     1      653 DL      N327NW \n# ℹ 88,105 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Anti joins\n\nHow could we do this with `filter()`?\n\n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |>\n  filter(!carrier %in% airlines2$carrier)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 88,115 × 6\n    year month   day dep_time carrier tailnum\n   <int> <int> <int>    <int> <chr>   <chr>  \n 1  2013     1     1      554 DL      N668DN \n 2  2013     1     1      602 DL      N971DL \n 3  2013     1     1      606 DL      N3739P \n 4  2013     1     1      615 DL      N326NB \n 5  2013     1     1      622 US      N807AW \n 6  2013     1     1      627 US      N535UW \n 7  2013     1     1      629 WN      N273WN \n 8  2013     1     1      629 US      N426US \n 9  2013     1     1      643 US      N178US \n10  2013     1     1      653 DL      N327NW \n# ℹ 88,105 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n# Binding rows and columns\n\n## Adding rows\n\n`tibble::add_row()`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(df <- tibble(x = 1:3, y = 3:1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n      x     y\n  <int> <int>\n1     1     3\n2     2     2\n3     3     1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> add_row(x = 4, y = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n      x     y\n  <dbl> <dbl>\n1     1     3\n2     2     2\n3     3     1\n4     4     0\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.fragment}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> add_row(x = 4, y = 0, \n               .before = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n      x     y\n  <dbl> <dbl>\n1     1     3\n2     4     0\n3     2     2\n4     3     1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> add_row(x = 4:5, y = 0:-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x     y\n  <int> <int>\n1     1     3\n2     2     2\n3     3     1\n4     4     0\n5     5    -1\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n::::\n\n\n## Adding columns\n\n`tibble::add_column()`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(df <- tibble(x = 1:3, y = 3:1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n      x     y\n  <int> <int>\n1     1     3\n2     2     2\n3     3     1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> add_column(z = 4:6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n      x     y     z\n  <int> <int> <int>\n1     1     3     4\n2     2     2     5\n3     3     1     6\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.fragment}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> add_column(w = 4:6, \n                  .before = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n      w     x     y\n  <int> <int> <int>\n1     4     1     3\n2     5     2     2\n3     6     3     1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> add_column(z = 4:6, alpha = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n      x     y     z alpha\n  <int> <int> <int> <dbl>\n1     1     3     4     0\n2     2     2     5     0\n3     3     1     6     0\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n::::\n\n---\n\n## Combine data frames by rows\n\n`dplyr::bind_rows()`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(df2 <- tibble(x = 4:5, y = 5:4))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n      x     y\n  <int> <int>\n1     4     5\n2     5     4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_rows(df, df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n      x     y\n  <int> <int>\n1     1     3\n2     2     2\n3     3     1\n4     4     5\n5     5     4\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.fragment}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(df3 <- tibble(y = 7:6, x = 6:7, \n               z = c(\"A\", \"B\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n      y     x z    \n  <int> <int> <chr>\n1     7     6 A    \n2     6     7 B    \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_rows(df, df3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n      x     y z    \n  <int> <int> <chr>\n1     1     3 <NA> \n2     2     2 <NA> \n3     3     1 <NA> \n4     6     7 A    \n5     7     6 B    \n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n::::\n\n---\n\n## Combine data frames by columns \n\n`dplyr::bind_cols()`\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(df4 <- tibble(z = c(\"A\", \"B\" , \"C\"), \n               zz = c(\"Z\", \"Y\", \"X\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  z     zz   \n  <chr> <chr>\n1 A     Z    \n2 B     Y    \n3 C     X    \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_cols(df, df4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n      x     y z     zz   \n  <int> <int> <chr> <chr>\n1     1     3 A     Z    \n2     2     2 B     Y    \n3     3     1 C     X    \n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_cols(df, new_col = df4$z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n      x     y new_col\n  <int> <int> <chr>  \n1     1     3 A      \n2     2     2 B      \n3     3     1 C      \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n::: {.fragment}\nBut why is this dangerous? What is a better solution?\n:::\n\n\n# Set operations\n\n## Set operations\n\n#### For finding overlap, differences, and combinations in *values* of datasets (apply to vectors and data frames)\n\n![](../images/setop_df.png){fig-align=\"center\" width=\"40%\"}\n\n\n## Intersect\n\nCommon rows in both `x` and `y`, keeping just overlapping rows\n\n![](../images/setop_df.png){.absolute width=\"40%\" top=\"28%\" left=\"5%\"}\n\n![](../images/setop_intersect.gif){.absolute width=\"40%\" top=\"20%\" left=\"50%\"}\n\n\n## Set difference\n\nAll rows from `x` which are not also rows in `y`, keeping just unique rows\n\n![](../images/setop_df.png){.absolute width=\"40%\" top=\"28%\" left=\"5%\"}\n\n![](../images/setop_setdiff.gif){.absolute width=\"40%\" top=\"20%\" left=\"50%\"}\n\n\n## Union\n\nAll unique rows from `x` and `y`\n\n![](../images/setop_df.png){.absolute width=\"40%\" top=\"28%\" left=\"5%\"}\n\n![](../images/setop_union.gif){.absolute width=\"40%\" top=\"28%\" left=\"50%\"}\n\n\n<!-- ## Union all -->\n\n<!-- All rows from `x` and `y`, keeping duplicates (equivalent to `bind_rows()` for data frames) -->\n\n<!-- ![](../images/setop_df.png){.absolute width=\"40%\" top=\"28%\" left=\"5%\"} -->\n\n<!-- ![](../images/setop_union-all.gif){.absolute width=\"40%\" top=\"28%\" left=\"50%\"} -->\n\n## SQL\n\nCongratulations---you just learned SQL databases!\n\n![](../images/sql_joins.png){.absolute height=\"70%\" top=\"22%\" left=\"0%\"}\n\n![](../images/sql_setop.png){.absolute height=\"70%\" top=\"22%\" left=\"50%\"}\n\n\n## Solving the problem\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nnrows <- 12\nset.seed(20250303)\ndata1 <- tibble(id = 1:nrows, resp = round(runif(nrows), nrows))\ndata2 <- tibble(id = 1:nrows, cond = rep(1:3, times = 4))\n```\n:::\n\n\n\n\n\n## Solving the problem\n\nWhat code combines `data1` and `data2` into `data3`?\n\n:::: {.columns}\n\n::: {.column width=\"31%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n      id   resp\n   <int>  <dbl>\n 1     1 0.130 \n 2     2 0.992 \n 3     3 0.947 \n 4     4 0.0274\n 5     5 0.705 \n 6     6 0.0499\n 7     7 0.874 \n 8     8 0.742 \n 9     9 0.240 \n10    10 0.330 \n11    11 0.379 \n12    12 0.174 \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"28%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n      id  cond\n   <int> <int>\n 1     1     1\n 2     2     2\n 3     3     3\n 4     4     1\n 5     5     2\n 6     6     3\n 7     7     1\n 8     8     2\n 9     9     3\n10    10     1\n11    11     2\n12    12     3\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n     id   resp\n  <int>  <dbl>\n1     1 0.130 \n2     4 0.0274\n3     7 0.874 \n4    10 0.330 \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Let's code!\n\n[Merging rows](../code/18_mergingrows.html){target=\"_blank\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}