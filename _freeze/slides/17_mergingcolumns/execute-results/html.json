{
  "hash": "487fbc24ff4acb270f629d27653afa9d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Merging columns\"\nauthor: \"Jeff Stevens\"\ndate: \"2025-02-28\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: true\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2025](https://jeffreyrstevens.github.io/dpavir2025)\"\n    code-link: true\n    logo: \"../logo/dpavir_hex.png\"\n---\n\n\n\n\n# Introduction\n\n\n## The problem\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nWhat's different between these data sets? \n\nWhat is needed to create `data3` from `data1` and `data2`?\n\n:::: {.columns}\n\n::: {.column width=\"31%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 52%'}\n# A tibble: 12 × 3\n      id  cond  resp\n   <int> <int> <dbl>\n 1     1     1 0.092\n 2     1     2 0.878\n 3     1     3 0.449\n 4     2     1 0.911\n 5     2     2 0.33 \n 6     2     3 0.549\n 7     3     1 0.797\n 8     3     2 0.482\n 9     3     3 0.893\n10     4     1 0.638\n11     4     2 0.316\n12     4     3 0.614\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"28%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 52%'}\n# A tibble: 6 × 2\n     id   age\n  <int> <int>\n1     1    41\n2     2    26\n3     3    29\n4     4    46\n5     5    42\n6     6    41\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 52%'}\n# A tibble: 12 × 4\n      id   age  cond  resp\n   <int> <int> <int> <dbl>\n 1     1    41     1 0.092\n 2     1    41     2 0.878\n 3     1    41     3 0.449\n 4     2    26     1 0.911\n 5     2    26     2 0.33 \n 6     2    26     3 0.549\n 7     3    29     1 0.797\n 8     3    29     2 0.482\n 9     3    29     3 0.893\n10     4    46     1 0.638\n11     4    46     2 0.316\n12     4    46     3 0.614\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Mental model of merging\n\n![](../images/mentalmodel_merging.png){fig-align=center width=80%}\n\n\n## Set-up\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(nycflights13)\n(flights2 <- select(flights, year:day, origin, carrier, tailnum))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 6\n    year month   day origin carrier tailnum\n   <int> <int> <int> <chr>  <chr>   <chr>  \n 1  2013     1     1 EWR    UA      N14228 \n 2  2013     1     1 LGA    UA      N24211 \n 3  2013     1     1 JFK    AA      N619AA \n 4  2013     1     1 JFK    B6      N804JB \n 5  2013     1     1 LGA    DL      N668DN \n 6  2013     1     1 EWR    UA      N39463 \n 7  2013     1     1 EWR    B6      N516JB \n 8  2013     1     1 LGA    EV      N829AS \n 9  2013     1     1 JFK    B6      N593JB \n10  2013     1     1 LGA    AA      N3ALAA \n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Set-up\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(planes2 <- select(planes, tailnum, year, model, seats))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,322 × 4\n   tailnum  year model     seats\n   <chr>   <int> <chr>     <int>\n 1 N10156   2004 EMB-145XR    55\n 2 N102UW   1998 A320-214    182\n 3 N103US   1999 A320-214    182\n 4 N104UW   1999 A320-214    182\n 5 N10575   2002 EMB-145LR    55\n 6 N105UW   1999 A320-214    182\n 7 N107US   1999 A320-214    182\n 8 N108UW   1999 A320-214    182\n 9 N109UW   1999 A320-214    182\n10 N110UW   1999 A320-214    182\n# ℹ 3,312 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n# Merging data\n\n\n## Joining with {dplyr}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n\n\n\n![](../images/joins_full.gif){fig-align=\"center\" width=\"45%\"}\n\n![](../images/dplyr_hex.png){.absolute width=\"15%\" top=\"0%\" left=\"100%\"}\n\n\n::: {.aside}\nSource: [Garrick Aden-Buie](https://github.com/gadenbuie/tidyexplain)\n:::\n<!-- <img src=\"images/white_bar.png\", width = 40%, style = \"position:absolute; top: 19%; left: 40%\"></img> -->\n<!-- <img src=\"images/white_bar.png\", width = 40%, style = \"position:absolute; top: 19%; left: 60%\"></img> -->\n\n\n<!-- ## Merging data -->\n\n<!-- :::: {.columns} -->\n\n<!-- ::: {.column width=\"50%\"} -->\n\n<!-- ```{r echo = FALSE} -->\n<!-- set.seed(20210518) -->\n<!-- hai_data <- tibble(id = rep(1:5, each = 2), age = rep(round(rnorm(5, 20, 1)), each = 2), pre_post = rep(c(\"Pre\", \"Post\"), 5), nback = round(rnorm(10, 0, 1), 2)) -->\n\n<!-- ``` -->\n\n<!-- ```{r} -->\n<!-- hai_data -->\n<!-- ``` -->\n\n<!-- ::: -->\n\n<!-- ::: {.column width=\"50%\"} -->\n\n<!-- ```{r echo = FALSE} -->\n<!-- hr_data <- tibble(id = rep(c(3:5), each = 2), pre_post = rep(c(\"Pre\", \"Post\"), 3), hr = round(rnorm(6, 100, 10))) -->\n<!-- interest_data <- tibble(id = 1:5, percent = c(100, 80, 75, 95, 100)) -->\n<!-- ``` -->\n\n<!-- ```{r} -->\n<!-- hr_data -->\n<!-- interest_data -->\n<!-- ``` -->\n<!-- ::: -->\n\n<!-- :::: -->\n\n\n\n## Merging data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\n```\n:::\n\n\n\n\n![](../images/relational-nycflights.png){fig-align=center width=60%}\n\n\n## Keys\n\n:::{.incremental}\n* Unique identifiers of observations\n\n* Keys may take some work to produce\n\n* Double check keys for uniqueness/duplicates\n    - How do we do this?\n\n* Create **surrogate key** if no primary key exists\n    - Combine columns to make unique key (which function?)\n    - Create column of row numbers with `row_number()` (which function?)\n:::\n\n\n## Joins\n\n![](../images/join-setup.png){.absolute width=\"30%\" top=\"30%\" left=\"10%\"}\n\n![](../images/join-setup2.png){.absolute width=\"40%\" top=\"20%\" left=\"50%\"}\n\n\n## Mutating joins\n\n#### Joins columns\n\n![](../images/joins_left.gif){fig-align=center width=50%}\n\n\n## Mutating joins\n\n#### Affects columns\n\n![](../images/join-venn.png){fig-align=center width=100%}\n\n\n## Inner joins\n\n#### Keep only matching observations\n\n![](../images/join-inner.png){.absolute width=\"60%\" top=\"35%\" left=\"0%\"}\n\n::: {.fragment}\n![](../images/joins_inner.gif){.absolute width=\"40%\" top=\"20%\" left=\"65%\"}\n:::\n\n\n## Inner joins\n\n![](../images/join-inner.png){.absolute width=\"30%\" top=\"-10%\" left=\"50%\"}\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    key val_x\n  <dbl> <chr>\n1     1 x1   \n2     2 x2   \n3     3 x3   \n```\n\n\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    key val_y\n  <dbl> <chr>\n1     1 y1   \n2     2 y2   \n3     4 y3   \n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.fragment}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninner_join(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n    key val_x val_y\n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx |> \n  inner_join(y, by = \"key\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n    key val_x val_y\n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n::::\n\n\n## Inner joins\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(flights2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 336,776\nColumns: 6\n$ year    <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 20…\n$ month   <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ day     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ origin  <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\", \"JFK\",…\n$ carrier <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"AA\", \"B…\n$ tailnum <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N39463\", \"N…\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(planes2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,322\nColumns: 4\n$ tailnum <chr> \"N10156\", \"N102UW\", \"N103US\", \"N104UW\", \"N10575\", \"N105UW\", \"N…\n$ year    <int> 2004, 1998, 1999, 1999, 2002, 1999, 1999, 1999, 1999, 1999, 20…\n$ model   <chr> \"EMB-145XR\", \"A320-214\", \"A320-214\", \"A320-214\", \"EMB-145LR\", …\n$ seats   <int> 55, 182, 182, 182, 55, 182, 182, 182, 182, 182, 55, 55, 55, 55…\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Inner joins\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |>\n  inner_join(planes2, by = \"tailnum\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 284,170 × 9\n   year.x month   day origin carrier tailnum year.y model       seats\n    <int> <int> <int> <chr>  <chr>   <chr>    <int> <chr>       <int>\n 1   2013     1     1 EWR    UA      N14228    1999 737-824       149\n 2   2013     1     1 LGA    UA      N24211    1998 737-824       149\n 3   2013     1     1 JFK    AA      N619AA    1990 757-223       178\n 4   2013     1     1 JFK    B6      N804JB    2012 A320-232      200\n 5   2013     1     1 LGA    DL      N668DN    1991 757-232       178\n 6   2013     1     1 EWR    UA      N39463    2012 737-924ER     191\n 7   2013     1     1 EWR    B6      N516JB    2000 A320-232      200\n 8   2013     1     1 LGA    EV      N829AS    1998 CL-600-2B19    55\n 9   2013     1     1 JFK    B6      N593JB    2004 A320-232      200\n10   2013     1     1 JFK    B6      N793JB    2011 A320-232      200\n# ℹ 284,160 more rows\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\nWhat do you notice about the result?\n:::\n\n\n## Inner joins\n\n::: {.callout-warning appearance=\"simple\"}\nOnly use inner joins when you want the **intersection** of the two data sets!\n:::\n\n![](../images/joins_inner.gif){fig-align=\"center\" width=\"60%\"}\n\n\n## Outer joins\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n\n#### Keep observations that appear in at least one of the tables\n\n* Left\n\n* Right\n\n* Full\n:::\n\n::::\n\n![](../images/join-outer.png){.absolute width=\"50%\" top=\"0%\" left=\"65%\"}\n\n\n## Left joins\n\n#### Keep only left observations\n\n![](../images/join-left.png){.absolute width=\"60%\" top=\"35%\" left=\"0%\"}\n\n::: {.fragment}\n![](../images/joins_left.gif){.absolute width=\"40%\" top=\"20%\" left=\"65%\"}\n:::\n\n\n## Left joins\n\n![](../images/join-left.png){.absolute width=\"30%\" top=\"-10%\" left=\"50%\"}\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    key val_x\n  <dbl> <chr>\n1     1 x1   \n2     2 x2   \n3     3 x3   \n```\n\n\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    key val_y\n  <dbl> <chr>\n1     1 y1   \n2     2 y2   \n3     4 y3   \n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(x, y, by = \"key\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n    key val_x val_y\n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    <NA> \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Left joins\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(flights2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n   year month   day origin carrier tailnum\n  <int> <int> <int> <chr>  <chr>   <chr>  \n1  2013     1     1 EWR    UA      N14228 \n2  2013     1     1 LGA    UA      N24211 \n3  2013     1     1 JFK    AA      N619AA \n4  2013     1     1 JFK    B6      N804JB \n5  2013     1     1 LGA    DL      N668DN \n6  2013     1     1 EWR    UA      N39463 \n```\n\n\n:::\n\n```{.r .cell-code}\nhead(planes2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  tailnum  year model     seats\n  <chr>   <int> <chr>     <int>\n1 N10156   2004 EMB-145XR    55\n2 N102UW   1998 A320-214    182\n3 N103US   1999 A320-214    182\n4 N104UW   1999 A320-214    182\n5 N10575   2002 EMB-145LR    55\n6 N105UW   1999 A320-214    182\n```\n\n\n:::\n:::\n\n\n\n\n\n## Left joins\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |>\n  left_join(planes2, by = \"tailnum\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 9\n   year.x month   day origin carrier tailnum year.y model       seats\n    <int> <int> <int> <chr>  <chr>   <chr>    <int> <chr>       <int>\n 1   2013     1     1 EWR    UA      N14228    1999 737-824       149\n 2   2013     1     1 LGA    UA      N24211    1998 737-824       149\n 3   2013     1     1 JFK    AA      N619AA    1990 757-223       178\n 4   2013     1     1 JFK    B6      N804JB    2012 A320-232      200\n 5   2013     1     1 LGA    DL      N668DN    1991 757-232       178\n 6   2013     1     1 EWR    UA      N39463    2012 737-924ER     191\n 7   2013     1     1 EWR    B6      N516JB    2000 A320-232      200\n 8   2013     1     1 LGA    EV      N829AS    1998 CL-600-2B19    55\n 9   2013     1     1 JFK    B6      N593JB    2004 A320-232      200\n10   2013     1     1 LGA    AA      N3ALAA      NA <NA>           NA\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Left joins\n\n::: {.callout-warning appearance=\"simple\"}\nSelect columns used to join with argument `by`.\n\nOtherwise, it uses all shared columns, which may be wrong.\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |>\n  left_join(planes2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 8\n    year month   day origin carrier tailnum model seats\n   <int> <int> <int> <chr>  <chr>   <chr>   <chr> <int>\n 1  2013     1     1 EWR    UA      N14228  <NA>     NA\n 2  2013     1     1 LGA    UA      N24211  <NA>     NA\n 3  2013     1     1 JFK    AA      N619AA  <NA>     NA\n 4  2013     1     1 JFK    B6      N804JB  <NA>     NA\n 5  2013     1     1 LGA    DL      N668DN  <NA>     NA\n 6  2013     1     1 EWR    UA      N39463  <NA>     NA\n 7  2013     1     1 EWR    B6      N516JB  <NA>     NA\n 8  2013     1     1 LGA    EV      N829AS  <NA>     NA\n 9  2013     1     1 JFK    B6      N593JB  <NA>     NA\n10  2013     1     1 LGA    AA      N3ALAA  <NA>     NA\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Right joins\n\n#### Keep only right observations\n\n![](../images/join-right.png){.absolute width=\"60%\" top=\"35%\" left=\"0%\"}\n\n::: {.fragment}\n![](../images/joins_right.gif){.absolute width=\"40%\" top=\"20%\" left=\"65%\"}\n:::\n\n\n## Right joins\n\n![](../images/join-right.png){.absolute width=\"30%\" top=\"-10%\" left=\"50%\"}\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    key val_x\n  <dbl> <chr>\n1     1 x1   \n2     2 x2   \n3     3 x3   \n```\n\n\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    key val_y\n  <dbl> <chr>\n1     1 y1   \n2     2 y2   \n3     4 y3   \n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nright_join(x, y, by = \"key\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n    key val_x val_y\n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n3     4 <NA>  y3   \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Full joins\n\n#### Keep all observations\n\n![](../images/join-full.png){.absolute width=\"60%\" top=\"35%\" left=\"0%\"}\n\n::: {.fragment}\n![](../images/joins_full.gif){.absolute width=\"40%\" top=\"20%\" left=\"65%\"}\n:::\n\n\n## Full joins\n\n![](../images/join-full.png){.absolute width=\"30%\" top=\"-10%\" left=\"50%\"}\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    key val_x\n  <dbl> <chr>\n1     1 x1   \n2     2 x2   \n3     3 x3   \n```\n\n\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    key val_y\n  <dbl> <chr>\n1     1 y1   \n2     2 y2   \n3     4 y3   \n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_join(x, y, by = \"key\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n    key val_x val_y\n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    <NA> \n4     4 <NA>  y3   \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Different column names\n\nWhat if datasets have different column names for the same key?\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(flights2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 336,776\nColumns: 6\n$ year    <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 20…\n$ month   <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ day     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ origin  <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\", \"JFK\",…\n$ carrier <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"AA\", \"B…\n$ tailnum <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N39463\", \"N…\n```\n\n\n:::\n\n```{.r .cell-code}\nairports2 <- select(airports, faa, name)\nglimpse(airports2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,458\nColumns: 2\n$ faa  <chr> \"04G\", \"06A\", \"06C\", \"06N\", \"09J\", \"0A9\", \"0G6\", \"0G7\", \"0P2\", \"0…\n$ name <chr> \"Lansdowne Airport\", \"Moton Field Municipal Airport\", \"Schaumburg…\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Different column names\n\n`join_by()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(flights2, airports2, by = join_by(origin == faa))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 7\n    year month   day origin carrier tailnum name               \n   <int> <int> <int> <chr>  <chr>   <chr>   <chr>              \n 1  2013     1     1 EWR    UA      N14228  Newark Liberty Intl\n 2  2013     1     1 LGA    UA      N24211  La Guardia         \n 3  2013     1     1 JFK    AA      N619AA  John F Kennedy Intl\n 4  2013     1     1 JFK    B6      N804JB  John F Kennedy Intl\n 5  2013     1     1 LGA    DL      N668DN  La Guardia         \n 6  2013     1     1 EWR    UA      N39463  Newark Liberty Intl\n 7  2013     1     1 EWR    B6      N516JB  Newark Liberty Intl\n 8  2013     1     1 LGA    EV      N829AS  La Guardia         \n 9  2013     1     1 JFK    B6      N593JB  John F Kennedy Intl\n10  2013     1     1 LGA    AA      N3ALAA  La Guardia         \n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Solving the problem\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nnrows <- 12\nset.seed(20250228)\ndata1 <- tibble(id = rep(1:4, each = 3), \n                cond = rep(1:3, times = 4), \n                resp = round(runif(nrows), 3))\ndata2 <- tibble(id = 1:6, \n                age = sample(19:75, 6, replace = TRUE))\n```\n:::\n\n\n\n\n\n## Solving the problem\n\nWhat code combines `data1` and `data2` into `data3`?\n\n:::: {.columns}\n\n::: {.column width=\"31%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 52%'}\n# A tibble: 12 × 3\n      id  cond  resp\n   <int> <int> <dbl>\n 1     1     1 0.092\n 2     1     2 0.878\n 3     1     3 0.449\n 4     2     1 0.911\n 5     2     2 0.33 \n 6     2     3 0.549\n 7     3     1 0.797\n 8     3     2 0.482\n 9     3     3 0.893\n10     4     1 0.638\n11     4     2 0.316\n12     4     3 0.614\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"28%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 52%'}\n# A tibble: 6 × 2\n     id   age\n  <int> <int>\n1     1    41\n2     2    26\n3     3    29\n4     4    46\n5     5    42\n6     6    41\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 52%'}\n# A tibble: 12 × 4\n      id   age  cond  resp\n   <int> <int> <int> <dbl>\n 1     1    41     1 0.092\n 2     1    41     2 0.878\n 3     1    41     3 0.449\n 4     2    26     1 0.911\n 5     2    26     2 0.33 \n 6     2    26     3 0.549\n 7     3    29     1 0.797\n 8     3    29     2 0.482\n 9     3    29     3 0.893\n10     4    46     1 0.638\n11     4    46     2 0.316\n12     4    46     3 0.614\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Let's code!\n\n[Merging columns](../code/17_mergingcolumns.html){target=\"_blank\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}