{
  "hash": "43974541d9635e023bfe24b994b7c51d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data structures\"\nauthor: \"Jeff Stevens\"\ndate: \"2023-02-06\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: true\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2023](https://jeffreyrstevens.quarto.pub/dpavir)\"\n    code-link: true\n---\n\n\n\n\n\n# Review\n\n## Mental model of data types\n\n![](../images/mentalmodel_datatypes.png){fig-align=\"center\"}\n\n\n# Vectors\n\n## Vectors\n\n:::: {.columns}  \n::: {.column width=\"45%\"}\n#### Actually, everything in R is a vector\n\n:::{.fragment}\n#### _vector_ = _atomic vector_\n\n* elements with a single dimension of the same data type\n:::\n:::\n\n::: {.column width=\"60%\"}\n:::\n::::\n\n![](../images/data-structures-overview.png){.absolute width=\"65%\" top=\"10%\" left=\"50%\"}\n\n<!-- --- -->\n\n<!-- ## Creating vectors -->\n\n<!-- ### Add elements -->\n\n<!-- :::: {.columns}   -->\n\n<!-- ::: {.column width=\"50%\"} -->\n<!-- ```{r} -->\n<!-- a <- 7 -->\n<!-- a[1] -->\n<!-- a[2] -->\n<!-- ``` -->\n<!-- ::: -->\n\n<!-- ::: {.column width=\"50%\"} -->\n<!-- ```{r} -->\n<!-- a[2] <- 3 -->\n<!-- a -->\n<!-- a[3] <- 8 -->\n<!-- a -->\n<!-- a[2] <- NA -->\n<!-- a -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- :::: -->\n\n---\n\n## Create vectors with `c()`\n\n### Numeric vectors\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(myvec1 <- c(1, 5, 3, 6))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 5 3 6\n```\n\n\n:::\n\n```{.r .cell-code}\n(myvec2 <- c(11, 14, 18, 12))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11 14 18 12\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc(myvec1, myvec2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  5  3  6 11 14 18 12\n```\n\n\n:::\n:::\n\n\n\n\n---\n\n## Create vectors with `c()`\n\n### Character vectors\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(myvec3 <- c(\"a\", \"b\", \"c\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\" \"b\" \"c\"\n```\n\n\n:::\n:::\n\n\n\n\n---\n\n## Create vectors with `c()`\n\n:::{.callout-tip}\n## Strain your brain\n\nWhat do you think will happen if you combine `myvec2` and `myvec3`?\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyvec2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11 14 18 12\n```\n\n\n:::\n\n```{.r .cell-code}\nmyvec3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\" \"b\" \"c\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc(myvec2, myvec3)\n```\n:::\n\n\n\n\n:::{.fragment}\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"11\" \"14\" \"18\" \"12\" \"a\"  \"b\"  \"c\" \n```\n\n\n:::\n:::\n\n\n\n\n#### Numeric vector `myvec2` converts to character vector to combine with `myvec3`\n:::\n\n---\n\n## Create sequences with `seq()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 0, to = 20, by = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  0  5 10 15 20\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(from = 20, to = 0, by = -5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20 15 10  5  0\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(0, 1, 0.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0 0.2 0.4 0.6 0.8 1.0\n```\n\n\n:::\n:::\n\n\n\n\n---\n\n## Create sequences with `:`\n\n### Sequences with increments of 1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n4:9\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 5 6 7 8 9\n```\n\n\n:::\n\n```{.r .cell-code}\n9:4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9 8 7 6 5 4\n```\n\n\n:::\n:::\n\n\n\n\n:::{.fragment}\n:::{.callout-tip}\n## Try it!\n\nMake a sequence from 0 to 100 in steps of 10.\n:::\n:::\n\n---\n\n## Create repetitions with `rep()`\n\n#### Repeat single numbers\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(0, times = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0 0 0 0 0 0 0 0 0 0\n```\n\n\n:::\n:::\n\n\n\n\n---\n\n## Create repetitions with `rep()`\n\n#### Repeat vectors\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(myvec3, times = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\" \"b\" \"c\" \"a\" \"b\" \"c\" \"a\" \"b\" \"c\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrep(c(\"d\", \"e\", \"f\"), times = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"d\" \"e\" \"f\" \"d\" \"e\" \"f\" \"d\" \"e\" \"f\"\n```\n\n\n:::\n:::\n\n\n\n\n---\n\n## Create repetitions with `rep()`\n\n#### Repeat sequences\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(1:4, times = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 2 3 4 1 2 3 4 1 2 3 4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(1:4, each = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 1 1 2 2 2 3 3 3 4 4 4\n```\n\n\n:::\n:::\n\n\n\n\n:::{.fragment}\n\n:::{.callout-tip}\n## Try it!\n\nCreate a repetition of \"yes\" and \"no\" with 10 instance of each, alternating between the two. Then make one with 10 \"yes\" and then 10 \"no\".\n:::\n\n:::\n\n\n---\n\n## Working with vectors\n\n### Find vector length with `length()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyvec3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\" \"b\" \"c\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(myvec3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n:::{.fragment}\n:::{.callout-tip}\n## Try it!\n\nHow long is the combined vector of `myvec1` and `myvec2`?\n:::\n\n:::\n\n\n\n---\n\n## Checking `typeof()` and `str()`\n\n:::: {.columns}  \n::: {.column width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyvec2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11 14 18 12\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(myvec2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(myvec2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num [1:4] 11 14 18 12\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyvec3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\" \"b\" \"c\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(myvec3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(myvec3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n chr [1:3] \"a\" \"b\" \"c\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n---\n\n## Index with `[]`\n\n#### Tracks the content of a specific element (starting with 1)\n\n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyvec2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11 14 18 12\n```\n\n\n:::\n\n```{.r .cell-code}\nmyvec2[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14\n```\n\n\n:::\n:::\n\n\n\n:::\n:::{.fragment}\n#### Allows subsetting\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyvec2[2:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14 18 12\n```\n\n\n:::\n\n```{.r .cell-code}\nmyvec2[c(4, 1, 3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12 11 18\n```\n\n\n:::\n:::\n\n\n\n:::\n:::{.fragment}\n#### Allows reassignment\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyvec2[2] <- NA\nmyvec2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11 NA 18 12\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n\n\n# Lists, data frames, and tibbles\n\n## Lists\n\n#### Recursive vectors (vectors of vectors) potentially with different data types\n\n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(mylist <- list(a = 1:4, b = c(4, 3, 8, 5), c = LETTERS[10:15], d = c(\"yes\", \"yes\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$a\n[1] 1 2 3 4\n\n$b\n[1] 4 3 8 5\n\n$c\n[1] \"J\" \"K\" \"L\" \"M\" \"N\" \"O\"\n\n$d\n[1] \"yes\" \"yes\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n---\n\n## Working with lists\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(mylist)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(mylist$b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(mylist)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 4\n $ a: int [1:4] 1 2 3 4\n $ b: num [1:4] 4 3 8 5\n $ c: chr [1:6] \"J\" \"K\" \"L\" \"M\" ...\n $ d: chr [1:2] \"yes\" \"yes\"\n```\n\n\n:::\n:::\n\n\n\n\n## Data frames\n\n#### List of named vectors of the same length (rectangular)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydf <- data.frame(\n  datetime = as.Date(c(\"2021-04-21 11:56:12\", \"2021-04-21 14:57:44\", \"2021-04-22 03:09:56\", \"2021-04-22 12:39:22\")),\n  session_complete = as.logical(c(\"TRUE\", \"TRUE\", \"TRUE\", \"FALSE\")),\n  condition = as.factor(c(\"control\", \"control\", \"experimental\", \"experimental\")),\n  mean_response = c(17.53, 24.45, 19.82, NA),\n  age = c(19, 20, 19, NA),\n  comments = c(\"none\", \"Great study\", \"toooo long\", NA)\n  )\n```\n:::\n\n\n\n\n\n## Data frames\n\n#### List of named vectors of the same length (rectangular)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    datetime session_complete    condition mean_response age    comments\n1 2021-04-21             TRUE      control         17.53  19        none\n2 2021-04-21             TRUE      control         24.45  20 Great study\n3 2021-04-22             TRUE experimental         19.82  19  toooo long\n4 2021-04-22            FALSE experimental            NA  NA        <NA>\n```\n\n\n:::\n:::\n\n\n\n\n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(mydf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(mydf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t4 obs. of  6 variables:\n $ datetime        : Date, format: \"2021-04-21\" \"2021-04-21\" ...\n $ session_complete: logi  TRUE TRUE TRUE FALSE\n $ condition       : Factor w/ 2 levels \"control\",\"experimental\": 1 1 2 2\n $ mean_response   : num  17.5 24.4 19.8 NA\n $ age             : num  19 20 19 NA\n $ comments        : chr  \"none\" \"Great study\" \"toooo long\" NA\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n---\n\n## Creating data frames\n\n:::: {.columns}  \n\n::: {.column width=\"50%\"}\n\n**Create new vectors**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(mydf1 <- data.frame(subject = 1:3, \n                     response = 8:6))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  subject response\n1       1        8\n2       2        7\n3       3        6\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n:::{.fragment}\n**Combine existing vectors**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar1 <- c(1:6)\nvar2 <- c(6:1)\nvar3 <- c(21:26)\nmydf2 <- data.frame(var1, var2, \n                    resp = var3)\nmydf2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  var1 var2 resp\n1    1    6   21\n2    2    5   22\n3    3    4   23\n4    4    3   24\n5    5    2   25\n6    6    1   26\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n::::\n\n\n---\n\n## Index with `[row, column]`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydf1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  subject response\n1       1        8\n2       2        7\n3       3        6\n```\n\n\n:::\n\n```{.r .cell-code}\nmydf1[2, 1] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\nmydf1[2, 1] <- 6\nmydf1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  subject response\n1       1        8\n2       6        7\n3       3        6\n```\n\n\n:::\n:::\n\n\n\n\n\n---\n\n## Index with `[row, column]`\n\n:::: {.columns}  \n::: {.column width=\"50%\"}\n\n**Extract whole rows/columns**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydf1[2, ] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  subject response\n2       6        7\n```\n\n\n:::\n\n```{.r .cell-code}\nmydf1[, 2] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 7 6\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n:::{.fragment}\n**Extract subsets**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydf1[2:3, 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 6\n```\n\n\n:::\n\n```{.r .cell-code}\nmydf1[2:3, 1:2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  subject response\n2       6        7\n3       3        6\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n::::\n\n---\n\n## Working with data frames\n\n### But extract columns by name with `$`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydf1$response \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 7 6\n```\n\n\n:::\n\n```{.r .cell-code}\nmydf1$response[2] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n\n```{.r .cell-code}\nmydf1$response[2:3] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 6\n```\n\n\n:::\n:::\n\n\n\n\n:::{.fragment}\n:::{.callout-tip}\n## Strain your brain\n\nWhy should you use column names rather than number?\n:::\n:::\n\n---\n\n## Working with data frames\n\n### View first rows with `head()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n\n\n:::\n:::\n\n\n\n\n:::{.fragment}\n:::{.callout-note}\n<!-- When you get a chance, check out tidyverse's `dplyr::glimpse()` and compare/contrast to `head()`. -->\nAdd the argument `n = 10` to `head(mtcars)`. What does this do?\n:::\n:::\n\n---\n\n## Working with data frames\n\n### View dimensions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 32 11\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 32\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11\n```\n\n\n:::\n:::\n\n\n\n\n---\n\n## Tibbles\n\n### Tibbles are just tidyverse versions of data frames\n\n:::: {.columns}  \n::: {.column width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydf2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  var1 var2 resp\n1    1    6   21\n2    2    5   22\n3    3    4   23\n4    4    3   24\n5    5    2   25\n6    6    1   26\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(mytibble <- tibble::tibble(mydf2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n   var1  var2  resp\n  <int> <int> <int>\n1     1     6    21\n2     2     5    22\n3     3     4    23\n4     4     3    24\n5     5     2    25\n6     6     1    26\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n---\n\n\n## Mental model of data in R\n\n![](../images/data-structures-overview.png){fig-align=\"center\"}\n\n\n## Let's code!\n\n[Data structures coding](../code/07_datastructures.html){target=\"_blank\"} [[Rmd](../code/07_datastructures.Rmd){target=\"_blank\"}]\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}