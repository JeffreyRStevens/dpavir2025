{
  "hash": "0c6159d7f9c67e27c678945b5e52757c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Coding basics\"\nauthor: \"Jeff Stevens\"\ndate: \"2025-01-27\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: auto\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-link: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2025](https://jeffreyrstevens.quarto.pub/dpavir2025)\"\n    logo: \"../logo/dpavir_hex.png\"\n---\n\n\n\n\n## Review: Mental model of RStudio\n\n![](../images/mentalmodel_rstudio.png){fig-align=\"center\"}\n\n# Coding elements\n\n## Coding actions\n\n::: {.incremental}\n* To _evaluate_ means to send code to the R interpreter to process\n  - `2 + 2` is evaluated by submitting the numbers 2 and 2 to the addition function\n* To _return_ means to output the results\n  - After `2 + 2` is evaluated, the number `4` is returned\n* To _print_ means to return the output to the console\n  - Output can be returned without being printed\n:::\n\n## Comments\n\n* Everything on a line after a hashtag `#` is a _comment_\n\n* Comments are not evaluated\n\n* Comments can be used as notes for the reader and to prevent code from being evaluated\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we're about to add 2 and 2\n2 + 2 # looky there, we added 2 and 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\n# 2 + 2  the hashtag was before the code here, so the code was not evaluated\n```\n:::\n\n\n\n\n## Functions\n\n### Perform computations and return output\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.Date()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-01-26\"\n```\n\n\n:::\n:::\n\n\n\n\n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/home/jstevens/github/dpavir2025/slides\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Arguments\n\n### Information needed by functions\n\n:::{.fragment}\nThey include argument _names_ and _values_\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread.csv(file = \"mypath/myfile.csv\")\ndplyr::filter(.data = mydata, mycolumn == \"Sophomore\")\nplot(x = x, y = y)\nwrite.csv(x = mydata, file = \"mypath/myfile.csv\")\n```\n:::\n\n\n\n:::\n\n:::{.fragment}\n:::{.callout-note}\nIf you give argument values in correct order, you don't need to include argument names. But it's usually a good idea anyway.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread.csv(\"mypath/myfile.csv\")\ndplyr::filter(mydata, mycolumn == \"Sophomore\")\nplot(x, y)\nwrite.csv(mydata, \"mypath/myfile.csv\")\n```\n:::\n\n\n\n:::\n:::\n\n\n## Objects\n\n### Variables created to store information\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- read.csv(file = \"mypath/myfile.csv\")\ntrimmed_data <- dplyr::filter(.data = mydata, mycolumn == \"Sophomore\")\nmyplot <- plot(x = x, y = y)\n```\n:::\n\n\n\n\n\n## Assignment\n\n### Assign a value or set of values to an object\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the best way\nx <- 9\n# avoid this\ny = 10\n# definitely don't do this\n11 -> z\n```\n:::\n\n\n\n\n:::{.fragment}\n:::{.callout-note}\nYou can assign multiple objects at the same time:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# chain assignments of the same value to different objects\na <- b <- c <- 0\n```\n:::\n\n\n\n:::\n:::\n\n\n## Assignment\n\n### Viewing object contents while assigning\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 9  # assign value 9 to object x\n```\n:::\n\n\n\n\n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx  # print contents of object x to console\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(x <- 9)  # add parentheses to print to console when assigning\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## When things go wrong\n\n\n### Errors\n\nWhen a function hits a problem that stops it from completing\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean()\n```\n:::\n\n\n\n```\nError in mean.default() : argument \"x\" is missing, with no default\n```\n\n\n## When things go wrong\n\n\n### Warnings\n\nWhen a function completes but something strang happens, so it alerts you\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(sqrt(-1))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in sqrt(-1): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NaN\n```\n\n\n:::\n:::\n\n\n\n\n\n## When things go wrong\n\n\n### Messages\n\nWhen a function just wants to let you know something\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Mental model of coding\n\n![](../images/mentalmodel_coding.png){fig-align=\"center\"}\n\n\n# Writing good code\n\n## Who are we coding for?\n\n:::{.fragment}\n![](../images/coding_audience.png){.absolute width=\"50%\" top=\"10%\" left=\"50%\"}\n:::\n\n:::{.incremental}\n1. Computer\n\n2. Ourselves\n\n3. Others\n:::\n\n\n## How to write good code\n\n### The Fundamental Theorem of Readability\n\n::: {.fragment}\n> Code should be written to minimize the time it would take for someone else to understand it.\n\n- From: [_The Art of Readable Code_](https://learning.oreilly.com/library/view/the-art-of/9781449318482/) by Boswell et al. 2011\n:::\n\n## Principles of writing good code\n\n::: {.incremental}\n* Write less code\n* Avoid repetition\n* Use clear syntax\n* Use good names\n* Use comments\n:::\n\n## Coding style: Spacing  {background-image=\"../images/drake_meme.png\" background-size=\"70%\" background-position=\"71% 75%\"}\n\n:::{.drake-upper}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean1<-mean (x[1,4:10],na.rm=TRUE)+0.5\n```\n:::\n\n\n\n:::\n:::{.drake-lower}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean1 <- mean(x[1, 4:10], na.rm = TRUE) + 0.5\n```\n:::\n\n\n\n:::\n\n## Coding style: Clarity {background-image=\"../images/drake_meme.png\" background-size=\"70%\" background-position=\"71% 75%\"}\n\n:::{.drake-upper}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(x, T)\n```\n:::\n\n\n\n:::\n:::{.drake-lower}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(x, na.rm = TRUE)\n```\n:::\n\n\n\n:::\n\n\n## Coding style: Indenting {background-image=\"../images/drake_meme.png\" background-size=\"70%\" background-position=\"71% 75%\"}\n\n\n:::{.drake-upper}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:10) {\nfor(j in 1:5) {\nprint(x[i, j])\n}\n}\n```\n:::\n\n\n\n:::\n:::{.drake-lower}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:10) {\n  for(j in 1:5) {\n    print(x[i, j])\n  }\n}\n```\n:::\n\n\n\n:::\n\n\n\n## Coding style: Line breaks {background-image=\"../images/drake_meme.png\" background-size=\"70%\" background-position=\"71% 75%\"}\n\n\n:::{.drake-upper}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (x > 5) {print(\"Too big!\")}\n```\n:::\n\n\n\n:::\n:::{.drake-lower}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (x > 5) {\n  print(\"Too big!\")\n}\n```\n:::\n\n\n\n:::\n\n## Coding style\n\n[The tidyverse style guide](https://style.tidyverse.org/)\n\n* Use `<-` as assignment operator\n\n* Use space between operators (`*`, `=`, `==`) and after commas\n\n* Do not use space between function and parentheses <!--(except for `if ()`)-->\n\n* Use indents to separate nested components (<kbd>Ctrl</kbd>+<kbd>I</kbd>)\n\n* Write out argument names\n\n* Write out `TRUE` and `FALSE`\n\n* Use `\"`, not `'`, for quoting text unless it already contains double quotes\n\n\n# Naming things\n\n## Naming things\n\n### Core principles for naming objects, data columns, files, folders\n\n* Be nice to machines\n\n* Be nice to humans\n\n* Make sorting and searching easy\n\n:::{.aside}\nSources: [Naming things: Jenny Bryan](https://speakerdeck.com/jennybc/how-to-name-files), [Project structure: Danille Navarro](https://slides.djnavarro.net/project-structure)\n:::\n\n\n## Be nice to machines\n\n:::{.incremental}\n* avoid spaces, special characters, and accented characters\n  - `my_file.R` not `My filé$.R`\n* avoid case sensitivity\n  - `foo.R` and `Foo.R`\n* use consistent, searchable text chunks\n  - `expt1_cond2_subj114.csv`\n* can't start with a number\n:::\n\n\n##  Be nice to humans\n\n:::{.fragment}\n* be descriptive (not `x`) but not too descriptive (`this_is_my_object`)\n:::\n:::{.fragment}\n* separate words (preferably using snake_case)\n![](../images/coding_cases_allisonhorst.png){.absolute width=\"48%\" left=\"78%\" top=\"0%\"}\n:::\n:::{.fragment}\n* avoid capital letters (case matters: `a ≠ A`)\n:::\n:::{.fragment}\n* use human readable names that contain **content** (slugs)\n  - `prelim_analysis_expt1.R`\n:::\n\n\n##  Make sorting and searching easy\n\n:::{.incremental}\n* use ISO 8601 standard for date `YYYY-MM-DD`\n* no, really---always use ISO 8601 standard for date!!\n* use ISO 8601 dates before or after **slugs**\n  - `2021-04-06_prelim_analysis_expt1.Rmd`\n  - `prelim_analysis_expt1_2021-04-06.Rmd`\n* use padded numbers as prefixes\n  - `01_preface.Rmd`\n  - `02_introduction.Rmd`\n:::\n![](../images/perfect_date.jpeg){.absolute width=\"30%\" left=\"90%\" top=\"0%\"}\n![](../images/dates_meme.jpeg){.absolute width=\"30%\" left=\"90%\" top=\"50%\"}\n\n\n## Mental model of coding\n\n![](../images/mentalmodel_coding.png){fig-align=\"center\"}\n\n\n## Let's code!\n\n[Coding basics](../code/03_coding.html){target=\"_blank\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}