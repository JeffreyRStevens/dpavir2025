{
  "hash": "652440a015ec34dacaebd5400d74461b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Summarizing rows\"\nauthor: \"Jeff Stevens\"\ndate: \"2023-02-22\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: true\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2023](https://jeffreyrstevens.quarto.pub/dpavir)\"\n    code-link: true\n---\n\n\n\n\n\n# Introduction\n\n\n## The problem\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nWhat's different between these data sets? What needs to happen to create `data2` from `data1`?\n\n::::{.columns}\n:::{.column width=\"50%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   cond id       date   response\n1     1  1 2022-01-05 0.35501498\n2     1  2 2022-02-23 0.91386827\n3     3  3 2022-02-18 0.74452769\n4     3  4 2022-01-16 0.84077105\n5     1  5 2022-01-12 0.99075382\n6     3  6 2022-01-30 0.08216065\n7     3  7 2022-02-22 0.30568798\n8     2  8 2022-01-26 0.70747311\n9     3  9 2022-02-15 0.46244477\n10    2 10 2022-01-06 0.07609248\n11    2 11 2022-01-13 0.17529139\n12    2 12 2022-01-19 0.26986279\n```\n\n\n:::\n:::\n\n\n\n:::\n:::{.column width=\"50%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n   cond cond_n cond_mean cond_sd\n  <int>  <int>     <dbl>   <dbl>\n1     1      3     0.753   0.347\n2     2      4     0.307   0.278\n3     3      5     0.487   0.312\n```\n\n\n:::\n:::\n\n\n\n:::\n::::\n\n\n## Data wrangling\n\n![](../images/dplyr_summary.png){fig-align=center width=80%}\n\n\n## Set-up\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(nycflights13)\n(flights2 <- select(flights, year:dep_delay, carrier))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 7\n    year month   day dep_time sched_dep_time dep_delay carrier\n   <int> <int> <int>    <int>          <int>     <dbl> <chr>  \n 1  2013     1     1      517            515         2 UA     \n 2  2013     1     1      533            529         4 UA     \n 3  2013     1     1      542            540         2 AA     \n 4  2013     1     1      544            545        -1 B6     \n 5  2013     1     1      554            600        -6 DL     \n 6  2013     1     1      554            558        -4 UA     \n 7  2013     1     1      555            600        -5 B6     \n 8  2013     1     1      557            600        -3 EV     \n 9  2013     1     1      557            600        -3 B6     \n10  2013     1     1      558            600        -2 AA     \n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n# Summarizing data\n\n\n## `count()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  count(carrier)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 16 × 2\n   carrier     n\n   <chr>   <int>\n 1 9E      18460\n 2 AA      32729\n 3 AS        714\n 4 B6      54635\n 5 DL      48110\n 6 EV      54173\n 7 F9        685\n 8 FL       3260\n 9 HA        342\n10 MQ      26397\n11 OO         32\n12 UA      58665\n13 US      20536\n14 VX       5162\n15 WN      12275\n16 YV        601\n```\n\n\n:::\n:::\n\n\n\n\n\n## `count()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  count(carrier, month)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 185 × 3\n   carrier month     n\n   <chr>   <int> <int>\n 1 9E          1  1573\n 2 9E          2  1459\n 3 9E          3  1627\n 4 9E          4  1511\n 5 9E          5  1462\n 6 9E          6  1437\n 7 9E          7  1494\n 8 9E          8  1456\n 9 9E          9  1540\n10 9E         10  1673\n# ℹ 175 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## `summarise()`\n\n![](../images/dplyr_summarise.png){fig-align=\"center\" height=45%}\n\n\n---\n\n## `summarise()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  summarise(n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n   `n()`\n   <int>\n1 336776\n```\n\n\n:::\n:::\n\n\n\n\n\n## Summary functions\n\n* `n()`\n* `mean()`\n* `median()`\n* `min()`\n* `max()`\n* `sd()`\n\n\n## `summarise()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  summarise(mean_dep_delay = mean(dep_delay), \n            sd_dep_delay = sd(dep_delay),\n            n_dep_delay = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  mean_dep_delay sd_dep_delay n_dep_delay\n           <dbl>        <dbl>       <int>\n1             NA           NA      336776\n```\n\n\n:::\n:::\n\n\n\n\nWhy does this return `NA`?\n\n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  summarise(mean_dep_delay = mean(dep_delay, na.rm = TRUE),\n          sd_dep_delay = sd(dep_delay, na.rm = TRUE),\n          n_dep_delay = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  mean_dep_delay sd_dep_delay n_dep_delay\n           <dbl>        <dbl>       <int>\n1           12.6         40.2      336776\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n---\n\n## Summarizing multiple columns\n\nHow do we apply a function across multiple columns?\n\n:::{.fragment}\n`summarise()` `+` `across()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  summarise(across(contains(\"_time\"), mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  dep_time sched_dep_time\n     <dbl>          <dbl>\n1       NA          1344.\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  summarise(across(contains(\"_time\"), ~ mean(.x, na.rm = TRUE)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  dep_time sched_dep_time\n     <dbl>          <dbl>\n1    1349.          1344.\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n---\n\n## Summarizing multiple columns\n\n`summarise()` `+` `across()`\n\nMultiple functions (add `list()`)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  summarise(across(contains(\"_time\"), # for all columns containing \"_time\"\n                   list(mean = ~ mean(.x, na.rm = TRUE), # calculate the mean\n                        sd = ~ sd(.x, na.rm = TRUE)))) # and standard deviation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  dep_time_mean dep_time_sd sched_dep_time_mean sched_dep_time_sd\n          <dbl>       <dbl>               <dbl>             <dbl>\n1         1349.        488.               1344.              467.\n```\n\n\n:::\n:::\n\n\n\n\n\n# Grouping data\n\n\n## `group_by()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  group_by(month)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 7\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay carrier\n   <int> <int> <int>    <int>          <int>     <dbl> <chr>  \n 1  2013     1     1      517            515         2 UA     \n 2  2013     1     1      533            529         4 UA     \n 3  2013     1     1      542            540         2 AA     \n 4  2013     1     1      544            545        -1 B6     \n 5  2013     1     1      554            600        -6 DL     \n 6  2013     1     1      554            558        -4 UA     \n 7  2013     1     1      555            600        -5 B6     \n 8  2013     1     1      557            600        -3 EV     \n 9  2013     1     1      557            600        -3 B6     \n10  2013     1     1      558            600        -2 AA     \n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n---\n\n## `group_by()`\n\nRemove groups with `ungroup()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  group_by(month) |> \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 7\n    year month   day dep_time sched_dep_time dep_delay carrier\n   <int> <int> <int>    <int>          <int>     <dbl> <chr>  \n 1  2013     1     1      517            515         2 UA     \n 2  2013     1     1      533            529         4 UA     \n 3  2013     1     1      542            540         2 AA     \n 4  2013     1     1      544            545        -1 B6     \n 5  2013     1     1      554            600        -6 DL     \n 6  2013     1     1      554            558        -4 UA     \n 7  2013     1     1      555            600        -5 B6     \n 8  2013     1     1      557            600        -3 EV     \n 9  2013     1     1      557            600        -3 B6     \n10  2013     1     1      558            600        -2 AA     \n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n---\n\n## Summarizing groups of data\n\n`group_by()` `+` `summarise()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  group_by(carrier) |> \n  summarise(carrier_n = n(),\n            mean_carrier_delay = mean(dep_delay, na.rm = TRUE), \n            sd_carrier_delay = sd(dep_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 16 × 4\n   carrier carrier_n mean_carrier_delay sd_carrier_delay\n   <chr>       <int>              <dbl>            <dbl>\n 1 9E          18460              16.7              45.9\n 2 AA          32729               8.59             37.4\n 3 AS            714               5.80             31.4\n 4 B6          54635              13.0              38.5\n 5 DL          48110               9.26             39.7\n 6 EV          54173              20.0              46.6\n 7 F9            685              20.2              58.4\n 8 FL           3260              18.7              52.7\n 9 HA            342               4.90             74.1\n10 MQ          26397              10.6              39.2\n11 OO             32              12.6              43.1\n12 UA          58665              12.1              35.7\n13 US          20536               3.78             28.1\n14 VX           5162              12.9              44.8\n15 WN          12275              17.7              43.3\n16 YV            601              19.0              49.2\n```\n\n\n:::\n:::\n\n\n\n\n\n---\n\n## Summarizing multiple groups\n\n`group_by()` `+` `summarise()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  group_by(carrier, month) |> \n  summarise(carrier_n = n(),\n            mean_carrier_delay = mean(dep_delay, na.rm = TRUE), \n            sd_carrier_delay = sd(dep_delay, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 185 × 5\n# Groups:   carrier [16]\n   carrier month carrier_n mean_carrier_delay sd_carrier_delay\n   <chr>   <int>     <int>              <dbl>            <dbl>\n 1 9E          1      1573              16.9              47.6\n 2 9E          2      1459              16.5              50.5\n 3 9E          3      1627              13.4              43.0\n 4 9E          4      1511              13.6              43.8\n 5 9E          5      1462              22.7              50.6\n 6 9E          6      1437              29.0              55.4\n 7 9E          7      1494              31.4              60.4\n 8 9E          8      1456              17.3              42.8\n 9 9E          9      1540               7.75             34.3\n10 9E         10      1673               9.33             33.8\n# ℹ 175 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n---\n\n## Summarizing groups for multiple columns\n\n`group_by()` `+` `summarise()` `+` `across()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  group_by(carrier) |> # separately for each carrier\n  summarise(across(contains(\"_time\"), # for all columns containing \"_time\"\n                   list(mean = ~ mean(.x, na.rm = TRUE), # calculate the mean\n                        sd = ~ sd(.x, na.rm = TRUE)))) # and standard deviation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 16 × 5\n   carrier dep_time_mean dep_time_sd sched_dep_time_mean sched_dep_time_sd\n   <chr>           <dbl>       <dbl>               <dbl>             <dbl>\n 1 9E              1487.       450.                1472.             430. \n 2 AA              1297.       458.                1290.             442. \n 3 AS              1295.       566.                1285.             552. \n 4 B6              1381.       555.                1397.             525. \n 5 DL              1351.       463.                1346.             445. \n 6 EV              1369.       497.                1354.             471. \n 7 F9              1438.       405.                1408.             376. \n 8 FL              1387.       480.                1372.             446. \n 9 HA               949.        53.6                974.              41.7\n10 MQ              1393.       442.                1387.             428. \n11 OO              1725.       163.                1731.             162. \n12 UA              1327.       484.                1313.             467. \n13 US              1231.       456.                1246.             447. \n14 VX              1280.       460.                1265.             435. \n15 WN              1281.       468.                1260.             440. \n16 YV              1601.       245.                1575.             223. \n```\n\n\n:::\n:::\n\n\n\n\n\n---\n\n## Solving the problem\n\nWhat code turns `data1` into `data2`?\n\n::::{.columns}\n:::{.column width=\"50%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   cond id       date   response\n1     1  1 2022-01-05 0.35501498\n2     1  2 2022-02-23 0.91386827\n3     3  3 2022-02-18 0.74452769\n4     3  4 2022-01-16 0.84077105\n5     1  5 2022-01-12 0.99075382\n6     3  6 2022-01-30 0.08216065\n7     3  7 2022-02-22 0.30568798\n8     2  8 2022-01-26 0.70747311\n9     3  9 2022-02-15 0.46244477\n10    2 10 2022-01-06 0.07609248\n11    2 11 2022-01-13 0.17529139\n12    2 12 2022-01-19 0.26986279\n```\n\n\n:::\n:::\n\n\n\n:::\n:::{.column width=\"50%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n   cond cond_n cond_mean cond_sd\n  <int>  <int>     <dbl>   <dbl>\n1     1      3     0.753   0.347\n2     2      4     0.307   0.278\n3     3      5     0.487   0.312\n```\n\n\n:::\n:::\n\n\n\n:::\n::::\n\n\n# Slicing data\n\n\n## Slicing rows\n\n### What if you want to grab a subset of rows per group?\n\n`dplyr::slice_()` functions\n\n* `slice_head()` first row(s) from each group\n* `slice_tail()` last row(s) in each group\n* `slice_min()` row(s) with smallest value in column x\n* `slice_max()` row(s) with largest value in column x\n* `slice_sample()` random row(s)\n\n\n## Slicing rows\n\nLet's say we want the first flight for each carrier on 2022-02-22.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  filter(month == 2 & day == 22 & dep_time > 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 938 × 7\n    year month   day dep_time sched_dep_time dep_delay carrier\n   <int> <int> <int>    <int>          <int>     <dbl> <chr>  \n 1  2013     2    22      455            500        -5 US     \n 2  2013     2    22      512            515        -3 UA     \n 3  2013     2    22      530            530         0 UA     \n 4  2013     2    22      536            545        -9 B6     \n 5  2013     2    22      539            540        -1 AA     \n 6  2013     2    22      551            600        -9 B6     \n 7  2013     2    22      553            600        -7 DL     \n 8  2013     2    22      553            600        -7 EV     \n 9  2013     2    22      553            600        -7 B6     \n10  2013     2    22      553            600        -7 US     \n# ℹ 928 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Slicing rows\n\nLet's say we want the first flight for each carrier on 2022-02-22.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  filter(month == 2 & day == 22 & dep_time > 10) |> \n  group_by(carrier) |> \n  slice_min(dep_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 × 7\n# Groups:   carrier [15]\n    year month   day dep_time sched_dep_time dep_delay carrier\n   <int> <int> <int>    <int>          <int>     <dbl> <chr>  \n 1  2013     2    22      558            605        -7 9E     \n 2  2013     2    22      539            540        -1 AA     \n 3  2013     2    22      731            725         6 AS     \n 4  2013     2    22      536            545        -9 B6     \n 5  2013     2    22      553            600        -7 DL     \n 6  2013     2    22      553            600        -7 EV     \n 7  2013     2    22      827            830        -3 F9     \n 8  2013     2    22      602            600         2 FL     \n 9  2013     2    22      857            900        -3 HA     \n10  2013     2    22      553            600        -7 MQ     \n11  2013     2    22      512            515        -3 UA     \n12  2013     2    22      455            500        -5 US     \n13  2013     2    22      702            705        -3 VX     \n14  2013     2    22      601            600         1 WN     \n15  2013     2    22     1601           1606        -5 YV     \n```\n\n\n:::\n:::\n\n\n\n\n\n## Slicing rows\n\nWhat if we want the three most delayed flight for each carrier on 2022-02-22.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 |> \n  filter(month == 2 & day == 22 & dep_time > 10) |> \n  group_by(carrier) |> \n  slice_max(dep_delay, n = 3) |> \n  arrange(carrier, dep_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 43 × 7\n# Groups:   carrier [15]\n    year month   day dep_time sched_dep_time dep_delay carrier\n   <int> <int> <int>    <int>          <int>     <dbl> <chr>  \n 1  2013     2    22     1723           1540       103 9E     \n 2  2013     2    22     2301           1945       196 9E     \n 3  2013     2    22     2010           1550       260 9E     \n 4  2013     2    22     2134           2015        79 AA     \n 5  2013     2    22     2240           2045       115 AA     \n 6  2013     2    22     2000           1700       180 AA     \n 7  2013     2    22     1811           1815        -4 AS     \n 8  2013     2    22      731            725         6 AS     \n 9  2013     2    22     1955           1805       110 B6     \n10  2013     2    22     1829           1600       149 B6     \n# ℹ 33 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n# Putting it all together\n\n\n## {dplyr} verbs\n\n:::: {.columns}\n\n::: {.column width=\"33%\"}\n\n* `select()`\n* `rename()`\n* `relocate()`\n* `mutate()`\n* `if_else()`\n* `case_when()`\n* `rowwise()`\n* `across()`\n:::\n\n::: {.column width=\"33%\"}\n\n::: {.fragment fragment-index=1}\n* `filter()`\n* `if_any()`\n* `drop_na()`\n* `arrange()`\n* `desc()`\n:::\n:::\n\n::: {.column width=\"30%\"}\n\n:::{.fragment fragment-index=1}\n* `summarise()`\n* `count()`, `n()`\n* `group_by()`\n* `slice_()`\n:::\n:::\n\n::::\n\n## Solving the problem\n\nWhat code turns `data1` into `data3`?\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n::::{.columns}\n:::{.column width=\"50%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   cond id       date   response\n1     1  1 2022-01-05 0.35501498\n2     1  2 2022-02-23 0.91386827\n3     3  3 2022-02-18 0.74452769\n4     3  4 2022-01-16 0.84077105\n5     1  5 2022-01-12 0.99075382\n6     3  6 2022-01-30 0.08216065\n7     3  7 2022-02-22 0.30568798\n8     2  8 2022-01-26 0.70747311\n9     3  9 2022-02-15 0.46244477\n10    2 10 2022-01-06 0.07609248\n11    2 11 2022-01-13 0.17529139\n12    2 12 2022-01-19 0.26986279\n```\n\n\n:::\n:::\n\n\n\n:::\n:::{.column width=\"50%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  condition   earliest_date\n  <chr>       <date>       \n1 Condition 2 2022-01-06   \n2 Condition 3 2022-01-16   \n```\n\n\n:::\n:::\n\n\n\n:::\n::::\n\n## Let's code!\n\n[Summarizing rows](../code/14_summarizing.html){target=\"_blank\"} [[Rmd](../code/14_summarizing.Rmd){target=\"_blank\"}]\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}