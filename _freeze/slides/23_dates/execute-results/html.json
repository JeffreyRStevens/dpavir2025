{
  "hash": "65a1159fa9581bc64aba768672e8fa0c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Dates and times\"\nauthor: \"Jeff Stevens\"\ndate: \"2023-03-22\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: auto\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2023](https://jeffreyrstevens.quarto.pub/dpavir)\"\n    code-link: true\n---\n\n\n\n\n\n# Introduction\n\n\n## The problem\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nWhat's different between these data sets? \n\n:::: {.columns}\n\n::: {.column width=\"35%\"}\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   test_date  birth_date \n   <date>     <chr>      \n 1 2023-01-02 1997-07-14 \n 2 2023-01-02 1998-01-28 \n 3 2023-01-05 1967-07-23 \n 4 2023-01-05 Jan 9, 1960\n 5 2023-01-08 1950-11-09 \n 6 2023-01-14 2001-08-24 \n 7 2023-01-16 1979-09-23 \n 8 2023-01-23 1970-03-22 \n 9 2023-01-26 1957-04-21 \n10 2023-01-27 1989-03-07 \n11 2023-01-27 1983-11-03 \n12 2023-01-28 1989-01-31 \n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n::: {.column width=\"65%\"}\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 4\n  test_date  birth_date age_at_testing day_of_birth\n  <date>     <date>     <drtn>         <ord>       \n1 2023-01-05 1967-07-23 20255 days     Sunday      \n2 2023-01-05 1960-01-09 23007 days     Saturday    \n3 2023-01-08 1950-11-09 26358 days     Thursday    \n4 2023-01-16 1979-09-23 15821 days     Sunday      \n5 2023-01-23 1970-03-22 19300 days     Sunday      \n6 2023-01-26 1957-04-21 24021 days     Sunday      \n7 2023-01-27 1989-03-07 12379 days     Tuesday     \n8 2023-01-27 1983-11-03 14330 days     Thursday    \n9 2023-01-28 1989-01-31 12415 days     Tuesday     \n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n::::\n\n\n## Set-up\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n:::\n\n\n\n\n\n# Dates and times\n\n## Reminder\n\nDates and times are augmented doubles\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(x <- as.Date(\"2023-03-22\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-03-22\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\n::: {.callout-note}\nStandard (ISO-8601) way to represent dates and times is \n\nYYYY-MM-DD HH:MM:SS, so 2023-03-22 10:30:00\n:::\n:::\n\n\n## Dates and times with {lubridate}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n:::\n\n\n\n\n![](../images/lubridate_allisonhorst.png){fig-align=\"center\" width=\"58%\"}\n\n![](../images/lubridate_hex.png){.absolute width=\"15%\" top=\"0%\" left=\"90%\"}\n\n::: {.aside}\nCongratulations to [{lubridate}](https://lubridate.tidyverse.org) for joining {tidyverse} last week in version 2.0.0!\n:::\n\n\n## Current date/time\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.Date()  # base R\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-01-07\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntoday() # {lubridate}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-01-07\"\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.time()  # base R\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-01-07 14:39:32 CST\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnow()  # {lubridate}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-01-07 14:39:32 CST\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Creating dates/times\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.Date(\"2023-03-22\")  # base R\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-03-22\"\n```\n\n\n:::\n\n```{.r .cell-code}\nas_date(\"2023-03-22\") # {lubridate}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-03-22\"\n```\n\n\n:::\n\n```{.r .cell-code}\nymd(20230322) # {lubridate}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-03-22\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Convert dates to ISO-8601\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nymd(\"2017-01-31\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2017-01-31\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmdy(\"January 31st, 2017\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2017-01-31\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmdy(\"Jan 31 17\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2017-01-31\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndmy(\"31-Jan-2017\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2017-01-31\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Convert dates to ISO-8601\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(r_class_schedule <- tibble(meeting = 1:4, date = c(\"23 Jan 2023\", \"25 Jan 2023\", \"27 Jan 2023\", \"30 Jan 2023\"), topic = c(\"Course introduction\", \"Working in RStudio\", \"Coding basics\", \"Workflows\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  meeting date        topic              \n    <int> <chr>       <chr>              \n1       1 23 Jan 2023 Course introduction\n2       2 25 Jan 2023 Working in RStudio \n3       3 27 Jan 2023 Coding basics      \n4       4 30 Jan 2023 Workflows          \n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\nHow do we change the dates in a data frame?\n:::\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(r_class_schedule <- r_class_schedule |>\n   mutate(iso_date = dmy(date)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n  meeting date        topic               iso_date  \n    <int> <chr>       <chr>               <date>    \n1       1 23 Jan 2023 Course introduction 2023-01-23\n2       2 25 Jan 2023 Working in RStudio  2023-01-25\n3       3 27 Jan 2023 Coding basics       2023-01-27\n4       4 30 Jan 2023 Workflows           2023-01-30\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Convert multiple formats\n\nWhat if your date column has multiple formats?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(bad_dates <- c(\"Jan 1 2023\", \"2-Jan-2023\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Jan 1 2023\" \"2-Jan-2023\"\n```\n\n\n:::\n\n```{.r .cell-code}\nas_date(bad_dates)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: All formats failed to parse. No formats found.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA NA\n```\n\n\n:::\n:::\n\n\n\n\n\n## Date formatting\n\nCodes for different components/styles of date components\n\n| Code | Component |\n|:---- |:--------- |\n| `%y`   | Two digit year (23) |\n| `%Y`   | Four digit year (2023) |\n| `%m`   | Month as number (01-12 or 1-12) |\n| `%b`   | Abbreviated month name (Mar) |\n| `%B`   | Full month name (March) |\n| `%d`   | Day of the month (01-31 or 1-31) |\n\n\n## Date formatting\n\nCombine codes to make dates\n\n2023-03-22 = `\"%Y-%m-%d\"`\n\n3/22/23 = `\"%m/%d/%y\"`\n\n23 Mar 2023 = `\"%d %b %Y\"`\n\nMarch 23, 2023 = `\"%B %d, %Y\"`\n\n\n## Date formatting\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(bad_dates <- c(\"Jan 01 2023\", \"02-Jan-2023\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Jan 01 2023\" \"02-Jan-2023\"\n```\n\n\n:::\n\n```{.r .cell-code}\nas_date(bad_dates, format = \"%b %d %Y\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: 1 failed to parse.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-01-01\" NA          \n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_date(bad_dates, format = c(\"%b %d %Y\", \"%d-%b-%Y\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-01-01\" \"2023-01-02\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Convert times to ISO-8601\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhms(\"20:11:59\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"20H 11M 59S\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhm(\"10:30\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"10H 30M 0S\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Convert date-times to ISO-8601\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_datetime(\"2023-03-10\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-03-10 UTC\"\n```\n\n\n:::\n\n```{.r .cell-code}\nymd_hms(\"2023-03-10 20:11:59\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-03-10 20:11:59 UTC\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmdy_hm(\"03/22/2023 10:30\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-03-22 10:30:00 UTC\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Change time zone \n`tz` argument\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nymd_hms(\"2023-03-10 20:11:59\", tz = \"America/Chicago\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-03-10 20:11:59 CST\"\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\nFind system time zone\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.timezone()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"America/Chicago\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmdy_hm(\"03/22/2023 10:30\", tz = Sys.timezone())  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-03-22 10:30:00 CDT\"\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-warning}\nSetting `tz = Sys.timezone()` is dangerous and not reproducible if you are traveling or giving code to others in different time zones.\n:::\n\n:::\n\n\n# Date/time components\n\n## Create dates from components\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(year, month, day, hour, minute)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 5\n    year month   day  hour minute\n   <int> <int> <int> <dbl>  <dbl>\n 1  2013     1     1     5     15\n 2  2013     1     1     5     29\n 3  2013     1     1     5     40\n 4  2013     1     1     5     45\n 5  2013     1     1     6      0\n 6  2013     1     1     5     58\n 7  2013     1     1     6      0\n 8  2013     1     1     6      0\n 9  2013     1     1     6      0\n10  2013     1     1     6      0\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Create dates from components\n\n`make_date()`, `make_datetime()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(year, month, day, hour, minute) |>\n  mutate(date = make_date(year, month, day),\n         departure = make_datetime(year, month, day, hour, minute))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 7\n    year month   day  hour minute date       departure          \n   <int> <int> <int> <dbl>  <dbl> <date>     <dttm>             \n 1  2013     1     1     5     15 2013-01-01 2013-01-01 05:15:00\n 2  2013     1     1     5     29 2013-01-01 2013-01-01 05:29:00\n 3  2013     1     1     5     40 2013-01-01 2013-01-01 05:40:00\n 4  2013     1     1     5     45 2013-01-01 2013-01-01 05:45:00\n 5  2013     1     1     6      0 2013-01-01 2013-01-01 06:00:00\n 6  2013     1     1     5     58 2013-01-01 2013-01-01 05:58:00\n 7  2013     1     1     6      0 2013-01-01 2013-01-01 06:00:00\n 8  2013     1     1     6      0 2013-01-01 2013-01-01 06:00:00\n 9  2013     1     1     6      0 2013-01-01 2013-01-01 06:00:00\n10  2013     1     1     6      0 2013-01-01 2013-01-01 06:00:00\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Extract date/time elements\n\nFirst, let's extract a random sample of departure times\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(datetime <- flights |>\n   drop_na(dep_time) |> \n   slice_sample(n = 20) |>\n   mutate(departure = make_datetime(year, month, day, hour, minute)) |> \n   pull(departure))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"2013-05-02 06:00:00 UTC\" \"2013-09-16 20:00:00 UTC\"\n [3] \"2013-09-18 20:05:00 UTC\" \"2013-01-30 22:49:00 UTC\"\n [5] \"2013-05-13 07:05:00 UTC\" \"2013-04-23 16:00:00 UTC\"\n [7] \"2013-06-04 20:40:00 UTC\" \"2013-08-12 13:30:00 UTC\"\n [9] \"2013-05-07 15:25:00 UTC\" \"2013-04-07 22:25:00 UTC\"\n[11] \"2013-05-21 07:00:00 UTC\" \"2013-04-22 20:00:00 UTC\"\n[13] \"2013-09-09 15:35:00 UTC\" \"2013-07-12 09:59:00 UTC\"\n[15] \"2013-08-06 19:39:00 UTC\" \"2013-12-01 10:56:00 UTC\"\n[17] \"2013-07-28 06:55:00 UTC\" \"2013-12-19 06:30:00 UTC\"\n[19] \"2013-06-05 16:29:00 UTC\" \"2013-09-18 17:25:00 UTC\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Extract date/time elements\n\nNow let's extract components\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyear(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013\n[16] 2013 2013 2013 2013 2013\n```\n\n\n:::\n\n```{.r .cell-code}\nmonth(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  5  9  9  1  5  4  6  8  5  4  5  4  9  7  8 12  7 12  6  9\n```\n\n\n:::\n\n```{.r .cell-code}\nmonth(datetime, label = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] May Sep Sep Jan May Apr Jun Aug May Apr May Apr Sep Jul Aug Dec Jul Dec Jun\n[20] Sep\n12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec\n```\n\n\n:::\n:::\n\n\n\n\n\n## Extract date/time elements\n\nNow let's extract components\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmday(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  2 16 18 30 13 23  4 12  7  7 21 22  9 12  6  1 28 19  5 18\n```\n\n\n:::\n\n```{.r .cell-code}\nyday(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 122 259 261  30 133 113 155 224 127  97 141 112 252 193 218 335 209 353 156\n[20] 261\n```\n\n\n:::\n\n```{.r .cell-code}\nwday(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 5 2 4 4 2 3 3 2 3 1 3 2 2 6 3 1 1 5 4 4\n```\n\n\n:::\n\n```{.r .cell-code}\nwday(datetime, label = TRUE, abbr = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Thursday  Monday    Wednesday Wednesday Monday    Tuesday   Tuesday  \n [8] Monday    Tuesday   Sunday    Tuesday   Monday    Monday    Friday   \n[15] Tuesday   Sunday    Sunday    Thursday  Wednesday Wednesday\n7 Levels: Sunday < Monday < Tuesday < Wednesday < Thursday < ... < Saturday\n```\n\n\n:::\n:::\n\n\n\n\n\n## Extract date/time elements\n\nNow let's extract components\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhour(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  6 20 20 22  7 16 20 13 15 22  7 20 15  9 19 10  6  6 16 17\n```\n\n\n:::\n\n```{.r .cell-code}\nminute(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  0  0  5 49  5  0 40 30 25 25  0  0 35 59 39 56 55 30 29 25\n```\n\n\n:::\n\n```{.r .cell-code}\nsecond(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n```\n\n\n:::\n:::\n\n\n\n\n\n## Create vectors of days of the week\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwday(1:7, label = TRUE, abbr = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Sunday    Monday    Tuesday   Wednesday Thursday  Friday    Saturday \n7 Levels: Sunday < Monday < Tuesday < Wednesday < Thursday < ... < Saturday\n```\n\n\n:::\n\n```{.r .cell-code}\nas.character(wday(1:7, label = TRUE, abbr = FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Sunday\"    \"Monday\"    \"Tuesday\"   \"Wednesday\" \"Thursday\"  \"Friday\"   \n[7] \"Saturday\" \n```\n\n\n:::\n\n```{.r .cell-code}\nstringr::str_c(as.character(wday(1:7, label = TRUE, abbr = FALSE)), collapse = \", \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Set date/time elements with components\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2013-05-02 06:00:00 UTC\" \"2013-09-16 20:00:00 UTC\"\n[3] \"2013-09-18 20:05:00 UTC\" \"2013-01-30 22:49:00 UTC\"\n[5] \"2013-05-13 07:05:00 UTC\" \"2013-04-23 16:00:00 UTC\"\n```\n\n\n:::\n\n```{.r .cell-code}\nyear(datetime) <- 2020\nhead(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2020-05-02 06:00:00 UTC\" \"2020-09-16 20:00:00 UTC\"\n[3] \"2020-09-18 20:05:00 UTC\" \"2020-01-30 22:49:00 UTC\"\n[5] \"2020-05-13 07:05:00 UTC\" \"2020-04-23 16:00:00 UTC\"\n```\n\n\n:::\n:::\n\n\n\n\n\n# Time spans\n\n## Time spans\nFind or create durations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_class_schedule$iso_date[2] - r_class_schedule$iso_date[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 2 days\n```\n\n\n:::\n\n```{.r .cell-code}\ntoday() - ymd(r_class_schedule$iso_date[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 715 days\n```\n\n\n:::\n\n```{.r .cell-code}\nr_class_schedule$iso_date[1] - 7 * 9\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2022-11-21\"\n```\n\n\n:::\n\n```{.r .cell-code}\nr_class_schedule$iso_date[1] + 7 * 9\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-03-27\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Filter dates\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(oldsched <- filter(r_class_schedule, iso_date < \"2023-01-30\") |>\n  mutate(week_later = iso_date + 7,\n         days_since = today() - iso_date))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n  meeting date        topic               iso_date   week_later days_since\n    <int> <chr>       <chr>               <date>     <date>     <drtn>    \n1       1 23 Jan 2023 Course introduction 2023-01-23 2023-01-30 715 days  \n2       2 25 Jan 2023 Working in RStudio  2023-01-25 2023-02-01 713 days  \n3       3 27 Jan 2023 Coding basics       2023-01-27 2023-02-03 711 days  \n```\n\n\n:::\n:::\n\n\n\n\n\n## Solving the problem\n\nWhat code generates `data2` from `data1`?\n\n:::: {.columns}\n\n::: {.column width=\"35%\"}\n\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   test_date  birth_date \n   <date>     <chr>      \n 1 2023-01-02 1997-07-14 \n 2 2023-01-02 1998-01-28 \n 3 2023-01-05 1967-07-23 \n 4 2023-01-05 Jan 9, 1960\n 5 2023-01-08 1950-11-09 \n 6 2023-01-14 2001-08-24 \n 7 2023-01-16 1979-09-23 \n 8 2023-01-23 1970-03-22 \n 9 2023-01-26 1957-04-21 \n10 2023-01-27 1989-03-07 \n11 2023-01-27 1983-11-03 \n12 2023-01-28 1989-01-31 \n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n::: {.column width=\"65%\"}\n\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 4\n  test_date  birth_date age_at_testing day_of_birth\n  <date>     <date>     <drtn>         <ord>       \n1 2023-01-05 1967-07-23 20255 days     Sunday      \n2 2023-01-05 1960-01-09 23007 days     Saturday    \n3 2023-01-08 1950-11-09 26358 days     Thursday    \n4 2023-01-16 1979-09-23 15821 days     Sunday      \n5 2023-01-23 1970-03-22 19300 days     Sunday      \n6 2023-01-26 1957-04-21 24021 days     Sunday      \n7 2023-01-27 1989-03-07 12379 days     Tuesday     \n8 2023-01-27 1983-11-03 14330 days     Thursday    \n9 2023-01-28 1989-01-31 12415 days     Tuesday     \n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n::::\n\n\n## Let's code!\n\n[Dates and times](../code/23_dates.html){target=\"_blank\"} [[Rmd](../code/23_dates.Rmd){target=\"_blank\"}]\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}