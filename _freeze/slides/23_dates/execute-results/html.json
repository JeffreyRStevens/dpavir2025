{
  "hash": "af6a890276485b50454ddffc8d015f48",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Dates and times\"\nauthor: \"Jeff Stevens\"\ndate: \"2025-03-14\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: auto\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2025](https://jeffreyrstevens.github.io/dpavir2025)\"\n    code-link: true\n    logo: \"../logo/dpavir_hex.png\"\n---\n\n\n\n\n\n# Introduction\n\n\n## The problem\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nWhat's different between these data sets? \n\n:::: {.columns}\n\n::: {.column width=\"35%\"}\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   test_date  birth_date  \n   <date>     <chr>       \n 1 2023-01-02 Jul 14, 1997\n 2 2023-01-02 Jan 28, 1998\n 3 2023-01-05 Jul 23, 1967\n 4 2023-01-05 Aug 26, 1987\n 5 2023-01-08 Nov 09, 1950\n 6 2023-01-14 Aug 24, 2001\n 7 2023-01-16 Sep 23, 1979\n 8 2023-01-23 Mar 22, 1970\n 9 2023-01-26 Apr 21, 1957\n10 2023-01-27 Mar 07, 1989\n11 2023-01-27 Nov 03, 1983\n12 2023-01-28 Jan 31, 1989\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n::: {.column width=\"65%\"}\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 4\n  test_date  birth_date age_at_testing birth_month\n  <date>     <date>     <drtn>         <ord>      \n1 2023-01-05 1967-07-23 20255 days     July       \n2 2023-01-05 1987-08-26 12916 days     August     \n3 2023-01-08 1950-11-09 26358 days     November   \n4 2023-01-16 1979-09-23 15821 days     September  \n5 2023-01-23 1970-03-22 19300 days     March      \n6 2023-01-26 1957-04-21 24021 days     April      \n7 2023-01-27 1989-03-07 12379 days     March      \n8 2023-01-27 1983-11-03 14330 days     November   \n9 2023-01-28 1989-01-31 12415 days     January    \n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n::::\n\n\n## Set-up\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n:::\n\n\n\n\n\n# Dates and times\n\n## Reminder\n\nDates and times are augmented doubles\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(x <- as.Date(\"2023-03-22\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-03-22\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\n::: {.callout-note appearance=\"simple\"}\nStandard (ISO-8601) way to represent dates and times is \n\nYYYY-MM-DD HH:MM:SS, so 2025-03-14 15:30:00\n:::\n:::\n\n\n## Dates and times with {lubridate}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n:::\n\n\n\n\n![](../images/lubridate_allisonhorst.png){fig-align=\"center\" width=\"58%\"}\n\n![](../images/lubridate_hex.png){.absolute width=\"15%\" top=\"0%\" left=\"90%\"}\n\n\n## Current date/time\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoday() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-03-14\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnow()  # {lubridate}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-03-14 11:24:24 CDT\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Creating dates/times\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_date(\"2025-03-14\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-03-14\"\n```\n\n\n:::\n\n```{.r .cell-code}\nymd(\"2025-03-14\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-03-14\"\n```\n\n\n:::\n\n```{.r .cell-code}\nymd(20250314)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-03-14\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Convert dates to ISO-8601\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdy(\"January 31st, 2017\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2017-01-31\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmdy(\"Jan 31 17\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2017-01-31\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndmy(\"31-Jan-2017\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2017-01-31\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Convert dates to ISO-8601\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(r_class_schedule <- tibble(meeting = 1:4, \n                            date = c(\"22 Jan 2025\", \"24 Jan 2025\", \"27 Jan 2025\", \"29 Jan 2025\"), \n                            topic = c(\"Course introduction\", \"Working in RStudio\", \"Coding basics\", \"Workflows\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  meeting date        topic              \n    <int> <chr>       <chr>              \n1       1 22 Jan 2025 Course introduction\n2       2 24 Jan 2025 Working in RStudio \n3       3 27 Jan 2025 Coding basics      \n4       4 29 Jan 2025 Workflows          \n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(r_class_schedule <- r_class_schedule |>\n   mutate(iso_date = dmy(date)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n  meeting date        topic               iso_date  \n    <int> <chr>       <chr>               <date>    \n1       1 22 Jan 2025 Course introduction 2025-01-22\n2       2 24 Jan 2025 Working in RStudio  2025-01-24\n3       3 27 Jan 2025 Coding basics       2025-01-27\n4       4 29 Jan 2025 Workflows           2025-01-29\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n<!-- ## Convert multiple formats -->\n\n<!-- What if your date column has multiple formats? -->\n\n<!-- ```{r warning = TRUE} -->\n<!-- (bad_dates <- c(\"Jan 1 2023\", \"2-Jan-2023\")) -->\n<!-- as_date(bad_dates) -->\n<!-- ``` -->\n\n\n<!-- ## Date formatting -->\n\n<!-- Codes for different components/styles of date components -->\n\n<!-- | Code | Component | -->\n<!-- |:---- |:--------- | -->\n<!-- | `%y`   | Two digit year (23) | -->\n<!-- | `%Y`   | Four digit year (2023) | -->\n<!-- | `%m`   | Month as number (01-12 or 1-12) | -->\n<!-- | `%b`   | Abbreviated month name (Mar) | -->\n<!-- | `%B`   | Full month name (March) | -->\n<!-- | `%d`   | Day of the month (01-31 or 1-31) | -->\n\n\n<!-- ## Date formatting -->\n\n<!-- Combine codes to make dates -->\n\n<!-- 2023-03-22 = `\"%Y-%m-%d\"` -->\n\n<!-- 3/22/23 = `\"%m/%d/%y\"` -->\n\n<!-- 23 Mar 2023 = `\"%d %b %Y\"` -->\n\n<!-- March 23, 2023 = `\"%B %d, %Y\"` -->\n\n\n<!-- ## Date formatting -->\n\n<!-- ```{r warning = TRUE} -->\n<!-- (bad_dates <- c(\"Jan 01 2023\", \"02-Jan-2023\")) -->\n<!-- as_date(bad_dates, format = \"%b %d %Y\") -->\n<!-- ``` -->\n\n<!-- ::: {.fragment} -->\n<!-- ```{r} -->\n<!-- as_date(bad_dates, format = c(\"%b %d %Y\", \"%d-%b-%Y\")) -->\n<!-- ``` -->\n<!-- ::: -->\n\n\n<!-- ## Convert times to ISO-8601 -->\n\n<!-- ```{r} -->\n<!-- hms(\"20:11:59\") -->\n<!-- hm(\"10:30\") -->\n<!-- ``` -->\n\n\n<!-- ## Convert date-times to ISO-8601 -->\n<!-- ```{r} -->\n<!-- as_datetime(\"2023-03-10\") -->\n<!-- ymd_hms(\"2023-03-10 20:11:59\") -->\n<!-- mdy_hm(\"03/22/2023 10:30\") -->\n<!-- ``` -->\n\n\n<!-- ## Change time zone  -->\n<!-- `tz` argument -->\n<!-- ```{r} -->\n<!-- ymd_hms(\"2023-03-10 20:11:59\", tz = \"America/Chicago\") -->\n<!-- ``` -->\n\n<!-- ::: {.fragment} -->\n<!-- Find system time zone -->\n<!-- ```{r} -->\n<!-- Sys.timezone() -->\n<!-- mdy_hm(\"03/22/2023 10:30\", tz = Sys.timezone())   -->\n<!-- ``` -->\n\n<!-- ::: {.callout-warning} -->\n<!-- Setting `tz = Sys.timezone()` is dangerous and not reproducible if you are traveling or giving code to others in different time zones. -->\n<!-- ::: -->\n\n<!-- ::: -->\n\n\n# Date/time components\n\n<!-- ## Create dates from components -->\n<!-- ```{r} -->\n<!-- flights |> -->\n<!--   select(year, month, day, hour, minute) -->\n<!-- ``` -->\n\n\n<!-- ## Create dates from components -->\n\n<!-- `make_date()`, `make_datetime()` -->\n<!-- ```{r} -->\n<!-- flights |> -->\n<!--   select(year, month, day, hour, minute) |> -->\n<!--   mutate(date = make_date(year, month, day), -->\n<!--          departure = make_datetime(year, month, day, hour, minute)) -->\n<!-- ``` -->\n\n\n## Extract date/time elements\n\nFirst, let's extract a random sample of departure times\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(20250314)\n(datetime <- flights |>\n   drop_na(dep_time) |> \n   slice_sample(n = 20) |>\n   mutate(departure = make_datetime(year, month, day, hour, minute)) |> \n   pull(departure))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"2013-10-03 07:20:00 UTC\" \"2013-09-01 14:05:00 UTC\"\n [3] \"2013-01-27 09:59:00 UTC\" \"2013-12-21 14:45:00 UTC\"\n [5] \"2013-02-20 09:11:00 UTC\" \"2013-01-09 16:43:00 UTC\"\n [7] \"2013-09-23 16:00:00 UTC\" \"2013-12-03 14:29:00 UTC\"\n [9] \"2013-04-16 07:05:00 UTC\" \"2013-04-30 07:30:00 UTC\"\n[11] \"2013-11-29 13:45:00 UTC\" \"2013-12-23 07:55:00 UTC\"\n[13] \"2013-09-21 06:30:00 UTC\" \"2013-03-19 17:55:00 UTC\"\n[15] \"2013-06-10 08:50:00 UTC\" \"2013-04-30 13:45:00 UTC\"\n[17] \"2013-04-20 16:52:00 UTC\" \"2013-04-18 06:05:00 UTC\"\n[19] \"2013-07-29 14:48:00 UTC\" \"2013-08-10 19:16:00 UTC\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Extract date/time elements\n\nNow let's extract components\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyear(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 50%'}\n [1] 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013\n[16] 2013 2013 2013 2013 2013\n```\n\n\n:::\n:::\n\n\n\n\n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 50%'}\n [1] 10  9  1 12  2  1  9 12  4  4 11 12  9  3  6  4  4  4  7  8\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth(datetime, label = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 50%'}\n [1] Oct Sep Jan Dec Feb Jan Sep Dec Apr Apr Nov Dec Sep Mar Jun Apr Apr Apr Jul\n[20] Aug\n12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth(datetime, label = TRUE, abbr = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 50%'}\n [1] October   September January   December  February  January   September\n [8] December  April     April     November  December  September March    \n[15] June      April     April     April     July      August   \n12 Levels: January < February < March < April < May < June < ... < December\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Extract date/time elements\n\nNow let's extract components\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmday(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  3  1 27 21 20  9 23  3 16 30 29 23 21 19 10 30 20 18 29 10\n```\n\n\n:::\n\n```{.r .cell-code}\nwday(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 5 1 1 7 4 4 2 3 3 3 6 2 7 3 2 3 7 5 2 7\n```\n\n\n:::\n\n```{.r .cell-code}\nwday(datetime, label = TRUE, abbr = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Thursday  Sunday    Sunday    Saturday  Wednesday Wednesday Monday   \n [8] Tuesday   Tuesday   Tuesday   Friday    Monday    Saturday  Tuesday  \n[15] Monday    Tuesday   Saturday  Thursday  Monday    Saturday \n7 Levels: Sunday < Monday < Tuesday < Wednesday < Thursday < ... < Saturday\n```\n\n\n:::\n:::\n\n\n\n\n\n## Extract date/time elements\n\nNow let's extract components\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhour(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  7 14  9 14  9 16 16 14  7  7 13  7  6 17  8 13 16  6 14 19\n```\n\n\n:::\n\n```{.r .cell-code}\nminute(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 20  5 59 45 11 43  0 29  5 30 45 55 30 55 50 45 52  5 48 16\n```\n\n\n:::\n\n```{.r .cell-code}\nsecond(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n```\n\n\n:::\n:::\n\n\n\n\n\n<!-- ## Create vectors of days of the week -->\n<!-- ```{r} -->\n<!-- wday(1:7, label = TRUE, abbr = FALSE) -->\n<!-- as.character(wday(1:7, label = TRUE, abbr = FALSE)) -->\n<!-- stringr::str_c(as.character(wday(1:7, label = TRUE, abbr = FALSE)), collapse = \", \") -->\n<!-- ``` -->\n\n\n<!-- ## Set date/time elements with components -->\n<!-- ```{r} -->\n<!-- head(datetime) -->\n<!-- year(datetime) <- 2020 -->\n<!-- head(datetime) -->\n<!-- ``` -->\n\n\n# Time spans\n\n## Time spans\nFind or create durations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_class_schedule\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n  meeting date        topic               iso_date  \n    <int> <chr>       <chr>               <date>    \n1       1 22 Jan 2025 Course introduction 2025-01-22\n2       2 24 Jan 2025 Working in RStudio  2025-01-24\n3       3 27 Jan 2025 Coding basics       2025-01-27\n4       4 29 Jan 2025 Workflows           2025-01-29\n```\n\n\n:::\n:::\n\n\n\n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr_class_schedule$iso_date[2] - r_class_schedule$iso_date[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 2 days\n```\n\n\n:::\n\n```{.r .cell-code}\ntoday() - ymd(r_class_schedule$iso_date[1]) # days since class start\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 51 days\n```\n\n\n:::\n\n```{.r .cell-code}\nr_class_schedule$iso_date[1] + 7 * 7 # 7 weeks after class start\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-03-12\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Filter dates\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(oldsched <- filter(r_class_schedule, iso_date < \"2025-01-26\") |>\n  mutate(week_later = iso_date + 7,\n         days_since = today() - iso_date))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 6\n  meeting date        topic               iso_date   week_later days_since\n    <int> <chr>       <chr>               <date>     <date>     <drtn>    \n1       1 22 Jan 2025 Course introduction 2025-01-22 2025-01-29 51 days   \n2       2 24 Jan 2025 Working in RStudio  2025-01-24 2025-01-31 49 days   \n```\n\n\n:::\n:::\n\n\n\n\n\n## Solving the problem\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nnrows <- 12\nset.seed(12)\ndata1 <- tibble(test_date = \n                  as_date(sample(as_date(\"2023-01-01\"):as_date(\"2023-01-31\"), \n                                 nrows, replace = TRUE)),\n                birth_date = \n                  format(as_date(sample(as_date(\"1950-01-01\"):as_date(\"2005-01-31\"),\n                                        nrows, replace = TRUE)),\n                         format = c(\"%b %d, %Y\"))) |> \n  arrange(test_date)\n```\n:::\n\n\n\n\n## Solving the problem\n\nWhat code generates `data2` from `data1`?\n\n:::: {.columns}\n\n::: {.column width=\"35%\"}\n\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   test_date  birth_date  \n   <date>     <chr>       \n 1 2023-01-02 Jul 14, 1997\n 2 2023-01-02 Jan 28, 1998\n 3 2023-01-05 Jul 23, 1967\n 4 2023-01-05 Aug 26, 1987\n 5 2023-01-08 Nov 09, 1950\n 6 2023-01-14 Aug 24, 2001\n 7 2023-01-16 Sep 23, 1979\n 8 2023-01-23 Mar 22, 1970\n 9 2023-01-26 Apr 21, 1957\n10 2023-01-27 Mar 07, 1989\n11 2023-01-27 Nov 03, 1983\n12 2023-01-28 Jan 31, 1989\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n::: {.column width=\"65%\"}\n\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 4\n  test_date  birth_date age_at_testing birth_month\n  <date>     <date>     <drtn>         <ord>      \n1 2023-01-05 1967-07-23 20255 days     July       \n2 2023-01-05 1987-08-26 12916 days     August     \n3 2023-01-08 1950-11-09 26358 days     November   \n4 2023-01-16 1979-09-23 15821 days     September  \n5 2023-01-23 1970-03-22 19300 days     March      \n6 2023-01-26 1957-04-21 24021 days     April      \n7 2023-01-27 1989-03-07 12379 days     March      \n8 2023-01-27 1983-11-03 14330 days     November   \n9 2023-01-28 1989-01-31 12415 days     January    \n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n::::\n\n\n## Let's code!\n\n[Dates and times](../code/23_dates.html){target=\"_blank\"}\n",
    "supporting": [
      "23_dates_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}