{
  "hash": "e3886393a460da5db66a9dda214bb98d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Importing data\"\nauthor: \"Jeff Stevens\"\ndate: \"2023-02-08\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: true\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2023](https://jeffreyrstevens.quarto.pub/dpavir)\"\n    code-link: true\n---\n\n\n\n\n# Review\n\n## Mental model of data in R\n\n![](../images/data-structures-overview.png){fig-align=\"center\"}\n\n\n## Mental model of data analysis\n\n![](../images/data_analysis_workflow.png){fig-align=\"center\"}\n\n\n## Mental model of importing data\n\n![](../images/mentalmodel_import.png){fig-align=\"center\"}\n\n\n# Data files\n\n\n## File types\n\n:::{.incremental}\n* Excel (`.xls`/`.xlsx`): Binary matrix file with formatting, formulas, multiple sheets\n\n* Comma-separated values (`.csv`): Plain text matrix file without formatting, etc. (also TSV)\n\n* Other program-specific files: SPSS, SAS, etc.\n\n* Text files (`.txt`): Plain text file of raw text\n\n* Start saving CSVs and convert other formats to CSVs\n:::\n\n\n## Dog data\n\n:::{.incremental}\n* Download data for [dog breed popularity](../data/dog_breed_popularity.csv).\n\n* Create `data/` directory in your `dpavir2023` course directory.\n\n* Save `dog_breed_popularity.csv` into the `data/` directory.\n\n* View file in RStudio file manager\n:::\n\n\n# Importing CSV files\n\n## Base R data import\n\n`read.csv()`\n\n* Wrapper around `read.table()`\n\n:::{.fragment}\n#### Defaults\n* Header row (turn off with `header = FALSE`)\n\n* Comma separated (change with `sep=\";\"` or use `read.csv2()`)\n\n* Outputs data frame\n:::\n\n---\n\n## Base R  data import\n\n`read.csv()`\n\n### Usage: \n\n`read.csv(file = \"path/to/file.csv\")`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nmydf <- read.csv(here(\"data/dog_breed_popularity.csv\"))\n```\n:::\n\n\n\n\n\n---\n\n## {tidyverse} data import\n\n### [{readr}](https://readr.tidyverse.org)\n\n`readr::read_csv()`\n\n![](../images/readr_hex.png){.absolute width=\"15%\" top=\"2%\" left=\"80%\"}\n\n:::{.fragment}\n* Control column names with `col_names` (including renaming)\n\n* Control column types with `col_types`\n\n* Control missing values with `na` and `quoted_na`\n\n* Can skip rows before reading data with `skip` or cut off with `n_max`\n\n* Outputs tibble\n:::\n\n---\n\n## {tidyverse} data import\n\n`readr::read_csv()`\n\n### Usage: \n\n`read_csv(file = \"path/to/file.csv\")`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nmydf2 <- read_csv(here(\"data/dog_breed_popularity.csv\"))\n```\n:::\n\n\n\n\n\n---\n\n## Importing from URLs\n\nBoth `read.csv()` and `read_csv()` import CSV files available online by using the URL as the path.\n\n<https://jeffreyrstevens.quarto.pub/dpavir/data/dog_breed_traits.csv>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydf3 <- read.csv(\"https://jeffreyrstevens.quarto.pub/dpavir/data/dog_breed_traits.csv\")\nmydf4 <- read_csv(\"https://jeffreyrstevens.quarto.pub/dpavir/data/dog_breed_traits.csv\")\n```\n:::\n\n\n\n\n\n---\n\n## Exporting CSVs\n\n`write.csv()`\n\n* Character/factor columns in quotes with `quote = TRUE`\n\n* Remove row/column names with `row.names = FALSE` or `col.names = FALSE`\n\n:::{.fragment}\n`readr::write_csv()`\n\n* Characters are only quoted if they contain a comma, quote, or new line\n:::\n\n\n## Exporting CSVs\n\n### Usage\n\n`write.csv(df, file = \"path/to/file.csv\")`\n\n`write_csv(df, file = \"path/to/file.csv\")`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(mydf, here(\"data/newdata.csv\"))\nwrite_csv(mydf, here(\"data/newdata2.csv\"))\n```\n:::\n\n\n\n\n\n# Importing other files\n\n## Excel data\n\n### Import Excel data with [{readxl}](https://readxl.tidyverse.org/)\n\n![](../images/readxl_hex.png){.absolute width=\"15%\" top=\"2%\" left=\"80%\"}\n\n:::{.fragment}\n* Functions: `read_xls()`, `read_xlsx()`, `read_excel()`\n\n* Specify sheets with `sheets` argument\n\n* Specify subset of cells with `range` argument\n\n* Like `read_csv()`, has `col_names`, `col_types`, `na`, `skip`, `n_max`\n:::\n\n\n## Excel data\n\n### Import Excel data with [{readxl}](https://readxl.tidyverse.org/)\n\n#### Usage: \n\n`read_excel(path = \"path/to/file.csv\")`<sup>*</sup>\n\n:::{.fragment}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nmydf5 <- read_excel(here(\"data/dog_breed_data.xlsx\"), sheet = \"Sheet2\")\n```\n:::\n\n\n\n:::{.aside}\n*Currently, `read_excel()` cannot download from URLs. So first download <https://jeffreyrstevens.quarto.pub/dpavir/data/dog_breed_data.xlsx> and save it in the `data/` directory.\n:::\n:::\n\n---\n\n## Other stats packages\n\n### Import SPSS, SAS, & Stata data with [{haven}](https://haven.tidyverse.org/)\n\n![](../images/haven_hex.png){.absolute width=\"15%\" top=\"15%\" left=\"95%\"}\n\n:::{.fragment}\n### SPSS\n`haven::read_sav(\"mtcars.sav\")`\n\n### SAS\n`haven::read_sas(\"mtcars.sas7bdat\")`\n\n### Stata\n`haven::read_dta(\"mtcars.dta\")`\n:::\n\n\n---\n\n## Qualtrics data\n\n### Import Qualtrics data directly with [{qualtRics}](https://docs.ropensci.org/qualtRics/)\n\n:::{.fragment}\n1. Register your Qualtrics credentials with `qualtRics::qualtrics_api_credentials()`<sup>*</sup>\n\n1. Get survey ID by viewing `qualtRics::all_surveys()`\n\n1. Import data with `qualtRics::fetch_survey()`\n\n1. Never have to download Qualtrics data again!\n\n:::{.aside}\n*Be cautious with using API credentials! I'm not responsible for the security of packages that I describe.\n:::\n:::\n\n---\n\n## Qualtrics data\n\n### Import Qualtrics data directly with [{qualtRics}](https://docs.ropensci.org/qualtRics/)\n\n* Download choice text by default or numeric values with `label = FALSE`\n\n* Set time zone with `time_zone = \"America/Chicago\"`\n\n* Turn off sublabels with `add_var_labels = FALSE`\n\n\n---\n\n## Qualtrics data\n\n### Usage\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydf6 <- qualtRics::fetch_survey(\"SV_xxxxxxxxxxxxx\", save_dir = \"data\", label = FALSE, convert = FALSE, \n             force_request = TRUE, time_zone = \"America/Chicago\")\n```\n:::\n\n\n\n\n\n---\n\n## Cloud storage\n\n### Import data directly from cloud storage\n* OneDrive [{Microsoft365R}](https://github.com/Azure/Microsoft365R)<sup>*</sup>\n\n* Google sheets [{googlesheets4}](https://googlesheets4.tidyverse.org/)<sup>*</sup>\n\n* Box [{boxr}](https://r-box.github.io/boxr/)<sup>*</sup>\n\n:::{.aside}\n*Be cautious with using API credentials! I'm not responsible for the security of packages that I describe.\n:::\n\n![](../images/microsoft365r_hex.png){.absolute width=\"15%\" top=\"22%\" left=\"80%\"}\n\n\n## Mental model of importing data\n\n![](../images/mentalmodel_import.png){fig-align=\"center\"}\n\n\n## Let's code!\n\n[Importing data](../code/08_importing.html){target=\"_blank\"} [[Rmd](../code/08_importing.Rmd){target=\"_blank\"}]\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}