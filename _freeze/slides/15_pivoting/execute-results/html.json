{
  "hash": "c6328352631ad49911e0bbe7f0fa0ef9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Pivoting data\"\nauthor: \"Jeff Stevens\"\ndate: \"2025-02-24\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: true\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2025](https://jeffreyrstevens.github.io/dpavir2025)\"\n    code-link: true\n    logo: \"../logo/dpavir_hex.png\"\n---\n\n\n\n\n# Review\n\n\n## Name that function\n\n::: {.incremental}\n* return subset of rows based on position in data frame\n* return subset of rows based on column values\n* return subset of columns based on position in data frame\n* return subset of columns based on name\n* reorder rows by column values\n* reorder columns manually\n* create new columns\n* aggregate rows with summary functions\n:::\n\n\n## Mental model of data analysis\n\n![](../images/data_analysis_workflow.png){fig-align=\"center\"}\n\n\n## The problem\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nWhat's different between these data sets? \n\nWhat needs to happen to create `data2` from `data1`?\n\n::::{.columns}\n:::{.column width=\"50%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id condition   response\n1   1     cond1 0.20826607\n2   1     cond2 0.98142701\n3   1     cond3 0.08186109\n4   2     cond1 0.96427203\n5   2     cond2 0.07697982\n6   2     cond3 0.67866334\n7   3     cond1 0.22544114\n8   3     cond2 0.43792412\n9   3     cond3 0.62341431\n10  4     cond1 0.18529764\n11  4     cond2 0.07576630\n12  4     cond3 0.94208550\n```\n\n\n:::\n:::\n\n\n\n:::\n:::{.column width=\"50%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n     id cond1  cond2  cond3\n  <int> <dbl>  <dbl>  <dbl>\n1     1 0.208 0.981  0.0819\n2     2 0.964 0.0770 0.679 \n3     3 0.225 0.438  0.623 \n4     4 0.185 0.0758 0.942 \n```\n\n\n:::\n:::\n\n\n\n:::\n::::\n\n\n## Today we ...\n\n![](../images/pivot.jpg)\n\n\n# Tidy data\n\n\n## Mental model of tidy data\n\n![](../images/tidy_data2.png){fig-align=center width=80%}\n\n\n## Tidying data with {tidyr} and {dplyr}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(dplyr)\n```\n:::\n\n\n\n\n![](../images/tidyr_hex.png){.absolute width=\"15%\" top=\"0%\" left=\"100%\"}\n\n![](../images/tidy_data.png){.absolute width=\"45%\" top=\"30%\" left=\"-5%\"}\n\n![](../images/tidyr_spread_gather_allisonhorst.png){.absolute width=\"50%\" top=\"10%\" left=\"50%\"}\n\n:::{.aside}\nSource: <a href = \"https://github.com/allisonhorst/stats-illustrations\">Allison Horst</a>\n:::\n\n\n---\n\n## What is tidy data?\n\n1. Each variable has its own column\n\n1. Each observation has its own row\n\n1. Each value has its own cell\n\n![](../images/tidy_data_1.png){fig-align=\"center\" width=\"80%\"}\n\n---\n\n## Tidy data\n\n#### Every variable is a column, every observation is a row, and every value is a cell\n\n:::: {.columns}\n\n::: {.column width=\"45%\"}\n::: {style=\"font-size:90%\"}\nIs `table1` tidy? Why/why not?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::\n\n::: {.column width=\"55%\"}\n\n::: {.fragment}\n::: {style=\"font-size:90%\"}\nIs `table2` tidy? Why/why not?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   country      year type            count\n   <chr>       <dbl> <chr>           <dbl>\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n:::\n\n::::\n\n---\n\n## Tidy data\n\n#### Every variable is a column, every observation is a row, and every value is a cell\n\nIs `table3` tidy? Why/why not?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  country      year rate             \n  <chr>       <dbl> <chr>            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n```\n\n\n:::\n:::\n\n\n\n\n---\n\n## Tidy data\n\n#### Every variable is a column, every observation is a row, and every value is a cell\n\n::::{.columns}\n:::{.column width=\"50%}\nIs `table4a` tidy? Why/why not?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable4a\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  <chr>        <dbl>  <dbl>\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n```\n\n\n:::\n:::\n\n\n\n:::\n:::{.column width=\"50%}\nIs `table4b` tidy? Why/why not?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable4b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  country         `1999`     `2000`\n  <chr>            <dbl>      <dbl>\n1 Afghanistan   19987071   20595360\n2 Brazil       172006362  174504898\n3 China       1272915272 1280428583\n```\n\n\n:::\n:::\n\n\n\n:::\n::::\n\n---\n\n## Tidy data\n\n* Think about tidy from a model perspective\n\n* Tidyverse assumes tidy data\n\n* Easier to analyze and plot tidy data\n\n* But sometimes easier to store non-tidy data\n\n\n<!-- --- -->\n\n<!-- ## Tidy data -->\n\n<!-- * But sometimes easier to store non-tidy data -->\n\n<!-- ::::{.columns} -->\n<!-- :::{.column width=\"50%} -->\n\n<!-- ::: {style=\"font-size:90%\"} -->\n<!-- ```{r echo = FALSE} -->\n<!-- set.seed(20210514) -->\n<!-- hai_data1 <- tibble(id = rep(1:5, each = 2), age = rep(round(rnorm(5, 20, 1)), each = 2), pre_post = rep(c(\"Pre\", \"Post\"), 5), nback = round(rnorm(10, 0, 1), 2)) -->\n<!-- ``` -->\n<!-- ```{r} -->\n<!-- hai_data1 -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: -->\n\n<!-- :::{.column width=\"50%} -->\n\n<!-- ::: {.fragment} -->\n<!-- ::: {style=\"font-size:90%\"} -->\n<!-- ```{r echo = FALSE} -->\n<!-- hai_data2 <- tibble(id = rep(100:104, each = 2), age = rep(round(rnorm(5, 20, 1)), each = 2), pre_post = rep(c(\"Pre\", \"Post\"), 5), nback = round(rnorm(10, 0, 1), 2), panas = round(rnorm(10, 2.5, 1), 2), span = round(rnorm(10, 6, 1.5))) -->\n<!-- ``` -->\n<!-- ```{r} -->\n<!-- hai_data2 -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: -->\n\n<!-- ::: -->\n<!-- :::: -->\n\n<!-- --- -->\n\n<!-- ## Tidy data -->\n\n<!-- * But sometimes easier to store non-tidy data -->\n\n<!-- .columns} -->\n<!-- :::{.column width=\"50%} -->\n\n<!-- ::: {style=\"font-size:90%\"} -->\n<!-- ```{r echo = FALSE, message = FALSE} -->\n<!-- library(tidyverse) -->\n<!-- hai_data_combined <- bind_rows(hai_data1, hai_data2) -->\n<!-- ``` -->\n<!-- ```{r} -->\n<!-- hai_data_combined -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: -->\n\n<!-- :::{.column width=\"50%} -->\n\n<!-- ::: {.fragment} -->\n<!-- ::: {style=\"font-size:85%\"} -->\n<!-- ```{r echo = FALSE} -->\n<!-- hai_data1_long <- pivot_longer(hai_data1, -c(id, age, pre_post), names_to = \"measure\", values_to = \"response\") -->\n<!-- hai_data2_long <- pivot_longer(hai_data2, -c(id, age, pre_post), names_to = \"measure\", values_to = \"response\") -->\n<!-- hai_data_combined_long <- bind_rows(hai_data1_long, hai_data2_long) -->\n<!-- ``` -->\n<!-- ```{r} -->\n<!-- head(hai_data_combined_long, 20) -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: -->\n<!-- ::: -->\n<!-- :::: -->\n\n\n# Pivoting data\n\n\n## Pivoting data\n\n![](../images/tidy_data.png){fig-align=\"center\" width=\"50%\"}\n\n\n---\n\n## Pivoting data\n\n![](../images/tidyr-pivoting.gif){.absolute width=\"55%\" top=\"0%\" left=\"50%\"}\n\n:::{.aside}\nSource: [Garrick Aden-Buie](https://github.com/gadenbuie/tidyexplain)\n:::\n\n\n---\n\n## Wide data\n\n::::{.columns}\n:::{.column width=\"50%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable4a\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  <chr>        <dbl>  <dbl>\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n```\n\n\n:::\n:::\n\n\n\n:::\n:::{.column width=\"50%}\n#### Why is `table4a` not tidy?\n:::\n::::\n\n::: {.fragment}\n![](../images/tidyr_pivot_longer.png){.absolute width=\"90%\" top=\"45%\" left=\"5%\"}\n:::\n\n---\n\n## Wide data\n\n#### Use `pivot_longer()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npivot_longer(table4a, cols = c(`1999`, `2000`), \n             names_to = \"year\", values_to = \"cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  country     year   cases\n  <chr>       <chr>  <dbl>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n```\n\n\n:::\n:::\n\n\n\n\n![](../images/tidyr_pivot_longer.png){.absolute width=\"60%\" top=\"35%\" left=\"45%\"}\n\n\n---\n\n## Long data\n\n:::: {.columns}\n\n::: {.column width=\"55%\"}\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   country      year type            count\n   <chr>       <dbl> <chr>           <dbl>\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::\n\n::: {.column width=\"45%\"}\n\n#### Why is `table2` not tidy?\n\n:::\n\n::::\n\n::: {.fragment}\n![](../images/tidyr_pivot_wider.png){.absolute width=\"60%\" top=\"35%\" left=\"55%\"}\n:::\n\n---\n\n## Long data\n\n#### Use `pivot_wider()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npivot_wider(table2, id_cols = c(\"country\", \"year\"), \n            names_from = type, values_from = count)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n\n\n:::\n:::\n\n\n\n\n![](../images/tidyr_pivot_wider.png){.absolute width=\"60%\" top=\"35%\" left=\"55%\"}\n\n\n## Solving the problem\n\nWhat code turns `data1` into `data2`? And vice versa?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(20250224)\ndata1 <- data.frame(id = rep(1:4, each = 3), condition = paste0(\"cond\", rep(1:3, times = 4)), response = runif(12)\n)\n```\n:::\n\n\n\n\n\n::::{.columns}\n:::{.column width=\"50%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   id condition   response\n1   1     cond1 0.20826607\n2   1     cond2 0.98142701\n3   1     cond3 0.08186109\n4   2     cond1 0.96427203\n5   2     cond2 0.07697982\n6   2     cond3 0.67866334\n7   3     cond1 0.22544114\n8   3     cond2 0.43792412\n9   3     cond3 0.62341431\n10  4     cond1 0.18529764\n11  4     cond2 0.07576630\n12  4     cond3 0.94208550\n```\n\n\n:::\n:::\n\n\n\n:::\n:::{.column width=\"50%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n     id cond1  cond2  cond3\n  <int> <dbl>  <dbl>  <dbl>\n1     1 0.208 0.981  0.0819\n2     2 0.964 0.0770 0.679 \n3     3 0.225 0.438  0.623 \n4     4 0.185 0.0758 0.942 \n```\n\n\n:::\n:::\n\n\n\n:::\n::::\n\n## Let's code!\n\n[Pivoting data](../code/15_pivoting.html){target=\"_blank\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}