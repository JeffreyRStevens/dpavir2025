{
  "hash": "204a2d90e11c04c94da90ce0a2a1cd3e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Piping\"\nauthor: \"Jeff Stevens\"\ndate: \"2023-02-17\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: true\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2023](https://jeffreyrstevens.quarto.pub/dpavir)\"\n    code-link: true\n---\n\n\n\n\n\n# Review\n\n## Data wrangling\n\n![](../images/dplyr_summary.png){fig-align=center width=80%}\n\n\n# Piping\n\n## Set-up\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(nycflights13)\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n```\n\n\n:::\n:::\n\n\n\n\n\n## Base R pipelines\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyflights <- flights[c(\"year\", \"month\", \"day\", \"air_time\", \"distance\", \n                       \"hour\", \"minute\")]\nmyflights$month <- as.character(myflights$month)\nmyflights$month <- ifelse(myflights$month < 10, \n                          paste0(\"0\", myflights$month), myflights$month)\nmyflights$day <- ifelse(myflights$day < 10, \n                        paste0(\"0\", myflights$day), myflights$day)\nmyflights$date <- paste(myflights$year, myflights$month, myflights$day, \n                        sep = \"-\")\nmyflights$speed <- myflights$distance / myflights$air_time * 60\nmyflights <- myflights[c(\"year\", \"month\", \"day\", \"date\", \"air_time\", \n                         \"distance\", \"speed\", \"hour\", \"minute\")]\n```\n:::\n\n\n\n\n:::{.fragment}\nWhat do you like and dislike about this pipeline?\n:::\n\n\n## tidyverse pipelines\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyflights2 <- flights |> \n  select(year:day, air_time, distance, hour, minute) |> \n  mutate(month = as.character(month),\n         month = if_else(month < 10, paste0(\"0\", month), as.character(month)),\n         day = if_else(day < 10, paste0(\"0\", day), as.character(day)),\n         date = paste(year, month, day, sep = \"-\"),\n         speed = distance / air_time * 60) |> \n  select(year:day, date, air_time, distance, speed, everything())\n```\n:::\n\n\n\n\n:::{.fragment}\nWhat do you like and dislike about this pipeline?\n:::\n\n\n## tidyverse pipelines\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyflights3 <- flights |> \n  select(year:day, air_time, distance, hour, minute) |> \n  mutate(month = as.character(month),\n         month = if_else(month < 10, paste0(\"0\", month), as.character(month)),\n         day = if_else(day < 10, paste0(\"0\", day), as.character(day)),\n         date = paste(year, month, day, sep = \"-\"),\n         .after = day) |> \n  mutate(speed = distance / air_time * 60,\n         .after = distance)\n```\n:::\n\n\n\n\n:::{.fragment}\nWhat do you like and dislike about this pipeline?\n:::\n\n\n## Pipeline comparison\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nidentical(myflights, myflights2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nidentical(myflights, myflights3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nidentical(myflights2, myflights3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n:::{.fragment}\n#### Character counts\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Pipeline     | Characters|\n|:------------|----------:|\n|`myflights`  |        566|\n|`myflights2` |        423|\n|`myflights3` |        406|\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Pipes \n\n* Base R pipe `|>` \n    - added in R 4.1.0 but key functionality started in 4.2.0\n    - works following most base R and tidyverse functions\n\n:::{.fragment}\n* tidyverse pipe `%>%` \n    - from [{magrittr}](https://magrittr.tidyverse.org/) package\n    - works following tidyverse verbs\n:::\n\n:::{.fragment}\n* Hadley Wickham recommends using the base R pipe `|>`, so we'll use that here.\n:::\n\n## Piping basics\n\n#### Start with the data object...\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  select(year:dep_delay, origin) |> # include these columns\n  select(-sched_dep_time) # exclude this column\n```\n:::\n\n\n\n\n:::{.fragment}\n#### Or use data object as the first argument...\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(flights, year:dep_delay, origin) |> # include these columns\n  select(-sched_dep_time) # exclude this column\n```\n:::\n\n\n\n:::\n\n:::{.fragment}\n#### But don't use data object after first pipe\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(flights, year:dep_delay, origin) |> # include these columns\n  select(flights, -sched_dep_time) # exclude this column\n```\n:::\n\n\n\n```\nError in `select()`:\n! Can't subset columns with `flights`.\n✖ `flights` must be numeric or character, not a <tbl_df/tbl/data.frame> object.\n```\n:::\n\n---\n\n## Piping basics\n\n#### Like any object, assigning it does not output to console\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyflights <- flights |> \n  select(year:dep_delay, origin) |>\n  select(-sched_dep_time)\n```\n:::\n\n\n\n\n:::{.fragment}\n#### But omitting assignment does\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |> \n  select(year:dep_delay, origin) |>\n  select(-sched_dep_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 6\n    year month   day dep_time dep_delay origin\n   <int> <int> <int>    <int>     <dbl> <chr> \n 1  2013     1     1      517         2 EWR   \n 2  2013     1     1      533         4 LGA   \n 3  2013     1     1      542         2 JFK   \n 4  2013     1     1      544        -1 JFK   \n 5  2013     1     1      554        -6 LGA   \n 6  2013     1     1      554        -4 EWR   \n 7  2013     1     1      555        -5 EWR   \n 8  2013     1     1      557        -3 LGA   \n 9  2013     1     1      557        -3 JFK   \n10  2013     1     1      558        -2 LGA   \n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Piping basics\n\n#### As does wrapping assignment in parentheses\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(myflights <- flights |> \n  select(year:dep_delay, origin) |>\n  select(-sched_dep_time))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 6\n    year month   day dep_time dep_delay origin\n   <int> <int> <int>    <int>     <dbl> <chr> \n 1  2013     1     1      517         2 EWR   \n 2  2013     1     1      533         4 LGA   \n 3  2013     1     1      542         2 JFK   \n 4  2013     1     1      544        -1 JFK   \n 5  2013     1     1      554        -6 LGA   \n 6  2013     1     1      554        -4 EWR   \n 7  2013     1     1      555        -5 EWR   \n 8  2013     1     1      557        -3 LGA   \n 9  2013     1     1      557        -3 JFK   \n10  2013     1     1      558        -2 LGA   \n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Advanced piping\n\n* Sometimes, non-tidyverse functions don't take the data object as the first argument\n\n* This requires a \"placeholder\" signaling where the data object goes\n\n:::{.fragment}\n* The placeholder for the `|>` pipe is `_`\n\n* The placeholder for the `%>%` pipe is `.`\n:::\n\n\n## Advanced piping\n\n### Base R pipe\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n  select(mpg, cyl) |> \n  lm(mpg ~ cyl)\n```\n:::\n\n\n\n:::{.fragment}\n```\nError in as.data.frame.default(data) : \n  cannot coerce class ‘\"formula\"’ to a data.frame\n```\n:::\n  \n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n  select(mpg, cyl) |> \n  lm(mpg ~ cyl, data = _)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = mpg ~ cyl, data = select(mtcars, mpg, cyl))\n\nCoefficients:\n(Intercept)          cyl  \n     37.885       -2.876  \n```\n\n\n:::\n:::\n\n\n\n\n* You must specify the argument name to use placeholder\n:::\n\n\n## Advanced piping\n\n### tidyverse pipe\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n  select(mpg, cyl) %>% \n  lm(mpg ~ cyl, data = .)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = mpg ~ cyl, data = .)\n\nCoefficients:\n(Intercept)          cyl  \n     37.885       -2.876  \n```\n\n\n:::\n:::\n\n\n\n\n## Let's code!\n\n[Piping](../code/12_piping.html){target=\"_blank\"} [[Rmd](../code/12_piping.Rmd){target=\"_blank\"}]\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}