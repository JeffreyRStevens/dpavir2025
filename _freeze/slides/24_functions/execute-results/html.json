{
  "hash": "c1e09166feaa0d7b4359ccc169540d28",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Functions\"\nauthor: \"Jeff Stevens\"\ndate: \"2023-03-27\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: auto\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2025](https://jeffreyrstevens.quarto.pub/dpavir)\"\n    code-link: true\n---\n\n\n\n\n\n# Introduction\n\n\n<!-- ## The problem -->\n\n<!-- ```{r echo = FALSE} -->\n<!-- library(tidyverse) -->\n<!-- nrows <- 12 -->\n<!-- set.seed(12) -->\n<!-- data1 <- tibble(test_date = as_date(sample(as_date(\"2023-01-01\"):as_date(\"2023-01-31\"), nrows, replace = TRUE)), -->\n<!--                     birth_date = as.character(as_date(sample(as_date(\"1950-01-01\"):as_date(\"2005-01-31\"), nrows, replace = TRUE))) -->\n<!--                     ) |>  -->\n<!--   arrange(test_date) -->\n<!-- data1$birth_date[4] <- \"Jan 9, 1960\" -->\n<!-- data2 <- data1 |>  -->\n<!--   mutate(birth_date = as_date(birth_date, format = c(\"%Y-%m-%d\", \"%b %d, %Y\"))) |>  -->\n<!--   filter(birth_date < \"1990-01-01\") |>  -->\n<!--   mutate(age_at_testing = test_date - birth_date, -->\n<!--          day_of_birth = wday(birth_date, label = TRUE, abbr = FALSE)) -->\n<!-- ``` -->\n\n<!-- What's different between these data sets?  -->\n\n<!-- :::: {.columns} -->\n\n<!-- ::: {.column width=\"35%\"} -->\n\n<!-- ::: {style=\"font-size:90%\"} -->\n<!-- ```{r} -->\n<!-- data1 -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: -->\n\n<!-- ::: {.column width=\"65%\"} -->\n\n<!-- ::: {style=\"font-size:90%\"} -->\n<!-- ```{r} -->\n<!-- data2 -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: -->\n\n<!-- :::: -->\n\n\n## Set-up\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n```\n:::\n\n\n\n\n\n## Why write your own functions?\n\n\n# Creating functions\n\n## Creating functions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunctionname <- function(argument1, argument2) {\n  # Function contents\n}\n```\n:::\n\n\n\n\n\n## Creating functions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean <- function(x) {\n  sum(x) / length(x)\n}\n```\n:::\n\n\n\n\n:::{.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20.09062\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20.09062\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Multi-line functions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean2 <- function(x) {\n  mysum <- sum(x)\n  mysum_divided <- mysum / length(x)\n}\n```\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean2(mtcars$mpg)\n```\n:::\n\n\n\n\nWhy no output?\n:::\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(mymean_obj <- mymean2(mtcars$mpg))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20.09062\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Returning output\n\nDon't assign last step to object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean3 <- function(x) {\n  mysum <- sum(x)\n  mysum / length(x)\n}\n\nmymean3(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20.09062\n```\n\n\n:::\n:::\n\n\n\n\n## Returning output\n\nOr use `return()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean4 <- function(x) {\n  mysum <- sum(x)\n  mysum_divided <- mysum / length(x)\n  return(mysum_divided)\n}\n\nmymean4(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20.09062\n```\n\n\n:::\n:::\n\n\n\n\n\n## Return multiple output values\n\n`list()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean5 <- function(x) {\n  mysum <- sum(x)\n  mysum_divided <- mysum / length(x)\n  list(sum = mysum, mean = mysum_divided)\n}\n\nmymean5(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$sum\n[1] 642.9\n\n$mean\n[1] 20.09062\n```\n\n\n:::\n:::\n\n\n\n\n\n## Save intermediate objects\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean6 <- function(x) {\n  mysum <<- sum(x)\n  mysum / length(x)\n}\n\nmymean6(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20.09062\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-note}\nThis is fine when testing out a function but probably not great practice 'in production'. Why?\n:::\n\n\n## Print messages to console\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean7 <- function(x) {\n  mysum <- sum(x)\n  print(mysum)\n  mysum / length(x)\n}\n\nmymean7(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 642.9\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20.09062\n```\n\n\n:::\n:::\n\n\n\n\n\n## Print messages to console\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean8 <- function(x) {\n  mysum <- sum(x)\n  print(paste0(\"The sum is: \", mysum))\n  mysum / length(x)\n}\n\nmymean8(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The sum is: 642.9\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20.09062\n```\n\n\n:::\n:::\n\n\n\n\n\n## Print messages to console\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean9 <- function(x) {\n  mysum <- sum(x)\n  message(paste0(\"The sum is: \", mysum))\n  mysum / length(x)\n}\n\nmymean9(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe sum is: 642.9\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20.09062\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-note}\nCheck out [`{cli}`](https://cli.r-lib.org/) package for powerful messaging.\n:::\n\n# Arguments\n\n## Arguments\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiplier <- function(x, constant) {\n  x * constant\n}\n```\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiplier(x = 7, constant = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21\n```\n\n\n:::\n\n```{.r .cell-code}\nmultiplier(x = 1:10, constant = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  3  6  9 12 15 18 21 24 27 30\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiplier(x = 1:10)\n```\n:::\n\n\n\n```\nError in multiplier(x = 1:10) : \nargument \"constant\" is missing, with no default\n```\n:::\n\n\n## Argument default values\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiplier2 <- function(x, constant = 3) {\n  x * constant\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiplier2(x = 1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  3  6  9 12 15 18 21 24 27 30\n```\n\n\n:::\n\n```{.r .cell-code}\nmultiplier2(x = 1:10, constant = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  5 10 15 20 25 30 35 40 45 50\n```\n\n\n:::\n:::\n\n\n\n\n## Let's write a function!\n\nHere's the formula that reverse codes scale values\n\n`Value`~`max`~ `+` `Value`~`min`~ ` -Score`\n\nWrite a function that calculates the reversed code score. What arguments do you need?\n\n\n# Conditional execution\n\n## Conditional execution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins[, 1:5])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  species island    bill_length_mm bill_depth_mm flipper_length_mm\n  <fct>   <fct>              <dbl>         <dbl>             <int>\n1 Adelie  Torgersen           39.1          18.7               181\n2 Adelie  Torgersen           39.5          17.4               186\n3 Adelie  Torgersen           40.3          18                 195\n4 Adelie  Torgersen           NA            NA                  NA\n5 Adelie  Torgersen           36.7          19.3               193\n6 Adelie  Torgersen           39.3          20.6               190\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean6(penguins$bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Conditional execution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins[, 1:5])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  species island    bill_length_mm bill_depth_mm flipper_length_mm\n  <fct>   <fct>              <dbl>         <dbl>             <int>\n1 Adelie  Torgersen           39.1          18.7               181\n2 Adelie  Torgersen           39.5          17.4               186\n3 Adelie  Torgersen           40.3          18                 195\n4 Adelie  Torgersen           NA            NA                  NA\n5 Adelie  Torgersen           36.7          19.3               193\n6 Adelie  Torgersen           39.3          20.6               190\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean10 <- function(x) {\n  sum(x, na.rm = TRUE) / sum(!is.na(x))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean10(penguins$bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 43.92193\n```\n\n\n:::\n:::\n\n\n\n\n\n## Conditional execution\n\nBut if you want the user to control whether `NA` is ignored\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean11 <- function(x, ignore_na = TRUE) {\n  if (ignore_na) {\n    sum(x, na.rm = TRUE) / sum(!is.na(x))\n  } else {\n    sum(x) / length(x)\n  }\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmymean11(penguins$bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 43.92193\n```\n\n\n:::\n\n```{.r .cell-code}\nmymean11(penguins$bill_length_mm, ignore_na = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n\n\n## Multiple conditions\n\nUse `else if`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage_cutoffs <- function(x) {\n  if(x <= 1.5) {\n    \"puppy\"\n  } else if (x <= 3) {\n    \"adolescent\"\n  } else if (x <= 10) {\n    \"adult\"\n  } else {\n    \"senior\"\n  }\n}\n```\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage_cutoffs(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"puppy\"\n```\n\n\n:::\n\n```{.r .cell-code}\nage_cutoffs(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"adolescent\"\n```\n\n\n:::\n\n```{.r .cell-code}\nage_cutoffs(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"adult\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Stopping based on conditionals\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage_cutoffs2 <- function(x) {\n  if(x <= 1.5) {\n    \"puppy\"\n  } else if (x <= 3) {\n    \"adolescent\"\n  } else if (x <= 10) {\n    \"adult\"\n  } else if (x <= 20) {\n    \"senior\"\n  } else {\n    stop(\"Age exceeded 20.\")\n  }\n}\n```\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage_cutoffs2(15)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"senior\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nage_cutoffs2(22)\n```\n:::\n\n\n\n```\nError in age_cutoffs2(22) : Age exceeded 20.\n```\n:::\n\n\n## Multiple conditions\n\nUse `switch()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncentral_tend <- function(x, type) {\n  switch(type,\n         mean = mean(x),\n         median = median(x),\n         trimmed = mean(x, trim = .1))\n}\n```\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector <- rcauchy(100)\ncentral_tend(x = vector, type = \"mean\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -2.679521\n```\n\n\n:::\n\n```{.r .cell-code}\ncentral_tend(x = vector, type = \"median\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.08329218\n```\n\n\n:::\n\n```{.r .cell-code}\ncentral_tend(x = vector, type = \"trimmed\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1699906\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n# Data frame functions\n\n## Creating functions in tidyverse\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_species_bill <- function(df) {\n  df |> \n    group_by(species) |> \n    summarise(mean(bill_length_mm, na.rm = TRUE))\n}\n\nmean_species_bill(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species   `mean(bill_length_mm, na.rm = TRUE)`\n  <fct>                                    <dbl>\n1 Adelie                                    38.8\n2 Chinstrap                                 48.8\n3 Gentoo                                    47.5\n```\n\n\n:::\n:::\n\n\n\n\n\n## Creating functions in tidyverse\n\nWhat if we want user to input grouping and response variable?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped_mean <- function(df, group_var, mean_var) {\n  df |> \n    group_by(group_var) |> \n    summarise(mean(mean_var, na.rm = TRUE))\n}\n```\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  grouped_mean(group_var = species, mean_var = bill_length_mm)\n```\n:::\n\n\n\n```\nError in `group_by()`:\n! Must group by variables found in `.data`.\n✖ Column `group_var` is not found.\nRun `rlang::last_trace()` to see where the error occurred.\n```\n:::\n\n## Embracing\n\nEmbrace variables in `{{ }}`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped_mean2 <- function(df, group_var, mean_var) {\n  df |> \n    group_by({{ group_var }}) |> \n    summarize(mean({{ mean_var }}, na.rm = TRUE))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  grouped_mean2(group_var = species, mean_var = bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species   `mean(bill_length_mm, na.rm = TRUE)`\n  <fct>                                    <dbl>\n1 Adelie                                    38.8\n2 Chinstrap                                 48.8\n3 Gentoo                                    47.5\n```\n\n\n:::\n:::\n\n\n\n\n\n## Let's code!\n\n[Functions](../code/24_functions.html){target=\"_blank\"} [[Rmd](../code/24_functions.Rmd){target=\"_blank\"}]\n",
    "supporting": [
      "24_functions_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}