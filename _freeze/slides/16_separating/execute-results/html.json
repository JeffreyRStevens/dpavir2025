{
  "hash": "c95552a075aba4699220b335bc2842f5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Separating and uniting data\"\nauthor: \"Jeff Stevens\"\ndate: \"2025-02-26\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: true\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2025](https://jeffreyrstevens.github.io/dpavir2025)\"\n    code-link: true\n    logo: \"../logo/dpavir_hex.png\"\n---\n\n\n\n\n# Introduction\n\n## The problem\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nWhat's different between these data sets? \n\nWhat needs to happen to create `data2` from `data1`?\n\n::::{.columns}\n:::{.column width=\"50%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 52%'}\n# A tibble: 11 × 4\n      id cond1 cond2 date      \n   <int> <int> <chr> <date>    \n 1     1     1 A     2022-02-24\n 2     1     2 A     2022-01-21\n 3     1     3 A     2022-01-23\n 4     2     1 B     2022-01-27\n 5     2     3 B     2022-01-02\n 6     3     1 A     2022-02-03\n 7     3     2 A     2022-02-10\n 8     3     3 A     2022-02-21\n 9     4     1 B     2022-01-31\n10     4     2 B     2022-01-30\n11     4     3 B     2022-02-13\n```\n\n\n:::\n:::\n\n\n\n:::\n:::{.column width=\"50%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 52%'}\n# A tibble: 12 × 5\n      id condition year  month day  \n   <int> <chr>     <chr> <chr> <chr>\n 1     1 1A        2022  02    24   \n 2     1 2A        2022  01    21   \n 3     1 3A        2022  01    23   \n 4     2 1B        2022  01    27   \n 5     2 2B        <NA>  <NA>  <NA> \n 6     2 3B        2022  01    02   \n 7     3 1A        2022  02    03   \n 8     3 2A        2022  02    10   \n 9     3 3A        2022  02    21   \n10     4 1B        2022  01    31   \n11     4 2B        2022  01    30   \n12     4 3B        2022  02    13   \n```\n\n\n:::\n:::\n\n\n\n:::\n::::\n\n\n## Mental model of tidy data\n\n![](../images/tidy_data2.png){fig-align=center width=80%}\n\n1. Each variable has its own column\n1. Each observation has its own row\n1. Each value has its own cell\n\n\n# Separating data\n\n\n## Separating data\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  country      year rate             \n  <chr>       <dbl> <chr>            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n#### Why is `table3` not tidy?\n:::\n\n::::\n\n::: {.fragment}\n![](../images/tidyr_separate.png){.absolute width=\"60%\" top=\"30%\" left=\"55%\"}\n:::\n\n\n---\n\n## Separating data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseparate(table3, rate, into = c(\"cases\", \"population\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country      year cases  population\n  <chr>       <dbl> <chr>  <chr>     \n1 Afghanistan  1999 745    19987071  \n2 Afghanistan  2000 2666   20595360  \n3 Brazil       1999 37737  172006362 \n4 Brazil       2000 80488  174504898 \n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseparate(table3, rate, into = c(\"cases\", \"population\"), convert = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <dbl>  <int>      <int>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Separating data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseparate(table3, year, into = c(\"century\", \"year2\"), sep = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country     century year2 rate             \n  <chr>       <chr>   <chr> <chr>            \n1 Afghanistan 19      99    745/19987071     \n2 Afghanistan 20      00    2666/20595360    \n3 Brazil      19      99    37737/172006362  \n4 Brazil      20      00    80488/174504898  \n5 China       19      99    212258/1272915272\n6 China       20      00    213766/1280428583\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseparate(table3, year, into = c(\"century\", \"year2\"), sep = 2, remove = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  country      year century year2 rate             \n  <chr>       <dbl> <chr>   <chr> <chr>            \n1 Afghanistan  1999 19      99    745/19987071     \n2 Afghanistan  2000 20      00    2666/20595360    \n3 Brazil       1999 19      99    37737/172006362  \n4 Brazil       2000 20      00    80488/174504898  \n5 China        1999 19      99    212258/1272915272\n6 China        2000 20      00    213766/1280428583\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Code lifecycle\n\nCode is constantly being updated---added and removed\n\nPosit's [`{lifecycle}`](https://lifecycle.r-lib.org/) package tracks code stages\n\n![](../images/lifecycle.svg){fig-align=center}\n\n:::{.fragment}\n![](../images/lifecycle-experimental.svg){.absolute top=\"80%\" left=\"0%\"}\n\n![](../images/lifecycle-deprecated.svg){.absolute top=\"80%\" left=\"45%\"}\n\n![](../images/lifecycle-superseded.svg){.absolute top=\"80%\" left=\"90%\"}\n:::\n\n\n## Code versioning\n\n`{tidyverse}` 2.0.0\n\n`{here}` 1.0.1\n\n`{papaja}` 0.1.3\n\n[major].[minor].[patch]\n\n:::{.fragment}\nIn the tidyverse...\n\n> [Y]ou can assume any package with version number less than 1.0.0 is at least somewhat experimental... The most experimental packages only exist on GitHub.\n:::\n\n\n## Separating data\n\n::: {.callout-warning appearance=\"simple\"}\nThe `separate()` function is being _superseded_ by `separate_wider_delim()` and `separate_wider_position()` for the two use cases described before. But these are both listed as _experimental_, so we're sticking with `separate()`.\n:::\n\n::: {.fragment}\n`separate(table3, rate, into = c(\"cases\", \"population\"), sep = \"/\")` \n\n<center>\n== \n</center>\n\n`separate_wider_delim(table3, rate, names = c(\"cases\", \"population\"), delim = \"/\")`\n:::\n\n\n## Separating data\n\n::: {.callout-warning appearance=\"simple\"}\nThe `separate()` function is being _superseded_ by `separate_wider_delim()` and `separate_wider_position()` for the two use cases described before. But these are both listed as _experimental_, so we're sticking with `separate()`.\n:::\n\n`separate(table3, year, into = c(\"century\", \"year2\"), sep = 2)` \n\n<center>\n== \n</center>\n\n`separate_wider_position(table3, year, widths = c(century = 2, year2 = 2))`\n\n\n# Uniting data\n\n\n## Uniting data\n\n:::: {.columns}\n\n::: {.column width=\"55%\"}\n\n::: {style=\"font-size:85%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country     century year  rate             \n  <chr>       <chr>   <chr> <chr>            \n1 Afghanistan 19      99    745/19987071     \n2 Afghanistan 20      00    2666/20595360    \n3 Brazil      19      99    37737/172006362  \n4 Brazil      20      00    80488/174504898  \n5 China       19      99    212258/1272915272\n6 China       20      00    213766/1280428583\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::\n\n::: {.column width=\"45%\"}\n\n#### Why is `table5` not tidy?\n:::\n\n::::\n\n::: {.fragment}\n![](../images/tidyr_unite.png){.absolute width=\"60%\" top=\"30%\" left=\"55%\"}\n:::\n\n\n## Uniting data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunite(table5, new, century:year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  country     new   rate             \n  <chr>       <chr> <chr>            \n1 Afghanistan 19_99 745/19987071     \n2 Afghanistan 20_00 2666/20595360    \n3 Brazil      19_99 37737/172006362  \n4 Brazil      20_00 80488/174504898  \n5 China       19_99 212258/1272915272\n6 China       20_00 213766/1280428583\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunite(table5, new, century:year, sep = \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  country     new   rate             \n  <chr>       <chr> <chr>            \n1 Afghanistan 1999  745/19987071     \n2 Afghanistan 2000  2666/20595360    \n3 Brazil      1999  37737/172006362  \n4 Brazil      2000  80488/174504898  \n5 China       1999  212258/1272915272\n6 China       2000  213766/1280428583\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Uniting data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunite(table5, new, century:year, sep = \"\", remove = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  country     new   century year  rate             \n  <chr>       <chr> <chr>   <chr> <chr>            \n1 Afghanistan 1999  19      99    745/19987071     \n2 Afghanistan 2000  20      00    2666/20595360    \n3 Brazil      1999  19      99    37737/172006362  \n4 Brazil      2000  20      00    80488/174504898  \n5 China       1999  19      99    212258/1272915272\n6 China       2000  20      00    213766/1280428583\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunite(table5, new, century:year, sep = \"\", remove = FALSE, convert = TRUE)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `unite()`:\n! Arguments in `...` must be passed by position, not name.\n✖ Problematic argument:\n• convert = TRUE\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Coalescing data\n\nCombining data across columns with `NA`s\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoal_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n    a_1   a_2   a_3\n  <dbl> <dbl> <dbl>\n1     1    NA    NA\n2    NA     4    NA\n3    NA    NA     7\n4    NA    NA    NA\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoal_data |> \n  mutate(a_all = coalesce(a_1, a_2, a_3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n    a_1   a_2   a_3 a_all\n  <dbl> <dbl> <dbl> <dbl>\n1     1    NA    NA     1\n2    NA     4    NA     4\n3    NA    NA     7     7\n4    NA    NA    NA    NA\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Coalescing data\n\nCombining data across columns with `NA`s using [select helpers](https://github.com/tidyverse/funs/issues/54#issuecomment-2684357499)\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoal_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n    a_1   a_2   a_3\n  <dbl> <dbl> <dbl>\n1     1    NA    NA\n2    NA     4    NA\n3    NA    NA     7\n4    NA    NA    NA\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoal_data |> \n  mutate(a_all = coalesce(!!quote(!!!across(contains(\"a_\")))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n    a_1   a_2   a_3 a_all\n  <dbl> <dbl> <dbl> <dbl>\n1     1    NA    NA     1\n2    NA     4    NA     4\n3    NA    NA     7     7\n4    NA    NA    NA    NA\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n# Incomplete data sets\n\n## Missing data\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstocks\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 3\n   year   qtr return\n  <dbl> <dbl>  <dbl>\n1  2015     1   1.88\n2  2015     2   0.59\n3  2015     3   0.35\n4  2015     4  NA   \n5  2016     2   0.92\n6  2016     3   0.17\n7  2016     4   2.66\n```\n\n\n:::\n:::\n\n\n\n\nWhat is missing?\n\n::: {.fragment}\n* Explicitly missing (Q4 2015 is `NA`)\n* Implicitly missing (Q1 2016 absent)\n:::\n:::\n\n::: {.column width=\"40%\"}\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstocks |> \n  complete(year, qtr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n   year   qtr return\n  <dbl> <dbl>  <dbl>\n1  2015     1   1.88\n2  2015     2   0.59\n3  2015     3   0.35\n4  2015     4  NA   \n5  2016     1  NA   \n6  2016     2   0.92\n7  2016     3   0.17\n8  2016     4   2.66\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n::::\n\n## Missing data\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstocks\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 3\n   year   qtr return\n  <dbl> <dbl>  <dbl>\n1  2015     1   1.88\n2  2015     2   0.59\n3  2015     3   0.35\n4  2015     4  NA   \n5  2016     2   0.92\n6  2016     3   0.17\n7  2016     4   2.66\n```\n\n\n:::\n:::\n\n\n\n\nWhat is missing?\n\n:::\n\n::: {.column width=\"40%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstocks |> \n  complete(year, qtr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n   year   qtr return\n  <dbl> <dbl>  <dbl>\n1  2015     1   1.88\n2  2015     2   0.59\n3  2015     3   0.35\n4  2015     4  NA   \n5  2016     1  NA   \n6  2016     2   0.92\n7  2016     3   0.17\n8  2016     4   2.66\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n::: {.callout-warning}\n#### Important for factorial designs and for data validation\n:::\n\n\n## Combinations of factors\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruits\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  type    year size  weights\n  <chr>  <dbl> <fct>   <dbl>\n1 apple   2010 XS       2.94\n2 orange  2010 S        2.91\n3 apple   2012 M        5.74\n4 orange  2010 S        5.12\n5 orange  2010 S        4.17\n6 orange  2012 M        2.99\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruits |> expand(type, size)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 2\n  type   size \n  <chr>  <fct>\n1 apple  XS   \n2 apple  S    \n3 apple  M    \n4 apple  L    \n5 orange XS   \n6 orange S    \n7 orange M    \n8 orange L    \n```\n\n\n:::\n:::\n\n\n\nreturn all **possible** combinations\n:::\n:::\n\n::::\n\n\n## Combinations of factors\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruits\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  type    year size  weights\n  <chr>  <dbl> <fct>   <dbl>\n1 apple   2010 XS       2.94\n2 orange  2010 S        2.91\n3 apple   2012 M        5.74\n4 orange  2010 S        5.12\n5 orange  2010 S        4.17\n6 orange  2012 M        2.99\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruits |> expand(nesting(type, size))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  type   size \n  <chr>  <fct>\n1 apple  XS   \n2 apple  M    \n3 orange S    \n4 orange M    \n```\n\n\n:::\n:::\n\n\n\nreturn all **existing** combinations\n:::\n:::\n\n::::\n\n\n## Filling data\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreatment\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  person           treatment response\n  <chr>                <dbl>    <dbl>\n1 Derrick Whitmore         1        7\n2 <NA>                     2       10\n3 <NA>                     3        9\n4 Katherine Burke          1        4\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreatment |> \n  fill(person)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  person           treatment response\n  <chr>                <dbl>    <dbl>\n1 Derrick Whitmore         1        7\n2 Derrick Whitmore         2       10\n3 Derrick Whitmore         3        9\n4 Katherine Burke          1        4\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n::::\n\n\n\n## Solving the problem\n\nWhat code turns `data1` into `data2`?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nnrows <- 12\ndata1 <- tibble(id = rep(1:4, each = 3), \n                cond1 = rep(1:3, times = 4), \n                cond2 = rep(c(\"A\", \"B\", \"A\", \"B\"), each = 3), \n                date = sample(seq(as.Date('2022-01-01'), \n                                  as.Date('2022-02-28'), by=\"day\"), nrows)) |> \n  filter(id != 2 | cond1 != 2)\n```\n:::\n\n\n\n\n\n## Solving the problem\n\nWhat code turns `data1` into `data2`?\n\n::::{.columns}\n:::{.column width=\"50%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 52%'}\n# A tibble: 11 × 4\n      id cond1 cond2 date      \n   <int> <int> <chr> <date>    \n 1     1     1 A     2022-02-24\n 2     1     2 A     2022-01-21\n 3     1     3 A     2022-01-23\n 4     2     1 B     2022-01-27\n 5     2     3 B     2022-01-02\n 6     3     1 A     2022-02-03\n 7     3     2 A     2022-02-10\n 8     3     3 A     2022-02-21\n 9     4     1 B     2022-01-31\n10     4     2 B     2022-01-30\n11     4     3 B     2022-02-13\n```\n\n\n:::\n:::\n\n\n\n:::\n:::{.column width=\"50%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```{style='font-size: 52%'}\n# A tibble: 12 × 5\n      id condition year  month day  \n   <int> <chr>     <chr> <chr> <chr>\n 1     1 1A        2022  02    24   \n 2     1 2A        2022  01    21   \n 3     1 3A        2022  01    23   \n 4     2 1B        2022  01    27   \n 5     2 2B        <NA>  <NA>  <NA> \n 6     2 3B        2022  01    02   \n 7     3 1A        2022  02    03   \n 8     3 2A        2022  02    10   \n 9     3 3A        2022  02    21   \n10     4 1B        2022  01    31   \n11     4 2B        2022  01    30   \n12     4 3B        2022  02    13   \n```\n\n\n:::\n:::\n\n\n\n:::\n::::\n\n## Let's code!\n\n[Separating data](../code/16_separating.html){target=\"_blank\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}