{
  "hash": "610f651e014ec650a9bb07d33ab56b93",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Factors\"\nauthor: \"Jeff Stevens\"\ndate: \"2023-03-20\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: auto\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2025](https://jeffreyrstevens.quarto.pub/dpavir)\"\n    code-link: true\n---\n\n\n\n\n\n# Introduction\n\n\n## The problem\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nWhat is needed to create `data2` from `data1`?\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 2\n  species      n\n  <chr>    <int>\n1 Droid        6\n2 Gungan       3\n3 Human       35\n4 Kaminoan     2\n5 Mirialan     2\n6 Twi'lek      2\n7 Wookiee      2\n8 Zabrak       2\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  species     n\n  <fct>   <int>\n1 Human      35\n2 Other      10\n3 Android     6\n4 Gungan      3\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n<!-- ## Set-up -->\n\n<!-- ```{r} -->\n<!-- library(tidyverse) -->\n<!-- # library(palmerpenguins) -->\n<!-- ``` -->\n\n\n## Factors\n\nCategorical variables represented by **augmented integers**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(x1 <- c(\"Apr\", \"Jun\", \"Oct\", \"Jan\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Apr\" \"Jun\" \"Oct\" \"Jan\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmonth.abb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n```\n\n\n:::\n\n```{.r .cell-code}\n(y1 <- factor(x1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Apr Jun Oct Jan\nLevels: Apr Jan Jun Oct\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(y1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(y1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Mental model\n\n![](../images/mentalmodel_factors.png){fig-align=\"center\"}\n\n\n## View/set factor levels\n\n`levels()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Apr Jun Oct Jan\nLevels: Apr Jan Jun Oct\n```\n\n\n:::\n\n```{.r .cell-code}\nlevels(y1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Apr\" \"Jan\" \"Jun\" \"Oct\"\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(y2 <- factor(x1, levels = month.abb))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Apr Jun Oct Jan\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n\n\n:::\n\n```{.r .cell-code}\nlevels(y2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Label factors\n\n`labels` argument\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(y3 <- factor(y1, labels = c(\"April\", \"January\", \"June\", \"October\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] April   June    October January\nLevels: April January June October\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-note}\nNote you have to label them in the order they appear **as levels**.\n:::\n\n\n## Factors with {forcats}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(forcats)\n```\n:::\n\n\n\n\n![](../images/forcats-meme.jpg){fig-align=\"center\" width=\"58%\"}\n\n![](../images/forcats_hex.png){.absolute width=\"15%\" top=\"0%\" left=\"90%\"}\n\n\n<!-- ::: {.aside} -->\n<!-- Source: [Allison Horst](https://allisonhorst.com/r-packages-functions) -->\n<!-- ::: -->\n\n\n## Data set\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21,483 × 9\n    year marital         age race  rincome        partyid    relig denom tvhours\n   <int> <fct>         <int> <fct> <fct>          <fct>      <fct> <fct>   <int>\n 1  2000 Never married    26 White $8000 to 9999  Ind,near … Prot… Sout…      12\n 2  2000 Divorced         48 White $8000 to 9999  Not str r… Prot… Bapt…      NA\n 3  2000 Widowed          67 White Not applicable Independe… Prot… No d…       2\n 4  2000 Never married    39 White Not applicable Ind,near … Orth… Not …       4\n 5  2000 Divorced         25 White Not applicable Not str d… None  Not …       1\n 6  2000 Married          25 White $20000 - 24999 Strong de… Prot… Sout…      NA\n 7  2000 Never married    36 White $25000 or more Not str r… Chri… Not …       3\n 8  2000 Divorced         44 White $7000 to 7999  Ind,near … Prot… Luth…      NA\n 9  2000 Married          44 White $25000 or more Not str d… Prot… Other       0\n10  2000 Married          47 White $25000 or more Strong re… Prot… Sout…       3\n# ℹ 21,473 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n<!-- ## Count factor level observations -->\n\n<!-- :::: {.columns} -->\n\n<!-- ::: {.column width=\"50%\"} -->\n<!-- ```{r} -->\n<!-- gss_cat |> -->\n<!--   count(marital) -->\n<!-- ``` -->\n<!-- ::: -->\n\n<!-- ::: {.column width=\"50%\"} -->\n<!-- ```{r} -->\n<!-- gss_cat |> -->\n<!--   count(relig, sort = TRUE) -->\n<!-- ``` -->\n<!-- ::: -->\n\n<!-- :::: -->\n\n\n# Reordering factor levels\n\n## Check level order\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(y1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Apr\" \"Jan\" \"Jun\" \"Oct\"\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-note}\nBy default, level elements are sorted alphabetically.\n:::\n\n## Check level order with pipes\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarital <- gss_cat |>\n  pull(marital)\nmarital |> levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"No answer\"     \"Never married\" \"Separated\"     \"Divorced\"     \n[5] \"Widowed\"       \"Married\"      \n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-note}\nHere, order was determined already.\n:::\n\n\n## Reordering levels\n\nIn the order present in the data with `fct_inorder()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(marital, 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Never married Divorced      Widowed       Never married Divorced     \n [6] Married       Never married Divorced      Married       Married      \n[11] Married       Married       Married       Married       Divorced     \n[16] Married       Widowed       Never married Married       Married      \nLevels: No answer Never married Separated Divorced Widowed Married\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarital |> fct_inorder() |>\n  levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Never married\" \"Divorced\"      \"Widowed\"       \"Married\"      \n[5] \"Separated\"     \"No answer\"    \n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Reordering levels\n\nIn the order based on number of observations of each level with `fct_infreq()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |>\n  count(marital, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  marital           n\n  <fct>         <int>\n1 Married       10117\n2 Never married  5416\n3 Divorced       3383\n4 Widowed        1807\n5 Separated       743\n6 No answer        17\n```\n\n\n:::\n:::\n\n\n\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmarital |> fct_infreq() |>\n  levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Married\"       \"Never married\" \"Divorced\"      \"Widowed\"      \n[5] \"Separated\"     \"No answer\"    \n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Reordering levels\n\nIn reverse order of factor levels with `fct_rev()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(marital)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"No answer\"     \"Never married\" \"Separated\"     \"Divorced\"     \n[5] \"Widowed\"       \"Married\"      \n```\n\n\n:::\n\n```{.r .cell-code}\nmarital |> fct_rev() |>\n  levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Married\"       \"Widowed\"       \"Divorced\"      \"Separated\"    \n[5] \"Never married\" \"No answer\"    \n```\n\n\n:::\n:::\n\n\n\n\n\n## Manually reorder factor levels \n\n`fct_relevel()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(relig_summary <- gss_cat |>\n    group_by(relig) |>\n    summarise(\n      tvhours = mean(tvhours, na.rm = TRUE),\n      n = n()))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 × 3\n   relig                   tvhours     n\n   <fct>                     <dbl> <int>\n 1 No answer                  2.72    93\n 2 Don't know                 4.62    15\n 3 Inter-nondenominational    2.87   109\n 4 Native american            3.46    23\n 5 Christian                  2.79   689\n 6 Orthodox-christian         2.42    95\n 7 Moslem/islam               2.44   104\n 8 Other eastern              1.67    32\n 9 Hinduism                   1.89    71\n10 Buddhism                   2.38   147\n11 Other                      2.73   224\n12 None                       2.71  3523\n13 Jewish                     2.52   388\n14 Catholic                   2.96  5124\n15 Protestant                 3.15 10846\n```\n\n\n:::\n:::\n\n\n\n\n\n## Manually reorder factor levels \n\n`fct_relevel()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_summary |> ggplot(aes(x = tvhours, y = relig)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](22_factors_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n\n\n\n## Manually reorder factor levels \n\n`fct_relevel()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_summary_releveled <- relig_summary |>\n  mutate(relig = fct_relevel(relig, c(\"None\", \"Other\"), after = 2))\nlevels(relig_summary_releveled$relig)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"No answer\"               \"Don't know\"             \n [3] \"None\"                    \"Other\"                  \n [5] \"Inter-nondenominational\" \"Native american\"        \n [7] \"Christian\"               \"Orthodox-christian\"     \n [9] \"Moslem/islam\"            \"Other eastern\"          \n[11] \"Hinduism\"                \"Buddhism\"               \n[13] \"Jewish\"                  \"Catholic\"               \n[15] \"Protestant\"              \"Not applicable\"         \n```\n\n\n:::\n:::\n\n\n\n\n\n## Manually reorder factor levels \n\n`fct_relevel()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_summary_releveled |> ggplot(aes(x = tvhours, y = relig)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](22_factors_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n\n\n\n## Order factors by another variable\n\n`fct_reorder()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig_summary |> mutate(relig = fct_reorder(relig, tvhours)) |>\n  ggplot(aes(x = tvhours, y = relig)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](22_factors_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\n\n\n## Order factors by another variable\n\n`fct_reorder()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](22_factors_files/figure-revealjs/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\n\n\n\n<!-- # Combining factors -->\n\n\n\n# Recode factors\n\n## Recode factor levels \n\n`fct_recode()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |>\n  count(partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   partyid                n\n   <fct>              <int>\n 1 No answer            154\n 2 Don't know             1\n 3 Other party          393\n 4 Strong republican   2314\n 5 Not str republican  3032\n 6 Ind,near rep        1791\n 7 Independent         4119\n 8 Ind,near dem        2499\n 9 Not str democrat    3690\n10 Strong democrat     3490\n```\n\n\n:::\n:::\n\n\n\n\n\n## Recode factor levels \n\n`fct_recode()`\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |>\n  mutate(partyid = fct_recode(partyid,\n                              \"Republican, strong\"    = \"Strong republican\",\n                              \"Republican, weak\"      = \"Not str republican\",\n                              \"Independent, near rep\" = \"Ind,near rep\",\n                              \"Independent, near dem\" = \"Ind,near dem\",\n                              \"Democrat, weak\"        = \"Not str democrat\",\n                              \"Democrat, strong\"      = \"Strong democrat\"\n  )) |>\n  count(partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   partyid                   n\n   <fct>                 <int>\n 1 No answer               154\n 2 Don't know                1\n 3 Other party             393\n 4 Republican, strong     2314\n 5 Republican, weak       3032\n 6 Independent, near rep  1791\n 7 Independent            4119\n 8 Independent, near dem  2499\n 9 Democrat, weak         3690\n10 Democrat, strong       3490\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Recode factor levels \n\n`fct_recode()`\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |>\n  mutate(partyid = fct_recode(partyid,\n                              \"Independent, near rep\" = \"Ind,near rep\",\n                              \"Independent, near dem\" = \"Ind,near dem\",\n  )) |>\n  count(partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 2\n   partyid                   n\n   <fct>                 <int>\n 1 No answer               154\n 2 Don't know                1\n 3 Other party             393\n 4 Strong republican      2314\n 5 Not str republican     3032\n 6 Independent, near rep  1791\n 7 Independent            4119\n 8 Independent, near dem  2499\n 9 Not str democrat       3690\n10 Strong democrat        3490\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n<!-- ## Aggregate multiple levels -->\n\n<!-- ::: {style=\"font-size:90%\"} -->\n<!-- ```{r} -->\n<!-- gss_cat |> -->\n<!--   mutate(partyid = fct_recode(partyid, -->\n<!--                               \"Republican, strong\"    = \"Strong republican\", -->\n<!--                               \"Republican, weak\"      = \"Not str republican\", -->\n<!--                               \"Independent, near rep\" = \"Ind,near rep\", -->\n<!--                               \"Independent, near dem\" = \"Ind,near dem\", -->\n<!--                               \"Democrat, weak\"        = \"Not str democrat\", -->\n<!--                               \"Democrat, strong\"      = \"Strong democrat\", -->\n<!--                               \"Other\"                 = \"No answer\", -->\n<!--                               \"Other\"                 = \"Don't know\", -->\n<!--                               \"Other\"                 = \"Other party\" -->\n<!--   )) |> -->\n<!--   count(partyid) -->\n<!-- ``` -->\n<!-- ::: -->\n\n\n## Collapse multiple levels \n\n`fct_collapse()`\n\n::: {style=\"font-size:90%\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |>\n  mutate(partyid = fct_collapse(partyid,\n                                \"other\" = c(\"No answer\", \"Don't know\", \"Other party\"),\n                                \"rep\" = c(\"Strong republican\", \"Not str republican\"),\n                                \"ind\" = c(\"Ind,near rep\", \"Independent\", \"Ind,near dem\"),\n                                \"dem\" = c(\"Not str democrat\", \"Strong democrat\")\n  )) |>\n  count(partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  partyid     n\n  <fct>   <int>\n1 other     548\n2 rep      5346\n3 ind      8409\n4 dem      7180\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Combine factor levels \n\nBased on number of groups: `fct_lump_n()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |>\n  mutate(relig = fct_lump_n(relig, n = 5)) |>\n  count(relig, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  relig          n\n  <fct>      <int>\n1 Protestant 10846\n2 Catholic    5124\n3 None        3523\n4 Other        913\n5 Christian    689\n6 Jewish       388\n```\n\n\n:::\n:::\n\n\n\n\n\n## Combine factor levels \n\nBased on proportion of total: `fct_lump_prop()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |>\n  mutate(relig = fct_lump_prop(relig, prop = 0.1, \n                               other_level = \"Something else\")) |>\n  count(relig, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  relig              n\n  <fct>          <int>\n1 Protestant     10846\n2 Catholic        5124\n3 None            3523\n4 Something else  1990\n```\n\n\n:::\n:::\n\n\n\n\n\n## Combine factor levels \n\nBased on minimum number: `fct_lump_min()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat |>\n  mutate(relig = fct_lump_min(relig, min = 200)) |>\n  count(relig, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  relig          n\n  <fct>      <int>\n1 Protestant 10846\n2 Catholic    5124\n3 None        3523\n4 Other        913\n5 Christian    689\n6 Jewish       388\n```\n\n\n:::\n:::\n\n\n\n\n\n## Solving the problem\n\nWhat code generates `data2` from `data1`?\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 2\n  species      n\n  <chr>    <int>\n1 Droid        6\n2 Gungan       3\n3 Human       35\n4 Kaminoan     2\n5 Mirialan     2\n6 Twi'lek      2\n7 Wookiee      2\n8 Zabrak       2\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  species     n\n  <fct>   <int>\n1 Human      35\n2 Other      10\n3 Android     6\n4 Gungan      3\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::::\n\n\n## Let's code!\n\n[Factors](../code/22_factors.html){target=\"_blank\"} [[Rmd](../code/22_factors.Rmd){target=\"_blank\"}]\n",
    "supporting": [
      "22_factors_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}