---
title: "Coding basics"
author: "Jeff Stevens"
date: "2025-01-27"
date-format: iso
execute:
  echo: true
  freeze: true
format:
  revealjs: 
    theme: custom.scss
    slide-number: true
    code-link: true
    code-line-numbers: false
    highlight-style: github
    code-overflow: wrap
    footer: "[DPaViR 2025](https://jeffreyrstevens.quarto.pub/dpavir2025)"
    logo: "../logo/dpavir_hex.png"
---

## Review: Mental model of RStudio

![](../images/mentalmodel_rstudio.png){fig-align="center"}

# Coding elements

## Coding actions

::: {.incremental}
* To _evaluate_ means to send code to the R interpreter to process
  - `2 + 2` is evaluated by submitting the numbers 2 and 2 to the addition function
* To _return_ means to output the results
  - After `2 + 2` is evaluated, the number `4` is returned
* To _print_ means to return the output to the console
  - Output can be returned without being printed
:::

## Comments

* Everything on a line after a hashtag `#` is a _comment_

* Comments are not evaluated

* Comments can be used as notes for the reader and to prevent code from being evaluated

```{r}
# we're about to add 2 and 2
2 + 2 # looky there, we added 2 and 2
# 2 + 2  the hashtag was before the code here, so the code was not evaluated
```

## Functions

### Perform computations and return output
```{r}
Sys.Date()
```

:::{.fragment}
```{r}
getwd()
```
:::


## Arguments

### Information needed by functions

:::{.fragment}
They include argument _names_ and _values_

```{r eval = FALSE}
read.csv(file = "mypath/myfile.csv")
dplyr::filter(.data = mydata, mycolumn == "Sophomore")
plot(x = x, y = y)
write.csv(x = mydata, file = "mypath/myfile.csv")
```
:::

:::{.fragment}
:::{.callout-note}
If you give argument values in correct order, you don't need to include argument names. But it's usually a good idea anyway.

```{r eval = FALSE}
read.csv("mypath/myfile.csv")
dplyr::filter(mydata, mycolumn == "Sophomore")
plot(x, y)
write.csv(mydata, "mypath/myfile.csv")
```
:::
:::


## Objects

### Variables created to store information

```{r eval = FALSE}
mydata <- read.csv(file = "mypath/myfile.csv")
trimmed_data <- dplyr::filter(.data = mydata, mycolumn == "Sophomore")
myplot <- plot(x = x, y = y)
```


## Assignment

### Assign a value or set of values to an object

```{r}
# the best way
x <- 9
# avoid this
y = 10
# definitely don't do this
11 -> z
```

:::{.fragment}
:::{.callout-note}
You can assign multiple objects at the same time:
```{r}
# chain assignments of the same value to different objects
a <- b <- c <- 0
```
:::
:::


## Assignment

### Viewing object contents while assigning

```{r}
x <- 9  # assign value 9 to object x
```

:::{.fragment}
```{r}
x  # print contents of object x to console
```
:::

:::{.fragment}
```{r}
(x <- 9)  # add parentheses to print to console when assigning
```
:::

## When things go wrong


### Errors

When a function hits a problem that stops it from completing
```{r eval=FALSE}
mean()
```
```
Error in mean.default() : argument "x" is missing, with no default
```


## When things go wrong


### Warnings

When a function completes but something strang happens, so it alerts you

```{r warning=TRUE}
mean(sqrt(-1))
```


## When things go wrong


### Messages

When a function just wants to let you know something

```{r message=TRUE}
library(tidyverse)
```



## Mental model of coding

![](../images/mentalmodel_coding.png){fig-align="center"}


# Writing good code

## Who are we coding for?

:::{.fragment}
![](../images/coding_audience.png){.absolute width="50%" top="10%" left="50%"}
:::

:::{.incremental}
1. Computer

2. Ourselves

3. Others
:::


## How to write good code

### The Fundamental Theorem of Readability

::: {.fragment}
> Code should be written to minimize the time it would take for someone else to understand it.

- From: [_The Art of Readable Code_](https://learning.oreilly.com/library/view/the-art-of/9781449318482/) by Boswell et al. 2011
:::

## Principles of writing good code

::: {.incremental}
* Write less code
* Avoid repetition
* Use clear syntax
* Use good names
* Use comments
:::

## Coding style: Spacing  {background-image="../images/drake_meme.png" background-size="70%" background-position="71% 75%"}

:::{.drake-upper}
```{r eval = FALSE}
mean1<-mean (x[1,4:10],na.rm=TRUE)+0.5
```
:::
:::{.drake-lower}
```{r eval = FALSE}
mean1 <- mean(x[1, 4:10], na.rm = TRUE) + 0.5
```
:::

## Coding style: Clarity {background-image="../images/drake_meme.png" background-size="70%" background-position="71% 75%"}

:::{.drake-upper}
```{r eval = FALSE}
mean(x, T)
```
:::
:::{.drake-lower}
```{r eval = FALSE}
mean(x, na.rm = TRUE)
```
:::


## Coding style: Indenting {background-image="../images/drake_meme.png" background-size="70%" background-position="71% 75%"}


:::{.drake-upper}
```{r eval = FALSE}
for(i in 1:10) {
for(j in 1:5) {
print(x[i, j])
}
}
```
:::
:::{.drake-lower}
```{r eval = FALSE}
for(i in 1:10) {
  for(j in 1:5) {
    print(x[i, j])
  }
}
```
:::



## Coding style: Line breaks {background-image="../images/drake_meme.png" background-size="70%" background-position="71% 75%"}


:::{.drake-upper}
```{r eval = FALSE}
if (x > 5) {print("Too big!")}
```
:::
:::{.drake-lower}
```{r eval = FALSE}
if (x > 5) {
  print("Too big!")
}
```
:::

## Coding style

[The tidyverse style guide](https://style.tidyverse.org/)

* Use `<-` as assignment operator

* Use space between operators (`*`, `=`, `==`) and after commas

* Do not use space between function and parentheses <!--(except for `if ()`)-->

* Use indents to separate nested components (<kbd>Ctrl/Cmd</kbd>+<kbd>I</kbd>)

* Write out argument names

* Write out `TRUE` and `FALSE`

* Use `"`, not `'`, for quoting text unless it already contains double quotes


# Naming things

## Naming things

### Core principles for naming objects, data columns, files, folders

* Be nice to machines

* Be nice to humans

* Make sorting and searching easy

:::{.aside}
Sources: [Naming things: Jenny Bryan](https://speakerdeck.com/jennybc/how-to-name-files), [Project structure: Danille Navarro](https://slides.djnavarro.net/project-structure)
:::


## Be nice to machines

:::{.incremental}
* avoid spaces, special characters, and accented characters
  - `my_file.R` not `My filé$.R`
* avoid case sensitivity
  - `foo.R` and `Foo.R`
* use consistent, searchable text chunks
  - `expt1_cond2_subj114.csv`
* can't start with a number
:::


##  Be nice to humans

:::{.fragment}
* be descriptive (not `x`) but not too descriptive (`this_is_my_object`)
:::
:::{.fragment}
* separate words (preferably using snake_case)
![](../images/coding_cases_allisonhorst.png){.absolute width="40%" left="78%" top="0%"}
:::
:::{.fragment}
* avoid capital letters (case matters: `a ≠ A`)
:::
:::{.fragment}
* use human readable names that contain **content** (slugs)
  - `prelim_analysis_expt1.R`
:::


##  Make sorting and searching easy

:::{.incremental}
* use ISO 8601 standard for date `YYYY-MM-DD`
* no, really---always use ISO 8601 standard for date!!
* use ISO 8601 dates before or after **slugs**
  - `2021-04-06_prelim_analysis_expt1.Rmd`
  - `prelim_analysis_expt1_2021-04-06.Rmd`
* use padded numbers as prefixes
  - `01_preface.Rmd`
  - `02_introduction.Rmd`
:::
![](../images/perfect_date.jpeg){.absolute width="30%" left="90%" top="0%"}
![](../images/dates_meme.jpeg){.absolute width="30%" left="90%" top="50%"}


## Mental model of coding

![](../images/mentalmodel_coding.png){fig-align="center"}


## Let's code!

[Coding basics](../code/03_coding.html){target="_blank"}
