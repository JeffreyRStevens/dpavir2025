{
  "hash": "e0a9e6b63c8019062a947ee5c52809f5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Literate programming\"\nauthor: \"Jeff Stevens\"\ndate: \"2027-01-31\"\ndate-format: iso\nexecute:\n  echo: true\n  freeze: auto\nformat:\n  revealjs: \n    theme: custom.scss\n    slide-number: true\n    code-link: true\n    code-line-numbers: false\n    highlight-style: github\n    code-overflow: wrap\n    footer: \"[DPaViR 2025](https://jeffreyrstevens.quarto.pub/dpavir2025)\"\n    logo: \"../logo/dpavir_hex.png\"\n---\n\n\n\n# Review\n\n## Mental model of file directories\n\n![](../images/mentalmodel_workflow.png){fig-align=\"center\"}\n\n\n\n# File types\n\n\n\n## Computer files\n\n#### All files are collections of 1s and 0s\n\n![](../images/binary1s0s.jpg){.absolute width=\"80%\" top=\"25%\" left=\"10%\"}\n\n---\n\n## Plain text\n\n* Only characters with no formatting\n\n* Viewable in text editor\n\n* Used for plain text storage (`.txt`, `.csv`) and coding (`.R`, `.Rmd`, `.py`, `.m`, `.cpp`)\n\n![](../images/cv_text.png){.absolute width=\"80%\" top=\"50%\" left=\"10%\"}\n\n---\n\n## Binary\n\n* 1s and 0s are converted to images, audio, formatted text\n\n* WSYIWYG\n\n* Binary document files: `.docx`, `.xlsx`, `.pptx`, `.pdf`, `.png`, `.jpg`\n\n![](../images/cv_pdf.png){.absolute width=\"68%\" top=\"50%\" left=\"15%\"}\n\n\n\n# Interacting with R\n\n## Interacting with R\n\n* Console\n\n* R scripts (`.R`)\n\n* R Markdown files (`.Rmd`)\n\n---\n\n## Console\n\n![](../images/console.png){fig-align=\"center\"}\n\n\n\n---\n\n## Scripts\n\n![](../images/r_script.png)\n\n\n---\n\n## Scripts\n\n### Run commands\n\n#### Line-by-line or selected code\n\n<kbd>Ctrl/Cmd</kbd>+<kbd>Enter</kbd>\n\n#### All code above cursor\n\n<kbd>Ctrl/Cmd</kbd>+<kbd>Alt/Opt</kbd>+<kbd>B</kbd>\n\n#### All code below cursor\n\n<kbd>Ctrl/Cmd</kbd>+<kbd>Alt/Opt</kbd>+<kbd>E</kbd>\n\n\n\n---\n\n## Scripts\n\n### Run commands\n\n#### Sourcing runs whole script\n\n<kbd>Ctrl/Cmd</kbd>+<kbd>Shift</kbd>+<kbd>S</kbd>\n\n\n---\n\n## Comments\n\n### Comments are not executed by R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+2 # this is a comment--I can say stuff that isn't run. use me often!\n# this is also a comment--I can be on my own line!\n```\n:::\n\n\n\n---\n\n## Sections\n\nYou can organize your R scripts with sections\n\n<kbd>Ctrl/Cmd</kbd>+<kbd>Shift</kbd>+<kbd>R</kbd> inserts a section.\n\nBut all you need is \n\n`# <section label> ----` (add `#`s for subsections)\n\n![](../images/rstudio_sections.png)\n\n\n\n---\n\n## Let's code!\n\n:::{.incremental}\n::: {style=\"font-size: 90%;\"}\n* Open course RStudio project.\n* Create new R script and save as `test.R`.\n* Type `library(palmerpenguins)` into script.\n* Is `palmerpenguins` loaded? How can you check?\n* Run the line to load `palmerpenguins`.\n* Type `print(penguins)` into script.\n* Source the whole script.\n* Comment out the `print(penguins)` line.\n* Source the script.\n* Insert a section.\n:::\n:::\n\n# Literate programming\n\n---\n\n## Literate programming\n\n> An article [. . . ] in a scientific publication is not the scholarship\nitself, it is merely advertising of the scholarship. The actual\nscholarship is the complete software development environment and\nthe complete set of instructions which generated the figures\n— Buckheit & Donoho (1995)\n\n:::{.aside}\nBuckheit, J., & Donoho, D. L. (1995). WaveLab and reproducible research. In A. Antoniadis & G. Oppenheim (Eds.), *Wavelets and Statistics* (pp. 55–81). Springer-Verlag.\n:::\n\n![](../images/literate_programming.jpg){.absolute width=\"23%\" top=\"7%\" left=\"95%\"}\n\n## Why use literate programming?\n\n1. Direct connection between computations and presentation\n\n1. Updating presentation is a breeze\n\n1. Transparent and reproducible\n\n1. Plain text less corruptable\n\n1. Easily create different kinds of output styles and files\n\n1. Easily switch between different templates\n\n---\n\n## Mental model of R Markdown\n\n![](../images/mentalmodel_rmarkdown.png){fig-align=\"center\"}\n\n\n---\n\n## Markdown\n\n#### Human-readable markup that can be converted to formatted file types\n\n![](../images/markdown.png){width=\"120%\"}\n\n---\n\n## Markdown\n\n#### See [Markdown tutorial](https://commonmark.org/help/tutorial/) for Markdown syntax\n\n### Comments\n\nMarkdown uses HTML syntax for comments \n\n`<!-- comment here -->`\n\n\n## Visual editor\n\n![](../images/visual_editor.png){fig-align=\"center\"}\n\n---\n\n## R Markdown\n\n#### Human-readable markup that embeds R code and output into formatted file types\n\n![](../images/rmarkdown_hex.png){.absolute width=\"15%\" top=\"2%\" left=\"95%\"}\n![](../images/myrmarkdown.png){width=\"100%\" fig-align=\"center\"}\n\n---\n\n## From text to document\n\n![](../images/rmarkdown_allisonhorst.png){width=\"100%\" fig-align=\"center\"}\n\n:::{.aside}\nSource: <a href = \"https://github.com/allisonhorst/stats-illustrations\">Allison Horst</a></figcaption>\n:::\n\n---\n\n## Inline R code\n\n#### Embed R code directly within your text with <code>&#96;r &#96;</code>\n\n:::{.fragment}\n#### Code:\n\n<code>The answer to 2 + 2 is &#96;r 2 + 2&#96;</code>\n:::\n\n:::{.fragment}\n#### Output:\n\nThe answer to 2 + 2 is 4.\n:::\n\n---\n\n## R code chunks/blocks\n\n#### Write large chunks of R code outside of text\n\n:::{.fragment}\n#### Code:\n<code>&#96;&#96;&#96;{r}<br>rnorm(10, mean = 0, sd = 1)<br>&#96;&#96;&#96;</code>\n:::\n\n:::{.fragment}\n#### Output:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  0.72315029  2.21450426  0.32253993  0.09353477  0.80128382 -0.46243316\n [7] -1.36556242  1.65490338  0.17823792 -1.38120685\n```\n\n\n:::\n:::\n\n\n:::\n\n---\n\n## Embed figures\n\n<code>&#96;&#96;&#96;{r}<br>plot(1:10, 2:11)<br>&#96;&#96;&#96;</code>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](05_rmarkdown_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n\n## Mental model of R Markdown\n\n![](../images/mentalmodel_rmarkdown.png){fig-align=\"center\"}\n\n\n## Let's code!\n\n:::{.incremental}\n* Create new R Markdown file.\n\n* Type \"<code>The mean of the first 9 digits is &#96;r mean(1:9)&#96;.</code>\"\n\n* Knit/render the document.\n\n* Create a new code chunk.\n\n* Inside the code chunk, load the `palmerpenguins` package and print the `penguins` data set.\n\n* Run the code chunk without knitting the file.\n\n* Knit/render the file.\n\n:::\n\n",
    "supporting": [
      "05_rmarkdown_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}