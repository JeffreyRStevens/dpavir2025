---
title: "Merging rows"
author: "Jeff Stevens"
date: "2023-03-03"
date-format: iso
execute:
  echo: true
  freeze: true
format:
  revealjs: 
    theme: custom.scss
    slide-number: true
    code-line-numbers: false
    highlight-style: github
    code-overflow: wrap
    footer: "[DPaViR 2025](https://jeffreyrstevens.github.io/dpavir2025)"
    code-link: true
    logo: "../logo/dpavir_hex.png"
---

# Introduction


## The problem

```{r echo = FALSE}
library(tidyverse)
nrows <- 12
data1 <- tibble(id = 1:nrows, resp = round(runif(nrows), nrows))
data2 <- tibble(id = 1:nrows, cond = rep(1:3, times = 4))
data3 <- data1 |> 
  semi_join(filter(data2, cond == 1), by = "id")
```

What's different between these data sets? 

What is needed to create `data3` from `data1` and `data2`?

:::: {.columns}

::: {.column width="31%"}

```{r}
data1
```
:::

::: {.column width="28%"}

```{r}
data2
```
:::

::: {.column width="40%"}

```{r}
data3
```
:::

::::


## Set-up

```{r}
library(dplyr)
library(nycflights13)
(flights2 <- select(flights, year:dep_time, carrier, tailnum))
```


## Set-up

```{r}
set.seed(1)
(airlines2 <- slice_sample(airlines, prop = 0.5))
(airlines3 <- rename(airlines2, airline = carrier))
```


## Joining with {dplyr}

```{r, message = FALSE}
library(dplyr)
```

![](../images/joins_semi.gif){fig-align="center" width="45%"}

![](../images/dplyr_hex.png){.absolute width="15%" top="0%" left="95%"}


::: {.aside}
Source: [Garrick Aden-Buie](https://github.com/gadenbuie/tidyexplain)
:::
<!-- <img src="images/white_bar.png", width = 40%, style = "position:absolute; top: 19%; left: 40%"></img> -->
<!-- <img src="images/white_bar.png", width = 40%, style = "position:absolute; top: 19%; left: 60%"></img> -->


# Filtering joins

## Filtering joins

#### Affect rows

![](../images/joins_semi.gif){fig-align="center" width="50%"}


## Semi joins

#### Keep only matching observations

![](../images/join-semi.png){.absolute width="60%" top="35%" left="0%"}

![](../images/joins_semi.gif){.absolute width="40%" top="20%" left="65%"}

::: {.fragment}
When is this useful?
:::


## Semi joins

![](../images/join-semi.png){.absolute width="30%" top="-10%" left="50%"}

```{r echo = FALSE}
x <- tribble(
  ~key, ~val_x,
     1, "x1",
     2, "x2",
     3, "x3"
)
y <- tribble(
  ~key, ~val_y,
     1, "y1",
     2, "y2",
     4, "y3"
)
```

:::: {.columns}

::: {.column width="50%"}

```{r}
x
y
```

:::

::: {.column width="50%"}

```{r}
semi_join(x, y, by = "key")

```
:::

::::


## Semi joins

```{r}
airlines2
```


## Semi joins

```{r}
flights2 |>
  semi_join(airlines2, by = "carrier")
```


## Anti joins

#### Keep only non-matching observations

![](../images/join-anti.png){.absolute width="60%" top="35%" left="0%"}

![](../images/joins_anti.gif){.absolute width="40%" top="20%" left="65%"}

::: {.fragment}
When is this useful?
:::

---

## Anti joins

![](../images/join-anti.png){.absolute width="30%" top="-10%" left="50%"}

```{r echo = FALSE}
x <- tribble(
  ~key, ~val_x,
     1, "x1",
     2, "x2",
     3, "x3"
)
y <- tribble(
  ~key, ~val_y,
     1, "y1",
     2, "y2",
     4, "y3"
)
```

:::: {.columns}

::: {.column width="50%"}

```{r}
x
y
```

:::

::: {.column width="50%"}

```{r}
anti_join(x, y, by = "key")

```
:::

::::


## Anti joins

```{r}
flights2 |>
  anti_join(airlines2, by = "carrier")
```


## Joining with different key names

:::: {.columns}

::: {.column width="60%"}

::: {style="font-size:90%"}
```{r}
flights2
```
:::
:::

::: {.column width="40%"}

::: {style="font-size:90%"}
```{r}
airlines3
```
:::
:::
::::


## Joining with different key names

```{r}
flights2 |>
  anti_join(airlines3, by = join_by(carrier == airline))
```


# Binding rows and columns

## Adding rows

`tibble::add_row()`

:::: {.columns}

::: {.column width="50%"}

```{r}
(df <- tibble(x = 1:3, y = 3:1))
```

```{r}
df %>% add_row(x = 4, y = 0)

```

:::

::: {.column width="50%"}

::: {.fragment}

```{r}
df %>% add_row(x = 4, y = 0, 
               .before = 2)
```



```{r}
df %>% add_row(x = 4:5, y = 0:-1)
```
:::
:::

::::


## Adding columns

`tibble::add_column()`

:::: {.columns}

::: {.column width="50%"}

```{r}
(df <- tibble(x = 1:3, y = 3:1))
```

```{r}
df %>% add_column(z = 4:6)

```

:::

::: {.column width="50%"}

::: {.fragment}

```{r}
df %>% add_column(w = 4:6, 
               .before = 1)
```



```{r}
df %>% add_column(z = 4:6, alpha = 0)
```
:::
:::

::::

---

## Combine data frames by rows

`dplyr::bind_rows()`

:::: {.columns}

::: {.column width="50%"}

```{r}
(df2 <- tibble(x = 4:5, y = 5:4))
```

```{r}
bind_rows(df, df2)
```

:::

::: {.column width="50%"}

::: {.fragment}

```{r}
(df3 <- tibble(x = 6:7, y = 7:6, 
              z = c("A", "B")))
```



```{r}
bind_rows(df, df3)
```
:::
:::

::::

---

## Combine data frames by columns 

`dplyr::bind_cols()`

:::: {.columns}

::: {.column width="50%"}

```{r}
(df4 <- tibble(z = c("A", "B" , "C"), 
              zz = c("Z", "Y", "X")))
```


```{r}
bind_cols(df, df4)
```

:::

::: {.column width="50%"}

```{r}
bind_cols(df, new_col = df4$z)
```
:::

::::

::: {.fragment}
But why is this dangerous? What is a better solution?
:::


# Set operations

## Set operations

#### For finding overlap, differences, and combinations of datasets

![](../images/setop_df.png){fig-align="center" width="40%"}


## Intersect

Common rows in both `x` and `y`, keeping just unique rows

![](../images/setop_df.png){.absolute width="40%" top="28%" left="5%"}

![](../images/setop_intersect.gif){.absolute width="40%" top="20%" left="50%"}


## Set difference

All rows from `x` which are not also rows in `y`, keeping just unique rows

![](../images/setop_df.png){.absolute width="40%" top="28%" left="5%"}

![](../images/setop_setdiff.gif){.absolute width="40%" top="20%" left="50%"}


## Union

All unique rows from `x` and `y`

![](../images/setop_df.png){.absolute width="40%" top="28%" left="5%"}

![](../images/setop_union.gif){.absolute width="40%" top="28%" left="50%"}


## Union all

All rows from `x` and `y`, keeping duplicates

![](../images/setop_df.png){.absolute width="40%" top="28%" left="5%"}

![](../images/setop_union-all.gif){.absolute width="40%" top="28%" left="50%"}

## SQL

Congratulations---you just learned SQL databases!

![](../images/sql_joins.png){.absolute height="70%" top="22%" left="0%"}

![](../images/sql_setop.png){.absolute height="70%" top="22%" left="50%"}



## Solving the problem

What code combines `data1` and `data2` into `data3`?

:::: {.columns}

::: {.column width="31%"}

```{r}
data1
```
:::

::: {.column width="28%"}

```{r}
data2
```
:::

::: {.column width="40%"}

```{r}
data3
```
:::

::::


## Let's code!

[Merging rows](../code/18_mergingrows.html){target="_blank"} [[Rmd](../code/18_mergingrows.Rmd){target="_blank"}]
