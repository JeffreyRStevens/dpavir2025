---
title: "Matching patterns"
author: "Jeff Stevens"
date: "2023-03-10"
date-format: iso
execute:
  echo: true
  freeze: auto
format:
  revealjs: 
    theme: custom.scss
    slide-number: true
    code-line-numbers: false
    highlight-style: github
    code-overflow: wrap
    footer: "[DPaViR 2025](https://jeffreyrstevens.github.io/dpavir2025)"
    code-link: true
    logo: "../logo/dpavir_hex.png"
---


# Introduction


## The problem

```{r echo = FALSE}
library(tidyverse)
nrows <- 12
set.seed(100)
data1 <- tibble(time = rep(c("early-day", "mid-day", "late-day", "daytime"), times = 3), species = sample(c("dog", "dogfish", "bear dog", "cat", "catfish"), nrows, replace = TRUE), resp = sample(c("yes", "no", "yes", "no", NA), nrows, replace = TRUE))
data2 <- data1 |> 
  mutate(time = str_replace(time, "day$", "Day"), 
         resp = str_replace_na(resp, "no data")) |> 
  filter(str_detect(species, "dog"))
```

What's different between these data sets? 

What is needed to create `data2` from `data1`?

:::: {.columns}

::: {.column width="50%"}

```{r}
data1
```
:::

::: {.column width="50%"}

```{r}
data2
```
:::

::::


## Set-up

```{r}
library(tidyverse)
library(palmerpenguins)
```


## Mental model

![](../images/mentalmodel_strings.png){fig-align="center"}


## Strings with {stringr}

```{r, message = FALSE}
library(stringr)
```

![](../images/stringr_allisonhorst.png){fig-align="center" width="58%"}

![](../images/stringr_hex.png){.absolute width="15%" top="0%" left="90%"}


::: {.aside}
Source: [Allison Horst](https://allisonhorst.com/r-packages-functions)
:::


# Patterns


## Regular expressions

Concise and powerful language for describing patterns within strings

(regex for short)

![](../images/regex_meme2.jpeg){fig-align="center" width="40%"}


## Regular expressions

Here's the regex I used to detect IP addresses:
`^(?:(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])(\.(?!$)|$)){4}$`

![](../images/regex_meme.jpeg){.absolute height="50%" top="40%" left="0%"}

![](../images/regex_meme.png){.absolute height="50%" top="40%" left="55%"}


## Matching strings 

View string patterns with `stringr::str_view_all()`

```{r}
(x <- c("apple", "banana", "pear", NA))
str_view_all(x, "a")
```


## Regex 101

`.` is wildcard

```{r}
str_view_all(x, ".a.")
```


## Regex 101

`^` to match the start of the string (like `starts_with()`)

`$` to match the end of the string (like `ends_with()`)

```{r}
str_view_all(x, "^a")
str_view_all(x, "a$")
```


## Regex 101

`|` matches one pattern OR another (e.g., `this|that`)

```{r}
str_view_all(x, "ap|an|ar")
```

::: {.fragment}
Wrap character groups in `()`
```{r}
str_view_all("Are you here or are you there?", "(A|a)re")  
```
:::

## Regex 101

`\d` matches any digit

```{r}
# view digits
str_view_all("March 10, 2020", "\\d")
```


## Regex 101

`[abc]` matches individual characters (a, b, or c)
```{r}
# view everything with ab or a<space>
str_view_all(c("abc", "a.c", "a*c", "a c"), "a[b ]")
```


## Regex 101

`[^abc]` matches individual characters except a, b, or c

```{r}
# view everything except ab and a<space>
str_view_all(c("abc", "a.c", "a*c", "a c"), "a[^b ]")
# view everything except digits
str_view_all("March 10, 2020", "[^\\d]")  
```


# Detecting and extracting patterns 

## Detecting pattern matches 

Detect matching elements with `stringr::str_detect()`
```{r}
x
str_detect(x, "e")  # results in logical vector
```

::: {.fragment}
```{r}
sum(str_detect(x, "e"), na.rm = TRUE)  # sum matching elements
mean(str_detect(x, "e"), na.rm = TRUE)  # calculate proportion of matches
```
:::


## Extracting pattern matches

Extract **observations** matching pattern with `filter()` and `str_detect()`
```{r}
penguins |>
  filter(str_detect(sex, "male")) |>  # select observations that include "male"
  select(species, island, sex)
```


## Extracting pattern matches

Extract **elements** that match a pattern with `stringr::str_subset()`
```{r}
head(words, n = 20)
```

::: {.fragment}
```{r}
str_subset(words, "^rec")  # select elements starting with "rec"
str_subset(words, "ing$")  # select elements ending with "ing"
```
:::


<!-- ## Counting pattern matches  -->

<!-- Count matches within an element with `stringr::str_count()` -->
<!-- ```{r} -->
<!-- str_count(x, "e") -->
<!-- ``` -->

<!-- ::: {.fragment} -->
<!-- How is this different from `sum(str_detect(x, "e"))`? -->
<!-- ```{r} -->
<!-- sum(str_detect(x, "e")) -->
<!-- ``` -->
<!-- ::: -->


<!-- ## Extracting pattern matches -->

<!-- Extract matches patterns with `stringr::str_extract()` -->
<!-- ```{r} -->
<!-- head(sentences) -->
<!-- str_extract(sentences, "red|orange|yellow|green|blue|purple") -->
<!-- ``` -->


<!-- ## Extracting pattern matches -->

<!-- Extract **all** elements that match patterns with `stringr::str_extract_all()` -->
<!-- ```{r} -->
<!-- str_extract_all(sentences, "red|orange|yellow|green|blue|purple",  -->
<!--                 simplify = TRUE) -->
<!-- ``` -->


# Replacing patterns


## Replacing pattern matches

Replace matches with new strings with `stringr::str_replace()` and `stringr::str_replace_all()`
```{r}
str_replace(x, "[aeiou]", "-")  # replace only first instance of match
```

::: {.fragment}
```{r}
str_replace_all(x, "[aeiou]", "-")  # replace all matches
str_replace_all(x, "[^aeiou]", "-")  # replace all matches
```
:::


## Replacing pattern matches

You *can* use this to recode character variables, but...
```{r}
set.seed(50)
penguins |>
  mutate(new_island = str_replace(island, "Torgersen", "Party")) |> 
  select(species, island, new_island) |> 
  slice_sample(n = 6)
```
It coerces to character data types

::: {.fragment}
I use this **A LOT** to clean up text data
:::

## Replacing `NA` 

Replace `NA` with another value with `stringr::str_replace_na()`
```{r}
x
str_replace_na(x)  # by default replaces NA with "NA"
str_replace_na(x, "Missing")  # but you can replace with other strings
```


# Splitting strings


## Splitting strings

Split a string up into pieces with str_split()
```{r}
head(sentences, n = 2)
sentences |>
  head(2) |>
  str_split(" ")
```

::: {.fragment}
Notice this produces a list. Why?
:::


## Splitting strings

Convert to matrix with `simplify`
```{r}
sentences[c(1:2, 5)] |>
  str_split(" ", simplify = TRUE)
```


<!-- ## Splitting strings -->

<!-- Split into specific number of pieces -->
<!-- ```{r} -->
<!-- (fields <- c("Name: Hadley", "Country: NZ", "Age: 35")) -->
<!-- fields |> str_split(": ", n = 2, simplify = TRUE) -->
<!-- ``` -->


## Solving the problem

:::: {.columns}

::: {.column width="50%"}

```{r}
data1
```
:::

::: {.column width="50%"}

```{r}
data2
```
:::

::::


## Let's code!

[Matching patterns](../code/21_patterns.html){target="_blank"} [[Rmd](../code/21_patterns.Rmd){target="_blank"}]
