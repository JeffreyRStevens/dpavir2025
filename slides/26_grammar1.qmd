---
title: "Grammar of graphics"
author: "Jeff Stevens"
date: "2025-03-28"
date-format: iso
execute:
  echo: true
  freeze: auto
format:
  revealjs: 
    theme: custom.scss
    slide-number: true
    code-line-numbers: false
    highlight-style: github
    code-overflow: wrap
    footer: "[DPaViR 2025](https://jeffreyrstevens.github.io/dpavir2025)"
    code-link: true
    logo: "../logo/dpavir_hex.png"
---


# Introduction


## Set-up

```{r}
library(tidyverse)
library(palmerpenguins)
```



## Plotting with {ggplot2}

```{r, message = FALSE}
library(ggplot2)
```

![](../images/ggplot2_allisonhorst.png){fig-align="center" width="58%"}

![](../images/ggplot2_hex.png){.absolute width="15%" top="0%" left="90%"}

::: {.aside}
Source: [Allison Horst](https://allisonhorst.com)
:::


## Grammar of graphics

[![](../images/grammar-of-graphics.png){fig-align="center" width="100%"}](https://link-springer-com.libproxy.unl.edu/book/10.1007/0-387-28695-0)


## Seven components/layers of ggplots
* Data
* Mappings -- maps data to properties of geom
* Geom -- represents data
* Stat -- transforms data
* Position -- control placement of data on coordinate
* Facet -- split graph into subplots
* Coordinate -- places data in coordinate system


## Seven components/layers of ggplots

::: {style="font-size:150%"}
```{r eval = FALSE}
ggplot(data = DATA) +
  GEOM_FUNCTION(
    mapping = aes(MAPPINGS),
    stat = STAT,
    position = POSITION
  ) +
  COORDINATE_FUNCTION +
  FACET_FUNCTION
```
:::


## Full specification of plot

```{r fig.align = "center"}
ggplot(data = penguins) +
  geom_point(
    mapping = aes(x = bill_length_mm, y = bill_depth_mm),
    stat = "identity",
    position = "identity"
  ) +
  coord_cartesian() +
  facet_null()
```

# Data

## Tidy data

Data should be in tidy format for ggplots

::: {style="font-size:90%"}
```{r}
mpg
```
:::


## Data to ggplot

Data inside `ggplot()`
```{r fig.align = "center"}
ggplot(data = mpg)
```


## Data to ggplot

Data piped to `ggplot()`
```{r fig.align = "center"}
mpg |>
  ggplot()
```


## Data to ggplot

Process data before plotting
```{r fig.align = "center"}
mpg |>
  filter(class != "2seater") |>
  mutate(class = str_to_sentence(class)) |>
  ggplot()
```


# Mapping

## Map data to positions

Specify columns for x and y
```{r fig.align = "center"}
#
ggplot(data = mpg, mapping = aes(x = displ, y = hwy))

```

## Map data to positions

Equivalent but not ideal. Why?
```{r fig.align = "center"}
#
ggplot(mpg, aes(displ, hwy))

```

## Map data to positions

This is how we'll do it
```{r fig.align = "center"}
mpg |>
  ggplot(aes(x = displ, y = hwy))
```


# Geometric objects

## Geoms

There are many different ways of representing data on a plot

![](../images/ggplot_gallery.png){fig-align="center"}


## Plot points
Add `geom_point()`
```{r fig.align = "center"}
mpg |>
  ggplot(aes(x = displ, y = hwy)) +
  geom_point()
```


## Plot points

How is this different? What are advantages/disadvantages?
```{r fig.align = "center"}
mpg |>
  ggplot() +
  geom_point(aes(x = displ, y = hwy))
```


## Plot smooth lines
```{r fig.align = "center"}
#
mpg |>
  ggplot(aes(x = displ, y = hwy)) +
  geom_smooth()
```

## Plot multiple geoms
```{r fig.align = "center"}
mpg |>
  ggplot(aes(x = displ, y = hwy)) +
  geom_point() +
  geom_smooth()
```

## Order matters
```{r fig.align = "center"}
mpg |>
  ggplot(aes(x = displ, y = hwy)) +
  geom_smooth() +
  geom_point()
```

## Plot linear regression line
```{r fig.align = "center"}
mpg |>
  ggplot(aes(x = displ, y = hwy)) +
  geom_point() +
  geom_smooth(method = "lm")
```

## Plot boxplots
```{r fig.align = "center"}
mpg |>
  ggplot(aes(x = class, y = displ)) +
  geom_boxplot()
```


## Let's code!

[Grammar of graphics](../code/26_grammar1.html){target="_blank"}
