---
title: "Iteration"
author: "Jeff Stevens"
date: "2025-03-26"
date-format: iso
execute:
  echo: true
  freeze: auto
format:
  revealjs: 
    theme: custom.scss
    slide-number: true
    code-line-numbers: false
    highlight-style: github
    code-overflow: wrap
    footer: "[DPaViR 2025](https://jeffreyrstevens.github.io/dpavir2025)"
    code-link: true
    logo: "../logo/dpavir_hex.png"
---


# Introduction


## The problems

* Run the same model on multiple data sets
* Create the same plot multiple data sets
* Read in data files from multiple subjects


## Set-up

```{r}
library(tidyverse)
library(palmerpenguins)
library(here)
```


# Iteration

## For loops

![](../images/for-loop.png){fig-align="center" width="58%"}


## For loops

```{r eval = FALSE}
for (counter in min:max) {
  # What you want repeated.
  # Index counter-specific vector with [counter]
}
```



## Building objects with for loops

```{r eval = FALSE}
for (i in 1:nrow(penguins)) {
  bill_size[i] <- penguins$bill_length_mm[i] * penguins$bill_depth_mm[i]
}
```
::: {.fragment}
```
Error: object 'bill_size' not found
```
:::

::: {.fragment}
::: {.callout-warning appearance="simple"}
You must initialize variables that you build in for loops.
:::

```{r}
bill_size <- NA
for (i in 1:nrow(penguins)) {
  bill_size[i] <- penguins$bill_length_mm[i] * penguins$bill_depth_mm[i]
}
head(bill_size)
```
:::


## For loops with vectors

```{r}
month.name
for (i in month.name) {
  print(paste0(i, " has ", str_length(i), " letters."))
}
```


## R is vectorized

Most R functions apply to vectors, so no need for for loops

```{r}
bill_size <- penguins$bill_length_mm * penguins$bill_depth_mm
head(bill_size)
print(paste0(month.name, " has ", str_length(month.name), " letters."))
```


## Lagged and leading values

To compute based on previous or subsequent values, use `dplyr::lag()` and `dplyr::lead()`

```{r}
data.frame(trial = 1:8, cond = rep(1:2, each = 4), resp = c(1, 3, 4, 6, 1, 4, 8, 10)) |> 
  mutate(behind = lag(trial),
         ahead = lead(trial),
         diff = resp - lag(resp))
```


## Lagged and leading values

To compute based on previous or subsequent values, use `dplyr::lag()` and `dplyr::lead()`

```{r}
data.frame(trial = 1:8, cond = rep(1:2, each = 4), resp = c(1, 3, 4, 6, 1, 4, 8, 10)) |> 
  mutate(behind = lag(trial),
         ahead = lead(trial),
         diff = resp - lag(resp),
         diff = ifelse(cond != lag(cond), NA, diff))
```


## Numbering groups

Renumber row numbers based on groups

```{r}
data.frame(trial = 1:8, cond = rep(1:2, each = 4)) |> 
  mutate(.by = cond,
         cond_trial = row_number())
```


# Mapping over multiple arguments

## Mapping with {purrr}

```{r, message = FALSE}
library(purrr)
```

![](../images/purrr_map.png){fig-align="center" width="58%"}

![](../images/purrr_hex.png){.absolute width="15%" top="0%" left="90%"}

::: {.aside}
Source: [Malcolm Barrett](https://malco.io/slides/hs_purrr/)
:::


## Mapping functions

`purrr::map()` applies functions repeatedly across data
```{r}
map(select(penguins, ends_with("_mm")), 
    ~ mean(.x, na.rm = TRUE))
```

::: {.fragment}
What kind of data type does `map()` return?
:::


## Mapping function

Need different data types as output?
```{r}
map_dbl(select(penguins, ends_with("_mm")), 
        ~ mean(.x, na.rm = TRUE))
map_chr(select(penguins, ends_with("_mm")), 
        ~ mean(.x, na.rm = TRUE))
```


## Mapping function

Use `split()` like `dplyr::group_by()`
```{r}
penguins |>
  split(penguins$species) |> # split() inputs vector (not column)
  map(~ lm(bill_length_mm ~ bill_depth_mm, data = .x))
```


## Mapping function

Create multiple plots
```{r}
penguins |>
  split(penguins$species) |>
  map(~ ggplot(.x, aes(bill_length_mm, bill_depth_mm)) + geom_point())
```


## Importing multiple data files

First, we'll create multiple data files
```{r}
#| attr-output: "style='font-size: 52%'"
species_list <- penguins |> 
  split(penguins$species)
map2(species_list, names(species_list), 
     ~ write_csv(.x, here(paste0("data/", tolower(.y), "_penguin_data.csv"))))
```


## Importing multiple data files

Get file names and paths with `dir()`
```{r}
(penguin_files <- dir(path = "../data", 
                      pattern = "penguin_data.csv", 
                      full.names = TRUE))
```


## Importing multiple data files

Map `readr::read_csv()` to each element of `penguin_files`

::: {style="font-size:90%"}
```{r}
(penguin_data1 <- map(penguin_files, read_csv))
```
:::


## Importing multiple data files

::: {style="font-size:90%"}
Use `purrr::list_rbind()` to return output as data frame
```{r}
(penguin_data2 <- map(penguin_files, read_csv) |> 
   list_rbind())
```
:::


## Solving the problems

* Run the same model on multiple data sets
* Create the same plot for multiple data sets
* Read in data files from multiple subjects



## Let's code!

[Iteration](../code/25_iteration.html){target="_blank"}
