---
title: "Factors"
author: "Jeff Stevens"
date: "2023-03-20"
date-format: iso
execute:
  echo: true
  freeze: auto
format:
  revealjs: 
    theme: custom.scss
    slide-number: true
    code-line-numbers: false
    highlight-style: github
    code-overflow: wrap
    footer: "[DPaViR 2025](https://jeffreyrstevens.github.io/dpavir2025)"
    code-link: true
    logo: "../logo/dpavir_hex.png"
---


# Introduction


## The problem

```{r echo = FALSE}
library(tidyverse)
nrows <- 12
set.seed(100)
data1 <- starwars |> 
  count(species) |> 
  filter(n > 1) |> 
  drop_na()
data2 <- starwars |> 
  semi_join(data1, by = "species") |> 
  mutate(species = fct_lump(species, n = 3),
         species = fct_recode(species, "Android" = "Droid"),
         species = fct_infreq(species)) |> 
  count(species) #|> 
  # mutate(species = fct_infreq(species))
```

What is needed to create `data2` from `data1`?

:::: {.columns}

::: {.column width="50%"}

```{r}
data1
```
:::

::: {.column width="50%"}

```{r}
data2
```
:::

::::


<!-- ## Set-up -->

<!-- ```{r} -->
<!-- library(tidyverse) -->
<!-- # library(palmerpenguins) -->
<!-- ``` -->


## Factors

Categorical variables represented by **augmented integers**


```{r}
(x1 <- c("Apr", "Jun", "Oct", "Jan"))
month.abb
(y1 <- factor(x1))
```

::: {.fragment}
```{r}
class(y1)
typeof(y1)
```
:::


## Mental model

![](../images/mentalmodel_factors.png){fig-align="center"}


## View/set factor levels

`levels()`

```{r}
y1
levels(y1)
```

::: {.fragment}
```{r}
(y2 <- factor(x1, levels = month.abb))
levels(y2)
```
:::

## Label factors

`labels` argument
```{r}
(y3 <- factor(y1, labels = c("April", "January", "June", "October")))
```

::: {.callout-note}
Note you have to label them in the order they appear **as levels**.
:::


## Factors with {forcats}

```{r, message = FALSE}
library(forcats)
```

![](../images/forcats-meme.jpg){fig-align="center" width="58%"}

![](../images/forcats_hex.png){.absolute width="15%" top="0%" left="90%"}


<!-- ::: {.aside} -->
<!-- Source: [Allison Horst](https://allisonhorst.com/r-packages-functions) -->
<!-- ::: -->


## Data set

::: {style="font-size:90%"}
```{r}
gss_cat
```
:::


<!-- ## Count factor level observations -->

<!-- :::: {.columns} -->

<!-- ::: {.column width="50%"} -->
<!-- ```{r} -->
<!-- gss_cat |> -->
<!--   count(marital) -->
<!-- ``` -->
<!-- ::: -->

<!-- ::: {.column width="50%"} -->
<!-- ```{r} -->
<!-- gss_cat |> -->
<!--   count(relig, sort = TRUE) -->
<!-- ``` -->
<!-- ::: -->

<!-- :::: -->


# Reordering factor levels

## Check level order

```{r}
levels(y1)
```

::: {.callout-note}
By default, level elements are sorted alphabetically.
:::

## Check level order with pipes

```{r}
marital <- gss_cat |>
  pull(marital)
marital |> levels()
```

::: {.callout-note}
Here, order was determined already.
:::


## Reordering levels

In the order present in the data with `fct_inorder()`

```{r}
head(marital, 20)
```

::: {.fragment}
```{r}
marital |> fct_inorder() |>
  levels()
```
:::


## Reordering levels

In the order based on number of observations of each level with `fct_infreq()`

```{r}
gss_cat |>
  count(marital, sort = TRUE)
```

::: {.fragment}
```{r}
marital |> fct_infreq() |>
  levels()
```
:::


## Reordering levels

In reverse order of factor levels with `fct_rev()`

```{r}
levels(marital)
marital |> fct_rev() |>
  levels()
```


## Manually reorder factor levels 

`fct_relevel()`

```{r}
(relig_summary <- gss_cat |>
    group_by(relig) |>
    summarise(
      tvhours = mean(tvhours, na.rm = TRUE),
      n = n()))
```


## Manually reorder factor levels 

`fct_relevel()`

```{r}
relig_summary |> ggplot(aes(x = tvhours, y = relig)) +
  geom_point()
```


## Manually reorder factor levels 

`fct_relevel()`

```{r}
relig_summary_releveled <- relig_summary |>
  mutate(relig = fct_relevel(relig, c("None", "Other"), after = 2))
levels(relig_summary_releveled$relig)
```


## Manually reorder factor levels 

`fct_relevel()`

```{r}
relig_summary_releveled |> ggplot(aes(x = tvhours, y = relig)) +
  geom_point()
```


## Order factors by another variable

`fct_reorder()`

```{r}
relig_summary |> mutate(relig = fct_reorder(relig, tvhours)) |>
  ggplot(aes(x = tvhours, y = relig)) +
  geom_point()
```


## Order factors by another variable

`fct_reorder()`

```{r}
ggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) +
  geom_point()
```


<!-- # Combining factors -->



# Recode factors

## Recode factor levels 

`fct_recode()`

```{r}
gss_cat |>
  count(partyid)
```


## Recode factor levels 

`fct_recode()`

::: {style="font-size:90%"}
```{r}
gss_cat |>
  mutate(partyid = fct_recode(partyid,
                              "Republican, strong"    = "Strong republican",
                              "Republican, weak"      = "Not str republican",
                              "Independent, near rep" = "Ind,near rep",
                              "Independent, near dem" = "Ind,near dem",
                              "Democrat, weak"        = "Not str democrat",
                              "Democrat, strong"      = "Strong democrat"
  )) |>
  count(partyid)
```
:::


## Recode factor levels 

`fct_recode()`

::: {style="font-size:90%"}
```{r}
gss_cat |>
  mutate(partyid = fct_recode(partyid,
                              "Independent, near rep" = "Ind,near rep",
                              "Independent, near dem" = "Ind,near dem",
  )) |>
  count(partyid)
```
:::


<!-- ## Aggregate multiple levels -->

<!-- ::: {style="font-size:90%"} -->
<!-- ```{r} -->
<!-- gss_cat |> -->
<!--   mutate(partyid = fct_recode(partyid, -->
<!--                               "Republican, strong"    = "Strong republican", -->
<!--                               "Republican, weak"      = "Not str republican", -->
<!--                               "Independent, near rep" = "Ind,near rep", -->
<!--                               "Independent, near dem" = "Ind,near dem", -->
<!--                               "Democrat, weak"        = "Not str democrat", -->
<!--                               "Democrat, strong"      = "Strong democrat", -->
<!--                               "Other"                 = "No answer", -->
<!--                               "Other"                 = "Don't know", -->
<!--                               "Other"                 = "Other party" -->
<!--   )) |> -->
<!--   count(partyid) -->
<!-- ``` -->
<!-- ::: -->


## Collapse multiple levels 

`fct_collapse()`

::: {style="font-size:90%"}
```{r}
gss_cat |>
  mutate(partyid = fct_collapse(partyid,
                                "other" = c("No answer", "Don't know", "Other party"),
                                "rep" = c("Strong republican", "Not str republican"),
                                "ind" = c("Ind,near rep", "Independent", "Ind,near dem"),
                                "dem" = c("Not str democrat", "Strong democrat")
  )) |>
  count(partyid)
```
:::


## Combine factor levels 

Based on number of groups: `fct_lump_n()`

```{r}
gss_cat |>
  mutate(relig = fct_lump_n(relig, n = 5)) |>
  count(relig, sort = TRUE)
```


## Combine factor levels 

Based on proportion of total: `fct_lump_prop()`
```{r}
gss_cat |>
  mutate(relig = fct_lump_prop(relig, prop = 0.1, 
                               other_level = "Something else")) |>
  count(relig, sort = TRUE)
```


## Combine factor levels 

Based on minimum number: `fct_lump_min()`

```{r}
gss_cat |>
  mutate(relig = fct_lump_min(relig, min = 200)) |>
  count(relig, sort = TRUE)
```


## Solving the problem

What code generates `data2` from `data1`?

:::: {.columns}

::: {.column width="50%"}

```{r}
data1
```
:::

::: {.column width="50%"}

```{r}
data2
```
:::

::::


## Let's code!

[Factors](../code/22_factors.html){target="_blank"} [[Rmd](../code/22_factors.Rmd){target="_blank"}]
