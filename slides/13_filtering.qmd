---
title: "Filtering rows"
author: "Jeff Stevens"
date: "2025-02-19"
date-format: iso
execute:
  echo: true
  freeze: false
format:
  revealjs: 
    theme: custom.scss
    slide-number: true
    code-line-numbers: false
    highlight-style: github
    code-overflow: wrap
    footer: "[DPaViR 2025](https://jeffreyrstevens.github.io/dpavir2025)"
    code-link: true
---


# Data Forensics

## The problem

```{r echo = FALSE, resuts = FALSE}
library(tidyverse)
set.seed(1)
data1 <- data.frame(cond = sample(c(1:3), 8, replace = TRUE), id = 1:8, date = sample(seq(as.Date('2025-01-01'), as.Date('2025-02-28'), by="day"), 8)
)
data2 <- data1 |> 
  mutate(cond = paste("Condition", cond),
         month = case_when(lubridate::month(data1$date) == 1 ~ "January",
                           lubridate::month(data1$date) == 2 ~ "February"),
                           .before = date)
data3 <- data1 |> 
  select(id, cond)

data4 <- data1 |> 
  filter(cond < 3) |> 
  arrange(date)
  
```

What's different between these data sets? What can we use to create `data2` from `data1`?

::::{.columns}
:::{.column width="40%}
```{r}
data1
```
:::
:::{.column width="40%}
```{r}
data2
```
:::
::::


## The problem

What's different between these data sets? What can we use to create `data3` from `data1`?

::::{.columns}
:::{.column width="40%}
```{r}
data1
```
:::
:::{.column width="40%}
```{r}
data3
```
:::
::::


## The problem

What's different between these data sets? What needs to happen to create `data4` from `data1`?

::::{.columns}
:::{.column width="40%}
```{r}
data1
```
:::
:::{.column width="40%}
```{r}
data4
```
:::
::::


# Review

## Data wrangling

![](../images/dplyr_summary.png){fig-align=center width=80%}


## Set-up

```{r}
library(tidyverse)
library(nycflights13)
(flights2 <- select(flights, year:dep_delay, air_time))
```

## What is a pipe doing?

```{r}
flights |> 
  select(month:day, contains("_time")) |> 
  mutate(across(contains("_time"), as.character)) |> 
  head(n = 2)
```

:::{.fragment}
is equivalent to
```{r}
  head(mutate(select(flights, month:day, contains("_time")), 
              across(contains("_time"), as.character)), n = 2)
```
:::


# Filtering rows

## `filter()`

![](../images/dplyr_filter.png){fig-align="center" height=45%}

:::{.fragment}
Filtering **keeps** rows/observations/cases that fulfill the conditional statement
:::

---

## `filter()`

What does this return?

```{r eval=FALSE}
flights2 |> 
  filter(dep_time == sched_dep_time)
```

---

## `filter()`

What does this return?

```{r}
flights2 |> 
  filter(dep_time == sched_dep_time)
```

---

## `filter()`

### Multiple conditions: Logical AND

```{r}
flights2 |> 
  filter(dep_delay < 0 & month == 2)
```

---

## `filter()`

### Multiple conditions: Logical OR

```{r}
flights2 |> 
  filter(month == 11 | month == 12)
```

---

## `filter()`

### Logical %in%

```{r}
flights2 |> 
  filter(month %in% c(11, 12))
```

---

## `filter()`

### Negating conditional

```{r}
flights2 |> 
  filter(month != 1)
```

---

## `filter()`

### Negating multiple conditionals

```{r}
flights2 |> 
  filter(month != 1 & day != 1)
```

---

## `filter()`

### Check if `NA` with `is.na()`

```{r}
flights2 |> 
  filter(is.na(dep_time))
```


## `filter()`

### Check if `NA` across multiple columns with `is.na()` and `if_any()`

```{r}
flights2 |> 
  filter(if_any(everything(), is.na))
```


## `drop_na()`

### Filter column with **any** `NA`s with `drop_na()`

```{r}
nrow(flights2)
```

:::{.fragment}
```{r}
flights2 |> 
  drop_na() |> 
  nrow()
```
:::

:::{.fragment}
```{r}
flights2 |> 
  drop_na(dep_time) |> 
  nrow()
```
:::

:::{.fragment}
Equivalent to
```{r}
nrow(drop_na(flights2, dep_time))
```
:::


# Sorting rows

## `arrange()`

![](../images/dplyr_arrange.png){fig-align="center" height=45%}


---

## `arrange()`

```{r}
flights2 |> 
  arrange(sched_dep_time)
```

---

## `arrange()`

### Sort multiple rows

```{r}
flights2 |>
  arrange(sched_dep_time, dep_time)
```


---

## `arrange()`

### Sort in descending order

```{r}
flights2 |>
  arrange(desc(dep_time))
```


## Solving the problem

What code turns `data1` into `data4`?

::::{.columns}
:::{.column width="40%}
```{r}
data1
```
:::
:::{.column width="40%}
```{r}
data4
```
:::
::::


## Let's code!

[Filtering rows](../code/13_filtering.html){target="_blank"}
