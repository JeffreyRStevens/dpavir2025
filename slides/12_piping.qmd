---
title: "Piping"
author: "Jeff Stevens"
date: "2025-02-17"
date-format: iso
execute:
  echo: true
  freeze: false
format:
  revealjs: 
    theme: custom.scss
    slide-number: true
    code-line-numbers: false
    highlight-style: github
    code-overflow: wrap
    footer: "[DPaViR 2025](https://jeffreyrstevens.github.io/dpavir2025)"
    code-link: true
    logo: "../logo/dpavir_hex.png"
---


# Review

## Data wrangling

![](../images/dplyr_summary.png){fig-align=center width=80%}


# Piping

## Set-up

```{r}
#| attr-output: "style='font-size: 52%'"
library(dplyr)
library(nycflights13)
glimpse(flights)
```


## Without pipes

```{r}
myflights <- flights[c("year", "month", "day", "air_time", "distance", 
                       "hour", "minute")]
myflights$month <- as.character(myflights$month)
myflights$month <- ifelse(myflights$month < 10, 
                          paste0("0", myflights$month), myflights$month)
myflights$day <- ifelse(myflights$day < 10, 
                        paste0("0", myflights$day), myflights$day)
myflights$date <- paste(myflights$year, myflights$month, myflights$day, 
                        sep = "-")
myflights$speed <- myflights$distance / myflights$air_time * 60
myflights <- myflights[c("year", "month", "day", "date", "air_time", 
                         "distance", "speed", "hour", "minute")]
```

:::{.fragment}
What do you like and dislike about this?
:::


## Pipelines

```{r}
myflights2 <- flights |> 
  select(year:day, air_time, distance, hour, minute) |> 
  mutate(month = as.character(month),
         month = if_else(month < 10, paste0("0", month), as.character(month)),
         day = if_else(day < 10, paste0("0", day), as.character(day)),
         date = paste(year, month, day, sep = "-"),
         speed = distance / air_time * 60) |> 
  select(year:day, date, air_time, distance, speed, everything())
```

:::{.fragment}
What do you like and dislike about this?
:::


## Pipelines

```{r}
myflights3 <- flights |> 
  select(year:day, air_time, distance, hour, minute) |> 
  mutate(month = as.character(month),
         month = if_else(month < 10, paste0("0", month), as.character(month)),
         day = if_else(day < 10, paste0("0", day), as.character(day)),
         date = paste(year, month, day, sep = "-"),
         .after = day) |> 
  mutate(speed = distance / air_time * 60,
         .after = distance)
```

What do you like and dislike about this?


## Pipeline comparison

```{r}
identical(myflights, myflights2)
identical(myflights, myflights3)
identical(myflights2, myflights3)
```

:::{.fragment}
#### Character counts
```{r echo = FALSE}
char_counts <- data.frame(Pipeline = c("`myflights`", "`myflights2`", "`myflights3`"),
                          Characters = c(566, 423, 406))
knitr::kable(char_counts)
```
:::


## Pipes 
### Base R pipe

`|>` 

* added in R 4.1.0 but key functionality started in 4.2.0
* loaded in any R session
* works following most base R and tidyverse functions

## Pipes 
### Base R pipe
Tidyverse pipe `%>%` 

* from [{magrittr}](https://magrittr.tidyverse.org/) package
* loaded with any tidyverse package
* works following tidyverse verbs


:::{.fragment}
* Hadley Wickham recommends using the base R pipe `|>`, so we'll use that here.
:::

## Piping basics

#### Start with the data object...

```{r eval = FALSE}
flights |> 
  select(year:dep_delay, origin) |> # include these columns
  select(!sched_dep_time) # exclude this column
```

:::{.fragment}
#### Or use data object as the first argument...

```{r, eval = FALSE}
select(flights, year:dep_delay, origin) |> # include these columns
  select(!sched_dep_time) # exclude this column
```
:::

:::{.fragment}
#### But don't use data object after first pipe
```{r, error = TRUE}
select(flights, year:dep_delay, origin) |> # include these columns
  select(flights, !sched_dep_time) # exclude this column
```
:::

---

## Piping basics

#### Like any object, assigning it does not output to console

```{r}
myflights <- flights |> 
  select(year:dep_delay, origin) |>
  select(!sched_dep_time)
```

:::{.fragment}
#### But omitting assignment does

```{r}
flights |> 
  select(year:dep_delay, origin) |>
  select(!sched_dep_time)
```
:::


## Piping basics

#### As does wrapping whole pipeline in parentheses

```{r}
(myflights <- flights |> 
  select(year:dep_delay, origin) |>
  select(!sched_dep_time))
```


## Piping function order

```{r}
flights |> 
  select(month:day, contains("_time")) |> 
  mutate(across(contains("_time"), as.character)) |> 
  head(n = 2)
```

:::{.fragment}
OR

```{r}
flights |> 
  mutate(across(contains("_time"), as.character)) |> 
  select(month:day, contains("_time")) |> 
  head(n = 2)
```
:::

## What is a pipe doing?

```{r}
flights |> 
  select(month:day, contains("_time")) |> 
  mutate(across(contains("_time"), as.character)) |> 
  head(n = 2)
```

:::{.fragment}
is equivalent to
```{r}
```{r}
  head(mutate(select(flights, month:day, contains("_time")), across(contains("_time"), as.character)), n = 2)
```



## Advanced piping

* Sometimes, non-tidyverse functions don't take the data object as the first argument

* This requires a "placeholder" signaling where the data object goes

:::{.fragment}
* The placeholder for the `|>` pipe is `_`

* The placeholder for the `%>%` pipe is `.`
:::


## Advanced piping

### Base R pipe

```{r error = TRUE}
mtcars |> 
  select(mpg, cyl) |> 
  lm(mpg ~ cyl)
```

:::{.fragment}
```{r}
mtcars |> 
  select(mpg, cyl) |> 
  lm(mpg ~ cyl, data = _)
```

* You must specify the argument name to use placeholder
:::


## Advanced piping

### tidyverse pipe

```{r}
mtcars %>% 
  select(mpg, cyl) %>% 
  lm(mpg ~ cyl, data = .)
```


## Rename with a vector

### Base R

```{r}
new_names <- letters[1:ncol(flights)]
flights2 <- flights
colnames(flights2) <- new_names
head(flights2)
```


## Rename with a vector

### Tidyverse

```{r}
rename_with(flights2, ~ new_names)
```


## Rename with a function

```{r}
rename_with(flights2, toupper)
```



## Let's code!

[Piping](../code/12_piping.html){target="_blank"}
